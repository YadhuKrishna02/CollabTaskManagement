var __defProp = Object.defineProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
var __accessCheck = (obj, member, msg) => {
  if (!member.has(obj))
    throw TypeError("Cannot " + msg);
};
var __privateGet = (obj, member, getter) => {
  __accessCheck(obj, member, "read from private field");
  return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd = (obj, member, value) => {
  if (member.has(obj))
    throw TypeError("Cannot add the same private member more than once");
  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateSet = (obj, member, value, setter) => {
  __accessCheck(obj, member, "write to private field");
  setter ? setter.call(obj, value) : member.set(obj, value);
  return value;
};
var __privateWrapper = (obj, member, setter, getter) => ({
  set _(value) {
    __privateSet(obj, member, value, setter);
  },
  get _() {
    return __privateGet(obj, member, getter);
  }
});
var __privateMethod = (obj, member, method) => {
  __accessCheck(obj, member, "access private method");
  return method;
};
var require_index_001 = __commonJS({
  "assets/index-iDkT3dOO.js"(exports, module) {
    var _focused, _cleanup, _setup, _a, _online, _cleanup2, _setup2, _b, _gcTimeout, _c, _initialState, _revertState, _cache, _retryer, _defaultOptions, _abortSignalConsumed, _dispatch, dispatch_fn, _d, _queries, _e2, _observers, _mutationCache, _retryer2, _dispatch2, dispatch_fn2, _f, _mutations, _scopes, _mutationId, _g, _queryCache, _mutationCache2, _defaultOptions2, _queryDefaults, _mutationDefaults, _mountCount, _unsubscribeFocus, _unsubscribeOnline, _h, _client, _currentQuery, _currentQueryInitialState, _currentResult, _currentResultState, _currentResultOptions, _currentThenable, _selectError, _selectFn, _selectResult, _lastQueryWithDefinedData, _staleTimeoutId, _refetchIntervalId, _currentRefetchInterval, _trackedProps, _executeFetch, executeFetch_fn, _updateStaleTimeout, updateStaleTimeout_fn, _computeRefetchInterval, computeRefetchInterval_fn, _updateRefetchInterval, updateRefetchInterval_fn, _updateTimers, updateTimers_fn, _clearStaleTimeout, clearStaleTimeout_fn, _clearRefetchInterval, clearRefetchInterval_fn, _updateQuery, updateQuery_fn, _notify, notify_fn, _i, _client2, _currentResult2, _currentMutation, _mutateOptions, _updateResult, updateResult_fn, _notify2, notify_fn2, _j;
    function _mergeNamespaces(n2, m2) {
      for (var i2 = 0; i2 < m2.length; i2++) {
        const e3 = m2[i2];
        if (typeof e3 !== "string" && !Array.isArray(e3)) {
          for (const k2 in e3) {
            if (k2 !== "default" && !(k2 in n2)) {
              const d2 = Object.getOwnPropertyDescriptor(e3, k2);
              if (d2) {
                Object.defineProperty(n2, k2, d2.get ? d2 : {
                  enumerable: true,
                  get: () => e3[k2]
                });
              }
            }
          }
        }
      }
      return Object.freeze(Object.defineProperty(n2, Symbol.toStringTag, { value: "Module" }));
    }
    (function polyfill() {
      const relList = document.createElement("link").relList;
      if (relList && relList.supports && relList.supports("modulepreload")) {
        return;
      }
      for (const link of document.querySelectorAll('link[rel="modulepreload"]')) {
        processPreload(link);
      }
      new MutationObserver((mutations) => {
        for (const mutation of mutations) {
          if (mutation.type !== "childList") {
            continue;
          }
          for (const node of mutation.addedNodes) {
            if (node.tagName === "LINK" && node.rel === "modulepreload")
              processPreload(node);
          }
        }
      }).observe(document, { childList: true, subtree: true });
      function getFetchOpts(link) {
        const fetchOpts = {};
        if (link.integrity)
          fetchOpts.integrity = link.integrity;
        if (link.referrerPolicy)
          fetchOpts.referrerPolicy = link.referrerPolicy;
        if (link.crossOrigin === "use-credentials")
          fetchOpts.credentials = "include";
        else if (link.crossOrigin === "anonymous")
          fetchOpts.credentials = "omit";
        else
          fetchOpts.credentials = "same-origin";
        return fetchOpts;
      }
      function processPreload(link) {
        if (link.ep)
          return;
        link.ep = true;
        const fetchOpts = getFetchOpts(link);
        fetch(link.href, fetchOpts);
      }
    })();
    var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
    function getDefaultExportFromCjs(x2) {
      return x2 && x2.__esModule && Object.prototype.hasOwnProperty.call(x2, "default") ? x2["default"] : x2;
    }
    var jsxRuntime = { exports: {} };
    var reactJsxRuntime_production_min = {};
    var react = { exports: {} };
    var react_production_min = {};
    /**
     * @license React
     * react.production.min.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    var l$8 = Symbol.for("react.element"), n$6 = Symbol.for("react.portal"), p$7 = Symbol.for("react.fragment"), q$5 = Symbol.for("react.strict_mode"), r$6 = Symbol.for("react.profiler"), t$9 = Symbol.for("react.provider"), u$7 = Symbol.for("react.context"), v$4 = Symbol.for("react.forward_ref"), w$5 = Symbol.for("react.suspense"), x$4 = Symbol.for("react.memo"), y$7 = Symbol.for("react.lazy"), z$4 = Symbol.iterator;
    function A$2(a2) {
      if (null === a2 || "object" !== typeof a2)
        return null;
      a2 = z$4 && a2[z$4] || a2["@@iterator"];
      return "function" === typeof a2 ? a2 : null;
    }
    var B$1 = { isMounted: function() {
      return false;
    }, enqueueForceUpdate: function() {
    }, enqueueReplaceState: function() {
    }, enqueueSetState: function() {
    } }, C$4 = Object.assign, D$5 = {};
    function E$2(a2, b2, e3) {
      this.props = a2;
      this.context = b2;
      this.refs = D$5;
      this.updater = e3 || B$1;
    }
    E$2.prototype.isReactComponent = {};
    E$2.prototype.setState = function(a2, b2) {
      if ("object" !== typeof a2 && "function" !== typeof a2 && null != a2)
        throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
      this.updater.enqueueSetState(this, a2, b2, "setState");
    };
    E$2.prototype.forceUpdate = function(a2) {
      this.updater.enqueueForceUpdate(this, a2, "forceUpdate");
    };
    function F$4() {
    }
    F$4.prototype = E$2.prototype;
    function G$2(a2, b2, e3) {
      this.props = a2;
      this.context = b2;
      this.refs = D$5;
      this.updater = e3 || B$1;
    }
    var H$2 = G$2.prototype = new F$4();
    H$2.constructor = G$2;
    C$4(H$2, E$2.prototype);
    H$2.isPureReactComponent = true;
    var I$8 = Array.isArray, J$1 = Object.prototype.hasOwnProperty, K$1 = { current: null }, L$1 = { key: true, ref: true, __self: true, __source: true };
    function M$4(a2, b2, e3) {
      var d2, c2 = {}, k2 = null, h2 = null;
      if (null != b2)
        for (d2 in void 0 !== b2.ref && (h2 = b2.ref), void 0 !== b2.key && (k2 = "" + b2.key), b2)
          J$1.call(b2, d2) && !L$1.hasOwnProperty(d2) && (c2[d2] = b2[d2]);
      var g2 = arguments.length - 2;
      if (1 === g2)
        c2.children = e3;
      else if (1 < g2) {
        for (var f2 = Array(g2), m2 = 0; m2 < g2; m2++)
          f2[m2] = arguments[m2 + 2];
        c2.children = f2;
      }
      if (a2 && a2.defaultProps)
        for (d2 in g2 = a2.defaultProps, g2)
          void 0 === c2[d2] && (c2[d2] = g2[d2]);
      return { $$typeof: l$8, type: a2, key: k2, ref: h2, props: c2, _owner: K$1.current };
    }
    function N$4(a2, b2) {
      return { $$typeof: l$8, type: a2.type, key: b2, ref: a2.ref, props: a2.props, _owner: a2._owner };
    }
    function O$3(a2) {
      return "object" === typeof a2 && null !== a2 && a2.$$typeof === l$8;
    }
    function escape(a2) {
      var b2 = { "=": "=0", ":": "=2" };
      return "$" + a2.replace(/[=:]/g, function(a3) {
        return b2[a3];
      });
    }
    var P$3 = /\/+/g;
    function Q$2(a2, b2) {
      return "object" === typeof a2 && null !== a2 && null != a2.key ? escape("" + a2.key) : b2.toString(36);
    }
    function R$2(a2, b2, e3, d2, c2) {
      var k2 = typeof a2;
      if ("undefined" === k2 || "boolean" === k2)
        a2 = null;
      var h2 = false;
      if (null === a2)
        h2 = true;
      else
        switch (k2) {
          case "string":
          case "number":
            h2 = true;
            break;
          case "object":
            switch (a2.$$typeof) {
              case l$8:
              case n$6:
                h2 = true;
            }
        }
      if (h2)
        return h2 = a2, c2 = c2(h2), a2 = "" === d2 ? "." + Q$2(h2, 0) : d2, I$8(c2) ? (e3 = "", null != a2 && (e3 = a2.replace(P$3, "$&/") + "/"), R$2(c2, b2, e3, "", function(a3) {
          return a3;
        })) : null != c2 && (O$3(c2) && (c2 = N$4(c2, e3 + (!c2.key || h2 && h2.key === c2.key ? "" : ("" + c2.key).replace(P$3, "$&/") + "/") + a2)), b2.push(c2)), 1;
      h2 = 0;
      d2 = "" === d2 ? "." : d2 + ":";
      if (I$8(a2))
        for (var g2 = 0; g2 < a2.length; g2++) {
          k2 = a2[g2];
          var f2 = d2 + Q$2(k2, g2);
          h2 += R$2(k2, b2, e3, f2, c2);
        }
      else if (f2 = A$2(a2), "function" === typeof f2)
        for (a2 = f2.call(a2), g2 = 0; !(k2 = a2.next()).done; )
          k2 = k2.value, f2 = d2 + Q$2(k2, g2++), h2 += R$2(k2, b2, e3, f2, c2);
      else if ("object" === k2)
        throw b2 = String(a2), Error("Objects are not valid as a React child (found: " + ("[object Object]" === b2 ? "object with keys {" + Object.keys(a2).join(", ") + "}" : b2) + "). If you meant to render a collection of children, use an array instead.");
      return h2;
    }
    function S$7(a2, b2, e3) {
      if (null == a2)
        return a2;
      var d2 = [], c2 = 0;
      R$2(a2, d2, "", "", function(a3) {
        return b2.call(e3, a3, c2++);
      });
      return d2;
    }
    function T$6(a2) {
      if (-1 === a2._status) {
        var b2 = a2._result;
        b2 = b2();
        b2.then(function(b3) {
          if (0 === a2._status || -1 === a2._status)
            a2._status = 1, a2._result = b3;
        }, function(b3) {
          if (0 === a2._status || -1 === a2._status)
            a2._status = 2, a2._result = b3;
        });
        -1 === a2._status && (a2._status = 0, a2._result = b2);
      }
      if (1 === a2._status)
        return a2._result.default;
      throw a2._result;
    }
    var U$5 = { current: null }, V$1 = { transition: null }, W$1 = { ReactCurrentDispatcher: U$5, ReactCurrentBatchConfig: V$1, ReactCurrentOwner: K$1 };
    react_production_min.Children = { map: S$7, forEach: function(a2, b2, e3) {
      S$7(a2, function() {
        b2.apply(this, arguments);
      }, e3);
    }, count: function(a2) {
      var b2 = 0;
      S$7(a2, function() {
        b2++;
      });
      return b2;
    }, toArray: function(a2) {
      return S$7(a2, function(a3) {
        return a3;
      }) || [];
    }, only: function(a2) {
      if (!O$3(a2))
        throw Error("React.Children.only expected to receive a single React element child.");
      return a2;
    } };
    react_production_min.Component = E$2;
    react_production_min.Fragment = p$7;
    react_production_min.Profiler = r$6;
    react_production_min.PureComponent = G$2;
    react_production_min.StrictMode = q$5;
    react_production_min.Suspense = w$5;
    react_production_min.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = W$1;
    react_production_min.cloneElement = function(a2, b2, e3) {
      if (null === a2 || void 0 === a2)
        throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + a2 + ".");
      var d2 = C$4({}, a2.props), c2 = a2.key, k2 = a2.ref, h2 = a2._owner;
      if (null != b2) {
        void 0 !== b2.ref && (k2 = b2.ref, h2 = K$1.current);
        void 0 !== b2.key && (c2 = "" + b2.key);
        if (a2.type && a2.type.defaultProps)
          var g2 = a2.type.defaultProps;
        for (f2 in b2)
          J$1.call(b2, f2) && !L$1.hasOwnProperty(f2) && (d2[f2] = void 0 === b2[f2] && void 0 !== g2 ? g2[f2] : b2[f2]);
      }
      var f2 = arguments.length - 2;
      if (1 === f2)
        d2.children = e3;
      else if (1 < f2) {
        g2 = Array(f2);
        for (var m2 = 0; m2 < f2; m2++)
          g2[m2] = arguments[m2 + 2];
        d2.children = g2;
      }
      return { $$typeof: l$8, type: a2.type, key: c2, ref: k2, props: d2, _owner: h2 };
    };
    react_production_min.createContext = function(a2) {
      a2 = { $$typeof: u$7, _currentValue: a2, _currentValue2: a2, _threadCount: 0, Provider: null, Consumer: null, _defaultValue: null, _globalName: null };
      a2.Provider = { $$typeof: t$9, _context: a2 };
      return a2.Consumer = a2;
    };
    react_production_min.createElement = M$4;
    react_production_min.createFactory = function(a2) {
      var b2 = M$4.bind(null, a2);
      b2.type = a2;
      return b2;
    };
    react_production_min.createRef = function() {
      return { current: null };
    };
    react_production_min.forwardRef = function(a2) {
      return { $$typeof: v$4, render: a2 };
    };
    react_production_min.isValidElement = O$3;
    react_production_min.lazy = function(a2) {
      return { $$typeof: y$7, _payload: { _status: -1, _result: a2 }, _init: T$6 };
    };
    react_production_min.memo = function(a2, b2) {
      return { $$typeof: x$4, type: a2, compare: void 0 === b2 ? null : b2 };
    };
    react_production_min.startTransition = function(a2) {
      var b2 = V$1.transition;
      V$1.transition = {};
      try {
        a2();
      } finally {
        V$1.transition = b2;
      }
    };
    react_production_min.unstable_act = function() {
      throw Error("act(...) is not supported in production builds of React.");
    };
    react_production_min.useCallback = function(a2, b2) {
      return U$5.current.useCallback(a2, b2);
    };
    react_production_min.useContext = function(a2) {
      return U$5.current.useContext(a2);
    };
    react_production_min.useDebugValue = function() {
    };
    react_production_min.useDeferredValue = function(a2) {
      return U$5.current.useDeferredValue(a2);
    };
    react_production_min.useEffect = function(a2, b2) {
      return U$5.current.useEffect(a2, b2);
    };
    react_production_min.useId = function() {
      return U$5.current.useId();
    };
    react_production_min.useImperativeHandle = function(a2, b2, e3) {
      return U$5.current.useImperativeHandle(a2, b2, e3);
    };
    react_production_min.useInsertionEffect = function(a2, b2) {
      return U$5.current.useInsertionEffect(a2, b2);
    };
    react_production_min.useLayoutEffect = function(a2, b2) {
      return U$5.current.useLayoutEffect(a2, b2);
    };
    react_production_min.useMemo = function(a2, b2) {
      return U$5.current.useMemo(a2, b2);
    };
    react_production_min.useReducer = function(a2, b2, e3) {
      return U$5.current.useReducer(a2, b2, e3);
    };
    react_production_min.useRef = function(a2) {
      return U$5.current.useRef(a2);
    };
    react_production_min.useState = function(a2) {
      return U$5.current.useState(a2);
    };
    react_production_min.useSyncExternalStore = function(a2, b2, e3) {
      return U$5.current.useSyncExternalStore(a2, b2, e3);
    };
    react_production_min.useTransition = function() {
      return U$5.current.useTransition();
    };
    react_production_min.version = "18.2.0";
    {
      react.exports = react_production_min;
    }
    var reactExports = react.exports;
    const React$1 = /* @__PURE__ */ getDefaultExportFromCjs(reactExports);
    const e$3 = /* @__PURE__ */ _mergeNamespaces({
      __proto__: null,
      default: React$1
    }, [reactExports]);
    /**
     * @license React
     * react-jsx-runtime.production.min.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    var f$a = reactExports, k$4 = Symbol.for("react.element"), l$7 = Symbol.for("react.fragment"), m$5 = Object.prototype.hasOwnProperty, n$5 = f$a.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner, p$6 = { key: true, ref: true, __self: true, __source: true };
    function q$4(c2, a2, g2) {
      var b2, d2 = {}, e3 = null, h2 = null;
      void 0 !== g2 && (e3 = "" + g2);
      void 0 !== a2.key && (e3 = "" + a2.key);
      void 0 !== a2.ref && (h2 = a2.ref);
      for (b2 in a2)
        m$5.call(a2, b2) && !p$6.hasOwnProperty(b2) && (d2[b2] = a2[b2]);
      if (c2 && c2.defaultProps)
        for (b2 in a2 = c2.defaultProps, a2)
          void 0 === d2[b2] && (d2[b2] = a2[b2]);
      return { $$typeof: k$4, type: c2, key: e3, ref: h2, props: d2, _owner: n$5.current };
    }
    reactJsxRuntime_production_min.Fragment = l$7;
    reactJsxRuntime_production_min.jsx = q$4;
    reactJsxRuntime_production_min.jsxs = q$4;
    {
      jsxRuntime.exports = reactJsxRuntime_production_min;
    }
    var jsxRuntimeExports = jsxRuntime.exports;
    var client = {};
    var reactDom = { exports: {} };
    var reactDom_production_min = {};
    var scheduler = { exports: {} };
    var scheduler_production_min = {};
    /**
     * @license React
     * scheduler.production.min.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    (function(exports2) {
      function f2(a2, b2) {
        var c2 = a2.length;
        a2.push(b2);
        a:
          for (; 0 < c2; ) {
            var d2 = c2 - 1 >>> 1, e3 = a2[d2];
            if (0 < g2(e3, b2))
              a2[d2] = b2, a2[c2] = e3, c2 = d2;
            else
              break a;
          }
      }
      function h2(a2) {
        return 0 === a2.length ? null : a2[0];
      }
      function k2(a2) {
        if (0 === a2.length)
          return null;
        var b2 = a2[0], c2 = a2.pop();
        if (c2 !== b2) {
          a2[0] = c2;
          a:
            for (var d2 = 0, e3 = a2.length, w2 = e3 >>> 1; d2 < w2; ) {
              var m2 = 2 * (d2 + 1) - 1, C2 = a2[m2], n2 = m2 + 1, x2 = a2[n2];
              if (0 > g2(C2, c2))
                n2 < e3 && 0 > g2(x2, C2) ? (a2[d2] = x2, a2[n2] = c2, d2 = n2) : (a2[d2] = C2, a2[m2] = c2, d2 = m2);
              else if (n2 < e3 && 0 > g2(x2, c2))
                a2[d2] = x2, a2[n2] = c2, d2 = n2;
              else
                break a;
            }
        }
        return b2;
      }
      function g2(a2, b2) {
        var c2 = a2.sortIndex - b2.sortIndex;
        return 0 !== c2 ? c2 : a2.id - b2.id;
      }
      if ("object" === typeof performance && "function" === typeof performance.now) {
        var l2 = performance;
        exports2.unstable_now = function() {
          return l2.now();
        };
      } else {
        var p2 = Date, q2 = p2.now();
        exports2.unstable_now = function() {
          return p2.now() - q2;
        };
      }
      var r2 = [], t2 = [], u2 = 1, v2 = null, y2 = 3, z2 = false, A2 = false, B2 = false, D2 = "function" === typeof setTimeout ? setTimeout : null, E2 = "function" === typeof clearTimeout ? clearTimeout : null, F2 = "undefined" !== typeof setImmediate ? setImmediate : null;
      "undefined" !== typeof navigator && void 0 !== navigator.scheduling && void 0 !== navigator.scheduling.isInputPending && navigator.scheduling.isInputPending.bind(navigator.scheduling);
      function G2(a2) {
        for (var b2 = h2(t2); null !== b2; ) {
          if (null === b2.callback)
            k2(t2);
          else if (b2.startTime <= a2)
            k2(t2), b2.sortIndex = b2.expirationTime, f2(r2, b2);
          else
            break;
          b2 = h2(t2);
        }
      }
      function H2(a2) {
        B2 = false;
        G2(a2);
        if (!A2)
          if (null !== h2(r2))
            A2 = true, I2(J2);
          else {
            var b2 = h2(t2);
            null !== b2 && K2(H2, b2.startTime - a2);
          }
      }
      function J2(a2, b2) {
        A2 = false;
        B2 && (B2 = false, E2(L2), L2 = -1);
        z2 = true;
        var c2 = y2;
        try {
          G2(b2);
          for (v2 = h2(r2); null !== v2 && (!(v2.expirationTime > b2) || a2 && !M2()); ) {
            var d2 = v2.callback;
            if ("function" === typeof d2) {
              v2.callback = null;
              y2 = v2.priorityLevel;
              var e3 = d2(v2.expirationTime <= b2);
              b2 = exports2.unstable_now();
              "function" === typeof e3 ? v2.callback = e3 : v2 === h2(r2) && k2(r2);
              G2(b2);
            } else
              k2(r2);
            v2 = h2(r2);
          }
          if (null !== v2)
            var w2 = true;
          else {
            var m2 = h2(t2);
            null !== m2 && K2(H2, m2.startTime - b2);
            w2 = false;
          }
          return w2;
        } finally {
          v2 = null, y2 = c2, z2 = false;
        }
      }
      var N2 = false, O2 = null, L2 = -1, P2 = 5, Q2 = -1;
      function M2() {
        return exports2.unstable_now() - Q2 < P2 ? false : true;
      }
      function R2() {
        if (null !== O2) {
          var a2 = exports2.unstable_now();
          Q2 = a2;
          var b2 = true;
          try {
            b2 = O2(true, a2);
          } finally {
            b2 ? S2() : (N2 = false, O2 = null);
          }
        } else
          N2 = false;
      }
      var S2;
      if ("function" === typeof F2)
        S2 = function() {
          F2(R2);
        };
      else if ("undefined" !== typeof MessageChannel) {
        var T2 = new MessageChannel(), U2 = T2.port2;
        T2.port1.onmessage = R2;
        S2 = function() {
          U2.postMessage(null);
        };
      } else
        S2 = function() {
          D2(R2, 0);
        };
      function I2(a2) {
        O2 = a2;
        N2 || (N2 = true, S2());
      }
      function K2(a2, b2) {
        L2 = D2(function() {
          a2(exports2.unstable_now());
        }, b2);
      }
      exports2.unstable_IdlePriority = 5;
      exports2.unstable_ImmediatePriority = 1;
      exports2.unstable_LowPriority = 4;
      exports2.unstable_NormalPriority = 3;
      exports2.unstable_Profiling = null;
      exports2.unstable_UserBlockingPriority = 2;
      exports2.unstable_cancelCallback = function(a2) {
        a2.callback = null;
      };
      exports2.unstable_continueExecution = function() {
        A2 || z2 || (A2 = true, I2(J2));
      };
      exports2.unstable_forceFrameRate = function(a2) {
        0 > a2 || 125 < a2 ? console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported") : P2 = 0 < a2 ? Math.floor(1e3 / a2) : 5;
      };
      exports2.unstable_getCurrentPriorityLevel = function() {
        return y2;
      };
      exports2.unstable_getFirstCallbackNode = function() {
        return h2(r2);
      };
      exports2.unstable_next = function(a2) {
        switch (y2) {
          case 1:
          case 2:
          case 3:
            var b2 = 3;
            break;
          default:
            b2 = y2;
        }
        var c2 = y2;
        y2 = b2;
        try {
          return a2();
        } finally {
          y2 = c2;
        }
      };
      exports2.unstable_pauseExecution = function() {
      };
      exports2.unstable_requestPaint = function() {
      };
      exports2.unstable_runWithPriority = function(a2, b2) {
        switch (a2) {
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
            break;
          default:
            a2 = 3;
        }
        var c2 = y2;
        y2 = a2;
        try {
          return b2();
        } finally {
          y2 = c2;
        }
      };
      exports2.unstable_scheduleCallback = function(a2, b2, c2) {
        var d2 = exports2.unstable_now();
        "object" === typeof c2 && null !== c2 ? (c2 = c2.delay, c2 = "number" === typeof c2 && 0 < c2 ? d2 + c2 : d2) : c2 = d2;
        switch (a2) {
          case 1:
            var e3 = -1;
            break;
          case 2:
            e3 = 250;
            break;
          case 5:
            e3 = 1073741823;
            break;
          case 4:
            e3 = 1e4;
            break;
          default:
            e3 = 5e3;
        }
        e3 = c2 + e3;
        a2 = { id: u2++, callback: b2, priorityLevel: a2, startTime: c2, expirationTime: e3, sortIndex: -1 };
        c2 > d2 ? (a2.sortIndex = c2, f2(t2, a2), null === h2(r2) && a2 === h2(t2) && (B2 ? (E2(L2), L2 = -1) : B2 = true, K2(H2, c2 - d2))) : (a2.sortIndex = e3, f2(r2, a2), A2 || z2 || (A2 = true, I2(J2)));
        return a2;
      };
      exports2.unstable_shouldYield = M2;
      exports2.unstable_wrapCallback = function(a2) {
        var b2 = y2;
        return function() {
          var c2 = y2;
          y2 = b2;
          try {
            return a2.apply(this, arguments);
          } finally {
            y2 = c2;
          }
        };
      };
    })(scheduler_production_min);
    {
      scheduler.exports = scheduler_production_min;
    }
    var schedulerExports = scheduler.exports;
    /**
     * @license React
     * react-dom.production.min.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    var aa = reactExports, ca = schedulerExports;
    function p$5(a2) {
      for (var b2 = "https://reactjs.org/docs/error-decoder.html?invariant=" + a2, c2 = 1; c2 < arguments.length; c2++)
        b2 += "&args[]=" + encodeURIComponent(arguments[c2]);
      return "Minified React error #" + a2 + "; visit " + b2 + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
    }
    var da = /* @__PURE__ */ new Set(), ea = {};
    function fa(a2, b2) {
      ha(a2, b2);
      ha(a2 + "Capture", b2);
    }
    function ha(a2, b2) {
      ea[a2] = b2;
      for (a2 = 0; a2 < b2.length; a2++)
        da.add(b2[a2]);
    }
    var ia = !("undefined" === typeof window || "undefined" === typeof window.document || "undefined" === typeof window.document.createElement), ja = Object.prototype.hasOwnProperty, ka$1 = /^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/, la = {}, ma = {};
    function oa(a2) {
      if (ja.call(ma, a2))
        return true;
      if (ja.call(la, a2))
        return false;
      if (ka$1.test(a2))
        return ma[a2] = true;
      la[a2] = true;
      return false;
    }
    function pa(a2, b2, c2, d2) {
      if (null !== c2 && 0 === c2.type)
        return false;
      switch (typeof b2) {
        case "function":
        case "symbol":
          return true;
        case "boolean":
          if (d2)
            return false;
          if (null !== c2)
            return !c2.acceptsBooleans;
          a2 = a2.toLowerCase().slice(0, 5);
          return "data-" !== a2 && "aria-" !== a2;
        default:
          return false;
      }
    }
    function qa(a2, b2, c2, d2) {
      if (null === b2 || "undefined" === typeof b2 || pa(a2, b2, c2, d2))
        return true;
      if (d2)
        return false;
      if (null !== c2)
        switch (c2.type) {
          case 3:
            return !b2;
          case 4:
            return false === b2;
          case 5:
            return isNaN(b2);
          case 6:
            return isNaN(b2) || 1 > b2;
        }
      return false;
    }
    function v$3(a2, b2, c2, d2, e3, f2, g2) {
      this.acceptsBooleans = 2 === b2 || 3 === b2 || 4 === b2;
      this.attributeName = d2;
      this.attributeNamespace = e3;
      this.mustUseProperty = c2;
      this.propertyName = a2;
      this.type = b2;
      this.sanitizeURL = f2;
      this.removeEmptyString = g2;
    }
    var z$3 = {};
    "children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(a2) {
      z$3[a2] = new v$3(a2, 0, false, a2, null, false, false);
    });
    [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(a2) {
      var b2 = a2[0];
      z$3[b2] = new v$3(b2, 1, false, a2[1], null, false, false);
    });
    ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(a2) {
      z$3[a2] = new v$3(a2, 2, false, a2.toLowerCase(), null, false, false);
    });
    ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(a2) {
      z$3[a2] = new v$3(a2, 2, false, a2, null, false, false);
    });
    "allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(a2) {
      z$3[a2] = new v$3(a2, 3, false, a2.toLowerCase(), null, false, false);
    });
    ["checked", "multiple", "muted", "selected"].forEach(function(a2) {
      z$3[a2] = new v$3(a2, 3, true, a2, null, false, false);
    });
    ["capture", "download"].forEach(function(a2) {
      z$3[a2] = new v$3(a2, 4, false, a2, null, false, false);
    });
    ["cols", "rows", "size", "span"].forEach(function(a2) {
      z$3[a2] = new v$3(a2, 6, false, a2, null, false, false);
    });
    ["rowSpan", "start"].forEach(function(a2) {
      z$3[a2] = new v$3(a2, 5, false, a2.toLowerCase(), null, false, false);
    });
    var ra = /[\-:]([a-z])/g;
    function sa(a2) {
      return a2[1].toUpperCase();
    }
    "accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(a2) {
      var b2 = a2.replace(
        ra,
        sa
      );
      z$3[b2] = new v$3(b2, 1, false, a2, null, false, false);
    });
    "xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(a2) {
      var b2 = a2.replace(ra, sa);
      z$3[b2] = new v$3(b2, 1, false, a2, "http://www.w3.org/1999/xlink", false, false);
    });
    ["xml:base", "xml:lang", "xml:space"].forEach(function(a2) {
      var b2 = a2.replace(ra, sa);
      z$3[b2] = new v$3(b2, 1, false, a2, "http://www.w3.org/XML/1998/namespace", false, false);
    });
    ["tabIndex", "crossOrigin"].forEach(function(a2) {
      z$3[a2] = new v$3(a2, 1, false, a2.toLowerCase(), null, false, false);
    });
    z$3.xlinkHref = new v$3("xlinkHref", 1, false, "xlink:href", "http://www.w3.org/1999/xlink", true, false);
    ["src", "href", "action", "formAction"].forEach(function(a2) {
      z$3[a2] = new v$3(a2, 1, false, a2.toLowerCase(), null, true, true);
    });
    function ta(a2, b2, c2, d2) {
      var e3 = z$3.hasOwnProperty(b2) ? z$3[b2] : null;
      if (null !== e3 ? 0 !== e3.type : d2 || !(2 < b2.length) || "o" !== b2[0] && "O" !== b2[0] || "n" !== b2[1] && "N" !== b2[1])
        qa(b2, c2, e3, d2) && (c2 = null), d2 || null === e3 ? oa(b2) && (null === c2 ? a2.removeAttribute(b2) : a2.setAttribute(b2, "" + c2)) : e3.mustUseProperty ? a2[e3.propertyName] = null === c2 ? 3 === e3.type ? false : "" : c2 : (b2 = e3.attributeName, d2 = e3.attributeNamespace, null === c2 ? a2.removeAttribute(b2) : (e3 = e3.type, c2 = 3 === e3 || 4 === e3 && true === c2 ? "" : "" + c2, d2 ? a2.setAttributeNS(d2, b2, c2) : a2.setAttribute(b2, c2)));
    }
    var ua = aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, va = Symbol.for("react.element"), wa = Symbol.for("react.portal"), ya = Symbol.for("react.fragment"), za = Symbol.for("react.strict_mode"), Aa = Symbol.for("react.profiler"), Ba = Symbol.for("react.provider"), Ca = Symbol.for("react.context"), Da = Symbol.for("react.forward_ref"), Ea = Symbol.for("react.suspense"), Fa = Symbol.for("react.suspense_list"), Ga = Symbol.for("react.memo"), Ha = Symbol.for("react.lazy");
    var Ia = Symbol.for("react.offscreen");
    var Ja = Symbol.iterator;
    function Ka(a2) {
      if (null === a2 || "object" !== typeof a2)
        return null;
      a2 = Ja && a2[Ja] || a2["@@iterator"];
      return "function" === typeof a2 ? a2 : null;
    }
    var A$1 = Object.assign, La;
    function Ma(a2) {
      if (void 0 === La)
        try {
          throw Error();
        } catch (c2) {
          var b2 = c2.stack.trim().match(/\n( *(at )?)/);
          La = b2 && b2[1] || "";
        }
      return "\n" + La + a2;
    }
    var Na = false;
    function Oa(a2, b2) {
      if (!a2 || Na)
        return "";
      Na = true;
      var c2 = Error.prepareStackTrace;
      Error.prepareStackTrace = void 0;
      try {
        if (b2)
          if (b2 = function() {
            throw Error();
          }, Object.defineProperty(b2.prototype, "props", { set: function() {
            throw Error();
          } }), "object" === typeof Reflect && Reflect.construct) {
            try {
              Reflect.construct(b2, []);
            } catch (l2) {
              var d2 = l2;
            }
            Reflect.construct(a2, [], b2);
          } else {
            try {
              b2.call();
            } catch (l2) {
              d2 = l2;
            }
            a2.call(b2.prototype);
          }
        else {
          try {
            throw Error();
          } catch (l2) {
            d2 = l2;
          }
          a2();
        }
      } catch (l2) {
        if (l2 && d2 && "string" === typeof l2.stack) {
          for (var e3 = l2.stack.split("\n"), f2 = d2.stack.split("\n"), g2 = e3.length - 1, h2 = f2.length - 1; 1 <= g2 && 0 <= h2 && e3[g2] !== f2[h2]; )
            h2--;
          for (; 1 <= g2 && 0 <= h2; g2--, h2--)
            if (e3[g2] !== f2[h2]) {
              if (1 !== g2 || 1 !== h2) {
                do
                  if (g2--, h2--, 0 > h2 || e3[g2] !== f2[h2]) {
                    var k2 = "\n" + e3[g2].replace(" at new ", " at ");
                    a2.displayName && k2.includes("<anonymous>") && (k2 = k2.replace("<anonymous>", a2.displayName));
                    return k2;
                  }
                while (1 <= g2 && 0 <= h2);
              }
              break;
            }
        }
      } finally {
        Na = false, Error.prepareStackTrace = c2;
      }
      return (a2 = a2 ? a2.displayName || a2.name : "") ? Ma(a2) : "";
    }
    function Pa(a2) {
      switch (a2.tag) {
        case 5:
          return Ma(a2.type);
        case 16:
          return Ma("Lazy");
        case 13:
          return Ma("Suspense");
        case 19:
          return Ma("SuspenseList");
        case 0:
        case 2:
        case 15:
          return a2 = Oa(a2.type, false), a2;
        case 11:
          return a2 = Oa(a2.type.render, false), a2;
        case 1:
          return a2 = Oa(a2.type, true), a2;
        default:
          return "";
      }
    }
    function Qa(a2) {
      if (null == a2)
        return null;
      if ("function" === typeof a2)
        return a2.displayName || a2.name || null;
      if ("string" === typeof a2)
        return a2;
      switch (a2) {
        case ya:
          return "Fragment";
        case wa:
          return "Portal";
        case Aa:
          return "Profiler";
        case za:
          return "StrictMode";
        case Ea:
          return "Suspense";
        case Fa:
          return "SuspenseList";
      }
      if ("object" === typeof a2)
        switch (a2.$$typeof) {
          case Ca:
            return (a2.displayName || "Context") + ".Consumer";
          case Ba:
            return (a2._context.displayName || "Context") + ".Provider";
          case Da:
            var b2 = a2.render;
            a2 = a2.displayName;
            a2 || (a2 = b2.displayName || b2.name || "", a2 = "" !== a2 ? "ForwardRef(" + a2 + ")" : "ForwardRef");
            return a2;
          case Ga:
            return b2 = a2.displayName || null, null !== b2 ? b2 : Qa(a2.type) || "Memo";
          case Ha:
            b2 = a2._payload;
            a2 = a2._init;
            try {
              return Qa(a2(b2));
            } catch (c2) {
            }
        }
      return null;
    }
    function Ra(a2) {
      var b2 = a2.type;
      switch (a2.tag) {
        case 24:
          return "Cache";
        case 9:
          return (b2.displayName || "Context") + ".Consumer";
        case 10:
          return (b2._context.displayName || "Context") + ".Provider";
        case 18:
          return "DehydratedFragment";
        case 11:
          return a2 = b2.render, a2 = a2.displayName || a2.name || "", b2.displayName || ("" !== a2 ? "ForwardRef(" + a2 + ")" : "ForwardRef");
        case 7:
          return "Fragment";
        case 5:
          return b2;
        case 4:
          return "Portal";
        case 3:
          return "Root";
        case 6:
          return "Text";
        case 16:
          return Qa(b2);
        case 8:
          return b2 === za ? "StrictMode" : "Mode";
        case 22:
          return "Offscreen";
        case 12:
          return "Profiler";
        case 21:
          return "Scope";
        case 13:
          return "Suspense";
        case 19:
          return "SuspenseList";
        case 25:
          return "TracingMarker";
        case 1:
        case 0:
        case 17:
        case 2:
        case 14:
        case 15:
          if ("function" === typeof b2)
            return b2.displayName || b2.name || null;
          if ("string" === typeof b2)
            return b2;
      }
      return null;
    }
    function Sa(a2) {
      switch (typeof a2) {
        case "boolean":
        case "number":
        case "string":
        case "undefined":
          return a2;
        case "object":
          return a2;
        default:
          return "";
      }
    }
    function Ta(a2) {
      var b2 = a2.type;
      return (a2 = a2.nodeName) && "input" === a2.toLowerCase() && ("checkbox" === b2 || "radio" === b2);
    }
    function Ua(a2) {
      var b2 = Ta(a2) ? "checked" : "value", c2 = Object.getOwnPropertyDescriptor(a2.constructor.prototype, b2), d2 = "" + a2[b2];
      if (!a2.hasOwnProperty(b2) && "undefined" !== typeof c2 && "function" === typeof c2.get && "function" === typeof c2.set) {
        var e3 = c2.get, f2 = c2.set;
        Object.defineProperty(a2, b2, { configurable: true, get: function() {
          return e3.call(this);
        }, set: function(a3) {
          d2 = "" + a3;
          f2.call(this, a3);
        } });
        Object.defineProperty(a2, b2, { enumerable: c2.enumerable });
        return { getValue: function() {
          return d2;
        }, setValue: function(a3) {
          d2 = "" + a3;
        }, stopTracking: function() {
          a2._valueTracker = null;
          delete a2[b2];
        } };
      }
    }
    function Va(a2) {
      a2._valueTracker || (a2._valueTracker = Ua(a2));
    }
    function Wa(a2) {
      if (!a2)
        return false;
      var b2 = a2._valueTracker;
      if (!b2)
        return true;
      var c2 = b2.getValue();
      var d2 = "";
      a2 && (d2 = Ta(a2) ? a2.checked ? "true" : "false" : a2.value);
      a2 = d2;
      return a2 !== c2 ? (b2.setValue(a2), true) : false;
    }
    function Xa(a2) {
      a2 = a2 || ("undefined" !== typeof document ? document : void 0);
      if ("undefined" === typeof a2)
        return null;
      try {
        return a2.activeElement || a2.body;
      } catch (b2) {
        return a2.body;
      }
    }
    function Ya(a2, b2) {
      var c2 = b2.checked;
      return A$1({}, b2, { defaultChecked: void 0, defaultValue: void 0, value: void 0, checked: null != c2 ? c2 : a2._wrapperState.initialChecked });
    }
    function Za(a2, b2) {
      var c2 = null == b2.defaultValue ? "" : b2.defaultValue, d2 = null != b2.checked ? b2.checked : b2.defaultChecked;
      c2 = Sa(null != b2.value ? b2.value : c2);
      a2._wrapperState = { initialChecked: d2, initialValue: c2, controlled: "checkbox" === b2.type || "radio" === b2.type ? null != b2.checked : null != b2.value };
    }
    function ab(a2, b2) {
      b2 = b2.checked;
      null != b2 && ta(a2, "checked", b2, false);
    }
    function bb(a2, b2) {
      ab(a2, b2);
      var c2 = Sa(b2.value), d2 = b2.type;
      if (null != c2)
        if ("number" === d2) {
          if (0 === c2 && "" === a2.value || a2.value != c2)
            a2.value = "" + c2;
        } else
          a2.value !== "" + c2 && (a2.value = "" + c2);
      else if ("submit" === d2 || "reset" === d2) {
        a2.removeAttribute("value");
        return;
      }
      b2.hasOwnProperty("value") ? cb(a2, b2.type, c2) : b2.hasOwnProperty("defaultValue") && cb(a2, b2.type, Sa(b2.defaultValue));
      null == b2.checked && null != b2.defaultChecked && (a2.defaultChecked = !!b2.defaultChecked);
    }
    function db(a2, b2, c2) {
      if (b2.hasOwnProperty("value") || b2.hasOwnProperty("defaultValue")) {
        var d2 = b2.type;
        if (!("submit" !== d2 && "reset" !== d2 || void 0 !== b2.value && null !== b2.value))
          return;
        b2 = "" + a2._wrapperState.initialValue;
        c2 || b2 === a2.value || (a2.value = b2);
        a2.defaultValue = b2;
      }
      c2 = a2.name;
      "" !== c2 && (a2.name = "");
      a2.defaultChecked = !!a2._wrapperState.initialChecked;
      "" !== c2 && (a2.name = c2);
    }
    function cb(a2, b2, c2) {
      if ("number" !== b2 || Xa(a2.ownerDocument) !== a2)
        null == c2 ? a2.defaultValue = "" + a2._wrapperState.initialValue : a2.defaultValue !== "" + c2 && (a2.defaultValue = "" + c2);
    }
    var eb = Array.isArray;
    function fb(a2, b2, c2, d2) {
      a2 = a2.options;
      if (b2) {
        b2 = {};
        for (var e3 = 0; e3 < c2.length; e3++)
          b2["$" + c2[e3]] = true;
        for (c2 = 0; c2 < a2.length; c2++)
          e3 = b2.hasOwnProperty("$" + a2[c2].value), a2[c2].selected !== e3 && (a2[c2].selected = e3), e3 && d2 && (a2[c2].defaultSelected = true);
      } else {
        c2 = "" + Sa(c2);
        b2 = null;
        for (e3 = 0; e3 < a2.length; e3++) {
          if (a2[e3].value === c2) {
            a2[e3].selected = true;
            d2 && (a2[e3].defaultSelected = true);
            return;
          }
          null !== b2 || a2[e3].disabled || (b2 = a2[e3]);
        }
        null !== b2 && (b2.selected = true);
      }
    }
    function gb(a2, b2) {
      if (null != b2.dangerouslySetInnerHTML)
        throw Error(p$5(91));
      return A$1({}, b2, { value: void 0, defaultValue: void 0, children: "" + a2._wrapperState.initialValue });
    }
    function hb(a2, b2) {
      var c2 = b2.value;
      if (null == c2) {
        c2 = b2.children;
        b2 = b2.defaultValue;
        if (null != c2) {
          if (null != b2)
            throw Error(p$5(92));
          if (eb(c2)) {
            if (1 < c2.length)
              throw Error(p$5(93));
            c2 = c2[0];
          }
          b2 = c2;
        }
        null == b2 && (b2 = "");
        c2 = b2;
      }
      a2._wrapperState = { initialValue: Sa(c2) };
    }
    function ib(a2, b2) {
      var c2 = Sa(b2.value), d2 = Sa(b2.defaultValue);
      null != c2 && (c2 = "" + c2, c2 !== a2.value && (a2.value = c2), null == b2.defaultValue && a2.defaultValue !== c2 && (a2.defaultValue = c2));
      null != d2 && (a2.defaultValue = "" + d2);
    }
    function jb(a2) {
      var b2 = a2.textContent;
      b2 === a2._wrapperState.initialValue && "" !== b2 && null !== b2 && (a2.value = b2);
    }
    function kb(a2) {
      switch (a2) {
        case "svg":
          return "http://www.w3.org/2000/svg";
        case "math":
          return "http://www.w3.org/1998/Math/MathML";
        default:
          return "http://www.w3.org/1999/xhtml";
      }
    }
    function lb(a2, b2) {
      return null == a2 || "http://www.w3.org/1999/xhtml" === a2 ? kb(b2) : "http://www.w3.org/2000/svg" === a2 && "foreignObject" === b2 ? "http://www.w3.org/1999/xhtml" : a2;
    }
    var mb, nb = function(a2) {
      return "undefined" !== typeof MSApp && MSApp.execUnsafeLocalFunction ? function(b2, c2, d2, e3) {
        MSApp.execUnsafeLocalFunction(function() {
          return a2(b2, c2, d2, e3);
        });
      } : a2;
    }(function(a2, b2) {
      if ("http://www.w3.org/2000/svg" !== a2.namespaceURI || "innerHTML" in a2)
        a2.innerHTML = b2;
      else {
        mb = mb || document.createElement("div");
        mb.innerHTML = "<svg>" + b2.valueOf().toString() + "</svg>";
        for (b2 = mb.firstChild; a2.firstChild; )
          a2.removeChild(a2.firstChild);
        for (; b2.firstChild; )
          a2.appendChild(b2.firstChild);
      }
    });
    function ob(a2, b2) {
      if (b2) {
        var c2 = a2.firstChild;
        if (c2 && c2 === a2.lastChild && 3 === c2.nodeType) {
          c2.nodeValue = b2;
          return;
        }
      }
      a2.textContent = b2;
    }
    var pb = {
      animationIterationCount: true,
      aspectRatio: true,
      borderImageOutset: true,
      borderImageSlice: true,
      borderImageWidth: true,
      boxFlex: true,
      boxFlexGroup: true,
      boxOrdinalGroup: true,
      columnCount: true,
      columns: true,
      flex: true,
      flexGrow: true,
      flexPositive: true,
      flexShrink: true,
      flexNegative: true,
      flexOrder: true,
      gridArea: true,
      gridRow: true,
      gridRowEnd: true,
      gridRowSpan: true,
      gridRowStart: true,
      gridColumn: true,
      gridColumnEnd: true,
      gridColumnSpan: true,
      gridColumnStart: true,
      fontWeight: true,
      lineClamp: true,
      lineHeight: true,
      opacity: true,
      order: true,
      orphans: true,
      tabSize: true,
      widows: true,
      zIndex: true,
      zoom: true,
      fillOpacity: true,
      floodOpacity: true,
      stopOpacity: true,
      strokeDasharray: true,
      strokeDashoffset: true,
      strokeMiterlimit: true,
      strokeOpacity: true,
      strokeWidth: true
    }, qb = ["Webkit", "ms", "Moz", "O"];
    Object.keys(pb).forEach(function(a2) {
      qb.forEach(function(b2) {
        b2 = b2 + a2.charAt(0).toUpperCase() + a2.substring(1);
        pb[b2] = pb[a2];
      });
    });
    function rb(a2, b2, c2) {
      return null == b2 || "boolean" === typeof b2 || "" === b2 ? "" : c2 || "number" !== typeof b2 || 0 === b2 || pb.hasOwnProperty(a2) && pb[a2] ? ("" + b2).trim() : b2 + "px";
    }
    function sb(a2, b2) {
      a2 = a2.style;
      for (var c2 in b2)
        if (b2.hasOwnProperty(c2)) {
          var d2 = 0 === c2.indexOf("--"), e3 = rb(c2, b2[c2], d2);
          "float" === c2 && (c2 = "cssFloat");
          d2 ? a2.setProperty(c2, e3) : a2[c2] = e3;
        }
    }
    var tb = A$1({ menuitem: true }, { area: true, base: true, br: true, col: true, embed: true, hr: true, img: true, input: true, keygen: true, link: true, meta: true, param: true, source: true, track: true, wbr: true });
    function ub(a2, b2) {
      if (b2) {
        if (tb[a2] && (null != b2.children || null != b2.dangerouslySetInnerHTML))
          throw Error(p$5(137, a2));
        if (null != b2.dangerouslySetInnerHTML) {
          if (null != b2.children)
            throw Error(p$5(60));
          if ("object" !== typeof b2.dangerouslySetInnerHTML || !("__html" in b2.dangerouslySetInnerHTML))
            throw Error(p$5(61));
        }
        if (null != b2.style && "object" !== typeof b2.style)
          throw Error(p$5(62));
      }
    }
    function vb(a2, b2) {
      if (-1 === a2.indexOf("-"))
        return "string" === typeof b2.is;
      switch (a2) {
        case "annotation-xml":
        case "color-profile":
        case "font-face":
        case "font-face-src":
        case "font-face-uri":
        case "font-face-format":
        case "font-face-name":
        case "missing-glyph":
          return false;
        default:
          return true;
      }
    }
    var wb = null;
    function xb(a2) {
      a2 = a2.target || a2.srcElement || window;
      a2.correspondingUseElement && (a2 = a2.correspondingUseElement);
      return 3 === a2.nodeType ? a2.parentNode : a2;
    }
    var yb = null, zb = null, Ab = null;
    function Bb(a2) {
      if (a2 = Cb(a2)) {
        if ("function" !== typeof yb)
          throw Error(p$5(280));
        var b2 = a2.stateNode;
        b2 && (b2 = Db(b2), yb(a2.stateNode, a2.type, b2));
      }
    }
    function Eb(a2) {
      zb ? Ab ? Ab.push(a2) : Ab = [a2] : zb = a2;
    }
    function Fb() {
      if (zb) {
        var a2 = zb, b2 = Ab;
        Ab = zb = null;
        Bb(a2);
        if (b2)
          for (a2 = 0; a2 < b2.length; a2++)
            Bb(b2[a2]);
      }
    }
    function Gb(a2, b2) {
      return a2(b2);
    }
    function Hb() {
    }
    var Ib = false;
    function Jb(a2, b2, c2) {
      if (Ib)
        return a2(b2, c2);
      Ib = true;
      try {
        return Gb(a2, b2, c2);
      } finally {
        if (Ib = false, null !== zb || null !== Ab)
          Hb(), Fb();
      }
    }
    function Kb(a2, b2) {
      var c2 = a2.stateNode;
      if (null === c2)
        return null;
      var d2 = Db(c2);
      if (null === d2)
        return null;
      c2 = d2[b2];
      a:
        switch (b2) {
          case "onClick":
          case "onClickCapture":
          case "onDoubleClick":
          case "onDoubleClickCapture":
          case "onMouseDown":
          case "onMouseDownCapture":
          case "onMouseMove":
          case "onMouseMoveCapture":
          case "onMouseUp":
          case "onMouseUpCapture":
          case "onMouseEnter":
            (d2 = !d2.disabled) || (a2 = a2.type, d2 = !("button" === a2 || "input" === a2 || "select" === a2 || "textarea" === a2));
            a2 = !d2;
            break a;
          default:
            a2 = false;
        }
      if (a2)
        return null;
      if (c2 && "function" !== typeof c2)
        throw Error(p$5(231, b2, typeof c2));
      return c2;
    }
    var Lb = false;
    if (ia)
      try {
        var Mb = {};
        Object.defineProperty(Mb, "passive", { get: function() {
          Lb = true;
        } });
        window.addEventListener("test", Mb, Mb);
        window.removeEventListener("test", Mb, Mb);
      } catch (a2) {
        Lb = false;
      }
    function Nb(a2, b2, c2, d2, e3, f2, g2, h2, k2) {
      var l2 = Array.prototype.slice.call(arguments, 3);
      try {
        b2.apply(c2, l2);
      } catch (m2) {
        this.onError(m2);
      }
    }
    var Ob = false, Pb = null, Qb = false, Rb = null, Sb = { onError: function(a2) {
      Ob = true;
      Pb = a2;
    } };
    function Tb(a2, b2, c2, d2, e3, f2, g2, h2, k2) {
      Ob = false;
      Pb = null;
      Nb.apply(Sb, arguments);
    }
    function Ub(a2, b2, c2, d2, e3, f2, g2, h2, k2) {
      Tb.apply(this, arguments);
      if (Ob) {
        if (Ob) {
          var l2 = Pb;
          Ob = false;
          Pb = null;
        } else
          throw Error(p$5(198));
        Qb || (Qb = true, Rb = l2);
      }
    }
    function Vb(a2) {
      var b2 = a2, c2 = a2;
      if (a2.alternate)
        for (; b2.return; )
          b2 = b2.return;
      else {
        a2 = b2;
        do
          b2 = a2, 0 !== (b2.flags & 4098) && (c2 = b2.return), a2 = b2.return;
        while (a2);
      }
      return 3 === b2.tag ? c2 : null;
    }
    function Wb(a2) {
      if (13 === a2.tag) {
        var b2 = a2.memoizedState;
        null === b2 && (a2 = a2.alternate, null !== a2 && (b2 = a2.memoizedState));
        if (null !== b2)
          return b2.dehydrated;
      }
      return null;
    }
    function Xb(a2) {
      if (Vb(a2) !== a2)
        throw Error(p$5(188));
    }
    function Yb(a2) {
      var b2 = a2.alternate;
      if (!b2) {
        b2 = Vb(a2);
        if (null === b2)
          throw Error(p$5(188));
        return b2 !== a2 ? null : a2;
      }
      for (var c2 = a2, d2 = b2; ; ) {
        var e3 = c2.return;
        if (null === e3)
          break;
        var f2 = e3.alternate;
        if (null === f2) {
          d2 = e3.return;
          if (null !== d2) {
            c2 = d2;
            continue;
          }
          break;
        }
        if (e3.child === f2.child) {
          for (f2 = e3.child; f2; ) {
            if (f2 === c2)
              return Xb(e3), a2;
            if (f2 === d2)
              return Xb(e3), b2;
            f2 = f2.sibling;
          }
          throw Error(p$5(188));
        }
        if (c2.return !== d2.return)
          c2 = e3, d2 = f2;
        else {
          for (var g2 = false, h2 = e3.child; h2; ) {
            if (h2 === c2) {
              g2 = true;
              c2 = e3;
              d2 = f2;
              break;
            }
            if (h2 === d2) {
              g2 = true;
              d2 = e3;
              c2 = f2;
              break;
            }
            h2 = h2.sibling;
          }
          if (!g2) {
            for (h2 = f2.child; h2; ) {
              if (h2 === c2) {
                g2 = true;
                c2 = f2;
                d2 = e3;
                break;
              }
              if (h2 === d2) {
                g2 = true;
                d2 = f2;
                c2 = e3;
                break;
              }
              h2 = h2.sibling;
            }
            if (!g2)
              throw Error(p$5(189));
          }
        }
        if (c2.alternate !== d2)
          throw Error(p$5(190));
      }
      if (3 !== c2.tag)
        throw Error(p$5(188));
      return c2.stateNode.current === c2 ? a2 : b2;
    }
    function Zb(a2) {
      a2 = Yb(a2);
      return null !== a2 ? $b(a2) : null;
    }
    function $b(a2) {
      if (5 === a2.tag || 6 === a2.tag)
        return a2;
      for (a2 = a2.child; null !== a2; ) {
        var b2 = $b(a2);
        if (null !== b2)
          return b2;
        a2 = a2.sibling;
      }
      return null;
    }
    var ac = ca.unstable_scheduleCallback, bc = ca.unstable_cancelCallback, cc = ca.unstable_shouldYield, dc = ca.unstable_requestPaint, B = ca.unstable_now, ec = ca.unstable_getCurrentPriorityLevel, fc = ca.unstable_ImmediatePriority, gc = ca.unstable_UserBlockingPriority, hc = ca.unstable_NormalPriority, ic = ca.unstable_LowPriority, jc = ca.unstable_IdlePriority, kc = null, lc = null;
    function mc(a2) {
      if (lc && "function" === typeof lc.onCommitFiberRoot)
        try {
          lc.onCommitFiberRoot(kc, a2, void 0, 128 === (a2.current.flags & 128));
        } catch (b2) {
        }
    }
    var oc = Math.clz32 ? Math.clz32 : nc, pc = Math.log, qc = Math.LN2;
    function nc(a2) {
      a2 >>>= 0;
      return 0 === a2 ? 32 : 31 - (pc(a2) / qc | 0) | 0;
    }
    var rc = 64, sc = 4194304;
    function tc(a2) {
      switch (a2 & -a2) {
        case 1:
          return 1;
        case 2:
          return 2;
        case 4:
          return 4;
        case 8:
          return 8;
        case 16:
          return 16;
        case 32:
          return 32;
        case 64:
        case 128:
        case 256:
        case 512:
        case 1024:
        case 2048:
        case 4096:
        case 8192:
        case 16384:
        case 32768:
        case 65536:
        case 131072:
        case 262144:
        case 524288:
        case 1048576:
        case 2097152:
          return a2 & 4194240;
        case 4194304:
        case 8388608:
        case 16777216:
        case 33554432:
        case 67108864:
          return a2 & 130023424;
        case 134217728:
          return 134217728;
        case 268435456:
          return 268435456;
        case 536870912:
          return 536870912;
        case 1073741824:
          return 1073741824;
        default:
          return a2;
      }
    }
    function uc(a2, b2) {
      var c2 = a2.pendingLanes;
      if (0 === c2)
        return 0;
      var d2 = 0, e3 = a2.suspendedLanes, f2 = a2.pingedLanes, g2 = c2 & 268435455;
      if (0 !== g2) {
        var h2 = g2 & ~e3;
        0 !== h2 ? d2 = tc(h2) : (f2 &= g2, 0 !== f2 && (d2 = tc(f2)));
      } else
        g2 = c2 & ~e3, 0 !== g2 ? d2 = tc(g2) : 0 !== f2 && (d2 = tc(f2));
      if (0 === d2)
        return 0;
      if (0 !== b2 && b2 !== d2 && 0 === (b2 & e3) && (e3 = d2 & -d2, f2 = b2 & -b2, e3 >= f2 || 16 === e3 && 0 !== (f2 & 4194240)))
        return b2;
      0 !== (d2 & 4) && (d2 |= c2 & 16);
      b2 = a2.entangledLanes;
      if (0 !== b2)
        for (a2 = a2.entanglements, b2 &= d2; 0 < b2; )
          c2 = 31 - oc(b2), e3 = 1 << c2, d2 |= a2[c2], b2 &= ~e3;
      return d2;
    }
    function vc(a2, b2) {
      switch (a2) {
        case 1:
        case 2:
        case 4:
          return b2 + 250;
        case 8:
        case 16:
        case 32:
        case 64:
        case 128:
        case 256:
        case 512:
        case 1024:
        case 2048:
        case 4096:
        case 8192:
        case 16384:
        case 32768:
        case 65536:
        case 131072:
        case 262144:
        case 524288:
        case 1048576:
        case 2097152:
          return b2 + 5e3;
        case 4194304:
        case 8388608:
        case 16777216:
        case 33554432:
        case 67108864:
          return -1;
        case 134217728:
        case 268435456:
        case 536870912:
        case 1073741824:
          return -1;
        default:
          return -1;
      }
    }
    function wc(a2, b2) {
      for (var c2 = a2.suspendedLanes, d2 = a2.pingedLanes, e3 = a2.expirationTimes, f2 = a2.pendingLanes; 0 < f2; ) {
        var g2 = 31 - oc(f2), h2 = 1 << g2, k2 = e3[g2];
        if (-1 === k2) {
          if (0 === (h2 & c2) || 0 !== (h2 & d2))
            e3[g2] = vc(h2, b2);
        } else
          k2 <= b2 && (a2.expiredLanes |= h2);
        f2 &= ~h2;
      }
    }
    function xc(a2) {
      a2 = a2.pendingLanes & -1073741825;
      return 0 !== a2 ? a2 : a2 & 1073741824 ? 1073741824 : 0;
    }
    function yc() {
      var a2 = rc;
      rc <<= 1;
      0 === (rc & 4194240) && (rc = 64);
      return a2;
    }
    function zc(a2) {
      for (var b2 = [], c2 = 0; 31 > c2; c2++)
        b2.push(a2);
      return b2;
    }
    function Ac(a2, b2, c2) {
      a2.pendingLanes |= b2;
      536870912 !== b2 && (a2.suspendedLanes = 0, a2.pingedLanes = 0);
      a2 = a2.eventTimes;
      b2 = 31 - oc(b2);
      a2[b2] = c2;
    }
    function Bc(a2, b2) {
      var c2 = a2.pendingLanes & ~b2;
      a2.pendingLanes = b2;
      a2.suspendedLanes = 0;
      a2.pingedLanes = 0;
      a2.expiredLanes &= b2;
      a2.mutableReadLanes &= b2;
      a2.entangledLanes &= b2;
      b2 = a2.entanglements;
      var d2 = a2.eventTimes;
      for (a2 = a2.expirationTimes; 0 < c2; ) {
        var e3 = 31 - oc(c2), f2 = 1 << e3;
        b2[e3] = 0;
        d2[e3] = -1;
        a2[e3] = -1;
        c2 &= ~f2;
      }
    }
    function Cc(a2, b2) {
      var c2 = a2.entangledLanes |= b2;
      for (a2 = a2.entanglements; c2; ) {
        var d2 = 31 - oc(c2), e3 = 1 << d2;
        e3 & b2 | a2[d2] & b2 && (a2[d2] |= b2);
        c2 &= ~e3;
      }
    }
    var C$3 = 0;
    function Dc(a2) {
      a2 &= -a2;
      return 1 < a2 ? 4 < a2 ? 0 !== (a2 & 268435455) ? 16 : 536870912 : 4 : 1;
    }
    var Ec, Fc, Gc, Hc, Ic, Jc = false, Kc = [], Lc = null, Mc = null, Nc = null, Oc = /* @__PURE__ */ new Map(), Pc = /* @__PURE__ */ new Map(), Qc = [], Rc = "mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");
    function Sc(a2, b2) {
      switch (a2) {
        case "focusin":
        case "focusout":
          Lc = null;
          break;
        case "dragenter":
        case "dragleave":
          Mc = null;
          break;
        case "mouseover":
        case "mouseout":
          Nc = null;
          break;
        case "pointerover":
        case "pointerout":
          Oc.delete(b2.pointerId);
          break;
        case "gotpointercapture":
        case "lostpointercapture":
          Pc.delete(b2.pointerId);
      }
    }
    function Tc(a2, b2, c2, d2, e3, f2) {
      if (null === a2 || a2.nativeEvent !== f2)
        return a2 = { blockedOn: b2, domEventName: c2, eventSystemFlags: d2, nativeEvent: f2, targetContainers: [e3] }, null !== b2 && (b2 = Cb(b2), null !== b2 && Fc(b2)), a2;
      a2.eventSystemFlags |= d2;
      b2 = a2.targetContainers;
      null !== e3 && -1 === b2.indexOf(e3) && b2.push(e3);
      return a2;
    }
    function Uc(a2, b2, c2, d2, e3) {
      switch (b2) {
        case "focusin":
          return Lc = Tc(Lc, a2, b2, c2, d2, e3), true;
        case "dragenter":
          return Mc = Tc(Mc, a2, b2, c2, d2, e3), true;
        case "mouseover":
          return Nc = Tc(Nc, a2, b2, c2, d2, e3), true;
        case "pointerover":
          var f2 = e3.pointerId;
          Oc.set(f2, Tc(Oc.get(f2) || null, a2, b2, c2, d2, e3));
          return true;
        case "gotpointercapture":
          return f2 = e3.pointerId, Pc.set(f2, Tc(Pc.get(f2) || null, a2, b2, c2, d2, e3)), true;
      }
      return false;
    }
    function Vc(a2) {
      var b2 = Wc(a2.target);
      if (null !== b2) {
        var c2 = Vb(b2);
        if (null !== c2) {
          if (b2 = c2.tag, 13 === b2) {
            if (b2 = Wb(c2), null !== b2) {
              a2.blockedOn = b2;
              Ic(a2.priority, function() {
                Gc(c2);
              });
              return;
            }
          } else if (3 === b2 && c2.stateNode.current.memoizedState.isDehydrated) {
            a2.blockedOn = 3 === c2.tag ? c2.stateNode.containerInfo : null;
            return;
          }
        }
      }
      a2.blockedOn = null;
    }
    function Xc(a2) {
      if (null !== a2.blockedOn)
        return false;
      for (var b2 = a2.targetContainers; 0 < b2.length; ) {
        var c2 = Yc(a2.domEventName, a2.eventSystemFlags, b2[0], a2.nativeEvent);
        if (null === c2) {
          c2 = a2.nativeEvent;
          var d2 = new c2.constructor(c2.type, c2);
          wb = d2;
          c2.target.dispatchEvent(d2);
          wb = null;
        } else
          return b2 = Cb(c2), null !== b2 && Fc(b2), a2.blockedOn = c2, false;
        b2.shift();
      }
      return true;
    }
    function Zc(a2, b2, c2) {
      Xc(a2) && c2.delete(b2);
    }
    function $c() {
      Jc = false;
      null !== Lc && Xc(Lc) && (Lc = null);
      null !== Mc && Xc(Mc) && (Mc = null);
      null !== Nc && Xc(Nc) && (Nc = null);
      Oc.forEach(Zc);
      Pc.forEach(Zc);
    }
    function ad(a2, b2) {
      a2.blockedOn === b2 && (a2.blockedOn = null, Jc || (Jc = true, ca.unstable_scheduleCallback(ca.unstable_NormalPriority, $c)));
    }
    function bd(a2) {
      function b2(b3) {
        return ad(b3, a2);
      }
      if (0 < Kc.length) {
        ad(Kc[0], a2);
        for (var c2 = 1; c2 < Kc.length; c2++) {
          var d2 = Kc[c2];
          d2.blockedOn === a2 && (d2.blockedOn = null);
        }
      }
      null !== Lc && ad(Lc, a2);
      null !== Mc && ad(Mc, a2);
      null !== Nc && ad(Nc, a2);
      Oc.forEach(b2);
      Pc.forEach(b2);
      for (c2 = 0; c2 < Qc.length; c2++)
        d2 = Qc[c2], d2.blockedOn === a2 && (d2.blockedOn = null);
      for (; 0 < Qc.length && (c2 = Qc[0], null === c2.blockedOn); )
        Vc(c2), null === c2.blockedOn && Qc.shift();
    }
    var cd = ua.ReactCurrentBatchConfig, dd = true;
    function ed(a2, b2, c2, d2) {
      var e3 = C$3, f2 = cd.transition;
      cd.transition = null;
      try {
        C$3 = 1, fd(a2, b2, c2, d2);
      } finally {
        C$3 = e3, cd.transition = f2;
      }
    }
    function gd(a2, b2, c2, d2) {
      var e3 = C$3, f2 = cd.transition;
      cd.transition = null;
      try {
        C$3 = 4, fd(a2, b2, c2, d2);
      } finally {
        C$3 = e3, cd.transition = f2;
      }
    }
    function fd(a2, b2, c2, d2) {
      if (dd) {
        var e3 = Yc(a2, b2, c2, d2);
        if (null === e3)
          hd(a2, b2, d2, id, c2), Sc(a2, d2);
        else if (Uc(e3, a2, b2, c2, d2))
          d2.stopPropagation();
        else if (Sc(a2, d2), b2 & 4 && -1 < Rc.indexOf(a2)) {
          for (; null !== e3; ) {
            var f2 = Cb(e3);
            null !== f2 && Ec(f2);
            f2 = Yc(a2, b2, c2, d2);
            null === f2 && hd(a2, b2, d2, id, c2);
            if (f2 === e3)
              break;
            e3 = f2;
          }
          null !== e3 && d2.stopPropagation();
        } else
          hd(a2, b2, d2, null, c2);
      }
    }
    var id = null;
    function Yc(a2, b2, c2, d2) {
      id = null;
      a2 = xb(d2);
      a2 = Wc(a2);
      if (null !== a2)
        if (b2 = Vb(a2), null === b2)
          a2 = null;
        else if (c2 = b2.tag, 13 === c2) {
          a2 = Wb(b2);
          if (null !== a2)
            return a2;
          a2 = null;
        } else if (3 === c2) {
          if (b2.stateNode.current.memoizedState.isDehydrated)
            return 3 === b2.tag ? b2.stateNode.containerInfo : null;
          a2 = null;
        } else
          b2 !== a2 && (a2 = null);
      id = a2;
      return null;
    }
    function jd(a2) {
      switch (a2) {
        case "cancel":
        case "click":
        case "close":
        case "contextmenu":
        case "copy":
        case "cut":
        case "auxclick":
        case "dblclick":
        case "dragend":
        case "dragstart":
        case "drop":
        case "focusin":
        case "focusout":
        case "input":
        case "invalid":
        case "keydown":
        case "keypress":
        case "keyup":
        case "mousedown":
        case "mouseup":
        case "paste":
        case "pause":
        case "play":
        case "pointercancel":
        case "pointerdown":
        case "pointerup":
        case "ratechange":
        case "reset":
        case "resize":
        case "seeked":
        case "submit":
        case "touchcancel":
        case "touchend":
        case "touchstart":
        case "volumechange":
        case "change":
        case "selectionchange":
        case "textInput":
        case "compositionstart":
        case "compositionend":
        case "compositionupdate":
        case "beforeblur":
        case "afterblur":
        case "beforeinput":
        case "blur":
        case "fullscreenchange":
        case "focus":
        case "hashchange":
        case "popstate":
        case "select":
        case "selectstart":
          return 1;
        case "drag":
        case "dragenter":
        case "dragexit":
        case "dragleave":
        case "dragover":
        case "mousemove":
        case "mouseout":
        case "mouseover":
        case "pointermove":
        case "pointerout":
        case "pointerover":
        case "scroll":
        case "toggle":
        case "touchmove":
        case "wheel":
        case "mouseenter":
        case "mouseleave":
        case "pointerenter":
        case "pointerleave":
          return 4;
        case "message":
          switch (ec()) {
            case fc:
              return 1;
            case gc:
              return 4;
            case hc:
            case ic:
              return 16;
            case jc:
              return 536870912;
            default:
              return 16;
          }
        default:
          return 16;
      }
    }
    var kd = null, ld = null, md = null;
    function nd() {
      if (md)
        return md;
      var a2, b2 = ld, c2 = b2.length, d2, e3 = "value" in kd ? kd.value : kd.textContent, f2 = e3.length;
      for (a2 = 0; a2 < c2 && b2[a2] === e3[a2]; a2++)
        ;
      var g2 = c2 - a2;
      for (d2 = 1; d2 <= g2 && b2[c2 - d2] === e3[f2 - d2]; d2++)
        ;
      return md = e3.slice(a2, 1 < d2 ? 1 - d2 : void 0);
    }
    function od(a2) {
      var b2 = a2.keyCode;
      "charCode" in a2 ? (a2 = a2.charCode, 0 === a2 && 13 === b2 && (a2 = 13)) : a2 = b2;
      10 === a2 && (a2 = 13);
      return 32 <= a2 || 13 === a2 ? a2 : 0;
    }
    function pd() {
      return true;
    }
    function qd() {
      return false;
    }
    function rd(a2) {
      function b2(b3, d2, e3, f2, g2) {
        this._reactName = b3;
        this._targetInst = e3;
        this.type = d2;
        this.nativeEvent = f2;
        this.target = g2;
        this.currentTarget = null;
        for (var c2 in a2)
          a2.hasOwnProperty(c2) && (b3 = a2[c2], this[c2] = b3 ? b3(f2) : f2[c2]);
        this.isDefaultPrevented = (null != f2.defaultPrevented ? f2.defaultPrevented : false === f2.returnValue) ? pd : qd;
        this.isPropagationStopped = qd;
        return this;
      }
      A$1(b2.prototype, { preventDefault: function() {
        this.defaultPrevented = true;
        var a3 = this.nativeEvent;
        a3 && (a3.preventDefault ? a3.preventDefault() : "unknown" !== typeof a3.returnValue && (a3.returnValue = false), this.isDefaultPrevented = pd);
      }, stopPropagation: function() {
        var a3 = this.nativeEvent;
        a3 && (a3.stopPropagation ? a3.stopPropagation() : "unknown" !== typeof a3.cancelBubble && (a3.cancelBubble = true), this.isPropagationStopped = pd);
      }, persist: function() {
      }, isPersistent: pd });
      return b2;
    }
    var sd = { eventPhase: 0, bubbles: 0, cancelable: 0, timeStamp: function(a2) {
      return a2.timeStamp || Date.now();
    }, defaultPrevented: 0, isTrusted: 0 }, td = rd(sd), ud = A$1({}, sd, { view: 0, detail: 0 }), vd = rd(ud), wd, xd, yd, Ad = A$1({}, ud, { screenX: 0, screenY: 0, clientX: 0, clientY: 0, pageX: 0, pageY: 0, ctrlKey: 0, shiftKey: 0, altKey: 0, metaKey: 0, getModifierState: zd, button: 0, buttons: 0, relatedTarget: function(a2) {
      return void 0 === a2.relatedTarget ? a2.fromElement === a2.srcElement ? a2.toElement : a2.fromElement : a2.relatedTarget;
    }, movementX: function(a2) {
      if ("movementX" in a2)
        return a2.movementX;
      a2 !== yd && (yd && "mousemove" === a2.type ? (wd = a2.screenX - yd.screenX, xd = a2.screenY - yd.screenY) : xd = wd = 0, yd = a2);
      return wd;
    }, movementY: function(a2) {
      return "movementY" in a2 ? a2.movementY : xd;
    } }), Bd = rd(Ad), Cd = A$1({}, Ad, { dataTransfer: 0 }), Dd = rd(Cd), Ed = A$1({}, ud, { relatedTarget: 0 }), Fd = rd(Ed), Gd = A$1({}, sd, { animationName: 0, elapsedTime: 0, pseudoElement: 0 }), Hd = rd(Gd), Id = A$1({}, sd, { clipboardData: function(a2) {
      return "clipboardData" in a2 ? a2.clipboardData : window.clipboardData;
    } }), Jd = rd(Id), Kd = A$1({}, sd, { data: 0 }), Ld = rd(Kd), Md = {
      Esc: "Escape",
      Spacebar: " ",
      Left: "ArrowLeft",
      Up: "ArrowUp",
      Right: "ArrowRight",
      Down: "ArrowDown",
      Del: "Delete",
      Win: "OS",
      Menu: "ContextMenu",
      Apps: "ContextMenu",
      Scroll: "ScrollLock",
      MozPrintableKey: "Unidentified"
    }, Nd = {
      8: "Backspace",
      9: "Tab",
      12: "Clear",
      13: "Enter",
      16: "Shift",
      17: "Control",
      18: "Alt",
      19: "Pause",
      20: "CapsLock",
      27: "Escape",
      32: " ",
      33: "PageUp",
      34: "PageDown",
      35: "End",
      36: "Home",
      37: "ArrowLeft",
      38: "ArrowUp",
      39: "ArrowRight",
      40: "ArrowDown",
      45: "Insert",
      46: "Delete",
      112: "F1",
      113: "F2",
      114: "F3",
      115: "F4",
      116: "F5",
      117: "F6",
      118: "F7",
      119: "F8",
      120: "F9",
      121: "F10",
      122: "F11",
      123: "F12",
      144: "NumLock",
      145: "ScrollLock",
      224: "Meta"
    }, Od = { Alt: "altKey", Control: "ctrlKey", Meta: "metaKey", Shift: "shiftKey" };
    function Pd(a2) {
      var b2 = this.nativeEvent;
      return b2.getModifierState ? b2.getModifierState(a2) : (a2 = Od[a2]) ? !!b2[a2] : false;
    }
    function zd() {
      return Pd;
    }
    var Qd = A$1({}, ud, { key: function(a2) {
      if (a2.key) {
        var b2 = Md[a2.key] || a2.key;
        if ("Unidentified" !== b2)
          return b2;
      }
      return "keypress" === a2.type ? (a2 = od(a2), 13 === a2 ? "Enter" : String.fromCharCode(a2)) : "keydown" === a2.type || "keyup" === a2.type ? Nd[a2.keyCode] || "Unidentified" : "";
    }, code: 0, location: 0, ctrlKey: 0, shiftKey: 0, altKey: 0, metaKey: 0, repeat: 0, locale: 0, getModifierState: zd, charCode: function(a2) {
      return "keypress" === a2.type ? od(a2) : 0;
    }, keyCode: function(a2) {
      return "keydown" === a2.type || "keyup" === a2.type ? a2.keyCode : 0;
    }, which: function(a2) {
      return "keypress" === a2.type ? od(a2) : "keydown" === a2.type || "keyup" === a2.type ? a2.keyCode : 0;
    } }), Rd = rd(Qd), Sd = A$1({}, Ad, { pointerId: 0, width: 0, height: 0, pressure: 0, tangentialPressure: 0, tiltX: 0, tiltY: 0, twist: 0, pointerType: 0, isPrimary: 0 }), Td = rd(Sd), Ud = A$1({}, ud, { touches: 0, targetTouches: 0, changedTouches: 0, altKey: 0, metaKey: 0, ctrlKey: 0, shiftKey: 0, getModifierState: zd }), Vd = rd(Ud), Wd = A$1({}, sd, { propertyName: 0, elapsedTime: 0, pseudoElement: 0 }), Xd = rd(Wd), Yd = A$1({}, Ad, {
      deltaX: function(a2) {
        return "deltaX" in a2 ? a2.deltaX : "wheelDeltaX" in a2 ? -a2.wheelDeltaX : 0;
      },
      deltaY: function(a2) {
        return "deltaY" in a2 ? a2.deltaY : "wheelDeltaY" in a2 ? -a2.wheelDeltaY : "wheelDelta" in a2 ? -a2.wheelDelta : 0;
      },
      deltaZ: 0,
      deltaMode: 0
    }), Zd = rd(Yd), $d = [9, 13, 27, 32], ae$1 = ia && "CompositionEvent" in window, be$2 = null;
    ia && "documentMode" in document && (be$2 = document.documentMode);
    var ce$2 = ia && "TextEvent" in window && !be$2, de$3 = ia && (!ae$1 || be$2 && 8 < be$2 && 11 >= be$2), ee$1 = String.fromCharCode(32), fe$3 = false;
    function ge$2(a2, b2) {
      switch (a2) {
        case "keyup":
          return -1 !== $d.indexOf(b2.keyCode);
        case "keydown":
          return 229 !== b2.keyCode;
        case "keypress":
        case "mousedown":
        case "focusout":
          return true;
        default:
          return false;
      }
    }
    function he$3(a2) {
      a2 = a2.detail;
      return "object" === typeof a2 && "data" in a2 ? a2.data : null;
    }
    var ie$1 = false;
    function je$3(a2, b2) {
      switch (a2) {
        case "compositionend":
          return he$3(b2);
        case "keypress":
          if (32 !== b2.which)
            return null;
          fe$3 = true;
          return ee$1;
        case "textInput":
          return a2 = b2.data, a2 === ee$1 && fe$3 ? null : a2;
        default:
          return null;
      }
    }
    function ke$1(a2, b2) {
      if (ie$1)
        return "compositionend" === a2 || !ae$1 && ge$2(a2, b2) ? (a2 = nd(), md = ld = kd = null, ie$1 = false, a2) : null;
      switch (a2) {
        case "paste":
          return null;
        case "keypress":
          if (!(b2.ctrlKey || b2.altKey || b2.metaKey) || b2.ctrlKey && b2.altKey) {
            if (b2.char && 1 < b2.char.length)
              return b2.char;
            if (b2.which)
              return String.fromCharCode(b2.which);
          }
          return null;
        case "compositionend":
          return de$3 && "ko" !== b2.locale ? null : b2.data;
        default:
          return null;
      }
    }
    var le$1 = { color: true, date: true, datetime: true, "datetime-local": true, email: true, month: true, number: true, password: true, range: true, search: true, tel: true, text: true, time: true, url: true, week: true };
    function me$2(a2) {
      var b2 = a2 && a2.nodeName && a2.nodeName.toLowerCase();
      return "input" === b2 ? !!le$1[a2.type] : "textarea" === b2 ? true : false;
    }
    function ne(a2, b2, c2, d2) {
      Eb(d2);
      b2 = oe$1(b2, "onChange");
      0 < b2.length && (c2 = new td("onChange", "change", null, c2, d2), a2.push({ event: c2, listeners: b2 }));
    }
    var pe = null, qe$5 = null;
    function re$3(a2) {
      se$1(a2, 0);
    }
    function te$1(a2) {
      var b2 = ue$3(a2);
      if (Wa(b2))
        return a2;
    }
    function ve$1(a2, b2) {
      if ("change" === a2)
        return b2;
    }
    var we$2 = false;
    if (ia) {
      var xe$3;
      if (ia) {
        var ye$3 = "oninput" in document;
        if (!ye$3) {
          var ze$3 = document.createElement("div");
          ze$3.setAttribute("oninput", "return;");
          ye$3 = "function" === typeof ze$3.oninput;
        }
        xe$3 = ye$3;
      } else
        xe$3 = false;
      we$2 = xe$3 && (!document.documentMode || 9 < document.documentMode);
    }
    function Ae$2() {
      pe && (pe.detachEvent("onpropertychange", Be$2), qe$5 = pe = null);
    }
    function Be$2(a2) {
      if ("value" === a2.propertyName && te$1(qe$5)) {
        var b2 = [];
        ne(b2, qe$5, a2, xb(a2));
        Jb(re$3, b2);
      }
    }
    function Ce(a2, b2, c2) {
      "focusin" === a2 ? (Ae$2(), pe = b2, qe$5 = c2, pe.attachEvent("onpropertychange", Be$2)) : "focusout" === a2 && Ae$2();
    }
    function De$3(a2) {
      if ("selectionchange" === a2 || "keyup" === a2 || "keydown" === a2)
        return te$1(qe$5);
    }
    function Ee$3(a2, b2) {
      if ("click" === a2)
        return te$1(b2);
    }
    function Fe$2(a2, b2) {
      if ("input" === a2 || "change" === a2)
        return te$1(b2);
    }
    function Ge$3(a2, b2) {
      return a2 === b2 && (0 !== a2 || 1 / a2 === 1 / b2) || a2 !== a2 && b2 !== b2;
    }
    var He$4 = "function" === typeof Object.is ? Object.is : Ge$3;
    function Ie$2(a2, b2) {
      if (He$4(a2, b2))
        return true;
      if ("object" !== typeof a2 || null === a2 || "object" !== typeof b2 || null === b2)
        return false;
      var c2 = Object.keys(a2), d2 = Object.keys(b2);
      if (c2.length !== d2.length)
        return false;
      for (d2 = 0; d2 < c2.length; d2++) {
        var e3 = c2[d2];
        if (!ja.call(b2, e3) || !He$4(a2[e3], b2[e3]))
          return false;
      }
      return true;
    }
    function Je$3(a2) {
      for (; a2 && a2.firstChild; )
        a2 = a2.firstChild;
      return a2;
    }
    function Ke$3(a2, b2) {
      var c2 = Je$3(a2);
      a2 = 0;
      for (var d2; c2; ) {
        if (3 === c2.nodeType) {
          d2 = a2 + c2.textContent.length;
          if (a2 <= b2 && d2 >= b2)
            return { node: c2, offset: b2 - a2 };
          a2 = d2;
        }
        a: {
          for (; c2; ) {
            if (c2.nextSibling) {
              c2 = c2.nextSibling;
              break a;
            }
            c2 = c2.parentNode;
          }
          c2 = void 0;
        }
        c2 = Je$3(c2);
      }
    }
    function Le$2(a2, b2) {
      return a2 && b2 ? a2 === b2 ? true : a2 && 3 === a2.nodeType ? false : b2 && 3 === b2.nodeType ? Le$2(a2, b2.parentNode) : "contains" in a2 ? a2.contains(b2) : a2.compareDocumentPosition ? !!(a2.compareDocumentPosition(b2) & 16) : false : false;
    }
    function Me$2() {
      for (var a2 = window, b2 = Xa(); b2 instanceof a2.HTMLIFrameElement; ) {
        try {
          var c2 = "string" === typeof b2.contentWindow.location.href;
        } catch (d2) {
          c2 = false;
        }
        if (c2)
          a2 = b2.contentWindow;
        else
          break;
        b2 = Xa(a2.document);
      }
      return b2;
    }
    function Ne$4(a2) {
      var b2 = a2 && a2.nodeName && a2.nodeName.toLowerCase();
      return b2 && ("input" === b2 && ("text" === a2.type || "search" === a2.type || "tel" === a2.type || "url" === a2.type || "password" === a2.type) || "textarea" === b2 || "true" === a2.contentEditable);
    }
    function Oe(a2) {
      var b2 = Me$2(), c2 = a2.focusedElem, d2 = a2.selectionRange;
      if (b2 !== c2 && c2 && c2.ownerDocument && Le$2(c2.ownerDocument.documentElement, c2)) {
        if (null !== d2 && Ne$4(c2)) {
          if (b2 = d2.start, a2 = d2.end, void 0 === a2 && (a2 = b2), "selectionStart" in c2)
            c2.selectionStart = b2, c2.selectionEnd = Math.min(a2, c2.value.length);
          else if (a2 = (b2 = c2.ownerDocument || document) && b2.defaultView || window, a2.getSelection) {
            a2 = a2.getSelection();
            var e3 = c2.textContent.length, f2 = Math.min(d2.start, e3);
            d2 = void 0 === d2.end ? f2 : Math.min(d2.end, e3);
            !a2.extend && f2 > d2 && (e3 = d2, d2 = f2, f2 = e3);
            e3 = Ke$3(c2, f2);
            var g2 = Ke$3(
              c2,
              d2
            );
            e3 && g2 && (1 !== a2.rangeCount || a2.anchorNode !== e3.node || a2.anchorOffset !== e3.offset || a2.focusNode !== g2.node || a2.focusOffset !== g2.offset) && (b2 = b2.createRange(), b2.setStart(e3.node, e3.offset), a2.removeAllRanges(), f2 > d2 ? (a2.addRange(b2), a2.extend(g2.node, g2.offset)) : (b2.setEnd(g2.node, g2.offset), a2.addRange(b2)));
          }
        }
        b2 = [];
        for (a2 = c2; a2 = a2.parentNode; )
          1 === a2.nodeType && b2.push({ element: a2, left: a2.scrollLeft, top: a2.scrollTop });
        "function" === typeof c2.focus && c2.focus();
        for (c2 = 0; c2 < b2.length; c2++)
          a2 = b2[c2], a2.element.scrollLeft = a2.left, a2.element.scrollTop = a2.top;
      }
    }
    var Pe$4 = ia && "documentMode" in document && 11 >= document.documentMode, Qe$3 = null, Re$3 = null, Se$3 = null, Te$2 = false;
    function Ue$2(a2, b2, c2) {
      var d2 = c2.window === c2 ? c2.document : 9 === c2.nodeType ? c2 : c2.ownerDocument;
      Te$2 || null == Qe$3 || Qe$3 !== Xa(d2) || (d2 = Qe$3, "selectionStart" in d2 && Ne$4(d2) ? d2 = { start: d2.selectionStart, end: d2.selectionEnd } : (d2 = (d2.ownerDocument && d2.ownerDocument.defaultView || window).getSelection(), d2 = { anchorNode: d2.anchorNode, anchorOffset: d2.anchorOffset, focusNode: d2.focusNode, focusOffset: d2.focusOffset }), Se$3 && Ie$2(Se$3, d2) || (Se$3 = d2, d2 = oe$1(Re$3, "onSelect"), 0 < d2.length && (b2 = new td("onSelect", "select", null, b2, c2), a2.push({ event: b2, listeners: d2 }), b2.target = Qe$3)));
    }
    function Ve$3(a2, b2) {
      var c2 = {};
      c2[a2.toLowerCase()] = b2.toLowerCase();
      c2["Webkit" + a2] = "webkit" + b2;
      c2["Moz" + a2] = "moz" + b2;
      return c2;
    }
    var We$3 = { animationend: Ve$3("Animation", "AnimationEnd"), animationiteration: Ve$3("Animation", "AnimationIteration"), animationstart: Ve$3("Animation", "AnimationStart"), transitionend: Ve$3("Transition", "TransitionEnd") }, Xe$3 = {}, Ye$3 = {};
    ia && (Ye$3 = document.createElement("div").style, "AnimationEvent" in window || (delete We$3.animationend.animation, delete We$3.animationiteration.animation, delete We$3.animationstart.animation), "TransitionEvent" in window || delete We$3.transitionend.transition);
    function Ze$3(a2) {
      if (Xe$3[a2])
        return Xe$3[a2];
      if (!We$3[a2])
        return a2;
      var b2 = We$3[a2], c2;
      for (c2 in b2)
        if (b2.hasOwnProperty(c2) && c2 in Ye$3)
          return Xe$3[a2] = b2[c2];
      return a2;
    }
    var $e$4 = Ze$3("animationend"), af = Ze$3("animationiteration"), bf = Ze$3("animationstart"), cf = Ze$3("transitionend"), df = /* @__PURE__ */ new Map(), ef = "abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");
    function ff(a2, b2) {
      df.set(a2, b2);
      fa(b2, [a2]);
    }
    for (var gf = 0; gf < ef.length; gf++) {
      var hf = ef[gf], jf = hf.toLowerCase(), kf = hf[0].toUpperCase() + hf.slice(1);
      ff(jf, "on" + kf);
    }
    ff($e$4, "onAnimationEnd");
    ff(af, "onAnimationIteration");
    ff(bf, "onAnimationStart");
    ff("dblclick", "onDoubleClick");
    ff("focusin", "onFocus");
    ff("focusout", "onBlur");
    ff(cf, "onTransitionEnd");
    ha("onMouseEnter", ["mouseout", "mouseover"]);
    ha("onMouseLeave", ["mouseout", "mouseover"]);
    ha("onPointerEnter", ["pointerout", "pointerover"]);
    ha("onPointerLeave", ["pointerout", "pointerover"]);
    fa("onChange", "change click focusin focusout input keydown keyup selectionchange".split(" "));
    fa("onSelect", "focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));
    fa("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
    fa("onCompositionEnd", "compositionend focusout keydown keypress keyup mousedown".split(" "));
    fa("onCompositionStart", "compositionstart focusout keydown keypress keyup mousedown".split(" "));
    fa("onCompositionUpdate", "compositionupdate focusout keydown keypress keyup mousedown".split(" "));
    var lf = "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "), mf = new Set("cancel close invalid load scroll toggle".split(" ").concat(lf));
    function nf(a2, b2, c2) {
      var d2 = a2.type || "unknown-event";
      a2.currentTarget = c2;
      Ub(d2, b2, void 0, a2);
      a2.currentTarget = null;
    }
    function se$1(a2, b2) {
      b2 = 0 !== (b2 & 4);
      for (var c2 = 0; c2 < a2.length; c2++) {
        var d2 = a2[c2], e3 = d2.event;
        d2 = d2.listeners;
        a: {
          var f2 = void 0;
          if (b2)
            for (var g2 = d2.length - 1; 0 <= g2; g2--) {
              var h2 = d2[g2], k2 = h2.instance, l2 = h2.currentTarget;
              h2 = h2.listener;
              if (k2 !== f2 && e3.isPropagationStopped())
                break a;
              nf(e3, h2, l2);
              f2 = k2;
            }
          else
            for (g2 = 0; g2 < d2.length; g2++) {
              h2 = d2[g2];
              k2 = h2.instance;
              l2 = h2.currentTarget;
              h2 = h2.listener;
              if (k2 !== f2 && e3.isPropagationStopped())
                break a;
              nf(e3, h2, l2);
              f2 = k2;
            }
        }
      }
      if (Qb)
        throw a2 = Rb, Qb = false, Rb = null, a2;
    }
    function D$4(a2, b2) {
      var c2 = b2[of];
      void 0 === c2 && (c2 = b2[of] = /* @__PURE__ */ new Set());
      var d2 = a2 + "__bubble";
      c2.has(d2) || (pf(b2, a2, 2, false), c2.add(d2));
    }
    function qf(a2, b2, c2) {
      var d2 = 0;
      b2 && (d2 |= 4);
      pf(c2, a2, d2, b2);
    }
    var rf = "_reactListening" + Math.random().toString(36).slice(2);
    function sf(a2) {
      if (!a2[rf]) {
        a2[rf] = true;
        da.forEach(function(b3) {
          "selectionchange" !== b3 && (mf.has(b3) || qf(b3, false, a2), qf(b3, true, a2));
        });
        var b2 = 9 === a2.nodeType ? a2 : a2.ownerDocument;
        null === b2 || b2[rf] || (b2[rf] = true, qf("selectionchange", false, b2));
      }
    }
    function pf(a2, b2, c2, d2) {
      switch (jd(b2)) {
        case 1:
          var e3 = ed;
          break;
        case 4:
          e3 = gd;
          break;
        default:
          e3 = fd;
      }
      c2 = e3.bind(null, b2, c2, a2);
      e3 = void 0;
      !Lb || "touchstart" !== b2 && "touchmove" !== b2 && "wheel" !== b2 || (e3 = true);
      d2 ? void 0 !== e3 ? a2.addEventListener(b2, c2, { capture: true, passive: e3 }) : a2.addEventListener(b2, c2, true) : void 0 !== e3 ? a2.addEventListener(b2, c2, { passive: e3 }) : a2.addEventListener(b2, c2, false);
    }
    function hd(a2, b2, c2, d2, e3) {
      var f2 = d2;
      if (0 === (b2 & 1) && 0 === (b2 & 2) && null !== d2)
        a:
          for (; ; ) {
            if (null === d2)
              return;
            var g2 = d2.tag;
            if (3 === g2 || 4 === g2) {
              var h2 = d2.stateNode.containerInfo;
              if (h2 === e3 || 8 === h2.nodeType && h2.parentNode === e3)
                break;
              if (4 === g2)
                for (g2 = d2.return; null !== g2; ) {
                  var k2 = g2.tag;
                  if (3 === k2 || 4 === k2) {
                    if (k2 = g2.stateNode.containerInfo, k2 === e3 || 8 === k2.nodeType && k2.parentNode === e3)
                      return;
                  }
                  g2 = g2.return;
                }
              for (; null !== h2; ) {
                g2 = Wc(h2);
                if (null === g2)
                  return;
                k2 = g2.tag;
                if (5 === k2 || 6 === k2) {
                  d2 = f2 = g2;
                  continue a;
                }
                h2 = h2.parentNode;
              }
            }
            d2 = d2.return;
          }
      Jb(function() {
        var d3 = f2, e4 = xb(c2), g3 = [];
        a: {
          var h3 = df.get(a2);
          if (void 0 !== h3) {
            var k3 = td, n2 = a2;
            switch (a2) {
              case "keypress":
                if (0 === od(c2))
                  break a;
              case "keydown":
              case "keyup":
                k3 = Rd;
                break;
              case "focusin":
                n2 = "focus";
                k3 = Fd;
                break;
              case "focusout":
                n2 = "blur";
                k3 = Fd;
                break;
              case "beforeblur":
              case "afterblur":
                k3 = Fd;
                break;
              case "click":
                if (2 === c2.button)
                  break a;
              case "auxclick":
              case "dblclick":
              case "mousedown":
              case "mousemove":
              case "mouseup":
              case "mouseout":
              case "mouseover":
              case "contextmenu":
                k3 = Bd;
                break;
              case "drag":
              case "dragend":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "dragstart":
              case "drop":
                k3 = Dd;
                break;
              case "touchcancel":
              case "touchend":
              case "touchmove":
              case "touchstart":
                k3 = Vd;
                break;
              case $e$4:
              case af:
              case bf:
                k3 = Hd;
                break;
              case cf:
                k3 = Xd;
                break;
              case "scroll":
                k3 = vd;
                break;
              case "wheel":
                k3 = Zd;
                break;
              case "copy":
              case "cut":
              case "paste":
                k3 = Jd;
                break;
              case "gotpointercapture":
              case "lostpointercapture":
              case "pointercancel":
              case "pointerdown":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "pointerup":
                k3 = Td;
            }
            var t2 = 0 !== (b2 & 4), J2 = !t2 && "scroll" === a2, x2 = t2 ? null !== h3 ? h3 + "Capture" : null : h3;
            t2 = [];
            for (var w2 = d3, u2; null !== w2; ) {
              u2 = w2;
              var F2 = u2.stateNode;
              5 === u2.tag && null !== F2 && (u2 = F2, null !== x2 && (F2 = Kb(w2, x2), null != F2 && t2.push(tf(w2, F2, u2))));
              if (J2)
                break;
              w2 = w2.return;
            }
            0 < t2.length && (h3 = new k3(h3, n2, null, c2, e4), g3.push({ event: h3, listeners: t2 }));
          }
        }
        if (0 === (b2 & 7)) {
          a: {
            h3 = "mouseover" === a2 || "pointerover" === a2;
            k3 = "mouseout" === a2 || "pointerout" === a2;
            if (h3 && c2 !== wb && (n2 = c2.relatedTarget || c2.fromElement) && (Wc(n2) || n2[uf]))
              break a;
            if (k3 || h3) {
              h3 = e4.window === e4 ? e4 : (h3 = e4.ownerDocument) ? h3.defaultView || h3.parentWindow : window;
              if (k3) {
                if (n2 = c2.relatedTarget || c2.toElement, k3 = d3, n2 = n2 ? Wc(n2) : null, null !== n2 && (J2 = Vb(n2), n2 !== J2 || 5 !== n2.tag && 6 !== n2.tag))
                  n2 = null;
              } else
                k3 = null, n2 = d3;
              if (k3 !== n2) {
                t2 = Bd;
                F2 = "onMouseLeave";
                x2 = "onMouseEnter";
                w2 = "mouse";
                if ("pointerout" === a2 || "pointerover" === a2)
                  t2 = Td, F2 = "onPointerLeave", x2 = "onPointerEnter", w2 = "pointer";
                J2 = null == k3 ? h3 : ue$3(k3);
                u2 = null == n2 ? h3 : ue$3(n2);
                h3 = new t2(F2, w2 + "leave", k3, c2, e4);
                h3.target = J2;
                h3.relatedTarget = u2;
                F2 = null;
                Wc(e4) === d3 && (t2 = new t2(x2, w2 + "enter", n2, c2, e4), t2.target = u2, t2.relatedTarget = J2, F2 = t2);
                J2 = F2;
                if (k3 && n2)
                  b: {
                    t2 = k3;
                    x2 = n2;
                    w2 = 0;
                    for (u2 = t2; u2; u2 = vf(u2))
                      w2++;
                    u2 = 0;
                    for (F2 = x2; F2; F2 = vf(F2))
                      u2++;
                    for (; 0 < w2 - u2; )
                      t2 = vf(t2), w2--;
                    for (; 0 < u2 - w2; )
                      x2 = vf(x2), u2--;
                    for (; w2--; ) {
                      if (t2 === x2 || null !== x2 && t2 === x2.alternate)
                        break b;
                      t2 = vf(t2);
                      x2 = vf(x2);
                    }
                    t2 = null;
                  }
                else
                  t2 = null;
                null !== k3 && wf(g3, h3, k3, t2, false);
                null !== n2 && null !== J2 && wf(g3, J2, n2, t2, true);
              }
            }
          }
          a: {
            h3 = d3 ? ue$3(d3) : window;
            k3 = h3.nodeName && h3.nodeName.toLowerCase();
            if ("select" === k3 || "input" === k3 && "file" === h3.type)
              var na = ve$1;
            else if (me$2(h3))
              if (we$2)
                na = Fe$2;
              else {
                na = De$3;
                var xa = Ce;
              }
            else
              (k3 = h3.nodeName) && "input" === k3.toLowerCase() && ("checkbox" === h3.type || "radio" === h3.type) && (na = Ee$3);
            if (na && (na = na(a2, d3))) {
              ne(g3, na, c2, e4);
              break a;
            }
            xa && xa(a2, h3, d3);
            "focusout" === a2 && (xa = h3._wrapperState) && xa.controlled && "number" === h3.type && cb(h3, "number", h3.value);
          }
          xa = d3 ? ue$3(d3) : window;
          switch (a2) {
            case "focusin":
              if (me$2(xa) || "true" === xa.contentEditable)
                Qe$3 = xa, Re$3 = d3, Se$3 = null;
              break;
            case "focusout":
              Se$3 = Re$3 = Qe$3 = null;
              break;
            case "mousedown":
              Te$2 = true;
              break;
            case "contextmenu":
            case "mouseup":
            case "dragend":
              Te$2 = false;
              Ue$2(g3, c2, e4);
              break;
            case "selectionchange":
              if (Pe$4)
                break;
            case "keydown":
            case "keyup":
              Ue$2(g3, c2, e4);
          }
          var $a;
          if (ae$1)
            b: {
              switch (a2) {
                case "compositionstart":
                  var ba = "onCompositionStart";
                  break b;
                case "compositionend":
                  ba = "onCompositionEnd";
                  break b;
                case "compositionupdate":
                  ba = "onCompositionUpdate";
                  break b;
              }
              ba = void 0;
            }
          else
            ie$1 ? ge$2(a2, c2) && (ba = "onCompositionEnd") : "keydown" === a2 && 229 === c2.keyCode && (ba = "onCompositionStart");
          ba && (de$3 && "ko" !== c2.locale && (ie$1 || "onCompositionStart" !== ba ? "onCompositionEnd" === ba && ie$1 && ($a = nd()) : (kd = e4, ld = "value" in kd ? kd.value : kd.textContent, ie$1 = true)), xa = oe$1(d3, ba), 0 < xa.length && (ba = new Ld(ba, a2, null, c2, e4), g3.push({ event: ba, listeners: xa }), $a ? ba.data = $a : ($a = he$3(c2), null !== $a && (ba.data = $a))));
          if ($a = ce$2 ? je$3(a2, c2) : ke$1(a2, c2))
            d3 = oe$1(d3, "onBeforeInput"), 0 < d3.length && (e4 = new Ld("onBeforeInput", "beforeinput", null, c2, e4), g3.push({ event: e4, listeners: d3 }), e4.data = $a);
        }
        se$1(g3, b2);
      });
    }
    function tf(a2, b2, c2) {
      return { instance: a2, listener: b2, currentTarget: c2 };
    }
    function oe$1(a2, b2) {
      for (var c2 = b2 + "Capture", d2 = []; null !== a2; ) {
        var e3 = a2, f2 = e3.stateNode;
        5 === e3.tag && null !== f2 && (e3 = f2, f2 = Kb(a2, c2), null != f2 && d2.unshift(tf(a2, f2, e3)), f2 = Kb(a2, b2), null != f2 && d2.push(tf(a2, f2, e3)));
        a2 = a2.return;
      }
      return d2;
    }
    function vf(a2) {
      if (null === a2)
        return null;
      do
        a2 = a2.return;
      while (a2 && 5 !== a2.tag);
      return a2 ? a2 : null;
    }
    function wf(a2, b2, c2, d2, e3) {
      for (var f2 = b2._reactName, g2 = []; null !== c2 && c2 !== d2; ) {
        var h2 = c2, k2 = h2.alternate, l2 = h2.stateNode;
        if (null !== k2 && k2 === d2)
          break;
        5 === h2.tag && null !== l2 && (h2 = l2, e3 ? (k2 = Kb(c2, f2), null != k2 && g2.unshift(tf(c2, k2, h2))) : e3 || (k2 = Kb(c2, f2), null != k2 && g2.push(tf(c2, k2, h2))));
        c2 = c2.return;
      }
      0 !== g2.length && a2.push({ event: b2, listeners: g2 });
    }
    var xf = /\r\n?/g, yf = /\u0000|\uFFFD/g;
    function zf(a2) {
      return ("string" === typeof a2 ? a2 : "" + a2).replace(xf, "\n").replace(yf, "");
    }
    function Af(a2, b2, c2) {
      b2 = zf(b2);
      if (zf(a2) !== b2 && c2)
        throw Error(p$5(425));
    }
    function Bf() {
    }
    var Cf = null, Df = null;
    function Ef(a2, b2) {
      return "textarea" === a2 || "noscript" === a2 || "string" === typeof b2.children || "number" === typeof b2.children || "object" === typeof b2.dangerouslySetInnerHTML && null !== b2.dangerouslySetInnerHTML && null != b2.dangerouslySetInnerHTML.__html;
    }
    var Ff = "function" === typeof setTimeout ? setTimeout : void 0, Gf = "function" === typeof clearTimeout ? clearTimeout : void 0, Hf = "function" === typeof Promise ? Promise : void 0, Jf = "function" === typeof queueMicrotask ? queueMicrotask : "undefined" !== typeof Hf ? function(a2) {
      return Hf.resolve(null).then(a2).catch(If);
    } : Ff;
    function If(a2) {
      setTimeout(function() {
        throw a2;
      });
    }
    function Kf(a2, b2) {
      var c2 = b2, d2 = 0;
      do {
        var e3 = c2.nextSibling;
        a2.removeChild(c2);
        if (e3 && 8 === e3.nodeType)
          if (c2 = e3.data, "/$" === c2) {
            if (0 === d2) {
              a2.removeChild(e3);
              bd(b2);
              return;
            }
            d2--;
          } else
            "$" !== c2 && "$?" !== c2 && "$!" !== c2 || d2++;
        c2 = e3;
      } while (c2);
      bd(b2);
    }
    function Lf(a2) {
      for (; null != a2; a2 = a2.nextSibling) {
        var b2 = a2.nodeType;
        if (1 === b2 || 3 === b2)
          break;
        if (8 === b2) {
          b2 = a2.data;
          if ("$" === b2 || "$!" === b2 || "$?" === b2)
            break;
          if ("/$" === b2)
            return null;
        }
      }
      return a2;
    }
    function Mf(a2) {
      a2 = a2.previousSibling;
      for (var b2 = 0; a2; ) {
        if (8 === a2.nodeType) {
          var c2 = a2.data;
          if ("$" === c2 || "$!" === c2 || "$?" === c2) {
            if (0 === b2)
              return a2;
            b2--;
          } else
            "/$" === c2 && b2++;
        }
        a2 = a2.previousSibling;
      }
      return null;
    }
    var Nf = Math.random().toString(36).slice(2), Of = "__reactFiber$" + Nf, Pf = "__reactProps$" + Nf, uf = "__reactContainer$" + Nf, of = "__reactEvents$" + Nf, Qf = "__reactListeners$" + Nf, Rf = "__reactHandles$" + Nf;
    function Wc(a2) {
      var b2 = a2[Of];
      if (b2)
        return b2;
      for (var c2 = a2.parentNode; c2; ) {
        if (b2 = c2[uf] || c2[Of]) {
          c2 = b2.alternate;
          if (null !== b2.child || null !== c2 && null !== c2.child)
            for (a2 = Mf(a2); null !== a2; ) {
              if (c2 = a2[Of])
                return c2;
              a2 = Mf(a2);
            }
          return b2;
        }
        a2 = c2;
        c2 = a2.parentNode;
      }
      return null;
    }
    function Cb(a2) {
      a2 = a2[Of] || a2[uf];
      return !a2 || 5 !== a2.tag && 6 !== a2.tag && 13 !== a2.tag && 3 !== a2.tag ? null : a2;
    }
    function ue$3(a2) {
      if (5 === a2.tag || 6 === a2.tag)
        return a2.stateNode;
      throw Error(p$5(33));
    }
    function Db(a2) {
      return a2[Pf] || null;
    }
    var Sf = [], Tf = -1;
    function Uf(a2) {
      return { current: a2 };
    }
    function E$1(a2) {
      0 > Tf || (a2.current = Sf[Tf], Sf[Tf] = null, Tf--);
    }
    function G$1(a2, b2) {
      Tf++;
      Sf[Tf] = a2.current;
      a2.current = b2;
    }
    var Vf = {}, H$1 = Uf(Vf), Wf = Uf(false), Xf = Vf;
    function Yf(a2, b2) {
      var c2 = a2.type.contextTypes;
      if (!c2)
        return Vf;
      var d2 = a2.stateNode;
      if (d2 && d2.__reactInternalMemoizedUnmaskedChildContext === b2)
        return d2.__reactInternalMemoizedMaskedChildContext;
      var e3 = {}, f2;
      for (f2 in c2)
        e3[f2] = b2[f2];
      d2 && (a2 = a2.stateNode, a2.__reactInternalMemoizedUnmaskedChildContext = b2, a2.__reactInternalMemoizedMaskedChildContext = e3);
      return e3;
    }
    function Zf(a2) {
      a2 = a2.childContextTypes;
      return null !== a2 && void 0 !== a2;
    }
    function $f() {
      E$1(Wf);
      E$1(H$1);
    }
    function ag(a2, b2, c2) {
      if (H$1.current !== Vf)
        throw Error(p$5(168));
      G$1(H$1, b2);
      G$1(Wf, c2);
    }
    function bg(a2, b2, c2) {
      var d2 = a2.stateNode;
      b2 = b2.childContextTypes;
      if ("function" !== typeof d2.getChildContext)
        return c2;
      d2 = d2.getChildContext();
      for (var e3 in d2)
        if (!(e3 in b2))
          throw Error(p$5(108, Ra(a2) || "Unknown", e3));
      return A$1({}, c2, d2);
    }
    function cg(a2) {
      a2 = (a2 = a2.stateNode) && a2.__reactInternalMemoizedMergedChildContext || Vf;
      Xf = H$1.current;
      G$1(H$1, a2);
      G$1(Wf, Wf.current);
      return true;
    }
    function dg(a2, b2, c2) {
      var d2 = a2.stateNode;
      if (!d2)
        throw Error(p$5(169));
      c2 ? (a2 = bg(a2, b2, Xf), d2.__reactInternalMemoizedMergedChildContext = a2, E$1(Wf), E$1(H$1), G$1(H$1, a2)) : E$1(Wf);
      G$1(Wf, c2);
    }
    var eg = null, fg = false, gg = false;
    function hg(a2) {
      null === eg ? eg = [a2] : eg.push(a2);
    }
    function ig(a2) {
      fg = true;
      hg(a2);
    }
    function jg() {
      if (!gg && null !== eg) {
        gg = true;
        var a2 = 0, b2 = C$3;
        try {
          var c2 = eg;
          for (C$3 = 1; a2 < c2.length; a2++) {
            var d2 = c2[a2];
            do
              d2 = d2(true);
            while (null !== d2);
          }
          eg = null;
          fg = false;
        } catch (e3) {
          throw null !== eg && (eg = eg.slice(a2 + 1)), ac(fc, jg), e3;
        } finally {
          C$3 = b2, gg = false;
        }
      }
      return null;
    }
    var kg = [], lg = 0, mg = null, ng = 0, og = [], pg = 0, qg = null, rg = 1, sg = "";
    function tg(a2, b2) {
      kg[lg++] = ng;
      kg[lg++] = mg;
      mg = a2;
      ng = b2;
    }
    function ug(a2, b2, c2) {
      og[pg++] = rg;
      og[pg++] = sg;
      og[pg++] = qg;
      qg = a2;
      var d2 = rg;
      a2 = sg;
      var e3 = 32 - oc(d2) - 1;
      d2 &= ~(1 << e3);
      c2 += 1;
      var f2 = 32 - oc(b2) + e3;
      if (30 < f2) {
        var g2 = e3 - e3 % 5;
        f2 = (d2 & (1 << g2) - 1).toString(32);
        d2 >>= g2;
        e3 -= g2;
        rg = 1 << 32 - oc(b2) + e3 | c2 << e3 | d2;
        sg = f2 + a2;
      } else
        rg = 1 << f2 | c2 << e3 | d2, sg = a2;
    }
    function vg(a2) {
      null !== a2.return && (tg(a2, 1), ug(a2, 1, 0));
    }
    function wg(a2) {
      for (; a2 === mg; )
        mg = kg[--lg], kg[lg] = null, ng = kg[--lg], kg[lg] = null;
      for (; a2 === qg; )
        qg = og[--pg], og[pg] = null, sg = og[--pg], og[pg] = null, rg = og[--pg], og[pg] = null;
    }
    var xg = null, yg = null, I$7 = false, zg = null;
    function Ag(a2, b2) {
      var c2 = Bg(5, null, null, 0);
      c2.elementType = "DELETED";
      c2.stateNode = b2;
      c2.return = a2;
      b2 = a2.deletions;
      null === b2 ? (a2.deletions = [c2], a2.flags |= 16) : b2.push(c2);
    }
    function Cg(a2, b2) {
      switch (a2.tag) {
        case 5:
          var c2 = a2.type;
          b2 = 1 !== b2.nodeType || c2.toLowerCase() !== b2.nodeName.toLowerCase() ? null : b2;
          return null !== b2 ? (a2.stateNode = b2, xg = a2, yg = Lf(b2.firstChild), true) : false;
        case 6:
          return b2 = "" === a2.pendingProps || 3 !== b2.nodeType ? null : b2, null !== b2 ? (a2.stateNode = b2, xg = a2, yg = null, true) : false;
        case 13:
          return b2 = 8 !== b2.nodeType ? null : b2, null !== b2 ? (c2 = null !== qg ? { id: rg, overflow: sg } : null, a2.memoizedState = { dehydrated: b2, treeContext: c2, retryLane: 1073741824 }, c2 = Bg(18, null, null, 0), c2.stateNode = b2, c2.return = a2, a2.child = c2, xg = a2, yg = null, true) : false;
        default:
          return false;
      }
    }
    function Dg(a2) {
      return 0 !== (a2.mode & 1) && 0 === (a2.flags & 128);
    }
    function Eg(a2) {
      if (I$7) {
        var b2 = yg;
        if (b2) {
          var c2 = b2;
          if (!Cg(a2, b2)) {
            if (Dg(a2))
              throw Error(p$5(418));
            b2 = Lf(c2.nextSibling);
            var d2 = xg;
            b2 && Cg(a2, b2) ? Ag(d2, c2) : (a2.flags = a2.flags & -4097 | 2, I$7 = false, xg = a2);
          }
        } else {
          if (Dg(a2))
            throw Error(p$5(418));
          a2.flags = a2.flags & -4097 | 2;
          I$7 = false;
          xg = a2;
        }
      }
    }
    function Fg(a2) {
      for (a2 = a2.return; null !== a2 && 5 !== a2.tag && 3 !== a2.tag && 13 !== a2.tag; )
        a2 = a2.return;
      xg = a2;
    }
    function Gg(a2) {
      if (a2 !== xg)
        return false;
      if (!I$7)
        return Fg(a2), I$7 = true, false;
      var b2;
      (b2 = 3 !== a2.tag) && !(b2 = 5 !== a2.tag) && (b2 = a2.type, b2 = "head" !== b2 && "body" !== b2 && !Ef(a2.type, a2.memoizedProps));
      if (b2 && (b2 = yg)) {
        if (Dg(a2))
          throw Hg(), Error(p$5(418));
        for (; b2; )
          Ag(a2, b2), b2 = Lf(b2.nextSibling);
      }
      Fg(a2);
      if (13 === a2.tag) {
        a2 = a2.memoizedState;
        a2 = null !== a2 ? a2.dehydrated : null;
        if (!a2)
          throw Error(p$5(317));
        a: {
          a2 = a2.nextSibling;
          for (b2 = 0; a2; ) {
            if (8 === a2.nodeType) {
              var c2 = a2.data;
              if ("/$" === c2) {
                if (0 === b2) {
                  yg = Lf(a2.nextSibling);
                  break a;
                }
                b2--;
              } else
                "$" !== c2 && "$!" !== c2 && "$?" !== c2 || b2++;
            }
            a2 = a2.nextSibling;
          }
          yg = null;
        }
      } else
        yg = xg ? Lf(a2.stateNode.nextSibling) : null;
      return true;
    }
    function Hg() {
      for (var a2 = yg; a2; )
        a2 = Lf(a2.nextSibling);
    }
    function Ig() {
      yg = xg = null;
      I$7 = false;
    }
    function Jg(a2) {
      null === zg ? zg = [a2] : zg.push(a2);
    }
    var Kg = ua.ReactCurrentBatchConfig;
    function Lg(a2, b2) {
      if (a2 && a2.defaultProps) {
        b2 = A$1({}, b2);
        a2 = a2.defaultProps;
        for (var c2 in a2)
          void 0 === b2[c2] && (b2[c2] = a2[c2]);
        return b2;
      }
      return b2;
    }
    var Mg = Uf(null), Ng = null, Og = null, Pg = null;
    function Qg() {
      Pg = Og = Ng = null;
    }
    function Rg(a2) {
      var b2 = Mg.current;
      E$1(Mg);
      a2._currentValue = b2;
    }
    function Sg(a2, b2, c2) {
      for (; null !== a2; ) {
        var d2 = a2.alternate;
        (a2.childLanes & b2) !== b2 ? (a2.childLanes |= b2, null !== d2 && (d2.childLanes |= b2)) : null !== d2 && (d2.childLanes & b2) !== b2 && (d2.childLanes |= b2);
        if (a2 === c2)
          break;
        a2 = a2.return;
      }
    }
    function Tg(a2, b2) {
      Ng = a2;
      Pg = Og = null;
      a2 = a2.dependencies;
      null !== a2 && null !== a2.firstContext && (0 !== (a2.lanes & b2) && (Ug = true), a2.firstContext = null);
    }
    function Vg(a2) {
      var b2 = a2._currentValue;
      if (Pg !== a2)
        if (a2 = { context: a2, memoizedValue: b2, next: null }, null === Og) {
          if (null === Ng)
            throw Error(p$5(308));
          Og = a2;
          Ng.dependencies = { lanes: 0, firstContext: a2 };
        } else
          Og = Og.next = a2;
      return b2;
    }
    var Wg = null;
    function Xg(a2) {
      null === Wg ? Wg = [a2] : Wg.push(a2);
    }
    function Yg(a2, b2, c2, d2) {
      var e3 = b2.interleaved;
      null === e3 ? (c2.next = c2, Xg(b2)) : (c2.next = e3.next, e3.next = c2);
      b2.interleaved = c2;
      return Zg(a2, d2);
    }
    function Zg(a2, b2) {
      a2.lanes |= b2;
      var c2 = a2.alternate;
      null !== c2 && (c2.lanes |= b2);
      c2 = a2;
      for (a2 = a2.return; null !== a2; )
        a2.childLanes |= b2, c2 = a2.alternate, null !== c2 && (c2.childLanes |= b2), c2 = a2, a2 = a2.return;
      return 3 === c2.tag ? c2.stateNode : null;
    }
    var $g = false;
    function ah(a2) {
      a2.updateQueue = { baseState: a2.memoizedState, firstBaseUpdate: null, lastBaseUpdate: null, shared: { pending: null, interleaved: null, lanes: 0 }, effects: null };
    }
    function bh(a2, b2) {
      a2 = a2.updateQueue;
      b2.updateQueue === a2 && (b2.updateQueue = { baseState: a2.baseState, firstBaseUpdate: a2.firstBaseUpdate, lastBaseUpdate: a2.lastBaseUpdate, shared: a2.shared, effects: a2.effects });
    }
    function ch(a2, b2) {
      return { eventTime: a2, lane: b2, tag: 0, payload: null, callback: null, next: null };
    }
    function dh(a2, b2, c2) {
      var d2 = a2.updateQueue;
      if (null === d2)
        return null;
      d2 = d2.shared;
      if (0 !== (K & 2)) {
        var e3 = d2.pending;
        null === e3 ? b2.next = b2 : (b2.next = e3.next, e3.next = b2);
        d2.pending = b2;
        return Zg(a2, c2);
      }
      e3 = d2.interleaved;
      null === e3 ? (b2.next = b2, Xg(d2)) : (b2.next = e3.next, e3.next = b2);
      d2.interleaved = b2;
      return Zg(a2, c2);
    }
    function eh(a2, b2, c2) {
      b2 = b2.updateQueue;
      if (null !== b2 && (b2 = b2.shared, 0 !== (c2 & 4194240))) {
        var d2 = b2.lanes;
        d2 &= a2.pendingLanes;
        c2 |= d2;
        b2.lanes = c2;
        Cc(a2, c2);
      }
    }
    function fh(a2, b2) {
      var c2 = a2.updateQueue, d2 = a2.alternate;
      if (null !== d2 && (d2 = d2.updateQueue, c2 === d2)) {
        var e3 = null, f2 = null;
        c2 = c2.firstBaseUpdate;
        if (null !== c2) {
          do {
            var g2 = { eventTime: c2.eventTime, lane: c2.lane, tag: c2.tag, payload: c2.payload, callback: c2.callback, next: null };
            null === f2 ? e3 = f2 = g2 : f2 = f2.next = g2;
            c2 = c2.next;
          } while (null !== c2);
          null === f2 ? e3 = f2 = b2 : f2 = f2.next = b2;
        } else
          e3 = f2 = b2;
        c2 = { baseState: d2.baseState, firstBaseUpdate: e3, lastBaseUpdate: f2, shared: d2.shared, effects: d2.effects };
        a2.updateQueue = c2;
        return;
      }
      a2 = c2.lastBaseUpdate;
      null === a2 ? c2.firstBaseUpdate = b2 : a2.next = b2;
      c2.lastBaseUpdate = b2;
    }
    function gh(a2, b2, c2, d2) {
      var e3 = a2.updateQueue;
      $g = false;
      var f2 = e3.firstBaseUpdate, g2 = e3.lastBaseUpdate, h2 = e3.shared.pending;
      if (null !== h2) {
        e3.shared.pending = null;
        var k2 = h2, l2 = k2.next;
        k2.next = null;
        null === g2 ? f2 = l2 : g2.next = l2;
        g2 = k2;
        var m2 = a2.alternate;
        null !== m2 && (m2 = m2.updateQueue, h2 = m2.lastBaseUpdate, h2 !== g2 && (null === h2 ? m2.firstBaseUpdate = l2 : h2.next = l2, m2.lastBaseUpdate = k2));
      }
      if (null !== f2) {
        var q2 = e3.baseState;
        g2 = 0;
        m2 = l2 = k2 = null;
        h2 = f2;
        do {
          var r2 = h2.lane, y2 = h2.eventTime;
          if ((d2 & r2) === r2) {
            null !== m2 && (m2 = m2.next = {
              eventTime: y2,
              lane: 0,
              tag: h2.tag,
              payload: h2.payload,
              callback: h2.callback,
              next: null
            });
            a: {
              var n2 = a2, t2 = h2;
              r2 = b2;
              y2 = c2;
              switch (t2.tag) {
                case 1:
                  n2 = t2.payload;
                  if ("function" === typeof n2) {
                    q2 = n2.call(y2, q2, r2);
                    break a;
                  }
                  q2 = n2;
                  break a;
                case 3:
                  n2.flags = n2.flags & -65537 | 128;
                case 0:
                  n2 = t2.payload;
                  r2 = "function" === typeof n2 ? n2.call(y2, q2, r2) : n2;
                  if (null === r2 || void 0 === r2)
                    break a;
                  q2 = A$1({}, q2, r2);
                  break a;
                case 2:
                  $g = true;
              }
            }
            null !== h2.callback && 0 !== h2.lane && (a2.flags |= 64, r2 = e3.effects, null === r2 ? e3.effects = [h2] : r2.push(h2));
          } else
            y2 = { eventTime: y2, lane: r2, tag: h2.tag, payload: h2.payload, callback: h2.callback, next: null }, null === m2 ? (l2 = m2 = y2, k2 = q2) : m2 = m2.next = y2, g2 |= r2;
          h2 = h2.next;
          if (null === h2)
            if (h2 = e3.shared.pending, null === h2)
              break;
            else
              r2 = h2, h2 = r2.next, r2.next = null, e3.lastBaseUpdate = r2, e3.shared.pending = null;
        } while (1);
        null === m2 && (k2 = q2);
        e3.baseState = k2;
        e3.firstBaseUpdate = l2;
        e3.lastBaseUpdate = m2;
        b2 = e3.shared.interleaved;
        if (null !== b2) {
          e3 = b2;
          do
            g2 |= e3.lane, e3 = e3.next;
          while (e3 !== b2);
        } else
          null === f2 && (e3.shared.lanes = 0);
        hh |= g2;
        a2.lanes = g2;
        a2.memoizedState = q2;
      }
    }
    function ih(a2, b2, c2) {
      a2 = b2.effects;
      b2.effects = null;
      if (null !== a2)
        for (b2 = 0; b2 < a2.length; b2++) {
          var d2 = a2[b2], e3 = d2.callback;
          if (null !== e3) {
            d2.callback = null;
            d2 = c2;
            if ("function" !== typeof e3)
              throw Error(p$5(191, e3));
            e3.call(d2);
          }
        }
    }
    var jh = new aa.Component().refs;
    function kh(a2, b2, c2, d2) {
      b2 = a2.memoizedState;
      c2 = c2(d2, b2);
      c2 = null === c2 || void 0 === c2 ? b2 : A$1({}, b2, c2);
      a2.memoizedState = c2;
      0 === a2.lanes && (a2.updateQueue.baseState = c2);
    }
    var nh = { isMounted: function(a2) {
      return (a2 = a2._reactInternals) ? Vb(a2) === a2 : false;
    }, enqueueSetState: function(a2, b2, c2) {
      a2 = a2._reactInternals;
      var d2 = L(), e3 = lh(a2), f2 = ch(d2, e3);
      f2.payload = b2;
      void 0 !== c2 && null !== c2 && (f2.callback = c2);
      b2 = dh(a2, f2, e3);
      null !== b2 && (mh(b2, a2, e3, d2), eh(b2, a2, e3));
    }, enqueueReplaceState: function(a2, b2, c2) {
      a2 = a2._reactInternals;
      var d2 = L(), e3 = lh(a2), f2 = ch(d2, e3);
      f2.tag = 1;
      f2.payload = b2;
      void 0 !== c2 && null !== c2 && (f2.callback = c2);
      b2 = dh(a2, f2, e3);
      null !== b2 && (mh(b2, a2, e3, d2), eh(b2, a2, e3));
    }, enqueueForceUpdate: function(a2, b2) {
      a2 = a2._reactInternals;
      var c2 = L(), d2 = lh(a2), e3 = ch(c2, d2);
      e3.tag = 2;
      void 0 !== b2 && null !== b2 && (e3.callback = b2);
      b2 = dh(a2, e3, d2);
      null !== b2 && (mh(b2, a2, d2, c2), eh(b2, a2, d2));
    } };
    function oh(a2, b2, c2, d2, e3, f2, g2) {
      a2 = a2.stateNode;
      return "function" === typeof a2.shouldComponentUpdate ? a2.shouldComponentUpdate(d2, f2, g2) : b2.prototype && b2.prototype.isPureReactComponent ? !Ie$2(c2, d2) || !Ie$2(e3, f2) : true;
    }
    function ph(a2, b2, c2) {
      var d2 = false, e3 = Vf;
      var f2 = b2.contextType;
      "object" === typeof f2 && null !== f2 ? f2 = Vg(f2) : (e3 = Zf(b2) ? Xf : H$1.current, d2 = b2.contextTypes, f2 = (d2 = null !== d2 && void 0 !== d2) ? Yf(a2, e3) : Vf);
      b2 = new b2(c2, f2);
      a2.memoizedState = null !== b2.state && void 0 !== b2.state ? b2.state : null;
      b2.updater = nh;
      a2.stateNode = b2;
      b2._reactInternals = a2;
      d2 && (a2 = a2.stateNode, a2.__reactInternalMemoizedUnmaskedChildContext = e3, a2.__reactInternalMemoizedMaskedChildContext = f2);
      return b2;
    }
    function qh(a2, b2, c2, d2) {
      a2 = b2.state;
      "function" === typeof b2.componentWillReceiveProps && b2.componentWillReceiveProps(c2, d2);
      "function" === typeof b2.UNSAFE_componentWillReceiveProps && b2.UNSAFE_componentWillReceiveProps(c2, d2);
      b2.state !== a2 && nh.enqueueReplaceState(b2, b2.state, null);
    }
    function rh(a2, b2, c2, d2) {
      var e3 = a2.stateNode;
      e3.props = c2;
      e3.state = a2.memoizedState;
      e3.refs = jh;
      ah(a2);
      var f2 = b2.contextType;
      "object" === typeof f2 && null !== f2 ? e3.context = Vg(f2) : (f2 = Zf(b2) ? Xf : H$1.current, e3.context = Yf(a2, f2));
      e3.state = a2.memoizedState;
      f2 = b2.getDerivedStateFromProps;
      "function" === typeof f2 && (kh(a2, b2, f2, c2), e3.state = a2.memoizedState);
      "function" === typeof b2.getDerivedStateFromProps || "function" === typeof e3.getSnapshotBeforeUpdate || "function" !== typeof e3.UNSAFE_componentWillMount && "function" !== typeof e3.componentWillMount || (b2 = e3.state, "function" === typeof e3.componentWillMount && e3.componentWillMount(), "function" === typeof e3.UNSAFE_componentWillMount && e3.UNSAFE_componentWillMount(), b2 !== e3.state && nh.enqueueReplaceState(e3, e3.state, null), gh(a2, c2, e3, d2), e3.state = a2.memoizedState);
      "function" === typeof e3.componentDidMount && (a2.flags |= 4194308);
    }
    function sh(a2, b2, c2) {
      a2 = c2.ref;
      if (null !== a2 && "function" !== typeof a2 && "object" !== typeof a2) {
        if (c2._owner) {
          c2 = c2._owner;
          if (c2) {
            if (1 !== c2.tag)
              throw Error(p$5(309));
            var d2 = c2.stateNode;
          }
          if (!d2)
            throw Error(p$5(147, a2));
          var e3 = d2, f2 = "" + a2;
          if (null !== b2 && null !== b2.ref && "function" === typeof b2.ref && b2.ref._stringRef === f2)
            return b2.ref;
          b2 = function(a3) {
            var b3 = e3.refs;
            b3 === jh && (b3 = e3.refs = {});
            null === a3 ? delete b3[f2] : b3[f2] = a3;
          };
          b2._stringRef = f2;
          return b2;
        }
        if ("string" !== typeof a2)
          throw Error(p$5(284));
        if (!c2._owner)
          throw Error(p$5(290, a2));
      }
      return a2;
    }
    function th(a2, b2) {
      a2 = Object.prototype.toString.call(b2);
      throw Error(p$5(31, "[object Object]" === a2 ? "object with keys {" + Object.keys(b2).join(", ") + "}" : a2));
    }
    function uh(a2) {
      var b2 = a2._init;
      return b2(a2._payload);
    }
    function vh(a2) {
      function b2(b3, c3) {
        if (a2) {
          var d3 = b3.deletions;
          null === d3 ? (b3.deletions = [c3], b3.flags |= 16) : d3.push(c3);
        }
      }
      function c2(c3, d3) {
        if (!a2)
          return null;
        for (; null !== d3; )
          b2(c3, d3), d3 = d3.sibling;
        return null;
      }
      function d2(a3, b3) {
        for (a3 = /* @__PURE__ */ new Map(); null !== b3; )
          null !== b3.key ? a3.set(b3.key, b3) : a3.set(b3.index, b3), b3 = b3.sibling;
        return a3;
      }
      function e3(a3, b3) {
        a3 = wh(a3, b3);
        a3.index = 0;
        a3.sibling = null;
        return a3;
      }
      function f2(b3, c3, d3) {
        b3.index = d3;
        if (!a2)
          return b3.flags |= 1048576, c3;
        d3 = b3.alternate;
        if (null !== d3)
          return d3 = d3.index, d3 < c3 ? (b3.flags |= 2, c3) : d3;
        b3.flags |= 2;
        return c3;
      }
      function g2(b3) {
        a2 && null === b3.alternate && (b3.flags |= 2);
        return b3;
      }
      function h2(a3, b3, c3, d3) {
        if (null === b3 || 6 !== b3.tag)
          return b3 = xh(c3, a3.mode, d3), b3.return = a3, b3;
        b3 = e3(b3, c3);
        b3.return = a3;
        return b3;
      }
      function k2(a3, b3, c3, d3) {
        var f3 = c3.type;
        if (f3 === ya)
          return m2(a3, b3, c3.props.children, d3, c3.key);
        if (null !== b3 && (b3.elementType === f3 || "object" === typeof f3 && null !== f3 && f3.$$typeof === Ha && uh(f3) === b3.type))
          return d3 = e3(b3, c3.props), d3.ref = sh(a3, b3, c3), d3.return = a3, d3;
        d3 = yh(c3.type, c3.key, c3.props, null, a3.mode, d3);
        d3.ref = sh(a3, b3, c3);
        d3.return = a3;
        return d3;
      }
      function l2(a3, b3, c3, d3) {
        if (null === b3 || 4 !== b3.tag || b3.stateNode.containerInfo !== c3.containerInfo || b3.stateNode.implementation !== c3.implementation)
          return b3 = zh(c3, a3.mode, d3), b3.return = a3, b3;
        b3 = e3(b3, c3.children || []);
        b3.return = a3;
        return b3;
      }
      function m2(a3, b3, c3, d3, f3) {
        if (null === b3 || 7 !== b3.tag)
          return b3 = Ah(c3, a3.mode, d3, f3), b3.return = a3, b3;
        b3 = e3(b3, c3);
        b3.return = a3;
        return b3;
      }
      function q2(a3, b3, c3) {
        if ("string" === typeof b3 && "" !== b3 || "number" === typeof b3)
          return b3 = xh("" + b3, a3.mode, c3), b3.return = a3, b3;
        if ("object" === typeof b3 && null !== b3) {
          switch (b3.$$typeof) {
            case va:
              return c3 = yh(b3.type, b3.key, b3.props, null, a3.mode, c3), c3.ref = sh(a3, null, b3), c3.return = a3, c3;
            case wa:
              return b3 = zh(b3, a3.mode, c3), b3.return = a3, b3;
            case Ha:
              var d3 = b3._init;
              return q2(a3, d3(b3._payload), c3);
          }
          if (eb(b3) || Ka(b3))
            return b3 = Ah(b3, a3.mode, c3, null), b3.return = a3, b3;
          th(a3, b3);
        }
        return null;
      }
      function r2(a3, b3, c3, d3) {
        var e4 = null !== b3 ? b3.key : null;
        if ("string" === typeof c3 && "" !== c3 || "number" === typeof c3)
          return null !== e4 ? null : h2(a3, b3, "" + c3, d3);
        if ("object" === typeof c3 && null !== c3) {
          switch (c3.$$typeof) {
            case va:
              return c3.key === e4 ? k2(a3, b3, c3, d3) : null;
            case wa:
              return c3.key === e4 ? l2(a3, b3, c3, d3) : null;
            case Ha:
              return e4 = c3._init, r2(
                a3,
                b3,
                e4(c3._payload),
                d3
              );
          }
          if (eb(c3) || Ka(c3))
            return null !== e4 ? null : m2(a3, b3, c3, d3, null);
          th(a3, c3);
        }
        return null;
      }
      function y2(a3, b3, c3, d3, e4) {
        if ("string" === typeof d3 && "" !== d3 || "number" === typeof d3)
          return a3 = a3.get(c3) || null, h2(b3, a3, "" + d3, e4);
        if ("object" === typeof d3 && null !== d3) {
          switch (d3.$$typeof) {
            case va:
              return a3 = a3.get(null === d3.key ? c3 : d3.key) || null, k2(b3, a3, d3, e4);
            case wa:
              return a3 = a3.get(null === d3.key ? c3 : d3.key) || null, l2(b3, a3, d3, e4);
            case Ha:
              var f3 = d3._init;
              return y2(a3, b3, c3, f3(d3._payload), e4);
          }
          if (eb(d3) || Ka(d3))
            return a3 = a3.get(c3) || null, m2(b3, a3, d3, e4, null);
          th(b3, d3);
        }
        return null;
      }
      function n2(e4, g3, h3, k3) {
        for (var l3 = null, m3 = null, u2 = g3, w2 = g3 = 0, x2 = null; null !== u2 && w2 < h3.length; w2++) {
          u2.index > w2 ? (x2 = u2, u2 = null) : x2 = u2.sibling;
          var n3 = r2(e4, u2, h3[w2], k3);
          if (null === n3) {
            null === u2 && (u2 = x2);
            break;
          }
          a2 && u2 && null === n3.alternate && b2(e4, u2);
          g3 = f2(n3, g3, w2);
          null === m3 ? l3 = n3 : m3.sibling = n3;
          m3 = n3;
          u2 = x2;
        }
        if (w2 === h3.length)
          return c2(e4, u2), I$7 && tg(e4, w2), l3;
        if (null === u2) {
          for (; w2 < h3.length; w2++)
            u2 = q2(e4, h3[w2], k3), null !== u2 && (g3 = f2(u2, g3, w2), null === m3 ? l3 = u2 : m3.sibling = u2, m3 = u2);
          I$7 && tg(e4, w2);
          return l3;
        }
        for (u2 = d2(e4, u2); w2 < h3.length; w2++)
          x2 = y2(u2, e4, w2, h3[w2], k3), null !== x2 && (a2 && null !== x2.alternate && u2.delete(null === x2.key ? w2 : x2.key), g3 = f2(x2, g3, w2), null === m3 ? l3 = x2 : m3.sibling = x2, m3 = x2);
        a2 && u2.forEach(function(a3) {
          return b2(e4, a3);
        });
        I$7 && tg(e4, w2);
        return l3;
      }
      function t2(e4, g3, h3, k3) {
        var l3 = Ka(h3);
        if ("function" !== typeof l3)
          throw Error(p$5(150));
        h3 = l3.call(h3);
        if (null == h3)
          throw Error(p$5(151));
        for (var u2 = l3 = null, m3 = g3, w2 = g3 = 0, x2 = null, n3 = h3.next(); null !== m3 && !n3.done; w2++, n3 = h3.next()) {
          m3.index > w2 ? (x2 = m3, m3 = null) : x2 = m3.sibling;
          var t3 = r2(e4, m3, n3.value, k3);
          if (null === t3) {
            null === m3 && (m3 = x2);
            break;
          }
          a2 && m3 && null === t3.alternate && b2(e4, m3);
          g3 = f2(t3, g3, w2);
          null === u2 ? l3 = t3 : u2.sibling = t3;
          u2 = t3;
          m3 = x2;
        }
        if (n3.done)
          return c2(
            e4,
            m3
          ), I$7 && tg(e4, w2), l3;
        if (null === m3) {
          for (; !n3.done; w2++, n3 = h3.next())
            n3 = q2(e4, n3.value, k3), null !== n3 && (g3 = f2(n3, g3, w2), null === u2 ? l3 = n3 : u2.sibling = n3, u2 = n3);
          I$7 && tg(e4, w2);
          return l3;
        }
        for (m3 = d2(e4, m3); !n3.done; w2++, n3 = h3.next())
          n3 = y2(m3, e4, w2, n3.value, k3), null !== n3 && (a2 && null !== n3.alternate && m3.delete(null === n3.key ? w2 : n3.key), g3 = f2(n3, g3, w2), null === u2 ? l3 = n3 : u2.sibling = n3, u2 = n3);
        a2 && m3.forEach(function(a3) {
          return b2(e4, a3);
        });
        I$7 && tg(e4, w2);
        return l3;
      }
      function J2(a3, d3, f3, h3) {
        "object" === typeof f3 && null !== f3 && f3.type === ya && null === f3.key && (f3 = f3.props.children);
        if ("object" === typeof f3 && null !== f3) {
          switch (f3.$$typeof) {
            case va:
              a: {
                for (var k3 = f3.key, l3 = d3; null !== l3; ) {
                  if (l3.key === k3) {
                    k3 = f3.type;
                    if (k3 === ya) {
                      if (7 === l3.tag) {
                        c2(a3, l3.sibling);
                        d3 = e3(l3, f3.props.children);
                        d3.return = a3;
                        a3 = d3;
                        break a;
                      }
                    } else if (l3.elementType === k3 || "object" === typeof k3 && null !== k3 && k3.$$typeof === Ha && uh(k3) === l3.type) {
                      c2(a3, l3.sibling);
                      d3 = e3(l3, f3.props);
                      d3.ref = sh(a3, l3, f3);
                      d3.return = a3;
                      a3 = d3;
                      break a;
                    }
                    c2(a3, l3);
                    break;
                  } else
                    b2(a3, l3);
                  l3 = l3.sibling;
                }
                f3.type === ya ? (d3 = Ah(f3.props.children, a3.mode, h3, f3.key), d3.return = a3, a3 = d3) : (h3 = yh(f3.type, f3.key, f3.props, null, a3.mode, h3), h3.ref = sh(a3, d3, f3), h3.return = a3, a3 = h3);
              }
              return g2(a3);
            case wa:
              a: {
                for (l3 = f3.key; null !== d3; ) {
                  if (d3.key === l3)
                    if (4 === d3.tag && d3.stateNode.containerInfo === f3.containerInfo && d3.stateNode.implementation === f3.implementation) {
                      c2(a3, d3.sibling);
                      d3 = e3(d3, f3.children || []);
                      d3.return = a3;
                      a3 = d3;
                      break a;
                    } else {
                      c2(a3, d3);
                      break;
                    }
                  else
                    b2(a3, d3);
                  d3 = d3.sibling;
                }
                d3 = zh(f3, a3.mode, h3);
                d3.return = a3;
                a3 = d3;
              }
              return g2(a3);
            case Ha:
              return l3 = f3._init, J2(a3, d3, l3(f3._payload), h3);
          }
          if (eb(f3))
            return n2(a3, d3, f3, h3);
          if (Ka(f3))
            return t2(a3, d3, f3, h3);
          th(a3, f3);
        }
        return "string" === typeof f3 && "" !== f3 || "number" === typeof f3 ? (f3 = "" + f3, null !== d3 && 6 === d3.tag ? (c2(a3, d3.sibling), d3 = e3(d3, f3), d3.return = a3, a3 = d3) : (c2(a3, d3), d3 = xh(f3, a3.mode, h3), d3.return = a3, a3 = d3), g2(a3)) : c2(a3, d3);
      }
      return J2;
    }
    var Bh = vh(true), Ch = vh(false), Dh = {}, Eh = Uf(Dh), Fh = Uf(Dh), Gh = Uf(Dh);
    function Hh(a2) {
      if (a2 === Dh)
        throw Error(p$5(174));
      return a2;
    }
    function Ih(a2, b2) {
      G$1(Gh, b2);
      G$1(Fh, a2);
      G$1(Eh, Dh);
      a2 = b2.nodeType;
      switch (a2) {
        case 9:
        case 11:
          b2 = (b2 = b2.documentElement) ? b2.namespaceURI : lb(null, "");
          break;
        default:
          a2 = 8 === a2 ? b2.parentNode : b2, b2 = a2.namespaceURI || null, a2 = a2.tagName, b2 = lb(b2, a2);
      }
      E$1(Eh);
      G$1(Eh, b2);
    }
    function Jh() {
      E$1(Eh);
      E$1(Fh);
      E$1(Gh);
    }
    function Kh(a2) {
      Hh(Gh.current);
      var b2 = Hh(Eh.current);
      var c2 = lb(b2, a2.type);
      b2 !== c2 && (G$1(Fh, a2), G$1(Eh, c2));
    }
    function Lh(a2) {
      Fh.current === a2 && (E$1(Eh), E$1(Fh));
    }
    var M$3 = Uf(0);
    function Mh(a2) {
      for (var b2 = a2; null !== b2; ) {
        if (13 === b2.tag) {
          var c2 = b2.memoizedState;
          if (null !== c2 && (c2 = c2.dehydrated, null === c2 || "$?" === c2.data || "$!" === c2.data))
            return b2;
        } else if (19 === b2.tag && void 0 !== b2.memoizedProps.revealOrder) {
          if (0 !== (b2.flags & 128))
            return b2;
        } else if (null !== b2.child) {
          b2.child.return = b2;
          b2 = b2.child;
          continue;
        }
        if (b2 === a2)
          break;
        for (; null === b2.sibling; ) {
          if (null === b2.return || b2.return === a2)
            return null;
          b2 = b2.return;
        }
        b2.sibling.return = b2.return;
        b2 = b2.sibling;
      }
      return null;
    }
    var Nh = [];
    function Oh() {
      for (var a2 = 0; a2 < Nh.length; a2++)
        Nh[a2]._workInProgressVersionPrimary = null;
      Nh.length = 0;
    }
    var Ph = ua.ReactCurrentDispatcher, Qh = ua.ReactCurrentBatchConfig, Rh = 0, N$3 = null, O$2 = null, P$2 = null, Sh = false, Th = false, Uh = 0, Vh = 0;
    function Q$1() {
      throw Error(p$5(321));
    }
    function Wh(a2, b2) {
      if (null === b2)
        return false;
      for (var c2 = 0; c2 < b2.length && c2 < a2.length; c2++)
        if (!He$4(a2[c2], b2[c2]))
          return false;
      return true;
    }
    function Xh(a2, b2, c2, d2, e3, f2) {
      Rh = f2;
      N$3 = b2;
      b2.memoizedState = null;
      b2.updateQueue = null;
      b2.lanes = 0;
      Ph.current = null === a2 || null === a2.memoizedState ? Yh : Zh;
      a2 = c2(d2, e3);
      if (Th) {
        f2 = 0;
        do {
          Th = false;
          Uh = 0;
          if (25 <= f2)
            throw Error(p$5(301));
          f2 += 1;
          P$2 = O$2 = null;
          b2.updateQueue = null;
          Ph.current = $h;
          a2 = c2(d2, e3);
        } while (Th);
      }
      Ph.current = ai;
      b2 = null !== O$2 && null !== O$2.next;
      Rh = 0;
      P$2 = O$2 = N$3 = null;
      Sh = false;
      if (b2)
        throw Error(p$5(300));
      return a2;
    }
    function bi() {
      var a2 = 0 !== Uh;
      Uh = 0;
      return a2;
    }
    function ci() {
      var a2 = { memoizedState: null, baseState: null, baseQueue: null, queue: null, next: null };
      null === P$2 ? N$3.memoizedState = P$2 = a2 : P$2 = P$2.next = a2;
      return P$2;
    }
    function di() {
      if (null === O$2) {
        var a2 = N$3.alternate;
        a2 = null !== a2 ? a2.memoizedState : null;
      } else
        a2 = O$2.next;
      var b2 = null === P$2 ? N$3.memoizedState : P$2.next;
      if (null !== b2)
        P$2 = b2, O$2 = a2;
      else {
        if (null === a2)
          throw Error(p$5(310));
        O$2 = a2;
        a2 = { memoizedState: O$2.memoizedState, baseState: O$2.baseState, baseQueue: O$2.baseQueue, queue: O$2.queue, next: null };
        null === P$2 ? N$3.memoizedState = P$2 = a2 : P$2 = P$2.next = a2;
      }
      return P$2;
    }
    function ei(a2, b2) {
      return "function" === typeof b2 ? b2(a2) : b2;
    }
    function fi(a2) {
      var b2 = di(), c2 = b2.queue;
      if (null === c2)
        throw Error(p$5(311));
      c2.lastRenderedReducer = a2;
      var d2 = O$2, e3 = d2.baseQueue, f2 = c2.pending;
      if (null !== f2) {
        if (null !== e3) {
          var g2 = e3.next;
          e3.next = f2.next;
          f2.next = g2;
        }
        d2.baseQueue = e3 = f2;
        c2.pending = null;
      }
      if (null !== e3) {
        f2 = e3.next;
        d2 = d2.baseState;
        var h2 = g2 = null, k2 = null, l2 = f2;
        do {
          var m2 = l2.lane;
          if ((Rh & m2) === m2)
            null !== k2 && (k2 = k2.next = { lane: 0, action: l2.action, hasEagerState: l2.hasEagerState, eagerState: l2.eagerState, next: null }), d2 = l2.hasEagerState ? l2.eagerState : a2(d2, l2.action);
          else {
            var q2 = {
              lane: m2,
              action: l2.action,
              hasEagerState: l2.hasEagerState,
              eagerState: l2.eagerState,
              next: null
            };
            null === k2 ? (h2 = k2 = q2, g2 = d2) : k2 = k2.next = q2;
            N$3.lanes |= m2;
            hh |= m2;
          }
          l2 = l2.next;
        } while (null !== l2 && l2 !== f2);
        null === k2 ? g2 = d2 : k2.next = h2;
        He$4(d2, b2.memoizedState) || (Ug = true);
        b2.memoizedState = d2;
        b2.baseState = g2;
        b2.baseQueue = k2;
        c2.lastRenderedState = d2;
      }
      a2 = c2.interleaved;
      if (null !== a2) {
        e3 = a2;
        do
          f2 = e3.lane, N$3.lanes |= f2, hh |= f2, e3 = e3.next;
        while (e3 !== a2);
      } else
        null === e3 && (c2.lanes = 0);
      return [b2.memoizedState, c2.dispatch];
    }
    function gi(a2) {
      var b2 = di(), c2 = b2.queue;
      if (null === c2)
        throw Error(p$5(311));
      c2.lastRenderedReducer = a2;
      var d2 = c2.dispatch, e3 = c2.pending, f2 = b2.memoizedState;
      if (null !== e3) {
        c2.pending = null;
        var g2 = e3 = e3.next;
        do
          f2 = a2(f2, g2.action), g2 = g2.next;
        while (g2 !== e3);
        He$4(f2, b2.memoizedState) || (Ug = true);
        b2.memoizedState = f2;
        null === b2.baseQueue && (b2.baseState = f2);
        c2.lastRenderedState = f2;
      }
      return [f2, d2];
    }
    function hi() {
    }
    function ii(a2, b2) {
      var c2 = N$3, d2 = di(), e3 = b2(), f2 = !He$4(d2.memoizedState, e3);
      f2 && (d2.memoizedState = e3, Ug = true);
      d2 = d2.queue;
      ji(ki.bind(null, c2, d2, a2), [a2]);
      if (d2.getSnapshot !== b2 || f2 || null !== P$2 && P$2.memoizedState.tag & 1) {
        c2.flags |= 2048;
        li(9, mi.bind(null, c2, d2, e3, b2), void 0, null);
        if (null === R$1)
          throw Error(p$5(349));
        0 !== (Rh & 30) || ni(c2, b2, e3);
      }
      return e3;
    }
    function ni(a2, b2, c2) {
      a2.flags |= 16384;
      a2 = { getSnapshot: b2, value: c2 };
      b2 = N$3.updateQueue;
      null === b2 ? (b2 = { lastEffect: null, stores: null }, N$3.updateQueue = b2, b2.stores = [a2]) : (c2 = b2.stores, null === c2 ? b2.stores = [a2] : c2.push(a2));
    }
    function mi(a2, b2, c2, d2) {
      b2.value = c2;
      b2.getSnapshot = d2;
      oi(b2) && pi$2(a2);
    }
    function ki(a2, b2, c2) {
      return c2(function() {
        oi(b2) && pi$2(a2);
      });
    }
    function oi(a2) {
      var b2 = a2.getSnapshot;
      a2 = a2.value;
      try {
        var c2 = b2();
        return !He$4(a2, c2);
      } catch (d2) {
        return true;
      }
    }
    function pi$2(a2) {
      var b2 = Zg(a2, 1);
      null !== b2 && mh(b2, a2, 1, -1);
    }
    function qi(a2) {
      var b2 = ci();
      "function" === typeof a2 && (a2 = a2());
      b2.memoizedState = b2.baseState = a2;
      a2 = { pending: null, interleaved: null, lanes: 0, dispatch: null, lastRenderedReducer: ei, lastRenderedState: a2 };
      b2.queue = a2;
      a2 = a2.dispatch = ri.bind(null, N$3, a2);
      return [b2.memoizedState, a2];
    }
    function li(a2, b2, c2, d2) {
      a2 = { tag: a2, create: b2, destroy: c2, deps: d2, next: null };
      b2 = N$3.updateQueue;
      null === b2 ? (b2 = { lastEffect: null, stores: null }, N$3.updateQueue = b2, b2.lastEffect = a2.next = a2) : (c2 = b2.lastEffect, null === c2 ? b2.lastEffect = a2.next = a2 : (d2 = c2.next, c2.next = a2, a2.next = d2, b2.lastEffect = a2));
      return a2;
    }
    function si() {
      return di().memoizedState;
    }
    function ti(a2, b2, c2, d2) {
      var e3 = ci();
      N$3.flags |= a2;
      e3.memoizedState = li(1 | b2, c2, void 0, void 0 === d2 ? null : d2);
    }
    function ui(a2, b2, c2, d2) {
      var e3 = di();
      d2 = void 0 === d2 ? null : d2;
      var f2 = void 0;
      if (null !== O$2) {
        var g2 = O$2.memoizedState;
        f2 = g2.destroy;
        if (null !== d2 && Wh(d2, g2.deps)) {
          e3.memoizedState = li(b2, c2, f2, d2);
          return;
        }
      }
      N$3.flags |= a2;
      e3.memoizedState = li(1 | b2, c2, f2, d2);
    }
    function vi(a2, b2) {
      return ti(8390656, 8, a2, b2);
    }
    function ji(a2, b2) {
      return ui(2048, 8, a2, b2);
    }
    function wi(a2, b2) {
      return ui(4, 2, a2, b2);
    }
    function xi(a2, b2) {
      return ui(4, 4, a2, b2);
    }
    function yi(a2, b2) {
      if ("function" === typeof b2)
        return a2 = a2(), b2(a2), function() {
          b2(null);
        };
      if (null !== b2 && void 0 !== b2)
        return a2 = a2(), b2.current = a2, function() {
          b2.current = null;
        };
    }
    function zi(a2, b2, c2) {
      c2 = null !== c2 && void 0 !== c2 ? c2.concat([a2]) : null;
      return ui(4, 4, yi.bind(null, b2, a2), c2);
    }
    function Ai() {
    }
    function Bi(a2, b2) {
      var c2 = di();
      b2 = void 0 === b2 ? null : b2;
      var d2 = c2.memoizedState;
      if (null !== d2 && null !== b2 && Wh(b2, d2[1]))
        return d2[0];
      c2.memoizedState = [a2, b2];
      return a2;
    }
    function Ci(a2, b2) {
      var c2 = di();
      b2 = void 0 === b2 ? null : b2;
      var d2 = c2.memoizedState;
      if (null !== d2 && null !== b2 && Wh(b2, d2[1]))
        return d2[0];
      a2 = a2();
      c2.memoizedState = [a2, b2];
      return a2;
    }
    function Di(a2, b2, c2) {
      if (0 === (Rh & 21))
        return a2.baseState && (a2.baseState = false, Ug = true), a2.memoizedState = c2;
      He$4(c2, b2) || (c2 = yc(), N$3.lanes |= c2, hh |= c2, a2.baseState = true);
      return b2;
    }
    function Ei(a2, b2) {
      var c2 = C$3;
      C$3 = 0 !== c2 && 4 > c2 ? c2 : 4;
      a2(true);
      var d2 = Qh.transition;
      Qh.transition = {};
      try {
        a2(false), b2();
      } finally {
        C$3 = c2, Qh.transition = d2;
      }
    }
    function Fi() {
      return di().memoizedState;
    }
    function Gi(a2, b2, c2) {
      var d2 = lh(a2);
      c2 = { lane: d2, action: c2, hasEagerState: false, eagerState: null, next: null };
      if (Hi(a2))
        Ii(b2, c2);
      else if (c2 = Yg(a2, b2, c2, d2), null !== c2) {
        var e3 = L();
        mh(c2, a2, d2, e3);
        Ji(c2, b2, d2);
      }
    }
    function ri(a2, b2, c2) {
      var d2 = lh(a2), e3 = { lane: d2, action: c2, hasEagerState: false, eagerState: null, next: null };
      if (Hi(a2))
        Ii(b2, e3);
      else {
        var f2 = a2.alternate;
        if (0 === a2.lanes && (null === f2 || 0 === f2.lanes) && (f2 = b2.lastRenderedReducer, null !== f2))
          try {
            var g2 = b2.lastRenderedState, h2 = f2(g2, c2);
            e3.hasEagerState = true;
            e3.eagerState = h2;
            if (He$4(h2, g2)) {
              var k2 = b2.interleaved;
              null === k2 ? (e3.next = e3, Xg(b2)) : (e3.next = k2.next, k2.next = e3);
              b2.interleaved = e3;
              return;
            }
          } catch (l2) {
          } finally {
          }
        c2 = Yg(a2, b2, e3, d2);
        null !== c2 && (e3 = L(), mh(c2, a2, d2, e3), Ji(c2, b2, d2));
      }
    }
    function Hi(a2) {
      var b2 = a2.alternate;
      return a2 === N$3 || null !== b2 && b2 === N$3;
    }
    function Ii(a2, b2) {
      Th = Sh = true;
      var c2 = a2.pending;
      null === c2 ? b2.next = b2 : (b2.next = c2.next, c2.next = b2);
      a2.pending = b2;
    }
    function Ji(a2, b2, c2) {
      if (0 !== (c2 & 4194240)) {
        var d2 = b2.lanes;
        d2 &= a2.pendingLanes;
        c2 |= d2;
        b2.lanes = c2;
        Cc(a2, c2);
      }
    }
    var ai = { readContext: Vg, useCallback: Q$1, useContext: Q$1, useEffect: Q$1, useImperativeHandle: Q$1, useInsertionEffect: Q$1, useLayoutEffect: Q$1, useMemo: Q$1, useReducer: Q$1, useRef: Q$1, useState: Q$1, useDebugValue: Q$1, useDeferredValue: Q$1, useTransition: Q$1, useMutableSource: Q$1, useSyncExternalStore: Q$1, useId: Q$1, unstable_isNewReconciler: false }, Yh = { readContext: Vg, useCallback: function(a2, b2) {
      ci().memoizedState = [a2, void 0 === b2 ? null : b2];
      return a2;
    }, useContext: Vg, useEffect: vi, useImperativeHandle: function(a2, b2, c2) {
      c2 = null !== c2 && void 0 !== c2 ? c2.concat([a2]) : null;
      return ti(
        4194308,
        4,
        yi.bind(null, b2, a2),
        c2
      );
    }, useLayoutEffect: function(a2, b2) {
      return ti(4194308, 4, a2, b2);
    }, useInsertionEffect: function(a2, b2) {
      return ti(4, 2, a2, b2);
    }, useMemo: function(a2, b2) {
      var c2 = ci();
      b2 = void 0 === b2 ? null : b2;
      a2 = a2();
      c2.memoizedState = [a2, b2];
      return a2;
    }, useReducer: function(a2, b2, c2) {
      var d2 = ci();
      b2 = void 0 !== c2 ? c2(b2) : b2;
      d2.memoizedState = d2.baseState = b2;
      a2 = { pending: null, interleaved: null, lanes: 0, dispatch: null, lastRenderedReducer: a2, lastRenderedState: b2 };
      d2.queue = a2;
      a2 = a2.dispatch = Gi.bind(null, N$3, a2);
      return [d2.memoizedState, a2];
    }, useRef: function(a2) {
      var b2 = ci();
      a2 = { current: a2 };
      return b2.memoizedState = a2;
    }, useState: qi, useDebugValue: Ai, useDeferredValue: function(a2) {
      return ci().memoizedState = a2;
    }, useTransition: function() {
      var a2 = qi(false), b2 = a2[0];
      a2 = Ei.bind(null, a2[1]);
      ci().memoizedState = a2;
      return [b2, a2];
    }, useMutableSource: function() {
    }, useSyncExternalStore: function(a2, b2, c2) {
      var d2 = N$3, e3 = ci();
      if (I$7) {
        if (void 0 === c2)
          throw Error(p$5(407));
        c2 = c2();
      } else {
        c2 = b2();
        if (null === R$1)
          throw Error(p$5(349));
        0 !== (Rh & 30) || ni(d2, b2, c2);
      }
      e3.memoizedState = c2;
      var f2 = { value: c2, getSnapshot: b2 };
      e3.queue = f2;
      vi(ki.bind(
        null,
        d2,
        f2,
        a2
      ), [a2]);
      d2.flags |= 2048;
      li(9, mi.bind(null, d2, f2, c2, b2), void 0, null);
      return c2;
    }, useId: function() {
      var a2 = ci(), b2 = R$1.identifierPrefix;
      if (I$7) {
        var c2 = sg;
        var d2 = rg;
        c2 = (d2 & ~(1 << 32 - oc(d2) - 1)).toString(32) + c2;
        b2 = ":" + b2 + "R" + c2;
        c2 = Uh++;
        0 < c2 && (b2 += "H" + c2.toString(32));
        b2 += ":";
      } else
        c2 = Vh++, b2 = ":" + b2 + "r" + c2.toString(32) + ":";
      return a2.memoizedState = b2;
    }, unstable_isNewReconciler: false }, Zh = {
      readContext: Vg,
      useCallback: Bi,
      useContext: Vg,
      useEffect: ji,
      useImperativeHandle: zi,
      useInsertionEffect: wi,
      useLayoutEffect: xi,
      useMemo: Ci,
      useReducer: fi,
      useRef: si,
      useState: function() {
        return fi(ei);
      },
      useDebugValue: Ai,
      useDeferredValue: function(a2) {
        var b2 = di();
        return Di(b2, O$2.memoizedState, a2);
      },
      useTransition: function() {
        var a2 = fi(ei)[0], b2 = di().memoizedState;
        return [a2, b2];
      },
      useMutableSource: hi,
      useSyncExternalStore: ii,
      useId: Fi,
      unstable_isNewReconciler: false
    }, $h = { readContext: Vg, useCallback: Bi, useContext: Vg, useEffect: ji, useImperativeHandle: zi, useInsertionEffect: wi, useLayoutEffect: xi, useMemo: Ci, useReducer: gi, useRef: si, useState: function() {
      return gi(ei);
    }, useDebugValue: Ai, useDeferredValue: function(a2) {
      var b2 = di();
      return null === O$2 ? b2.memoizedState = a2 : Di(b2, O$2.memoizedState, a2);
    }, useTransition: function() {
      var a2 = gi(ei)[0], b2 = di().memoizedState;
      return [a2, b2];
    }, useMutableSource: hi, useSyncExternalStore: ii, useId: Fi, unstable_isNewReconciler: false };
    function Ki(a2, b2) {
      try {
        var c2 = "", d2 = b2;
        do
          c2 += Pa(d2), d2 = d2.return;
        while (d2);
        var e3 = c2;
      } catch (f2) {
        e3 = "\nError generating stack: " + f2.message + "\n" + f2.stack;
      }
      return { value: a2, source: b2, stack: e3, digest: null };
    }
    function Li(a2, b2, c2) {
      return { value: a2, source: null, stack: null != c2 ? c2 : null, digest: null != b2 ? b2 : null };
    }
    function Mi(a2, b2) {
      try {
        console.error(b2.value);
      } catch (c2) {
        setTimeout(function() {
          throw c2;
        });
      }
    }
    var Ni = "function" === typeof WeakMap ? WeakMap : Map;
    function Oi(a2, b2, c2) {
      c2 = ch(-1, c2);
      c2.tag = 3;
      c2.payload = { element: null };
      var d2 = b2.value;
      c2.callback = function() {
        Pi || (Pi = true, Qi = d2);
        Mi(a2, b2);
      };
      return c2;
    }
    function Ri(a2, b2, c2) {
      c2 = ch(-1, c2);
      c2.tag = 3;
      var d2 = a2.type.getDerivedStateFromError;
      if ("function" === typeof d2) {
        var e3 = b2.value;
        c2.payload = function() {
          return d2(e3);
        };
        c2.callback = function() {
          Mi(a2, b2);
        };
      }
      var f2 = a2.stateNode;
      null !== f2 && "function" === typeof f2.componentDidCatch && (c2.callback = function() {
        Mi(a2, b2);
        "function" !== typeof d2 && (null === Si ? Si = /* @__PURE__ */ new Set([this]) : Si.add(this));
        var c3 = b2.stack;
        this.componentDidCatch(b2.value, { componentStack: null !== c3 ? c3 : "" });
      });
      return c2;
    }
    function Ti(a2, b2, c2) {
      var d2 = a2.pingCache;
      if (null === d2) {
        d2 = a2.pingCache = new Ni();
        var e3 = /* @__PURE__ */ new Set();
        d2.set(b2, e3);
      } else
        e3 = d2.get(b2), void 0 === e3 && (e3 = /* @__PURE__ */ new Set(), d2.set(b2, e3));
      e3.has(c2) || (e3.add(c2), a2 = Ui.bind(null, a2, b2, c2), b2.then(a2, a2));
    }
    function Vi(a2) {
      do {
        var b2;
        if (b2 = 13 === a2.tag)
          b2 = a2.memoizedState, b2 = null !== b2 ? null !== b2.dehydrated ? true : false : true;
        if (b2)
          return a2;
        a2 = a2.return;
      } while (null !== a2);
      return null;
    }
    function Wi(a2, b2, c2, d2, e3) {
      if (0 === (a2.mode & 1))
        return a2 === b2 ? a2.flags |= 65536 : (a2.flags |= 128, c2.flags |= 131072, c2.flags &= -52805, 1 === c2.tag && (null === c2.alternate ? c2.tag = 17 : (b2 = ch(-1, 1), b2.tag = 2, dh(c2, b2, 1))), c2.lanes |= 1), a2;
      a2.flags |= 65536;
      a2.lanes = e3;
      return a2;
    }
    var Xi = ua.ReactCurrentOwner, Ug = false;
    function Yi(a2, b2, c2, d2) {
      b2.child = null === a2 ? Ch(b2, null, c2, d2) : Bh(b2, a2.child, c2, d2);
    }
    function Zi(a2, b2, c2, d2, e3) {
      c2 = c2.render;
      var f2 = b2.ref;
      Tg(b2, e3);
      d2 = Xh(a2, b2, c2, d2, f2, e3);
      c2 = bi();
      if (null !== a2 && !Ug)
        return b2.updateQueue = a2.updateQueue, b2.flags &= -2053, a2.lanes &= ~e3, $i(a2, b2, e3);
      I$7 && c2 && vg(b2);
      b2.flags |= 1;
      Yi(a2, b2, d2, e3);
      return b2.child;
    }
    function aj(a2, b2, c2, d2, e3) {
      if (null === a2) {
        var f2 = c2.type;
        if ("function" === typeof f2 && !bj(f2) && void 0 === f2.defaultProps && null === c2.compare && void 0 === c2.defaultProps)
          return b2.tag = 15, b2.type = f2, cj(a2, b2, f2, d2, e3);
        a2 = yh(c2.type, null, d2, b2, b2.mode, e3);
        a2.ref = b2.ref;
        a2.return = b2;
        return b2.child = a2;
      }
      f2 = a2.child;
      if (0 === (a2.lanes & e3)) {
        var g2 = f2.memoizedProps;
        c2 = c2.compare;
        c2 = null !== c2 ? c2 : Ie$2;
        if (c2(g2, d2) && a2.ref === b2.ref)
          return $i(a2, b2, e3);
      }
      b2.flags |= 1;
      a2 = wh(f2, d2);
      a2.ref = b2.ref;
      a2.return = b2;
      return b2.child = a2;
    }
    function cj(a2, b2, c2, d2, e3) {
      if (null !== a2) {
        var f2 = a2.memoizedProps;
        if (Ie$2(f2, d2) && a2.ref === b2.ref)
          if (Ug = false, b2.pendingProps = d2 = f2, 0 !== (a2.lanes & e3))
            0 !== (a2.flags & 131072) && (Ug = true);
          else
            return b2.lanes = a2.lanes, $i(a2, b2, e3);
      }
      return dj(a2, b2, c2, d2, e3);
    }
    function ej(a2, b2, c2) {
      var d2 = b2.pendingProps, e3 = d2.children, f2 = null !== a2 ? a2.memoizedState : null;
      if ("hidden" === d2.mode)
        if (0 === (b2.mode & 1))
          b2.memoizedState = { baseLanes: 0, cachePool: null, transitions: null }, G$1(fj, gj), gj |= c2;
        else {
          if (0 === (c2 & 1073741824))
            return a2 = null !== f2 ? f2.baseLanes | c2 : c2, b2.lanes = b2.childLanes = 1073741824, b2.memoizedState = { baseLanes: a2, cachePool: null, transitions: null }, b2.updateQueue = null, G$1(fj, gj), gj |= a2, null;
          b2.memoizedState = { baseLanes: 0, cachePool: null, transitions: null };
          d2 = null !== f2 ? f2.baseLanes : c2;
          G$1(fj, gj);
          gj |= d2;
        }
      else
        null !== f2 ? (d2 = f2.baseLanes | c2, b2.memoizedState = null) : d2 = c2, G$1(fj, gj), gj |= d2;
      Yi(a2, b2, e3, c2);
      return b2.child;
    }
    function hj(a2, b2) {
      var c2 = b2.ref;
      if (null === a2 && null !== c2 || null !== a2 && a2.ref !== c2)
        b2.flags |= 512, b2.flags |= 2097152;
    }
    function dj(a2, b2, c2, d2, e3) {
      var f2 = Zf(c2) ? Xf : H$1.current;
      f2 = Yf(b2, f2);
      Tg(b2, e3);
      c2 = Xh(a2, b2, c2, d2, f2, e3);
      d2 = bi();
      if (null !== a2 && !Ug)
        return b2.updateQueue = a2.updateQueue, b2.flags &= -2053, a2.lanes &= ~e3, $i(a2, b2, e3);
      I$7 && d2 && vg(b2);
      b2.flags |= 1;
      Yi(a2, b2, c2, e3);
      return b2.child;
    }
    function ij(a2, b2, c2, d2, e3) {
      if (Zf(c2)) {
        var f2 = true;
        cg(b2);
      } else
        f2 = false;
      Tg(b2, e3);
      if (null === b2.stateNode)
        jj(a2, b2), ph(b2, c2, d2), rh(b2, c2, d2, e3), d2 = true;
      else if (null === a2) {
        var g2 = b2.stateNode, h2 = b2.memoizedProps;
        g2.props = h2;
        var k2 = g2.context, l2 = c2.contextType;
        "object" === typeof l2 && null !== l2 ? l2 = Vg(l2) : (l2 = Zf(c2) ? Xf : H$1.current, l2 = Yf(b2, l2));
        var m2 = c2.getDerivedStateFromProps, q2 = "function" === typeof m2 || "function" === typeof g2.getSnapshotBeforeUpdate;
        q2 || "function" !== typeof g2.UNSAFE_componentWillReceiveProps && "function" !== typeof g2.componentWillReceiveProps || (h2 !== d2 || k2 !== l2) && qh(b2, g2, d2, l2);
        $g = false;
        var r2 = b2.memoizedState;
        g2.state = r2;
        gh(b2, d2, g2, e3);
        k2 = b2.memoizedState;
        h2 !== d2 || r2 !== k2 || Wf.current || $g ? ("function" === typeof m2 && (kh(b2, c2, m2, d2), k2 = b2.memoizedState), (h2 = $g || oh(b2, c2, h2, d2, r2, k2, l2)) ? (q2 || "function" !== typeof g2.UNSAFE_componentWillMount && "function" !== typeof g2.componentWillMount || ("function" === typeof g2.componentWillMount && g2.componentWillMount(), "function" === typeof g2.UNSAFE_componentWillMount && g2.UNSAFE_componentWillMount()), "function" === typeof g2.componentDidMount && (b2.flags |= 4194308)) : ("function" === typeof g2.componentDidMount && (b2.flags |= 4194308), b2.memoizedProps = d2, b2.memoizedState = k2), g2.props = d2, g2.state = k2, g2.context = l2, d2 = h2) : ("function" === typeof g2.componentDidMount && (b2.flags |= 4194308), d2 = false);
      } else {
        g2 = b2.stateNode;
        bh(a2, b2);
        h2 = b2.memoizedProps;
        l2 = b2.type === b2.elementType ? h2 : Lg(b2.type, h2);
        g2.props = l2;
        q2 = b2.pendingProps;
        r2 = g2.context;
        k2 = c2.contextType;
        "object" === typeof k2 && null !== k2 ? k2 = Vg(k2) : (k2 = Zf(c2) ? Xf : H$1.current, k2 = Yf(b2, k2));
        var y2 = c2.getDerivedStateFromProps;
        (m2 = "function" === typeof y2 || "function" === typeof g2.getSnapshotBeforeUpdate) || "function" !== typeof g2.UNSAFE_componentWillReceiveProps && "function" !== typeof g2.componentWillReceiveProps || (h2 !== q2 || r2 !== k2) && qh(b2, g2, d2, k2);
        $g = false;
        r2 = b2.memoizedState;
        g2.state = r2;
        gh(b2, d2, g2, e3);
        var n2 = b2.memoizedState;
        h2 !== q2 || r2 !== n2 || Wf.current || $g ? ("function" === typeof y2 && (kh(b2, c2, y2, d2), n2 = b2.memoizedState), (l2 = $g || oh(b2, c2, l2, d2, r2, n2, k2) || false) ? (m2 || "function" !== typeof g2.UNSAFE_componentWillUpdate && "function" !== typeof g2.componentWillUpdate || ("function" === typeof g2.componentWillUpdate && g2.componentWillUpdate(d2, n2, k2), "function" === typeof g2.UNSAFE_componentWillUpdate && g2.UNSAFE_componentWillUpdate(d2, n2, k2)), "function" === typeof g2.componentDidUpdate && (b2.flags |= 4), "function" === typeof g2.getSnapshotBeforeUpdate && (b2.flags |= 1024)) : ("function" !== typeof g2.componentDidUpdate || h2 === a2.memoizedProps && r2 === a2.memoizedState || (b2.flags |= 4), "function" !== typeof g2.getSnapshotBeforeUpdate || h2 === a2.memoizedProps && r2 === a2.memoizedState || (b2.flags |= 1024), b2.memoizedProps = d2, b2.memoizedState = n2), g2.props = d2, g2.state = n2, g2.context = k2, d2 = l2) : ("function" !== typeof g2.componentDidUpdate || h2 === a2.memoizedProps && r2 === a2.memoizedState || (b2.flags |= 4), "function" !== typeof g2.getSnapshotBeforeUpdate || h2 === a2.memoizedProps && r2 === a2.memoizedState || (b2.flags |= 1024), d2 = false);
      }
      return kj(a2, b2, c2, d2, f2, e3);
    }
    function kj(a2, b2, c2, d2, e3, f2) {
      hj(a2, b2);
      var g2 = 0 !== (b2.flags & 128);
      if (!d2 && !g2)
        return e3 && dg(b2, c2, false), $i(a2, b2, f2);
      d2 = b2.stateNode;
      Xi.current = b2;
      var h2 = g2 && "function" !== typeof c2.getDerivedStateFromError ? null : d2.render();
      b2.flags |= 1;
      null !== a2 && g2 ? (b2.child = Bh(b2, a2.child, null, f2), b2.child = Bh(b2, null, h2, f2)) : Yi(a2, b2, h2, f2);
      b2.memoizedState = d2.state;
      e3 && dg(b2, c2, true);
      return b2.child;
    }
    function lj(a2) {
      var b2 = a2.stateNode;
      b2.pendingContext ? ag(a2, b2.pendingContext, b2.pendingContext !== b2.context) : b2.context && ag(a2, b2.context, false);
      Ih(a2, b2.containerInfo);
    }
    function mj(a2, b2, c2, d2, e3) {
      Ig();
      Jg(e3);
      b2.flags |= 256;
      Yi(a2, b2, c2, d2);
      return b2.child;
    }
    var nj = { dehydrated: null, treeContext: null, retryLane: 0 };
    function oj(a2) {
      return { baseLanes: a2, cachePool: null, transitions: null };
    }
    function pj(a2, b2, c2) {
      var d2 = b2.pendingProps, e3 = M$3.current, f2 = false, g2 = 0 !== (b2.flags & 128), h2;
      (h2 = g2) || (h2 = null !== a2 && null === a2.memoizedState ? false : 0 !== (e3 & 2));
      if (h2)
        f2 = true, b2.flags &= -129;
      else if (null === a2 || null !== a2.memoizedState)
        e3 |= 1;
      G$1(M$3, e3 & 1);
      if (null === a2) {
        Eg(b2);
        a2 = b2.memoizedState;
        if (null !== a2 && (a2 = a2.dehydrated, null !== a2))
          return 0 === (b2.mode & 1) ? b2.lanes = 1 : "$!" === a2.data ? b2.lanes = 8 : b2.lanes = 1073741824, null;
        g2 = d2.children;
        a2 = d2.fallback;
        return f2 ? (d2 = b2.mode, f2 = b2.child, g2 = { mode: "hidden", children: g2 }, 0 === (d2 & 1) && null !== f2 ? (f2.childLanes = 0, f2.pendingProps = g2) : f2 = qj(g2, d2, 0, null), a2 = Ah(a2, d2, c2, null), f2.return = b2, a2.return = b2, f2.sibling = a2, b2.child = f2, b2.child.memoizedState = oj(c2), b2.memoizedState = nj, a2) : rj(b2, g2);
      }
      e3 = a2.memoizedState;
      if (null !== e3 && (h2 = e3.dehydrated, null !== h2))
        return sj(a2, b2, g2, d2, h2, e3, c2);
      if (f2) {
        f2 = d2.fallback;
        g2 = b2.mode;
        e3 = a2.child;
        h2 = e3.sibling;
        var k2 = { mode: "hidden", children: d2.children };
        0 === (g2 & 1) && b2.child !== e3 ? (d2 = b2.child, d2.childLanes = 0, d2.pendingProps = k2, b2.deletions = null) : (d2 = wh(e3, k2), d2.subtreeFlags = e3.subtreeFlags & 14680064);
        null !== h2 ? f2 = wh(h2, f2) : (f2 = Ah(f2, g2, c2, null), f2.flags |= 2);
        f2.return = b2;
        d2.return = b2;
        d2.sibling = f2;
        b2.child = d2;
        d2 = f2;
        f2 = b2.child;
        g2 = a2.child.memoizedState;
        g2 = null === g2 ? oj(c2) : { baseLanes: g2.baseLanes | c2, cachePool: null, transitions: g2.transitions };
        f2.memoizedState = g2;
        f2.childLanes = a2.childLanes & ~c2;
        b2.memoizedState = nj;
        return d2;
      }
      f2 = a2.child;
      a2 = f2.sibling;
      d2 = wh(f2, { mode: "visible", children: d2.children });
      0 === (b2.mode & 1) && (d2.lanes = c2);
      d2.return = b2;
      d2.sibling = null;
      null !== a2 && (c2 = b2.deletions, null === c2 ? (b2.deletions = [a2], b2.flags |= 16) : c2.push(a2));
      b2.child = d2;
      b2.memoizedState = null;
      return d2;
    }
    function rj(a2, b2) {
      b2 = qj({ mode: "visible", children: b2 }, a2.mode, 0, null);
      b2.return = a2;
      return a2.child = b2;
    }
    function tj(a2, b2, c2, d2) {
      null !== d2 && Jg(d2);
      Bh(b2, a2.child, null, c2);
      a2 = rj(b2, b2.pendingProps.children);
      a2.flags |= 2;
      b2.memoizedState = null;
      return a2;
    }
    function sj(a2, b2, c2, d2, e3, f2, g2) {
      if (c2) {
        if (b2.flags & 256)
          return b2.flags &= -257, d2 = Li(Error(p$5(422))), tj(a2, b2, g2, d2);
        if (null !== b2.memoizedState)
          return b2.child = a2.child, b2.flags |= 128, null;
        f2 = d2.fallback;
        e3 = b2.mode;
        d2 = qj({ mode: "visible", children: d2.children }, e3, 0, null);
        f2 = Ah(f2, e3, g2, null);
        f2.flags |= 2;
        d2.return = b2;
        f2.return = b2;
        d2.sibling = f2;
        b2.child = d2;
        0 !== (b2.mode & 1) && Bh(b2, a2.child, null, g2);
        b2.child.memoizedState = oj(g2);
        b2.memoizedState = nj;
        return f2;
      }
      if (0 === (b2.mode & 1))
        return tj(a2, b2, g2, null);
      if ("$!" === e3.data) {
        d2 = e3.nextSibling && e3.nextSibling.dataset;
        if (d2)
          var h2 = d2.dgst;
        d2 = h2;
        f2 = Error(p$5(419));
        d2 = Li(f2, d2, void 0);
        return tj(a2, b2, g2, d2);
      }
      h2 = 0 !== (g2 & a2.childLanes);
      if (Ug || h2) {
        d2 = R$1;
        if (null !== d2) {
          switch (g2 & -g2) {
            case 4:
              e3 = 2;
              break;
            case 16:
              e3 = 8;
              break;
            case 64:
            case 128:
            case 256:
            case 512:
            case 1024:
            case 2048:
            case 4096:
            case 8192:
            case 16384:
            case 32768:
            case 65536:
            case 131072:
            case 262144:
            case 524288:
            case 1048576:
            case 2097152:
            case 4194304:
            case 8388608:
            case 16777216:
            case 33554432:
            case 67108864:
              e3 = 32;
              break;
            case 536870912:
              e3 = 268435456;
              break;
            default:
              e3 = 0;
          }
          e3 = 0 !== (e3 & (d2.suspendedLanes | g2)) ? 0 : e3;
          0 !== e3 && e3 !== f2.retryLane && (f2.retryLane = e3, Zg(a2, e3), mh(d2, a2, e3, -1));
        }
        uj();
        d2 = Li(Error(p$5(421)));
        return tj(a2, b2, g2, d2);
      }
      if ("$?" === e3.data)
        return b2.flags |= 128, b2.child = a2.child, b2 = vj.bind(null, a2), e3._reactRetry = b2, null;
      a2 = f2.treeContext;
      yg = Lf(e3.nextSibling);
      xg = b2;
      I$7 = true;
      zg = null;
      null !== a2 && (og[pg++] = rg, og[pg++] = sg, og[pg++] = qg, rg = a2.id, sg = a2.overflow, qg = b2);
      b2 = rj(b2, d2.children);
      b2.flags |= 4096;
      return b2;
    }
    function wj(a2, b2, c2) {
      a2.lanes |= b2;
      var d2 = a2.alternate;
      null !== d2 && (d2.lanes |= b2);
      Sg(a2.return, b2, c2);
    }
    function xj(a2, b2, c2, d2, e3) {
      var f2 = a2.memoizedState;
      null === f2 ? a2.memoizedState = { isBackwards: b2, rendering: null, renderingStartTime: 0, last: d2, tail: c2, tailMode: e3 } : (f2.isBackwards = b2, f2.rendering = null, f2.renderingStartTime = 0, f2.last = d2, f2.tail = c2, f2.tailMode = e3);
    }
    function yj(a2, b2, c2) {
      var d2 = b2.pendingProps, e3 = d2.revealOrder, f2 = d2.tail;
      Yi(a2, b2, d2.children, c2);
      d2 = M$3.current;
      if (0 !== (d2 & 2))
        d2 = d2 & 1 | 2, b2.flags |= 128;
      else {
        if (null !== a2 && 0 !== (a2.flags & 128))
          a:
            for (a2 = b2.child; null !== a2; ) {
              if (13 === a2.tag)
                null !== a2.memoizedState && wj(a2, c2, b2);
              else if (19 === a2.tag)
                wj(a2, c2, b2);
              else if (null !== a2.child) {
                a2.child.return = a2;
                a2 = a2.child;
                continue;
              }
              if (a2 === b2)
                break a;
              for (; null === a2.sibling; ) {
                if (null === a2.return || a2.return === b2)
                  break a;
                a2 = a2.return;
              }
              a2.sibling.return = a2.return;
              a2 = a2.sibling;
            }
        d2 &= 1;
      }
      G$1(M$3, d2);
      if (0 === (b2.mode & 1))
        b2.memoizedState = null;
      else
        switch (e3) {
          case "forwards":
            c2 = b2.child;
            for (e3 = null; null !== c2; )
              a2 = c2.alternate, null !== a2 && null === Mh(a2) && (e3 = c2), c2 = c2.sibling;
            c2 = e3;
            null === c2 ? (e3 = b2.child, b2.child = null) : (e3 = c2.sibling, c2.sibling = null);
            xj(b2, false, e3, c2, f2);
            break;
          case "backwards":
            c2 = null;
            e3 = b2.child;
            for (b2.child = null; null !== e3; ) {
              a2 = e3.alternate;
              if (null !== a2 && null === Mh(a2)) {
                b2.child = e3;
                break;
              }
              a2 = e3.sibling;
              e3.sibling = c2;
              c2 = e3;
              e3 = a2;
            }
            xj(b2, true, c2, null, f2);
            break;
          case "together":
            xj(b2, false, null, null, void 0);
            break;
          default:
            b2.memoizedState = null;
        }
      return b2.child;
    }
    function jj(a2, b2) {
      0 === (b2.mode & 1) && null !== a2 && (a2.alternate = null, b2.alternate = null, b2.flags |= 2);
    }
    function $i(a2, b2, c2) {
      null !== a2 && (b2.dependencies = a2.dependencies);
      hh |= b2.lanes;
      if (0 === (c2 & b2.childLanes))
        return null;
      if (null !== a2 && b2.child !== a2.child)
        throw Error(p$5(153));
      if (null !== b2.child) {
        a2 = b2.child;
        c2 = wh(a2, a2.pendingProps);
        b2.child = c2;
        for (c2.return = b2; null !== a2.sibling; )
          a2 = a2.sibling, c2 = c2.sibling = wh(a2, a2.pendingProps), c2.return = b2;
        c2.sibling = null;
      }
      return b2.child;
    }
    function zj(a2, b2, c2) {
      switch (b2.tag) {
        case 3:
          lj(b2);
          Ig();
          break;
        case 5:
          Kh(b2);
          break;
        case 1:
          Zf(b2.type) && cg(b2);
          break;
        case 4:
          Ih(b2, b2.stateNode.containerInfo);
          break;
        case 10:
          var d2 = b2.type._context, e3 = b2.memoizedProps.value;
          G$1(Mg, d2._currentValue);
          d2._currentValue = e3;
          break;
        case 13:
          d2 = b2.memoizedState;
          if (null !== d2) {
            if (null !== d2.dehydrated)
              return G$1(M$3, M$3.current & 1), b2.flags |= 128, null;
            if (0 !== (c2 & b2.child.childLanes))
              return pj(a2, b2, c2);
            G$1(M$3, M$3.current & 1);
            a2 = $i(a2, b2, c2);
            return null !== a2 ? a2.sibling : null;
          }
          G$1(M$3, M$3.current & 1);
          break;
        case 19:
          d2 = 0 !== (c2 & b2.childLanes);
          if (0 !== (a2.flags & 128)) {
            if (d2)
              return yj(a2, b2, c2);
            b2.flags |= 128;
          }
          e3 = b2.memoizedState;
          null !== e3 && (e3.rendering = null, e3.tail = null, e3.lastEffect = null);
          G$1(M$3, M$3.current);
          if (d2)
            break;
          else
            return null;
        case 22:
        case 23:
          return b2.lanes = 0, ej(a2, b2, c2);
      }
      return $i(a2, b2, c2);
    }
    var Aj, Bj, Cj, Dj;
    Aj = function(a2, b2) {
      for (var c2 = b2.child; null !== c2; ) {
        if (5 === c2.tag || 6 === c2.tag)
          a2.appendChild(c2.stateNode);
        else if (4 !== c2.tag && null !== c2.child) {
          c2.child.return = c2;
          c2 = c2.child;
          continue;
        }
        if (c2 === b2)
          break;
        for (; null === c2.sibling; ) {
          if (null === c2.return || c2.return === b2)
            return;
          c2 = c2.return;
        }
        c2.sibling.return = c2.return;
        c2 = c2.sibling;
      }
    };
    Bj = function() {
    };
    Cj = function(a2, b2, c2, d2) {
      var e3 = a2.memoizedProps;
      if (e3 !== d2) {
        a2 = b2.stateNode;
        Hh(Eh.current);
        var f2 = null;
        switch (c2) {
          case "input":
            e3 = Ya(a2, e3);
            d2 = Ya(a2, d2);
            f2 = [];
            break;
          case "select":
            e3 = A$1({}, e3, { value: void 0 });
            d2 = A$1({}, d2, { value: void 0 });
            f2 = [];
            break;
          case "textarea":
            e3 = gb(a2, e3);
            d2 = gb(a2, d2);
            f2 = [];
            break;
          default:
            "function" !== typeof e3.onClick && "function" === typeof d2.onClick && (a2.onclick = Bf);
        }
        ub(c2, d2);
        var g2;
        c2 = null;
        for (l2 in e3)
          if (!d2.hasOwnProperty(l2) && e3.hasOwnProperty(l2) && null != e3[l2])
            if ("style" === l2) {
              var h2 = e3[l2];
              for (g2 in h2)
                h2.hasOwnProperty(g2) && (c2 || (c2 = {}), c2[g2] = "");
            } else
              "dangerouslySetInnerHTML" !== l2 && "children" !== l2 && "suppressContentEditableWarning" !== l2 && "suppressHydrationWarning" !== l2 && "autoFocus" !== l2 && (ea.hasOwnProperty(l2) ? f2 || (f2 = []) : (f2 = f2 || []).push(l2, null));
        for (l2 in d2) {
          var k2 = d2[l2];
          h2 = null != e3 ? e3[l2] : void 0;
          if (d2.hasOwnProperty(l2) && k2 !== h2 && (null != k2 || null != h2))
            if ("style" === l2)
              if (h2) {
                for (g2 in h2)
                  !h2.hasOwnProperty(g2) || k2 && k2.hasOwnProperty(g2) || (c2 || (c2 = {}), c2[g2] = "");
                for (g2 in k2)
                  k2.hasOwnProperty(g2) && h2[g2] !== k2[g2] && (c2 || (c2 = {}), c2[g2] = k2[g2]);
              } else
                c2 || (f2 || (f2 = []), f2.push(
                  l2,
                  c2
                )), c2 = k2;
            else
              "dangerouslySetInnerHTML" === l2 ? (k2 = k2 ? k2.__html : void 0, h2 = h2 ? h2.__html : void 0, null != k2 && h2 !== k2 && (f2 = f2 || []).push(l2, k2)) : "children" === l2 ? "string" !== typeof k2 && "number" !== typeof k2 || (f2 = f2 || []).push(l2, "" + k2) : "suppressContentEditableWarning" !== l2 && "suppressHydrationWarning" !== l2 && (ea.hasOwnProperty(l2) ? (null != k2 && "onScroll" === l2 && D$4("scroll", a2), f2 || h2 === k2 || (f2 = [])) : (f2 = f2 || []).push(l2, k2));
        }
        c2 && (f2 = f2 || []).push("style", c2);
        var l2 = f2;
        if (b2.updateQueue = l2)
          b2.flags |= 4;
      }
    };
    Dj = function(a2, b2, c2, d2) {
      c2 !== d2 && (b2.flags |= 4);
    };
    function Ej(a2, b2) {
      if (!I$7)
        switch (a2.tailMode) {
          case "hidden":
            b2 = a2.tail;
            for (var c2 = null; null !== b2; )
              null !== b2.alternate && (c2 = b2), b2 = b2.sibling;
            null === c2 ? a2.tail = null : c2.sibling = null;
            break;
          case "collapsed":
            c2 = a2.tail;
            for (var d2 = null; null !== c2; )
              null !== c2.alternate && (d2 = c2), c2 = c2.sibling;
            null === d2 ? b2 || null === a2.tail ? a2.tail = null : a2.tail.sibling = null : d2.sibling = null;
        }
    }
    function S$6(a2) {
      var b2 = null !== a2.alternate && a2.alternate.child === a2.child, c2 = 0, d2 = 0;
      if (b2)
        for (var e3 = a2.child; null !== e3; )
          c2 |= e3.lanes | e3.childLanes, d2 |= e3.subtreeFlags & 14680064, d2 |= e3.flags & 14680064, e3.return = a2, e3 = e3.sibling;
      else
        for (e3 = a2.child; null !== e3; )
          c2 |= e3.lanes | e3.childLanes, d2 |= e3.subtreeFlags, d2 |= e3.flags, e3.return = a2, e3 = e3.sibling;
      a2.subtreeFlags |= d2;
      a2.childLanes = c2;
      return b2;
    }
    function Fj(a2, b2, c2) {
      var d2 = b2.pendingProps;
      wg(b2);
      switch (b2.tag) {
        case 2:
        case 16:
        case 15:
        case 0:
        case 11:
        case 7:
        case 8:
        case 12:
        case 9:
        case 14:
          return S$6(b2), null;
        case 1:
          return Zf(b2.type) && $f(), S$6(b2), null;
        case 3:
          d2 = b2.stateNode;
          Jh();
          E$1(Wf);
          E$1(H$1);
          Oh();
          d2.pendingContext && (d2.context = d2.pendingContext, d2.pendingContext = null);
          if (null === a2 || null === a2.child)
            Gg(b2) ? b2.flags |= 4 : null === a2 || a2.memoizedState.isDehydrated && 0 === (b2.flags & 256) || (b2.flags |= 1024, null !== zg && (Gj(zg), zg = null));
          Bj(a2, b2);
          S$6(b2);
          return null;
        case 5:
          Lh(b2);
          var e3 = Hh(Gh.current);
          c2 = b2.type;
          if (null !== a2 && null != b2.stateNode)
            Cj(a2, b2, c2, d2, e3), a2.ref !== b2.ref && (b2.flags |= 512, b2.flags |= 2097152);
          else {
            if (!d2) {
              if (null === b2.stateNode)
                throw Error(p$5(166));
              S$6(b2);
              return null;
            }
            a2 = Hh(Eh.current);
            if (Gg(b2)) {
              d2 = b2.stateNode;
              c2 = b2.type;
              var f2 = b2.memoizedProps;
              d2[Of] = b2;
              d2[Pf] = f2;
              a2 = 0 !== (b2.mode & 1);
              switch (c2) {
                case "dialog":
                  D$4("cancel", d2);
                  D$4("close", d2);
                  break;
                case "iframe":
                case "object":
                case "embed":
                  D$4("load", d2);
                  break;
                case "video":
                case "audio":
                  for (e3 = 0; e3 < lf.length; e3++)
                    D$4(lf[e3], d2);
                  break;
                case "source":
                  D$4("error", d2);
                  break;
                case "img":
                case "image":
                case "link":
                  D$4(
                    "error",
                    d2
                  );
                  D$4("load", d2);
                  break;
                case "details":
                  D$4("toggle", d2);
                  break;
                case "input":
                  Za(d2, f2);
                  D$4("invalid", d2);
                  break;
                case "select":
                  d2._wrapperState = { wasMultiple: !!f2.multiple };
                  D$4("invalid", d2);
                  break;
                case "textarea":
                  hb(d2, f2), D$4("invalid", d2);
              }
              ub(c2, f2);
              e3 = null;
              for (var g2 in f2)
                if (f2.hasOwnProperty(g2)) {
                  var h2 = f2[g2];
                  "children" === g2 ? "string" === typeof h2 ? d2.textContent !== h2 && (true !== f2.suppressHydrationWarning && Af(d2.textContent, h2, a2), e3 = ["children", h2]) : "number" === typeof h2 && d2.textContent !== "" + h2 && (true !== f2.suppressHydrationWarning && Af(
                    d2.textContent,
                    h2,
                    a2
                  ), e3 = ["children", "" + h2]) : ea.hasOwnProperty(g2) && null != h2 && "onScroll" === g2 && D$4("scroll", d2);
                }
              switch (c2) {
                case "input":
                  Va(d2);
                  db(d2, f2, true);
                  break;
                case "textarea":
                  Va(d2);
                  jb(d2);
                  break;
                case "select":
                case "option":
                  break;
                default:
                  "function" === typeof f2.onClick && (d2.onclick = Bf);
              }
              d2 = e3;
              b2.updateQueue = d2;
              null !== d2 && (b2.flags |= 4);
            } else {
              g2 = 9 === e3.nodeType ? e3 : e3.ownerDocument;
              "http://www.w3.org/1999/xhtml" === a2 && (a2 = kb(c2));
              "http://www.w3.org/1999/xhtml" === a2 ? "script" === c2 ? (a2 = g2.createElement("div"), a2.innerHTML = "<script><\/script>", a2 = a2.removeChild(a2.firstChild)) : "string" === typeof d2.is ? a2 = g2.createElement(c2, { is: d2.is }) : (a2 = g2.createElement(c2), "select" === c2 && (g2 = a2, d2.multiple ? g2.multiple = true : d2.size && (g2.size = d2.size))) : a2 = g2.createElementNS(a2, c2);
              a2[Of] = b2;
              a2[Pf] = d2;
              Aj(a2, b2, false, false);
              b2.stateNode = a2;
              a: {
                g2 = vb(c2, d2);
                switch (c2) {
                  case "dialog":
                    D$4("cancel", a2);
                    D$4("close", a2);
                    e3 = d2;
                    break;
                  case "iframe":
                  case "object":
                  case "embed":
                    D$4("load", a2);
                    e3 = d2;
                    break;
                  case "video":
                  case "audio":
                    for (e3 = 0; e3 < lf.length; e3++)
                      D$4(lf[e3], a2);
                    e3 = d2;
                    break;
                  case "source":
                    D$4("error", a2);
                    e3 = d2;
                    break;
                  case "img":
                  case "image":
                  case "link":
                    D$4(
                      "error",
                      a2
                    );
                    D$4("load", a2);
                    e3 = d2;
                    break;
                  case "details":
                    D$4("toggle", a2);
                    e3 = d2;
                    break;
                  case "input":
                    Za(a2, d2);
                    e3 = Ya(a2, d2);
                    D$4("invalid", a2);
                    break;
                  case "option":
                    e3 = d2;
                    break;
                  case "select":
                    a2._wrapperState = { wasMultiple: !!d2.multiple };
                    e3 = A$1({}, d2, { value: void 0 });
                    D$4("invalid", a2);
                    break;
                  case "textarea":
                    hb(a2, d2);
                    e3 = gb(a2, d2);
                    D$4("invalid", a2);
                    break;
                  default:
                    e3 = d2;
                }
                ub(c2, e3);
                h2 = e3;
                for (f2 in h2)
                  if (h2.hasOwnProperty(f2)) {
                    var k2 = h2[f2];
                    "style" === f2 ? sb(a2, k2) : "dangerouslySetInnerHTML" === f2 ? (k2 = k2 ? k2.__html : void 0, null != k2 && nb(a2, k2)) : "children" === f2 ? "string" === typeof k2 ? ("textarea" !== c2 || "" !== k2) && ob(a2, k2) : "number" === typeof k2 && ob(a2, "" + k2) : "suppressContentEditableWarning" !== f2 && "suppressHydrationWarning" !== f2 && "autoFocus" !== f2 && (ea.hasOwnProperty(f2) ? null != k2 && "onScroll" === f2 && D$4("scroll", a2) : null != k2 && ta(a2, f2, k2, g2));
                  }
                switch (c2) {
                  case "input":
                    Va(a2);
                    db(a2, d2, false);
                    break;
                  case "textarea":
                    Va(a2);
                    jb(a2);
                    break;
                  case "option":
                    null != d2.value && a2.setAttribute("value", "" + Sa(d2.value));
                    break;
                  case "select":
                    a2.multiple = !!d2.multiple;
                    f2 = d2.value;
                    null != f2 ? fb(a2, !!d2.multiple, f2, false) : null != d2.defaultValue && fb(
                      a2,
                      !!d2.multiple,
                      d2.defaultValue,
                      true
                    );
                    break;
                  default:
                    "function" === typeof e3.onClick && (a2.onclick = Bf);
                }
                switch (c2) {
                  case "button":
                  case "input":
                  case "select":
                  case "textarea":
                    d2 = !!d2.autoFocus;
                    break a;
                  case "img":
                    d2 = true;
                    break a;
                  default:
                    d2 = false;
                }
              }
              d2 && (b2.flags |= 4);
            }
            null !== b2.ref && (b2.flags |= 512, b2.flags |= 2097152);
          }
          S$6(b2);
          return null;
        case 6:
          if (a2 && null != b2.stateNode)
            Dj(a2, b2, a2.memoizedProps, d2);
          else {
            if ("string" !== typeof d2 && null === b2.stateNode)
              throw Error(p$5(166));
            c2 = Hh(Gh.current);
            Hh(Eh.current);
            if (Gg(b2)) {
              d2 = b2.stateNode;
              c2 = b2.memoizedProps;
              d2[Of] = b2;
              if (f2 = d2.nodeValue !== c2) {
                if (a2 = xg, null !== a2)
                  switch (a2.tag) {
                    case 3:
                      Af(d2.nodeValue, c2, 0 !== (a2.mode & 1));
                      break;
                    case 5:
                      true !== a2.memoizedProps.suppressHydrationWarning && Af(d2.nodeValue, c2, 0 !== (a2.mode & 1));
                  }
              }
              f2 && (b2.flags |= 4);
            } else
              d2 = (9 === c2.nodeType ? c2 : c2.ownerDocument).createTextNode(d2), d2[Of] = b2, b2.stateNode = d2;
          }
          S$6(b2);
          return null;
        case 13:
          E$1(M$3);
          d2 = b2.memoizedState;
          if (null === a2 || null !== a2.memoizedState && null !== a2.memoizedState.dehydrated) {
            if (I$7 && null !== yg && 0 !== (b2.mode & 1) && 0 === (b2.flags & 128))
              Hg(), Ig(), b2.flags |= 98560, f2 = false;
            else if (f2 = Gg(b2), null !== d2 && null !== d2.dehydrated) {
              if (null === a2) {
                if (!f2)
                  throw Error(p$5(318));
                f2 = b2.memoizedState;
                f2 = null !== f2 ? f2.dehydrated : null;
                if (!f2)
                  throw Error(p$5(317));
                f2[Of] = b2;
              } else
                Ig(), 0 === (b2.flags & 128) && (b2.memoizedState = null), b2.flags |= 4;
              S$6(b2);
              f2 = false;
            } else
              null !== zg && (Gj(zg), zg = null), f2 = true;
            if (!f2)
              return b2.flags & 65536 ? b2 : null;
          }
          if (0 !== (b2.flags & 128))
            return b2.lanes = c2, b2;
          d2 = null !== d2;
          d2 !== (null !== a2 && null !== a2.memoizedState) && d2 && (b2.child.flags |= 8192, 0 !== (b2.mode & 1) && (null === a2 || 0 !== (M$3.current & 1) ? 0 === T$5 && (T$5 = 3) : uj()));
          null !== b2.updateQueue && (b2.flags |= 4);
          S$6(b2);
          return null;
        case 4:
          return Jh(), Bj(a2, b2), null === a2 && sf(b2.stateNode.containerInfo), S$6(b2), null;
        case 10:
          return Rg(b2.type._context), S$6(b2), null;
        case 17:
          return Zf(b2.type) && $f(), S$6(b2), null;
        case 19:
          E$1(M$3);
          f2 = b2.memoizedState;
          if (null === f2)
            return S$6(b2), null;
          d2 = 0 !== (b2.flags & 128);
          g2 = f2.rendering;
          if (null === g2)
            if (d2)
              Ej(f2, false);
            else {
              if (0 !== T$5 || null !== a2 && 0 !== (a2.flags & 128))
                for (a2 = b2.child; null !== a2; ) {
                  g2 = Mh(a2);
                  if (null !== g2) {
                    b2.flags |= 128;
                    Ej(f2, false);
                    d2 = g2.updateQueue;
                    null !== d2 && (b2.updateQueue = d2, b2.flags |= 4);
                    b2.subtreeFlags = 0;
                    d2 = c2;
                    for (c2 = b2.child; null !== c2; )
                      f2 = c2, a2 = d2, f2.flags &= 14680066, g2 = f2.alternate, null === g2 ? (f2.childLanes = 0, f2.lanes = a2, f2.child = null, f2.subtreeFlags = 0, f2.memoizedProps = null, f2.memoizedState = null, f2.updateQueue = null, f2.dependencies = null, f2.stateNode = null) : (f2.childLanes = g2.childLanes, f2.lanes = g2.lanes, f2.child = g2.child, f2.subtreeFlags = 0, f2.deletions = null, f2.memoizedProps = g2.memoizedProps, f2.memoizedState = g2.memoizedState, f2.updateQueue = g2.updateQueue, f2.type = g2.type, a2 = g2.dependencies, f2.dependencies = null === a2 ? null : { lanes: a2.lanes, firstContext: a2.firstContext }), c2 = c2.sibling;
                    G$1(M$3, M$3.current & 1 | 2);
                    return b2.child;
                  }
                  a2 = a2.sibling;
                }
              null !== f2.tail && B() > Hj && (b2.flags |= 128, d2 = true, Ej(f2, false), b2.lanes = 4194304);
            }
          else {
            if (!d2)
              if (a2 = Mh(g2), null !== a2) {
                if (b2.flags |= 128, d2 = true, c2 = a2.updateQueue, null !== c2 && (b2.updateQueue = c2, b2.flags |= 4), Ej(f2, true), null === f2.tail && "hidden" === f2.tailMode && !g2.alternate && !I$7)
                  return S$6(b2), null;
              } else
                2 * B() - f2.renderingStartTime > Hj && 1073741824 !== c2 && (b2.flags |= 128, d2 = true, Ej(f2, false), b2.lanes = 4194304);
            f2.isBackwards ? (g2.sibling = b2.child, b2.child = g2) : (c2 = f2.last, null !== c2 ? c2.sibling = g2 : b2.child = g2, f2.last = g2);
          }
          if (null !== f2.tail)
            return b2 = f2.tail, f2.rendering = b2, f2.tail = b2.sibling, f2.renderingStartTime = B(), b2.sibling = null, c2 = M$3.current, G$1(M$3, d2 ? c2 & 1 | 2 : c2 & 1), b2;
          S$6(b2);
          return null;
        case 22:
        case 23:
          return Ij(), d2 = null !== b2.memoizedState, null !== a2 && null !== a2.memoizedState !== d2 && (b2.flags |= 8192), d2 && 0 !== (b2.mode & 1) ? 0 !== (gj & 1073741824) && (S$6(b2), b2.subtreeFlags & 6 && (b2.flags |= 8192)) : S$6(b2), null;
        case 24:
          return null;
        case 25:
          return null;
      }
      throw Error(p$5(156, b2.tag));
    }
    function Jj(a2, b2) {
      wg(b2);
      switch (b2.tag) {
        case 1:
          return Zf(b2.type) && $f(), a2 = b2.flags, a2 & 65536 ? (b2.flags = a2 & -65537 | 128, b2) : null;
        case 3:
          return Jh(), E$1(Wf), E$1(H$1), Oh(), a2 = b2.flags, 0 !== (a2 & 65536) && 0 === (a2 & 128) ? (b2.flags = a2 & -65537 | 128, b2) : null;
        case 5:
          return Lh(b2), null;
        case 13:
          E$1(M$3);
          a2 = b2.memoizedState;
          if (null !== a2 && null !== a2.dehydrated) {
            if (null === b2.alternate)
              throw Error(p$5(340));
            Ig();
          }
          a2 = b2.flags;
          return a2 & 65536 ? (b2.flags = a2 & -65537 | 128, b2) : null;
        case 19:
          return E$1(M$3), null;
        case 4:
          return Jh(), null;
        case 10:
          return Rg(b2.type._context), null;
        case 22:
        case 23:
          return Ij(), null;
        case 24:
          return null;
        default:
          return null;
      }
    }
    var Kj = false, U$4 = false, Lj = "function" === typeof WeakSet ? WeakSet : Set, V = null;
    function Mj(a2, b2) {
      var c2 = a2.ref;
      if (null !== c2)
        if ("function" === typeof c2)
          try {
            c2(null);
          } catch (d2) {
            W(a2, b2, d2);
          }
        else
          c2.current = null;
    }
    function Nj(a2, b2, c2) {
      try {
        c2();
      } catch (d2) {
        W(a2, b2, d2);
      }
    }
    var Oj = false;
    function Pj(a2, b2) {
      Cf = dd;
      a2 = Me$2();
      if (Ne$4(a2)) {
        if ("selectionStart" in a2)
          var c2 = { start: a2.selectionStart, end: a2.selectionEnd };
        else
          a: {
            c2 = (c2 = a2.ownerDocument) && c2.defaultView || window;
            var d2 = c2.getSelection && c2.getSelection();
            if (d2 && 0 !== d2.rangeCount) {
              c2 = d2.anchorNode;
              var e3 = d2.anchorOffset, f2 = d2.focusNode;
              d2 = d2.focusOffset;
              try {
                c2.nodeType, f2.nodeType;
              } catch (F2) {
                c2 = null;
                break a;
              }
              var g2 = 0, h2 = -1, k2 = -1, l2 = 0, m2 = 0, q2 = a2, r2 = null;
              b:
                for (; ; ) {
                  for (var y2; ; ) {
                    q2 !== c2 || 0 !== e3 && 3 !== q2.nodeType || (h2 = g2 + e3);
                    q2 !== f2 || 0 !== d2 && 3 !== q2.nodeType || (k2 = g2 + d2);
                    3 === q2.nodeType && (g2 += q2.nodeValue.length);
                    if (null === (y2 = q2.firstChild))
                      break;
                    r2 = q2;
                    q2 = y2;
                  }
                  for (; ; ) {
                    if (q2 === a2)
                      break b;
                    r2 === c2 && ++l2 === e3 && (h2 = g2);
                    r2 === f2 && ++m2 === d2 && (k2 = g2);
                    if (null !== (y2 = q2.nextSibling))
                      break;
                    q2 = r2;
                    r2 = q2.parentNode;
                  }
                  q2 = y2;
                }
              c2 = -1 === h2 || -1 === k2 ? null : { start: h2, end: k2 };
            } else
              c2 = null;
          }
        c2 = c2 || { start: 0, end: 0 };
      } else
        c2 = null;
      Df = { focusedElem: a2, selectionRange: c2 };
      dd = false;
      for (V = b2; null !== V; )
        if (b2 = V, a2 = b2.child, 0 !== (b2.subtreeFlags & 1028) && null !== a2)
          a2.return = b2, V = a2;
        else
          for (; null !== V; ) {
            b2 = V;
            try {
              var n2 = b2.alternate;
              if (0 !== (b2.flags & 1024))
                switch (b2.tag) {
                  case 0:
                  case 11:
                  case 15:
                    break;
                  case 1:
                    if (null !== n2) {
                      var t2 = n2.memoizedProps, J2 = n2.memoizedState, x2 = b2.stateNode, w2 = x2.getSnapshotBeforeUpdate(b2.elementType === b2.type ? t2 : Lg(b2.type, t2), J2);
                      x2.__reactInternalSnapshotBeforeUpdate = w2;
                    }
                    break;
                  case 3:
                    var u2 = b2.stateNode.containerInfo;
                    1 === u2.nodeType ? u2.textContent = "" : 9 === u2.nodeType && u2.documentElement && u2.removeChild(u2.documentElement);
                    break;
                  case 5:
                  case 6:
                  case 4:
                  case 17:
                    break;
                  default:
                    throw Error(p$5(163));
                }
            } catch (F2) {
              W(b2, b2.return, F2);
            }
            a2 = b2.sibling;
            if (null !== a2) {
              a2.return = b2.return;
              V = a2;
              break;
            }
            V = b2.return;
          }
      n2 = Oj;
      Oj = false;
      return n2;
    }
    function Qj(a2, b2, c2) {
      var d2 = b2.updateQueue;
      d2 = null !== d2 ? d2.lastEffect : null;
      if (null !== d2) {
        var e3 = d2 = d2.next;
        do {
          if ((e3.tag & a2) === a2) {
            var f2 = e3.destroy;
            e3.destroy = void 0;
            void 0 !== f2 && Nj(b2, c2, f2);
          }
          e3 = e3.next;
        } while (e3 !== d2);
      }
    }
    function Rj(a2, b2) {
      b2 = b2.updateQueue;
      b2 = null !== b2 ? b2.lastEffect : null;
      if (null !== b2) {
        var c2 = b2 = b2.next;
        do {
          if ((c2.tag & a2) === a2) {
            var d2 = c2.create;
            c2.destroy = d2();
          }
          c2 = c2.next;
        } while (c2 !== b2);
      }
    }
    function Sj(a2) {
      var b2 = a2.ref;
      if (null !== b2) {
        var c2 = a2.stateNode;
        switch (a2.tag) {
          case 5:
            a2 = c2;
            break;
          default:
            a2 = c2;
        }
        "function" === typeof b2 ? b2(a2) : b2.current = a2;
      }
    }
    function Tj(a2) {
      var b2 = a2.alternate;
      null !== b2 && (a2.alternate = null, Tj(b2));
      a2.child = null;
      a2.deletions = null;
      a2.sibling = null;
      5 === a2.tag && (b2 = a2.stateNode, null !== b2 && (delete b2[Of], delete b2[Pf], delete b2[of], delete b2[Qf], delete b2[Rf]));
      a2.stateNode = null;
      a2.return = null;
      a2.dependencies = null;
      a2.memoizedProps = null;
      a2.memoizedState = null;
      a2.pendingProps = null;
      a2.stateNode = null;
      a2.updateQueue = null;
    }
    function Uj(a2) {
      return 5 === a2.tag || 3 === a2.tag || 4 === a2.tag;
    }
    function Vj(a2) {
      a:
        for (; ; ) {
          for (; null === a2.sibling; ) {
            if (null === a2.return || Uj(a2.return))
              return null;
            a2 = a2.return;
          }
          a2.sibling.return = a2.return;
          for (a2 = a2.sibling; 5 !== a2.tag && 6 !== a2.tag && 18 !== a2.tag; ) {
            if (a2.flags & 2)
              continue a;
            if (null === a2.child || 4 === a2.tag)
              continue a;
            else
              a2.child.return = a2, a2 = a2.child;
          }
          if (!(a2.flags & 2))
            return a2.stateNode;
        }
    }
    function Wj(a2, b2, c2) {
      var d2 = a2.tag;
      if (5 === d2 || 6 === d2)
        a2 = a2.stateNode, b2 ? 8 === c2.nodeType ? c2.parentNode.insertBefore(a2, b2) : c2.insertBefore(a2, b2) : (8 === c2.nodeType ? (b2 = c2.parentNode, b2.insertBefore(a2, c2)) : (b2 = c2, b2.appendChild(a2)), c2 = c2._reactRootContainer, null !== c2 && void 0 !== c2 || null !== b2.onclick || (b2.onclick = Bf));
      else if (4 !== d2 && (a2 = a2.child, null !== a2))
        for (Wj(a2, b2, c2), a2 = a2.sibling; null !== a2; )
          Wj(a2, b2, c2), a2 = a2.sibling;
    }
    function Xj(a2, b2, c2) {
      var d2 = a2.tag;
      if (5 === d2 || 6 === d2)
        a2 = a2.stateNode, b2 ? c2.insertBefore(a2, b2) : c2.appendChild(a2);
      else if (4 !== d2 && (a2 = a2.child, null !== a2))
        for (Xj(a2, b2, c2), a2 = a2.sibling; null !== a2; )
          Xj(a2, b2, c2), a2 = a2.sibling;
    }
    var X$2 = null, Yj = false;
    function Zj(a2, b2, c2) {
      for (c2 = c2.child; null !== c2; )
        ak(a2, b2, c2), c2 = c2.sibling;
    }
    function ak(a2, b2, c2) {
      if (lc && "function" === typeof lc.onCommitFiberUnmount)
        try {
          lc.onCommitFiberUnmount(kc, c2);
        } catch (h2) {
        }
      switch (c2.tag) {
        case 5:
          U$4 || Mj(c2, b2);
        case 6:
          var d2 = X$2, e3 = Yj;
          X$2 = null;
          Zj(a2, b2, c2);
          X$2 = d2;
          Yj = e3;
          null !== X$2 && (Yj ? (a2 = X$2, c2 = c2.stateNode, 8 === a2.nodeType ? a2.parentNode.removeChild(c2) : a2.removeChild(c2)) : X$2.removeChild(c2.stateNode));
          break;
        case 18:
          null !== X$2 && (Yj ? (a2 = X$2, c2 = c2.stateNode, 8 === a2.nodeType ? Kf(a2.parentNode, c2) : 1 === a2.nodeType && Kf(a2, c2), bd(a2)) : Kf(X$2, c2.stateNode));
          break;
        case 4:
          d2 = X$2;
          e3 = Yj;
          X$2 = c2.stateNode.containerInfo;
          Yj = true;
          Zj(a2, b2, c2);
          X$2 = d2;
          Yj = e3;
          break;
        case 0:
        case 11:
        case 14:
        case 15:
          if (!U$4 && (d2 = c2.updateQueue, null !== d2 && (d2 = d2.lastEffect, null !== d2))) {
            e3 = d2 = d2.next;
            do {
              var f2 = e3, g2 = f2.destroy;
              f2 = f2.tag;
              void 0 !== g2 && (0 !== (f2 & 2) ? Nj(c2, b2, g2) : 0 !== (f2 & 4) && Nj(c2, b2, g2));
              e3 = e3.next;
            } while (e3 !== d2);
          }
          Zj(a2, b2, c2);
          break;
        case 1:
          if (!U$4 && (Mj(c2, b2), d2 = c2.stateNode, "function" === typeof d2.componentWillUnmount))
            try {
              d2.props = c2.memoizedProps, d2.state = c2.memoizedState, d2.componentWillUnmount();
            } catch (h2) {
              W(c2, b2, h2);
            }
          Zj(a2, b2, c2);
          break;
        case 21:
          Zj(a2, b2, c2);
          break;
        case 22:
          c2.mode & 1 ? (U$4 = (d2 = U$4) || null !== c2.memoizedState, Zj(a2, b2, c2), U$4 = d2) : Zj(a2, b2, c2);
          break;
        default:
          Zj(a2, b2, c2);
      }
    }
    function bk(a2) {
      var b2 = a2.updateQueue;
      if (null !== b2) {
        a2.updateQueue = null;
        var c2 = a2.stateNode;
        null === c2 && (c2 = a2.stateNode = new Lj());
        b2.forEach(function(b3) {
          var d2 = ck.bind(null, a2, b3);
          c2.has(b3) || (c2.add(b3), b3.then(d2, d2));
        });
      }
    }
    function dk(a2, b2) {
      var c2 = b2.deletions;
      if (null !== c2)
        for (var d2 = 0; d2 < c2.length; d2++) {
          var e3 = c2[d2];
          try {
            var f2 = a2, g2 = b2, h2 = g2;
            a:
              for (; null !== h2; ) {
                switch (h2.tag) {
                  case 5:
                    X$2 = h2.stateNode;
                    Yj = false;
                    break a;
                  case 3:
                    X$2 = h2.stateNode.containerInfo;
                    Yj = true;
                    break a;
                  case 4:
                    X$2 = h2.stateNode.containerInfo;
                    Yj = true;
                    break a;
                }
                h2 = h2.return;
              }
            if (null === X$2)
              throw Error(p$5(160));
            ak(f2, g2, e3);
            X$2 = null;
            Yj = false;
            var k2 = e3.alternate;
            null !== k2 && (k2.return = null);
            e3.return = null;
          } catch (l2) {
            W(e3, b2, l2);
          }
        }
      if (b2.subtreeFlags & 12854)
        for (b2 = b2.child; null !== b2; )
          ek(b2, a2), b2 = b2.sibling;
    }
    function ek(a2, b2) {
      var c2 = a2.alternate, d2 = a2.flags;
      switch (a2.tag) {
        case 0:
        case 11:
        case 14:
        case 15:
          dk(b2, a2);
          fk(a2);
          if (d2 & 4) {
            try {
              Qj(3, a2, a2.return), Rj(3, a2);
            } catch (t2) {
              W(a2, a2.return, t2);
            }
            try {
              Qj(5, a2, a2.return);
            } catch (t2) {
              W(a2, a2.return, t2);
            }
          }
          break;
        case 1:
          dk(b2, a2);
          fk(a2);
          d2 & 512 && null !== c2 && Mj(c2, c2.return);
          break;
        case 5:
          dk(b2, a2);
          fk(a2);
          d2 & 512 && null !== c2 && Mj(c2, c2.return);
          if (a2.flags & 32) {
            var e3 = a2.stateNode;
            try {
              ob(e3, "");
            } catch (t2) {
              W(a2, a2.return, t2);
            }
          }
          if (d2 & 4 && (e3 = a2.stateNode, null != e3)) {
            var f2 = a2.memoizedProps, g2 = null !== c2 ? c2.memoizedProps : f2, h2 = a2.type, k2 = a2.updateQueue;
            a2.updateQueue = null;
            if (null !== k2)
              try {
                "input" === h2 && "radio" === f2.type && null != f2.name && ab(e3, f2);
                vb(h2, g2);
                var l2 = vb(h2, f2);
                for (g2 = 0; g2 < k2.length; g2 += 2) {
                  var m2 = k2[g2], q2 = k2[g2 + 1];
                  "style" === m2 ? sb(e3, q2) : "dangerouslySetInnerHTML" === m2 ? nb(e3, q2) : "children" === m2 ? ob(e3, q2) : ta(e3, m2, q2, l2);
                }
                switch (h2) {
                  case "input":
                    bb(e3, f2);
                    break;
                  case "textarea":
                    ib(e3, f2);
                    break;
                  case "select":
                    var r2 = e3._wrapperState.wasMultiple;
                    e3._wrapperState.wasMultiple = !!f2.multiple;
                    var y2 = f2.value;
                    null != y2 ? fb(e3, !!f2.multiple, y2, false) : r2 !== !!f2.multiple && (null != f2.defaultValue ? fb(
                      e3,
                      !!f2.multiple,
                      f2.defaultValue,
                      true
                    ) : fb(e3, !!f2.multiple, f2.multiple ? [] : "", false));
                }
                e3[Pf] = f2;
              } catch (t2) {
                W(a2, a2.return, t2);
              }
          }
          break;
        case 6:
          dk(b2, a2);
          fk(a2);
          if (d2 & 4) {
            if (null === a2.stateNode)
              throw Error(p$5(162));
            e3 = a2.stateNode;
            f2 = a2.memoizedProps;
            try {
              e3.nodeValue = f2;
            } catch (t2) {
              W(a2, a2.return, t2);
            }
          }
          break;
        case 3:
          dk(b2, a2);
          fk(a2);
          if (d2 & 4 && null !== c2 && c2.memoizedState.isDehydrated)
            try {
              bd(b2.containerInfo);
            } catch (t2) {
              W(a2, a2.return, t2);
            }
          break;
        case 4:
          dk(b2, a2);
          fk(a2);
          break;
        case 13:
          dk(b2, a2);
          fk(a2);
          e3 = a2.child;
          e3.flags & 8192 && (f2 = null !== e3.memoizedState, e3.stateNode.isHidden = f2, !f2 || null !== e3.alternate && null !== e3.alternate.memoizedState || (gk = B()));
          d2 & 4 && bk(a2);
          break;
        case 22:
          m2 = null !== c2 && null !== c2.memoizedState;
          a2.mode & 1 ? (U$4 = (l2 = U$4) || m2, dk(b2, a2), U$4 = l2) : dk(b2, a2);
          fk(a2);
          if (d2 & 8192) {
            l2 = null !== a2.memoizedState;
            if ((a2.stateNode.isHidden = l2) && !m2 && 0 !== (a2.mode & 1))
              for (V = a2, m2 = a2.child; null !== m2; ) {
                for (q2 = V = m2; null !== V; ) {
                  r2 = V;
                  y2 = r2.child;
                  switch (r2.tag) {
                    case 0:
                    case 11:
                    case 14:
                    case 15:
                      Qj(4, r2, r2.return);
                      break;
                    case 1:
                      Mj(r2, r2.return);
                      var n2 = r2.stateNode;
                      if ("function" === typeof n2.componentWillUnmount) {
                        d2 = r2;
                        c2 = r2.return;
                        try {
                          b2 = d2, n2.props = b2.memoizedProps, n2.state = b2.memoizedState, n2.componentWillUnmount();
                        } catch (t2) {
                          W(d2, c2, t2);
                        }
                      }
                      break;
                    case 5:
                      Mj(r2, r2.return);
                      break;
                    case 22:
                      if (null !== r2.memoizedState) {
                        hk(q2);
                        continue;
                      }
                  }
                  null !== y2 ? (y2.return = r2, V = y2) : hk(q2);
                }
                m2 = m2.sibling;
              }
            a:
              for (m2 = null, q2 = a2; ; ) {
                if (5 === q2.tag) {
                  if (null === m2) {
                    m2 = q2;
                    try {
                      e3 = q2.stateNode, l2 ? (f2 = e3.style, "function" === typeof f2.setProperty ? f2.setProperty("display", "none", "important") : f2.display = "none") : (h2 = q2.stateNode, k2 = q2.memoizedProps.style, g2 = void 0 !== k2 && null !== k2 && k2.hasOwnProperty("display") ? k2.display : null, h2.style.display = rb("display", g2));
                    } catch (t2) {
                      W(a2, a2.return, t2);
                    }
                  }
                } else if (6 === q2.tag) {
                  if (null === m2)
                    try {
                      q2.stateNode.nodeValue = l2 ? "" : q2.memoizedProps;
                    } catch (t2) {
                      W(a2, a2.return, t2);
                    }
                } else if ((22 !== q2.tag && 23 !== q2.tag || null === q2.memoizedState || q2 === a2) && null !== q2.child) {
                  q2.child.return = q2;
                  q2 = q2.child;
                  continue;
                }
                if (q2 === a2)
                  break a;
                for (; null === q2.sibling; ) {
                  if (null === q2.return || q2.return === a2)
                    break a;
                  m2 === q2 && (m2 = null);
                  q2 = q2.return;
                }
                m2 === q2 && (m2 = null);
                q2.sibling.return = q2.return;
                q2 = q2.sibling;
              }
          }
          break;
        case 19:
          dk(b2, a2);
          fk(a2);
          d2 & 4 && bk(a2);
          break;
        case 21:
          break;
        default:
          dk(
            b2,
            a2
          ), fk(a2);
      }
    }
    function fk(a2) {
      var b2 = a2.flags;
      if (b2 & 2) {
        try {
          a: {
            for (var c2 = a2.return; null !== c2; ) {
              if (Uj(c2)) {
                var d2 = c2;
                break a;
              }
              c2 = c2.return;
            }
            throw Error(p$5(160));
          }
          switch (d2.tag) {
            case 5:
              var e3 = d2.stateNode;
              d2.flags & 32 && (ob(e3, ""), d2.flags &= -33);
              var f2 = Vj(a2);
              Xj(a2, f2, e3);
              break;
            case 3:
            case 4:
              var g2 = d2.stateNode.containerInfo, h2 = Vj(a2);
              Wj(a2, h2, g2);
              break;
            default:
              throw Error(p$5(161));
          }
        } catch (k2) {
          W(a2, a2.return, k2);
        }
        a2.flags &= -3;
      }
      b2 & 4096 && (a2.flags &= -4097);
    }
    function ik(a2, b2, c2) {
      V = a2;
      jk(a2);
    }
    function jk(a2, b2, c2) {
      for (var d2 = 0 !== (a2.mode & 1); null !== V; ) {
        var e3 = V, f2 = e3.child;
        if (22 === e3.tag && d2) {
          var g2 = null !== e3.memoizedState || Kj;
          if (!g2) {
            var h2 = e3.alternate, k2 = null !== h2 && null !== h2.memoizedState || U$4;
            h2 = Kj;
            var l2 = U$4;
            Kj = g2;
            if ((U$4 = k2) && !l2)
              for (V = e3; null !== V; )
                g2 = V, k2 = g2.child, 22 === g2.tag && null !== g2.memoizedState ? kk(e3) : null !== k2 ? (k2.return = g2, V = k2) : kk(e3);
            for (; null !== f2; )
              V = f2, jk(f2), f2 = f2.sibling;
            V = e3;
            Kj = h2;
            U$4 = l2;
          }
          lk(a2);
        } else
          0 !== (e3.subtreeFlags & 8772) && null !== f2 ? (f2.return = e3, V = f2) : lk(a2);
      }
    }
    function lk(a2) {
      for (; null !== V; ) {
        var b2 = V;
        if (0 !== (b2.flags & 8772)) {
          var c2 = b2.alternate;
          try {
            if (0 !== (b2.flags & 8772))
              switch (b2.tag) {
                case 0:
                case 11:
                case 15:
                  U$4 || Rj(5, b2);
                  break;
                case 1:
                  var d2 = b2.stateNode;
                  if (b2.flags & 4 && !U$4)
                    if (null === c2)
                      d2.componentDidMount();
                    else {
                      var e3 = b2.elementType === b2.type ? c2.memoizedProps : Lg(b2.type, c2.memoizedProps);
                      d2.componentDidUpdate(e3, c2.memoizedState, d2.__reactInternalSnapshotBeforeUpdate);
                    }
                  var f2 = b2.updateQueue;
                  null !== f2 && ih(b2, f2, d2);
                  break;
                case 3:
                  var g2 = b2.updateQueue;
                  if (null !== g2) {
                    c2 = null;
                    if (null !== b2.child)
                      switch (b2.child.tag) {
                        case 5:
                          c2 = b2.child.stateNode;
                          break;
                        case 1:
                          c2 = b2.child.stateNode;
                      }
                    ih(b2, g2, c2);
                  }
                  break;
                case 5:
                  var h2 = b2.stateNode;
                  if (null === c2 && b2.flags & 4) {
                    c2 = h2;
                    var k2 = b2.memoizedProps;
                    switch (b2.type) {
                      case "button":
                      case "input":
                      case "select":
                      case "textarea":
                        k2.autoFocus && c2.focus();
                        break;
                      case "img":
                        k2.src && (c2.src = k2.src);
                    }
                  }
                  break;
                case 6:
                  break;
                case 4:
                  break;
                case 12:
                  break;
                case 13:
                  if (null === b2.memoizedState) {
                    var l2 = b2.alternate;
                    if (null !== l2) {
                      var m2 = l2.memoizedState;
                      if (null !== m2) {
                        var q2 = m2.dehydrated;
                        null !== q2 && bd(q2);
                      }
                    }
                  }
                  break;
                case 19:
                case 17:
                case 21:
                case 22:
                case 23:
                case 25:
                  break;
                default:
                  throw Error(p$5(163));
              }
            U$4 || b2.flags & 512 && Sj(b2);
          } catch (r2) {
            W(b2, b2.return, r2);
          }
        }
        if (b2 === a2) {
          V = null;
          break;
        }
        c2 = b2.sibling;
        if (null !== c2) {
          c2.return = b2.return;
          V = c2;
          break;
        }
        V = b2.return;
      }
    }
    function hk(a2) {
      for (; null !== V; ) {
        var b2 = V;
        if (b2 === a2) {
          V = null;
          break;
        }
        var c2 = b2.sibling;
        if (null !== c2) {
          c2.return = b2.return;
          V = c2;
          break;
        }
        V = b2.return;
      }
    }
    function kk(a2) {
      for (; null !== V; ) {
        var b2 = V;
        try {
          switch (b2.tag) {
            case 0:
            case 11:
            case 15:
              var c2 = b2.return;
              try {
                Rj(4, b2);
              } catch (k2) {
                W(b2, c2, k2);
              }
              break;
            case 1:
              var d2 = b2.stateNode;
              if ("function" === typeof d2.componentDidMount) {
                var e3 = b2.return;
                try {
                  d2.componentDidMount();
                } catch (k2) {
                  W(b2, e3, k2);
                }
              }
              var f2 = b2.return;
              try {
                Sj(b2);
              } catch (k2) {
                W(b2, f2, k2);
              }
              break;
            case 5:
              var g2 = b2.return;
              try {
                Sj(b2);
              } catch (k2) {
                W(b2, g2, k2);
              }
          }
        } catch (k2) {
          W(b2, b2.return, k2);
        }
        if (b2 === a2) {
          V = null;
          break;
        }
        var h2 = b2.sibling;
        if (null !== h2) {
          h2.return = b2.return;
          V = h2;
          break;
        }
        V = b2.return;
      }
    }
    var mk = Math.ceil, nk = ua.ReactCurrentDispatcher, ok = ua.ReactCurrentOwner, pk = ua.ReactCurrentBatchConfig, K = 0, R$1 = null, Y$1 = null, Z$1 = 0, gj = 0, fj = Uf(0), T$5 = 0, qk = null, hh = 0, rk = 0, sk = 0, tk = null, uk = null, gk = 0, Hj = Infinity, vk = null, Pi = false, Qi = null, Si = null, wk = false, xk = null, yk = 0, zk = 0, Ak = null, Bk = -1, Ck = 0;
    function L() {
      return 0 !== (K & 6) ? B() : -1 !== Bk ? Bk : Bk = B();
    }
    function lh(a2) {
      if (0 === (a2.mode & 1))
        return 1;
      if (0 !== (K & 2) && 0 !== Z$1)
        return Z$1 & -Z$1;
      if (null !== Kg.transition)
        return 0 === Ck && (Ck = yc()), Ck;
      a2 = C$3;
      if (0 !== a2)
        return a2;
      a2 = window.event;
      a2 = void 0 === a2 ? 16 : jd(a2.type);
      return a2;
    }
    function mh(a2, b2, c2, d2) {
      if (50 < zk)
        throw zk = 0, Ak = null, Error(p$5(185));
      Ac(a2, c2, d2);
      if (0 === (K & 2) || a2 !== R$1)
        a2 === R$1 && (0 === (K & 2) && (rk |= c2), 4 === T$5 && Dk(a2, Z$1)), Ek(a2, d2), 1 === c2 && 0 === K && 0 === (b2.mode & 1) && (Hj = B() + 500, fg && jg());
    }
    function Ek(a2, b2) {
      var c2 = a2.callbackNode;
      wc(a2, b2);
      var d2 = uc(a2, a2 === R$1 ? Z$1 : 0);
      if (0 === d2)
        null !== c2 && bc(c2), a2.callbackNode = null, a2.callbackPriority = 0;
      else if (b2 = d2 & -d2, a2.callbackPriority !== b2) {
        null != c2 && bc(c2);
        if (1 === b2)
          0 === a2.tag ? ig(Fk.bind(null, a2)) : hg(Fk.bind(null, a2)), Jf(function() {
            0 === (K & 6) && jg();
          }), c2 = null;
        else {
          switch (Dc(d2)) {
            case 1:
              c2 = fc;
              break;
            case 4:
              c2 = gc;
              break;
            case 16:
              c2 = hc;
              break;
            case 536870912:
              c2 = jc;
              break;
            default:
              c2 = hc;
          }
          c2 = Gk(c2, Hk.bind(null, a2));
        }
        a2.callbackPriority = b2;
        a2.callbackNode = c2;
      }
    }
    function Hk(a2, b2) {
      Bk = -1;
      Ck = 0;
      if (0 !== (K & 6))
        throw Error(p$5(327));
      var c2 = a2.callbackNode;
      if (Ik() && a2.callbackNode !== c2)
        return null;
      var d2 = uc(a2, a2 === R$1 ? Z$1 : 0);
      if (0 === d2)
        return null;
      if (0 !== (d2 & 30) || 0 !== (d2 & a2.expiredLanes) || b2)
        b2 = Jk(a2, d2);
      else {
        b2 = d2;
        var e3 = K;
        K |= 2;
        var f2 = Kk();
        if (R$1 !== a2 || Z$1 !== b2)
          vk = null, Hj = B() + 500, Lk(a2, b2);
        do
          try {
            Mk();
            break;
          } catch (h2) {
            Nk(a2, h2);
          }
        while (1);
        Qg();
        nk.current = f2;
        K = e3;
        null !== Y$1 ? b2 = 0 : (R$1 = null, Z$1 = 0, b2 = T$5);
      }
      if (0 !== b2) {
        2 === b2 && (e3 = xc(a2), 0 !== e3 && (d2 = e3, b2 = Ok(a2, e3)));
        if (1 === b2)
          throw c2 = qk, Lk(a2, 0), Dk(a2, d2), Ek(a2, B()), c2;
        if (6 === b2)
          Dk(a2, d2);
        else {
          e3 = a2.current.alternate;
          if (0 === (d2 & 30) && !Pk(e3) && (b2 = Jk(a2, d2), 2 === b2 && (f2 = xc(a2), 0 !== f2 && (d2 = f2, b2 = Ok(a2, f2))), 1 === b2))
            throw c2 = qk, Lk(a2, 0), Dk(a2, d2), Ek(a2, B()), c2;
          a2.finishedWork = e3;
          a2.finishedLanes = d2;
          switch (b2) {
            case 0:
            case 1:
              throw Error(p$5(345));
            case 2:
              Qk(a2, uk, vk);
              break;
            case 3:
              Dk(a2, d2);
              if ((d2 & 130023424) === d2 && (b2 = gk + 500 - B(), 10 < b2)) {
                if (0 !== uc(a2, 0))
                  break;
                e3 = a2.suspendedLanes;
                if ((e3 & d2) !== d2) {
                  L();
                  a2.pingedLanes |= a2.suspendedLanes & e3;
                  break;
                }
                a2.timeoutHandle = Ff(Qk.bind(null, a2, uk, vk), b2);
                break;
              }
              Qk(a2, uk, vk);
              break;
            case 4:
              Dk(a2, d2);
              if ((d2 & 4194240) === d2)
                break;
              b2 = a2.eventTimes;
              for (e3 = -1; 0 < d2; ) {
                var g2 = 31 - oc(d2);
                f2 = 1 << g2;
                g2 = b2[g2];
                g2 > e3 && (e3 = g2);
                d2 &= ~f2;
              }
              d2 = e3;
              d2 = B() - d2;
              d2 = (120 > d2 ? 120 : 480 > d2 ? 480 : 1080 > d2 ? 1080 : 1920 > d2 ? 1920 : 3e3 > d2 ? 3e3 : 4320 > d2 ? 4320 : 1960 * mk(d2 / 1960)) - d2;
              if (10 < d2) {
                a2.timeoutHandle = Ff(Qk.bind(null, a2, uk, vk), d2);
                break;
              }
              Qk(a2, uk, vk);
              break;
            case 5:
              Qk(a2, uk, vk);
              break;
            default:
              throw Error(p$5(329));
          }
        }
      }
      Ek(a2, B());
      return a2.callbackNode === c2 ? Hk.bind(null, a2) : null;
    }
    function Ok(a2, b2) {
      var c2 = tk;
      a2.current.memoizedState.isDehydrated && (Lk(a2, b2).flags |= 256);
      a2 = Jk(a2, b2);
      2 !== a2 && (b2 = uk, uk = c2, null !== b2 && Gj(b2));
      return a2;
    }
    function Gj(a2) {
      null === uk ? uk = a2 : uk.push.apply(uk, a2);
    }
    function Pk(a2) {
      for (var b2 = a2; ; ) {
        if (b2.flags & 16384) {
          var c2 = b2.updateQueue;
          if (null !== c2 && (c2 = c2.stores, null !== c2))
            for (var d2 = 0; d2 < c2.length; d2++) {
              var e3 = c2[d2], f2 = e3.getSnapshot;
              e3 = e3.value;
              try {
                if (!He$4(f2(), e3))
                  return false;
              } catch (g2) {
                return false;
              }
            }
        }
        c2 = b2.child;
        if (b2.subtreeFlags & 16384 && null !== c2)
          c2.return = b2, b2 = c2;
        else {
          if (b2 === a2)
            break;
          for (; null === b2.sibling; ) {
            if (null === b2.return || b2.return === a2)
              return true;
            b2 = b2.return;
          }
          b2.sibling.return = b2.return;
          b2 = b2.sibling;
        }
      }
      return true;
    }
    function Dk(a2, b2) {
      b2 &= ~sk;
      b2 &= ~rk;
      a2.suspendedLanes |= b2;
      a2.pingedLanes &= ~b2;
      for (a2 = a2.expirationTimes; 0 < b2; ) {
        var c2 = 31 - oc(b2), d2 = 1 << c2;
        a2[c2] = -1;
        b2 &= ~d2;
      }
    }
    function Fk(a2) {
      if (0 !== (K & 6))
        throw Error(p$5(327));
      Ik();
      var b2 = uc(a2, 0);
      if (0 === (b2 & 1))
        return Ek(a2, B()), null;
      var c2 = Jk(a2, b2);
      if (0 !== a2.tag && 2 === c2) {
        var d2 = xc(a2);
        0 !== d2 && (b2 = d2, c2 = Ok(a2, d2));
      }
      if (1 === c2)
        throw c2 = qk, Lk(a2, 0), Dk(a2, b2), Ek(a2, B()), c2;
      if (6 === c2)
        throw Error(p$5(345));
      a2.finishedWork = a2.current.alternate;
      a2.finishedLanes = b2;
      Qk(a2, uk, vk);
      Ek(a2, B());
      return null;
    }
    function Rk(a2, b2) {
      var c2 = K;
      K |= 1;
      try {
        return a2(b2);
      } finally {
        K = c2, 0 === K && (Hj = B() + 500, fg && jg());
      }
    }
    function Sk(a2) {
      null !== xk && 0 === xk.tag && 0 === (K & 6) && Ik();
      var b2 = K;
      K |= 1;
      var c2 = pk.transition, d2 = C$3;
      try {
        if (pk.transition = null, C$3 = 1, a2)
          return a2();
      } finally {
        C$3 = d2, pk.transition = c2, K = b2, 0 === (K & 6) && jg();
      }
    }
    function Ij() {
      gj = fj.current;
      E$1(fj);
    }
    function Lk(a2, b2) {
      a2.finishedWork = null;
      a2.finishedLanes = 0;
      var c2 = a2.timeoutHandle;
      -1 !== c2 && (a2.timeoutHandle = -1, Gf(c2));
      if (null !== Y$1)
        for (c2 = Y$1.return; null !== c2; ) {
          var d2 = c2;
          wg(d2);
          switch (d2.tag) {
            case 1:
              d2 = d2.type.childContextTypes;
              null !== d2 && void 0 !== d2 && $f();
              break;
            case 3:
              Jh();
              E$1(Wf);
              E$1(H$1);
              Oh();
              break;
            case 5:
              Lh(d2);
              break;
            case 4:
              Jh();
              break;
            case 13:
              E$1(M$3);
              break;
            case 19:
              E$1(M$3);
              break;
            case 10:
              Rg(d2.type._context);
              break;
            case 22:
            case 23:
              Ij();
          }
          c2 = c2.return;
        }
      R$1 = a2;
      Y$1 = a2 = wh(a2.current, null);
      Z$1 = gj = b2;
      T$5 = 0;
      qk = null;
      sk = rk = hh = 0;
      uk = tk = null;
      if (null !== Wg) {
        for (b2 = 0; b2 < Wg.length; b2++)
          if (c2 = Wg[b2], d2 = c2.interleaved, null !== d2) {
            c2.interleaved = null;
            var e3 = d2.next, f2 = c2.pending;
            if (null !== f2) {
              var g2 = f2.next;
              f2.next = e3;
              d2.next = g2;
            }
            c2.pending = d2;
          }
        Wg = null;
      }
      return a2;
    }
    function Nk(a2, b2) {
      do {
        var c2 = Y$1;
        try {
          Qg();
          Ph.current = ai;
          if (Sh) {
            for (var d2 = N$3.memoizedState; null !== d2; ) {
              var e3 = d2.queue;
              null !== e3 && (e3.pending = null);
              d2 = d2.next;
            }
            Sh = false;
          }
          Rh = 0;
          P$2 = O$2 = N$3 = null;
          Th = false;
          Uh = 0;
          ok.current = null;
          if (null === c2 || null === c2.return) {
            T$5 = 1;
            qk = b2;
            Y$1 = null;
            break;
          }
          a: {
            var f2 = a2, g2 = c2.return, h2 = c2, k2 = b2;
            b2 = Z$1;
            h2.flags |= 32768;
            if (null !== k2 && "object" === typeof k2 && "function" === typeof k2.then) {
              var l2 = k2, m2 = h2, q2 = m2.tag;
              if (0 === (m2.mode & 1) && (0 === q2 || 11 === q2 || 15 === q2)) {
                var r2 = m2.alternate;
                r2 ? (m2.updateQueue = r2.updateQueue, m2.memoizedState = r2.memoizedState, m2.lanes = r2.lanes) : (m2.updateQueue = null, m2.memoizedState = null);
              }
              var y2 = Vi(g2);
              if (null !== y2) {
                y2.flags &= -257;
                Wi(y2, g2, h2, f2, b2);
                y2.mode & 1 && Ti(f2, l2, b2);
                b2 = y2;
                k2 = l2;
                var n2 = b2.updateQueue;
                if (null === n2) {
                  var t2 = /* @__PURE__ */ new Set();
                  t2.add(k2);
                  b2.updateQueue = t2;
                } else
                  n2.add(k2);
                break a;
              } else {
                if (0 === (b2 & 1)) {
                  Ti(f2, l2, b2);
                  uj();
                  break a;
                }
                k2 = Error(p$5(426));
              }
            } else if (I$7 && h2.mode & 1) {
              var J2 = Vi(g2);
              if (null !== J2) {
                0 === (J2.flags & 65536) && (J2.flags |= 256);
                Wi(J2, g2, h2, f2, b2);
                Jg(Ki(k2, h2));
                break a;
              }
            }
            f2 = k2 = Ki(k2, h2);
            4 !== T$5 && (T$5 = 2);
            null === tk ? tk = [f2] : tk.push(f2);
            f2 = g2;
            do {
              switch (f2.tag) {
                case 3:
                  f2.flags |= 65536;
                  b2 &= -b2;
                  f2.lanes |= b2;
                  var x2 = Oi(f2, k2, b2);
                  fh(f2, x2);
                  break a;
                case 1:
                  h2 = k2;
                  var w2 = f2.type, u2 = f2.stateNode;
                  if (0 === (f2.flags & 128) && ("function" === typeof w2.getDerivedStateFromError || null !== u2 && "function" === typeof u2.componentDidCatch && (null === Si || !Si.has(u2)))) {
                    f2.flags |= 65536;
                    b2 &= -b2;
                    f2.lanes |= b2;
                    var F2 = Ri(f2, h2, b2);
                    fh(f2, F2);
                    break a;
                  }
              }
              f2 = f2.return;
            } while (null !== f2);
          }
          Tk(c2);
        } catch (na) {
          b2 = na;
          Y$1 === c2 && null !== c2 && (Y$1 = c2 = c2.return);
          continue;
        }
        break;
      } while (1);
    }
    function Kk() {
      var a2 = nk.current;
      nk.current = ai;
      return null === a2 ? ai : a2;
    }
    function uj() {
      if (0 === T$5 || 3 === T$5 || 2 === T$5)
        T$5 = 4;
      null === R$1 || 0 === (hh & 268435455) && 0 === (rk & 268435455) || Dk(R$1, Z$1);
    }
    function Jk(a2, b2) {
      var c2 = K;
      K |= 2;
      var d2 = Kk();
      if (R$1 !== a2 || Z$1 !== b2)
        vk = null, Lk(a2, b2);
      do
        try {
          Uk();
          break;
        } catch (e3) {
          Nk(a2, e3);
        }
      while (1);
      Qg();
      K = c2;
      nk.current = d2;
      if (null !== Y$1)
        throw Error(p$5(261));
      R$1 = null;
      Z$1 = 0;
      return T$5;
    }
    function Uk() {
      for (; null !== Y$1; )
        Vk(Y$1);
    }
    function Mk() {
      for (; null !== Y$1 && !cc(); )
        Vk(Y$1);
    }
    function Vk(a2) {
      var b2 = Wk(a2.alternate, a2, gj);
      a2.memoizedProps = a2.pendingProps;
      null === b2 ? Tk(a2) : Y$1 = b2;
      ok.current = null;
    }
    function Tk(a2) {
      var b2 = a2;
      do {
        var c2 = b2.alternate;
        a2 = b2.return;
        if (0 === (b2.flags & 32768)) {
          if (c2 = Fj(c2, b2, gj), null !== c2) {
            Y$1 = c2;
            return;
          }
        } else {
          c2 = Jj(c2, b2);
          if (null !== c2) {
            c2.flags &= 32767;
            Y$1 = c2;
            return;
          }
          if (null !== a2)
            a2.flags |= 32768, a2.subtreeFlags = 0, a2.deletions = null;
          else {
            T$5 = 6;
            Y$1 = null;
            return;
          }
        }
        b2 = b2.sibling;
        if (null !== b2) {
          Y$1 = b2;
          return;
        }
        Y$1 = b2 = a2;
      } while (null !== b2);
      0 === T$5 && (T$5 = 5);
    }
    function Qk(a2, b2, c2) {
      var d2 = C$3, e3 = pk.transition;
      try {
        pk.transition = null, C$3 = 1, Xk(a2, b2, c2, d2);
      } finally {
        pk.transition = e3, C$3 = d2;
      }
      return null;
    }
    function Xk(a2, b2, c2, d2) {
      do
        Ik();
      while (null !== xk);
      if (0 !== (K & 6))
        throw Error(p$5(327));
      c2 = a2.finishedWork;
      var e3 = a2.finishedLanes;
      if (null === c2)
        return null;
      a2.finishedWork = null;
      a2.finishedLanes = 0;
      if (c2 === a2.current)
        throw Error(p$5(177));
      a2.callbackNode = null;
      a2.callbackPriority = 0;
      var f2 = c2.lanes | c2.childLanes;
      Bc(a2, f2);
      a2 === R$1 && (Y$1 = R$1 = null, Z$1 = 0);
      0 === (c2.subtreeFlags & 2064) && 0 === (c2.flags & 2064) || wk || (wk = true, Gk(hc, function() {
        Ik();
        return null;
      }));
      f2 = 0 !== (c2.flags & 15990);
      if (0 !== (c2.subtreeFlags & 15990) || f2) {
        f2 = pk.transition;
        pk.transition = null;
        var g2 = C$3;
        C$3 = 1;
        var h2 = K;
        K |= 4;
        ok.current = null;
        Pj(a2, c2);
        ek(c2, a2);
        Oe(Df);
        dd = !!Cf;
        Df = Cf = null;
        a2.current = c2;
        ik(c2);
        dc();
        K = h2;
        C$3 = g2;
        pk.transition = f2;
      } else
        a2.current = c2;
      wk && (wk = false, xk = a2, yk = e3);
      f2 = a2.pendingLanes;
      0 === f2 && (Si = null);
      mc(c2.stateNode);
      Ek(a2, B());
      if (null !== b2)
        for (d2 = a2.onRecoverableError, c2 = 0; c2 < b2.length; c2++)
          e3 = b2[c2], d2(e3.value, { componentStack: e3.stack, digest: e3.digest });
      if (Pi)
        throw Pi = false, a2 = Qi, Qi = null, a2;
      0 !== (yk & 1) && 0 !== a2.tag && Ik();
      f2 = a2.pendingLanes;
      0 !== (f2 & 1) ? a2 === Ak ? zk++ : (zk = 0, Ak = a2) : zk = 0;
      jg();
      return null;
    }
    function Ik() {
      if (null !== xk) {
        var a2 = Dc(yk), b2 = pk.transition, c2 = C$3;
        try {
          pk.transition = null;
          C$3 = 16 > a2 ? 16 : a2;
          if (null === xk)
            var d2 = false;
          else {
            a2 = xk;
            xk = null;
            yk = 0;
            if (0 !== (K & 6))
              throw Error(p$5(331));
            var e3 = K;
            K |= 4;
            for (V = a2.current; null !== V; ) {
              var f2 = V, g2 = f2.child;
              if (0 !== (V.flags & 16)) {
                var h2 = f2.deletions;
                if (null !== h2) {
                  for (var k2 = 0; k2 < h2.length; k2++) {
                    var l2 = h2[k2];
                    for (V = l2; null !== V; ) {
                      var m2 = V;
                      switch (m2.tag) {
                        case 0:
                        case 11:
                        case 15:
                          Qj(8, m2, f2);
                      }
                      var q2 = m2.child;
                      if (null !== q2)
                        q2.return = m2, V = q2;
                      else
                        for (; null !== V; ) {
                          m2 = V;
                          var r2 = m2.sibling, y2 = m2.return;
                          Tj(m2);
                          if (m2 === l2) {
                            V = null;
                            break;
                          }
                          if (null !== r2) {
                            r2.return = y2;
                            V = r2;
                            break;
                          }
                          V = y2;
                        }
                    }
                  }
                  var n2 = f2.alternate;
                  if (null !== n2) {
                    var t2 = n2.child;
                    if (null !== t2) {
                      n2.child = null;
                      do {
                        var J2 = t2.sibling;
                        t2.sibling = null;
                        t2 = J2;
                      } while (null !== t2);
                    }
                  }
                  V = f2;
                }
              }
              if (0 !== (f2.subtreeFlags & 2064) && null !== g2)
                g2.return = f2, V = g2;
              else
                b:
                  for (; null !== V; ) {
                    f2 = V;
                    if (0 !== (f2.flags & 2048))
                      switch (f2.tag) {
                        case 0:
                        case 11:
                        case 15:
                          Qj(9, f2, f2.return);
                      }
                    var x2 = f2.sibling;
                    if (null !== x2) {
                      x2.return = f2.return;
                      V = x2;
                      break b;
                    }
                    V = f2.return;
                  }
            }
            var w2 = a2.current;
            for (V = w2; null !== V; ) {
              g2 = V;
              var u2 = g2.child;
              if (0 !== (g2.subtreeFlags & 2064) && null !== u2)
                u2.return = g2, V = u2;
              else
                b:
                  for (g2 = w2; null !== V; ) {
                    h2 = V;
                    if (0 !== (h2.flags & 2048))
                      try {
                        switch (h2.tag) {
                          case 0:
                          case 11:
                          case 15:
                            Rj(9, h2);
                        }
                      } catch (na) {
                        W(h2, h2.return, na);
                      }
                    if (h2 === g2) {
                      V = null;
                      break b;
                    }
                    var F2 = h2.sibling;
                    if (null !== F2) {
                      F2.return = h2.return;
                      V = F2;
                      break b;
                    }
                    V = h2.return;
                  }
            }
            K = e3;
            jg();
            if (lc && "function" === typeof lc.onPostCommitFiberRoot)
              try {
                lc.onPostCommitFiberRoot(kc, a2);
              } catch (na) {
              }
            d2 = true;
          }
          return d2;
        } finally {
          C$3 = c2, pk.transition = b2;
        }
      }
      return false;
    }
    function Yk(a2, b2, c2) {
      b2 = Ki(c2, b2);
      b2 = Oi(a2, b2, 1);
      a2 = dh(a2, b2, 1);
      b2 = L();
      null !== a2 && (Ac(a2, 1, b2), Ek(a2, b2));
    }
    function W(a2, b2, c2) {
      if (3 === a2.tag)
        Yk(a2, a2, c2);
      else
        for (; null !== b2; ) {
          if (3 === b2.tag) {
            Yk(b2, a2, c2);
            break;
          } else if (1 === b2.tag) {
            var d2 = b2.stateNode;
            if ("function" === typeof b2.type.getDerivedStateFromError || "function" === typeof d2.componentDidCatch && (null === Si || !Si.has(d2))) {
              a2 = Ki(c2, a2);
              a2 = Ri(b2, a2, 1);
              b2 = dh(b2, a2, 1);
              a2 = L();
              null !== b2 && (Ac(b2, 1, a2), Ek(b2, a2));
              break;
            }
          }
          b2 = b2.return;
        }
    }
    function Ui(a2, b2, c2) {
      var d2 = a2.pingCache;
      null !== d2 && d2.delete(b2);
      b2 = L();
      a2.pingedLanes |= a2.suspendedLanes & c2;
      R$1 === a2 && (Z$1 & c2) === c2 && (4 === T$5 || 3 === T$5 && (Z$1 & 130023424) === Z$1 && 500 > B() - gk ? Lk(a2, 0) : sk |= c2);
      Ek(a2, b2);
    }
    function Zk(a2, b2) {
      0 === b2 && (0 === (a2.mode & 1) ? b2 = 1 : (b2 = sc, sc <<= 1, 0 === (sc & 130023424) && (sc = 4194304)));
      var c2 = L();
      a2 = Zg(a2, b2);
      null !== a2 && (Ac(a2, b2, c2), Ek(a2, c2));
    }
    function vj(a2) {
      var b2 = a2.memoizedState, c2 = 0;
      null !== b2 && (c2 = b2.retryLane);
      Zk(a2, c2);
    }
    function ck(a2, b2) {
      var c2 = 0;
      switch (a2.tag) {
        case 13:
          var d2 = a2.stateNode;
          var e3 = a2.memoizedState;
          null !== e3 && (c2 = e3.retryLane);
          break;
        case 19:
          d2 = a2.stateNode;
          break;
        default:
          throw Error(p$5(314));
      }
      null !== d2 && d2.delete(b2);
      Zk(a2, c2);
    }
    var Wk;
    Wk = function(a2, b2, c2) {
      if (null !== a2)
        if (a2.memoizedProps !== b2.pendingProps || Wf.current)
          Ug = true;
        else {
          if (0 === (a2.lanes & c2) && 0 === (b2.flags & 128))
            return Ug = false, zj(a2, b2, c2);
          Ug = 0 !== (a2.flags & 131072) ? true : false;
        }
      else
        Ug = false, I$7 && 0 !== (b2.flags & 1048576) && ug(b2, ng, b2.index);
      b2.lanes = 0;
      switch (b2.tag) {
        case 2:
          var d2 = b2.type;
          jj(a2, b2);
          a2 = b2.pendingProps;
          var e3 = Yf(b2, H$1.current);
          Tg(b2, c2);
          e3 = Xh(null, b2, d2, a2, e3, c2);
          var f2 = bi();
          b2.flags |= 1;
          "object" === typeof e3 && null !== e3 && "function" === typeof e3.render && void 0 === e3.$$typeof ? (b2.tag = 1, b2.memoizedState = null, b2.updateQueue = null, Zf(d2) ? (f2 = true, cg(b2)) : f2 = false, b2.memoizedState = null !== e3.state && void 0 !== e3.state ? e3.state : null, ah(b2), e3.updater = nh, b2.stateNode = e3, e3._reactInternals = b2, rh(b2, d2, a2, c2), b2 = kj(null, b2, d2, true, f2, c2)) : (b2.tag = 0, I$7 && f2 && vg(b2), Yi(null, b2, e3, c2), b2 = b2.child);
          return b2;
        case 16:
          d2 = b2.elementType;
          a: {
            jj(a2, b2);
            a2 = b2.pendingProps;
            e3 = d2._init;
            d2 = e3(d2._payload);
            b2.type = d2;
            e3 = b2.tag = $k(d2);
            a2 = Lg(d2, a2);
            switch (e3) {
              case 0:
                b2 = dj(null, b2, d2, a2, c2);
                break a;
              case 1:
                b2 = ij(null, b2, d2, a2, c2);
                break a;
              case 11:
                b2 = Zi(null, b2, d2, a2, c2);
                break a;
              case 14:
                b2 = aj(null, b2, d2, Lg(d2.type, a2), c2);
                break a;
            }
            throw Error(p$5(
              306,
              d2,
              ""
            ));
          }
          return b2;
        case 0:
          return d2 = b2.type, e3 = b2.pendingProps, e3 = b2.elementType === d2 ? e3 : Lg(d2, e3), dj(a2, b2, d2, e3, c2);
        case 1:
          return d2 = b2.type, e3 = b2.pendingProps, e3 = b2.elementType === d2 ? e3 : Lg(d2, e3), ij(a2, b2, d2, e3, c2);
        case 3:
          a: {
            lj(b2);
            if (null === a2)
              throw Error(p$5(387));
            d2 = b2.pendingProps;
            f2 = b2.memoizedState;
            e3 = f2.element;
            bh(a2, b2);
            gh(b2, d2, null, c2);
            var g2 = b2.memoizedState;
            d2 = g2.element;
            if (f2.isDehydrated)
              if (f2 = { element: d2, isDehydrated: false, cache: g2.cache, pendingSuspenseBoundaries: g2.pendingSuspenseBoundaries, transitions: g2.transitions }, b2.updateQueue.baseState = f2, b2.memoizedState = f2, b2.flags & 256) {
                e3 = Ki(Error(p$5(423)), b2);
                b2 = mj(a2, b2, d2, c2, e3);
                break a;
              } else if (d2 !== e3) {
                e3 = Ki(Error(p$5(424)), b2);
                b2 = mj(a2, b2, d2, c2, e3);
                break a;
              } else
                for (yg = Lf(b2.stateNode.containerInfo.firstChild), xg = b2, I$7 = true, zg = null, c2 = Ch(b2, null, d2, c2), b2.child = c2; c2; )
                  c2.flags = c2.flags & -3 | 4096, c2 = c2.sibling;
            else {
              Ig();
              if (d2 === e3) {
                b2 = $i(a2, b2, c2);
                break a;
              }
              Yi(a2, b2, d2, c2);
            }
            b2 = b2.child;
          }
          return b2;
        case 5:
          return Kh(b2), null === a2 && Eg(b2), d2 = b2.type, e3 = b2.pendingProps, f2 = null !== a2 ? a2.memoizedProps : null, g2 = e3.children, Ef(d2, e3) ? g2 = null : null !== f2 && Ef(d2, f2) && (b2.flags |= 32), hj(a2, b2), Yi(a2, b2, g2, c2), b2.child;
        case 6:
          return null === a2 && Eg(b2), null;
        case 13:
          return pj(a2, b2, c2);
        case 4:
          return Ih(b2, b2.stateNode.containerInfo), d2 = b2.pendingProps, null === a2 ? b2.child = Bh(b2, null, d2, c2) : Yi(a2, b2, d2, c2), b2.child;
        case 11:
          return d2 = b2.type, e3 = b2.pendingProps, e3 = b2.elementType === d2 ? e3 : Lg(d2, e3), Zi(a2, b2, d2, e3, c2);
        case 7:
          return Yi(a2, b2, b2.pendingProps, c2), b2.child;
        case 8:
          return Yi(a2, b2, b2.pendingProps.children, c2), b2.child;
        case 12:
          return Yi(a2, b2, b2.pendingProps.children, c2), b2.child;
        case 10:
          a: {
            d2 = b2.type._context;
            e3 = b2.pendingProps;
            f2 = b2.memoizedProps;
            g2 = e3.value;
            G$1(Mg, d2._currentValue);
            d2._currentValue = g2;
            if (null !== f2)
              if (He$4(f2.value, g2)) {
                if (f2.children === e3.children && !Wf.current) {
                  b2 = $i(a2, b2, c2);
                  break a;
                }
              } else
                for (f2 = b2.child, null !== f2 && (f2.return = b2); null !== f2; ) {
                  var h2 = f2.dependencies;
                  if (null !== h2) {
                    g2 = f2.child;
                    for (var k2 = h2.firstContext; null !== k2; ) {
                      if (k2.context === d2) {
                        if (1 === f2.tag) {
                          k2 = ch(-1, c2 & -c2);
                          k2.tag = 2;
                          var l2 = f2.updateQueue;
                          if (null !== l2) {
                            l2 = l2.shared;
                            var m2 = l2.pending;
                            null === m2 ? k2.next = k2 : (k2.next = m2.next, m2.next = k2);
                            l2.pending = k2;
                          }
                        }
                        f2.lanes |= c2;
                        k2 = f2.alternate;
                        null !== k2 && (k2.lanes |= c2);
                        Sg(
                          f2.return,
                          c2,
                          b2
                        );
                        h2.lanes |= c2;
                        break;
                      }
                      k2 = k2.next;
                    }
                  } else if (10 === f2.tag)
                    g2 = f2.type === b2.type ? null : f2.child;
                  else if (18 === f2.tag) {
                    g2 = f2.return;
                    if (null === g2)
                      throw Error(p$5(341));
                    g2.lanes |= c2;
                    h2 = g2.alternate;
                    null !== h2 && (h2.lanes |= c2);
                    Sg(g2, c2, b2);
                    g2 = f2.sibling;
                  } else
                    g2 = f2.child;
                  if (null !== g2)
                    g2.return = f2;
                  else
                    for (g2 = f2; null !== g2; ) {
                      if (g2 === b2) {
                        g2 = null;
                        break;
                      }
                      f2 = g2.sibling;
                      if (null !== f2) {
                        f2.return = g2.return;
                        g2 = f2;
                        break;
                      }
                      g2 = g2.return;
                    }
                  f2 = g2;
                }
            Yi(a2, b2, e3.children, c2);
            b2 = b2.child;
          }
          return b2;
        case 9:
          return e3 = b2.type, d2 = b2.pendingProps.children, Tg(b2, c2), e3 = Vg(e3), d2 = d2(e3), b2.flags |= 1, Yi(a2, b2, d2, c2), b2.child;
        case 14:
          return d2 = b2.type, e3 = Lg(d2, b2.pendingProps), e3 = Lg(d2.type, e3), aj(a2, b2, d2, e3, c2);
        case 15:
          return cj(a2, b2, b2.type, b2.pendingProps, c2);
        case 17:
          return d2 = b2.type, e3 = b2.pendingProps, e3 = b2.elementType === d2 ? e3 : Lg(d2, e3), jj(a2, b2), b2.tag = 1, Zf(d2) ? (a2 = true, cg(b2)) : a2 = false, Tg(b2, c2), ph(b2, d2, e3), rh(b2, d2, e3, c2), kj(null, b2, d2, true, a2, c2);
        case 19:
          return yj(a2, b2, c2);
        case 22:
          return ej(a2, b2, c2);
      }
      throw Error(p$5(156, b2.tag));
    };
    function Gk(a2, b2) {
      return ac(a2, b2);
    }
    function al(a2, b2, c2, d2) {
      this.tag = a2;
      this.key = c2;
      this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;
      this.index = 0;
      this.ref = null;
      this.pendingProps = b2;
      this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;
      this.mode = d2;
      this.subtreeFlags = this.flags = 0;
      this.deletions = null;
      this.childLanes = this.lanes = 0;
      this.alternate = null;
    }
    function Bg(a2, b2, c2, d2) {
      return new al(a2, b2, c2, d2);
    }
    function bj(a2) {
      a2 = a2.prototype;
      return !(!a2 || !a2.isReactComponent);
    }
    function $k(a2) {
      if ("function" === typeof a2)
        return bj(a2) ? 1 : 0;
      if (void 0 !== a2 && null !== a2) {
        a2 = a2.$$typeof;
        if (a2 === Da)
          return 11;
        if (a2 === Ga)
          return 14;
      }
      return 2;
    }
    function wh(a2, b2) {
      var c2 = a2.alternate;
      null === c2 ? (c2 = Bg(a2.tag, b2, a2.key, a2.mode), c2.elementType = a2.elementType, c2.type = a2.type, c2.stateNode = a2.stateNode, c2.alternate = a2, a2.alternate = c2) : (c2.pendingProps = b2, c2.type = a2.type, c2.flags = 0, c2.subtreeFlags = 0, c2.deletions = null);
      c2.flags = a2.flags & 14680064;
      c2.childLanes = a2.childLanes;
      c2.lanes = a2.lanes;
      c2.child = a2.child;
      c2.memoizedProps = a2.memoizedProps;
      c2.memoizedState = a2.memoizedState;
      c2.updateQueue = a2.updateQueue;
      b2 = a2.dependencies;
      c2.dependencies = null === b2 ? null : { lanes: b2.lanes, firstContext: b2.firstContext };
      c2.sibling = a2.sibling;
      c2.index = a2.index;
      c2.ref = a2.ref;
      return c2;
    }
    function yh(a2, b2, c2, d2, e3, f2) {
      var g2 = 2;
      d2 = a2;
      if ("function" === typeof a2)
        bj(a2) && (g2 = 1);
      else if ("string" === typeof a2)
        g2 = 5;
      else
        a:
          switch (a2) {
            case ya:
              return Ah(c2.children, e3, f2, b2);
            case za:
              g2 = 8;
              e3 |= 8;
              break;
            case Aa:
              return a2 = Bg(12, c2, b2, e3 | 2), a2.elementType = Aa, a2.lanes = f2, a2;
            case Ea:
              return a2 = Bg(13, c2, b2, e3), a2.elementType = Ea, a2.lanes = f2, a2;
            case Fa:
              return a2 = Bg(19, c2, b2, e3), a2.elementType = Fa, a2.lanes = f2, a2;
            case Ia:
              return qj(c2, e3, f2, b2);
            default:
              if ("object" === typeof a2 && null !== a2)
                switch (a2.$$typeof) {
                  case Ba:
                    g2 = 10;
                    break a;
                  case Ca:
                    g2 = 9;
                    break a;
                  case Da:
                    g2 = 11;
                    break a;
                  case Ga:
                    g2 = 14;
                    break a;
                  case Ha:
                    g2 = 16;
                    d2 = null;
                    break a;
                }
              throw Error(p$5(130, null == a2 ? a2 : typeof a2, ""));
          }
      b2 = Bg(g2, c2, b2, e3);
      b2.elementType = a2;
      b2.type = d2;
      b2.lanes = f2;
      return b2;
    }
    function Ah(a2, b2, c2, d2) {
      a2 = Bg(7, a2, d2, b2);
      a2.lanes = c2;
      return a2;
    }
    function qj(a2, b2, c2, d2) {
      a2 = Bg(22, a2, d2, b2);
      a2.elementType = Ia;
      a2.lanes = c2;
      a2.stateNode = { isHidden: false };
      return a2;
    }
    function xh(a2, b2, c2) {
      a2 = Bg(6, a2, null, b2);
      a2.lanes = c2;
      return a2;
    }
    function zh(a2, b2, c2) {
      b2 = Bg(4, null !== a2.children ? a2.children : [], a2.key, b2);
      b2.lanes = c2;
      b2.stateNode = { containerInfo: a2.containerInfo, pendingChildren: null, implementation: a2.implementation };
      return b2;
    }
    function bl(a2, b2, c2, d2, e3) {
      this.tag = b2;
      this.containerInfo = a2;
      this.finishedWork = this.pingCache = this.current = this.pendingChildren = null;
      this.timeoutHandle = -1;
      this.callbackNode = this.pendingContext = this.context = null;
      this.callbackPriority = 0;
      this.eventTimes = zc(0);
      this.expirationTimes = zc(-1);
      this.entangledLanes = this.finishedLanes = this.mutableReadLanes = this.expiredLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0;
      this.entanglements = zc(0);
      this.identifierPrefix = d2;
      this.onRecoverableError = e3;
      this.mutableSourceEagerHydrationData = null;
    }
    function cl(a2, b2, c2, d2, e3, f2, g2, h2, k2) {
      a2 = new bl(a2, b2, c2, h2, k2);
      1 === b2 ? (b2 = 1, true === f2 && (b2 |= 8)) : b2 = 0;
      f2 = Bg(3, null, null, b2);
      a2.current = f2;
      f2.stateNode = a2;
      f2.memoizedState = { element: d2, isDehydrated: c2, cache: null, transitions: null, pendingSuspenseBoundaries: null };
      ah(f2);
      return a2;
    }
    function dl(a2, b2, c2) {
      var d2 = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;
      return { $$typeof: wa, key: null == d2 ? null : "" + d2, children: a2, containerInfo: b2, implementation: c2 };
    }
    function el(a2) {
      if (!a2)
        return Vf;
      a2 = a2._reactInternals;
      a: {
        if (Vb(a2) !== a2 || 1 !== a2.tag)
          throw Error(p$5(170));
        var b2 = a2;
        do {
          switch (b2.tag) {
            case 3:
              b2 = b2.stateNode.context;
              break a;
            case 1:
              if (Zf(b2.type)) {
                b2 = b2.stateNode.__reactInternalMemoizedMergedChildContext;
                break a;
              }
          }
          b2 = b2.return;
        } while (null !== b2);
        throw Error(p$5(171));
      }
      if (1 === a2.tag) {
        var c2 = a2.type;
        if (Zf(c2))
          return bg(a2, c2, b2);
      }
      return b2;
    }
    function fl(a2, b2, c2, d2, e3, f2, g2, h2, k2) {
      a2 = cl(c2, d2, true, a2, e3, f2, g2, h2, k2);
      a2.context = el(null);
      c2 = a2.current;
      d2 = L();
      e3 = lh(c2);
      f2 = ch(d2, e3);
      f2.callback = void 0 !== b2 && null !== b2 ? b2 : null;
      dh(c2, f2, e3);
      a2.current.lanes = e3;
      Ac(a2, e3, d2);
      Ek(a2, d2);
      return a2;
    }
    function gl(a2, b2, c2, d2) {
      var e3 = b2.current, f2 = L(), g2 = lh(e3);
      c2 = el(c2);
      null === b2.context ? b2.context = c2 : b2.pendingContext = c2;
      b2 = ch(f2, g2);
      b2.payload = { element: a2 };
      d2 = void 0 === d2 ? null : d2;
      null !== d2 && (b2.callback = d2);
      a2 = dh(e3, b2, g2);
      null !== a2 && (mh(a2, e3, g2, f2), eh(a2, e3, g2));
      return g2;
    }
    function hl(a2) {
      a2 = a2.current;
      if (!a2.child)
        return null;
      switch (a2.child.tag) {
        case 5:
          return a2.child.stateNode;
        default:
          return a2.child.stateNode;
      }
    }
    function il(a2, b2) {
      a2 = a2.memoizedState;
      if (null !== a2 && null !== a2.dehydrated) {
        var c2 = a2.retryLane;
        a2.retryLane = 0 !== c2 && c2 < b2 ? c2 : b2;
      }
    }
    function jl(a2, b2) {
      il(a2, b2);
      (a2 = a2.alternate) && il(a2, b2);
    }
    function kl() {
      return null;
    }
    var ll = "function" === typeof reportError ? reportError : function(a2) {
      console.error(a2);
    };
    function ml(a2) {
      this._internalRoot = a2;
    }
    nl.prototype.render = ml.prototype.render = function(a2) {
      var b2 = this._internalRoot;
      if (null === b2)
        throw Error(p$5(409));
      gl(a2, b2, null, null);
    };
    nl.prototype.unmount = ml.prototype.unmount = function() {
      var a2 = this._internalRoot;
      if (null !== a2) {
        this._internalRoot = null;
        var b2 = a2.containerInfo;
        Sk(function() {
          gl(null, a2, null, null);
        });
        b2[uf] = null;
      }
    };
    function nl(a2) {
      this._internalRoot = a2;
    }
    nl.prototype.unstable_scheduleHydration = function(a2) {
      if (a2) {
        var b2 = Hc();
        a2 = { blockedOn: null, target: a2, priority: b2 };
        for (var c2 = 0; c2 < Qc.length && 0 !== b2 && b2 < Qc[c2].priority; c2++)
          ;
        Qc.splice(c2, 0, a2);
        0 === c2 && Vc(a2);
      }
    };
    function ol(a2) {
      return !(!a2 || 1 !== a2.nodeType && 9 !== a2.nodeType && 11 !== a2.nodeType);
    }
    function pl(a2) {
      return !(!a2 || 1 !== a2.nodeType && 9 !== a2.nodeType && 11 !== a2.nodeType && (8 !== a2.nodeType || " react-mount-point-unstable " !== a2.nodeValue));
    }
    function ql() {
    }
    function rl(a2, b2, c2, d2, e3) {
      if (e3) {
        if ("function" === typeof d2) {
          var f2 = d2;
          d2 = function() {
            var a3 = hl(g2);
            f2.call(a3);
          };
        }
        var g2 = fl(b2, d2, a2, 0, null, false, false, "", ql);
        a2._reactRootContainer = g2;
        a2[uf] = g2.current;
        sf(8 === a2.nodeType ? a2.parentNode : a2);
        Sk();
        return g2;
      }
      for (; e3 = a2.lastChild; )
        a2.removeChild(e3);
      if ("function" === typeof d2) {
        var h2 = d2;
        d2 = function() {
          var a3 = hl(k2);
          h2.call(a3);
        };
      }
      var k2 = cl(a2, 0, false, null, null, false, false, "", ql);
      a2._reactRootContainer = k2;
      a2[uf] = k2.current;
      sf(8 === a2.nodeType ? a2.parentNode : a2);
      Sk(function() {
        gl(b2, k2, c2, d2);
      });
      return k2;
    }
    function sl(a2, b2, c2, d2, e3) {
      var f2 = c2._reactRootContainer;
      if (f2) {
        var g2 = f2;
        if ("function" === typeof e3) {
          var h2 = e3;
          e3 = function() {
            var a3 = hl(g2);
            h2.call(a3);
          };
        }
        gl(b2, g2, a2, e3);
      } else
        g2 = rl(c2, b2, a2, e3, d2);
      return hl(g2);
    }
    Ec = function(a2) {
      switch (a2.tag) {
        case 3:
          var b2 = a2.stateNode;
          if (b2.current.memoizedState.isDehydrated) {
            var c2 = tc(b2.pendingLanes);
            0 !== c2 && (Cc(b2, c2 | 1), Ek(b2, B()), 0 === (K & 6) && (Hj = B() + 500, jg()));
          }
          break;
        case 13:
          Sk(function() {
            var b3 = Zg(a2, 1);
            if (null !== b3) {
              var c3 = L();
              mh(b3, a2, 1, c3);
            }
          }), jl(a2, 1);
      }
    };
    Fc = function(a2) {
      if (13 === a2.tag) {
        var b2 = Zg(a2, 134217728);
        if (null !== b2) {
          var c2 = L();
          mh(b2, a2, 134217728, c2);
        }
        jl(a2, 134217728);
      }
    };
    Gc = function(a2) {
      if (13 === a2.tag) {
        var b2 = lh(a2), c2 = Zg(a2, b2);
        if (null !== c2) {
          var d2 = L();
          mh(c2, a2, b2, d2);
        }
        jl(a2, b2);
      }
    };
    Hc = function() {
      return C$3;
    };
    Ic = function(a2, b2) {
      var c2 = C$3;
      try {
        return C$3 = a2, b2();
      } finally {
        C$3 = c2;
      }
    };
    yb = function(a2, b2, c2) {
      switch (b2) {
        case "input":
          bb(a2, c2);
          b2 = c2.name;
          if ("radio" === c2.type && null != b2) {
            for (c2 = a2; c2.parentNode; )
              c2 = c2.parentNode;
            c2 = c2.querySelectorAll("input[name=" + JSON.stringify("" + b2) + '][type="radio"]');
            for (b2 = 0; b2 < c2.length; b2++) {
              var d2 = c2[b2];
              if (d2 !== a2 && d2.form === a2.form) {
                var e3 = Db(d2);
                if (!e3)
                  throw Error(p$5(90));
                Wa(d2);
                bb(d2, e3);
              }
            }
          }
          break;
        case "textarea":
          ib(a2, c2);
          break;
        case "select":
          b2 = c2.value, null != b2 && fb(a2, !!c2.multiple, b2, false);
      }
    };
    Gb = Rk;
    Hb = Sk;
    var tl = { usingClientEntryPoint: false, Events: [Cb, ue$3, Db, Eb, Fb, Rk] }, ul = { findFiberByHostInstance: Wc, bundleType: 0, version: "18.2.0", rendererPackageName: "react-dom" };
    var vl = { bundleType: ul.bundleType, version: ul.version, rendererPackageName: ul.rendererPackageName, rendererConfig: ul.rendererConfig, overrideHookState: null, overrideHookStateDeletePath: null, overrideHookStateRenamePath: null, overrideProps: null, overridePropsDeletePath: null, overridePropsRenamePath: null, setErrorHandler: null, setSuspenseHandler: null, scheduleUpdate: null, currentDispatcherRef: ua.ReactCurrentDispatcher, findHostInstanceByFiber: function(a2) {
      a2 = Zb(a2);
      return null === a2 ? null : a2.stateNode;
    }, findFiberByHostInstance: ul.findFiberByHostInstance || kl, findHostInstancesForRefresh: null, scheduleRefresh: null, scheduleRoot: null, setRefreshHandler: null, getCurrentFiber: null, reconcilerVersion: "18.2.0-next-9e3b772b8-20220608" };
    if ("undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) {
      var wl = __REACT_DEVTOOLS_GLOBAL_HOOK__;
      if (!wl.isDisabled && wl.supportsFiber)
        try {
          kc = wl.inject(vl), lc = wl;
        } catch (a2) {
        }
    }
    reactDom_production_min.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = tl;
    reactDom_production_min.createPortal = function(a2, b2) {
      var c2 = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null;
      if (!ol(b2))
        throw Error(p$5(200));
      return dl(a2, b2, null, c2);
    };
    reactDom_production_min.createRoot = function(a2, b2) {
      if (!ol(a2))
        throw Error(p$5(299));
      var c2 = false, d2 = "", e3 = ll;
      null !== b2 && void 0 !== b2 && (true === b2.unstable_strictMode && (c2 = true), void 0 !== b2.identifierPrefix && (d2 = b2.identifierPrefix), void 0 !== b2.onRecoverableError && (e3 = b2.onRecoverableError));
      b2 = cl(a2, 1, false, null, null, c2, false, d2, e3);
      a2[uf] = b2.current;
      sf(8 === a2.nodeType ? a2.parentNode : a2);
      return new ml(b2);
    };
    reactDom_production_min.findDOMNode = function(a2) {
      if (null == a2)
        return null;
      if (1 === a2.nodeType)
        return a2;
      var b2 = a2._reactInternals;
      if (void 0 === b2) {
        if ("function" === typeof a2.render)
          throw Error(p$5(188));
        a2 = Object.keys(a2).join(",");
        throw Error(p$5(268, a2));
      }
      a2 = Zb(b2);
      a2 = null === a2 ? null : a2.stateNode;
      return a2;
    };
    reactDom_production_min.flushSync = function(a2) {
      return Sk(a2);
    };
    reactDom_production_min.hydrate = function(a2, b2, c2) {
      if (!pl(b2))
        throw Error(p$5(200));
      return sl(null, a2, b2, true, c2);
    };
    reactDom_production_min.hydrateRoot = function(a2, b2, c2) {
      if (!ol(a2))
        throw Error(p$5(405));
      var d2 = null != c2 && c2.hydratedSources || null, e3 = false, f2 = "", g2 = ll;
      null !== c2 && void 0 !== c2 && (true === c2.unstable_strictMode && (e3 = true), void 0 !== c2.identifierPrefix && (f2 = c2.identifierPrefix), void 0 !== c2.onRecoverableError && (g2 = c2.onRecoverableError));
      b2 = fl(b2, null, a2, 1, null != c2 ? c2 : null, e3, false, f2, g2);
      a2[uf] = b2.current;
      sf(a2);
      if (d2)
        for (a2 = 0; a2 < d2.length; a2++)
          c2 = d2[a2], e3 = c2._getVersion, e3 = e3(c2._source), null == b2.mutableSourceEagerHydrationData ? b2.mutableSourceEagerHydrationData = [c2, e3] : b2.mutableSourceEagerHydrationData.push(
            c2,
            e3
          );
      return new nl(b2);
    };
    reactDom_production_min.render = function(a2, b2, c2) {
      if (!pl(b2))
        throw Error(p$5(200));
      return sl(null, a2, b2, false, c2);
    };
    reactDom_production_min.unmountComponentAtNode = function(a2) {
      if (!pl(a2))
        throw Error(p$5(40));
      return a2._reactRootContainer ? (Sk(function() {
        sl(null, null, a2, false, function() {
          a2._reactRootContainer = null;
          a2[uf] = null;
        });
      }), true) : false;
    };
    reactDom_production_min.unstable_batchedUpdates = Rk;
    reactDom_production_min.unstable_renderSubtreeIntoContainer = function(a2, b2, c2, d2) {
      if (!pl(c2))
        throw Error(p$5(200));
      if (null == a2 || void 0 === a2._reactInternals)
        throw Error(p$5(38));
      return sl(a2, b2, c2, false, d2);
    };
    reactDom_production_min.version = "18.2.0-next-9e3b772b8-20220608";
    function checkDCE() {
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined" || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== "function") {
        return;
      }
      try {
        __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
      } catch (err) {
        console.error(err);
      }
    }
    {
      checkDCE();
      reactDom.exports = reactDom_production_min;
    }
    var reactDomExports = reactDom.exports;
    const ReactDOM = /* @__PURE__ */ getDefaultExportFromCjs(reactDomExports);
    var m$4 = reactDomExports;
    {
      client.createRoot = m$4.createRoot;
      client.hydrateRoot = m$4.hydrateRoot;
    }
    var withSelector = { exports: {} };
    var useSyncExternalStoreWithSelector_production = {};
    /**
     * @license React
     * use-sync-external-store-with-selector.production.js
     *
     * Copyright (c) Meta Platforms, Inc. and affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    var React = reactExports;
    function is$2(x2, y2) {
      return x2 === y2 && (0 !== x2 || 1 / x2 === 1 / y2) || x2 !== x2 && y2 !== y2;
    }
    var objectIs = "function" === typeof Object.is ? Object.is : is$2, useSyncExternalStore = React.useSyncExternalStore, useRef = React.useRef, useEffect = React.useEffect, useMemo = React.useMemo, useDebugValue = React.useDebugValue;
    useSyncExternalStoreWithSelector_production.useSyncExternalStoreWithSelector = function(subscribe, getSnapshot, getServerSnapshot, selector, isEqual2) {
      var instRef = useRef(null);
      if (null === instRef.current) {
        var inst = { hasValue: false, value: null };
        instRef.current = inst;
      } else
        inst = instRef.current;
      instRef = useMemo(
        function() {
          function memoizedSelector(nextSnapshot) {
            if (!hasMemo) {
              hasMemo = true;
              memoizedSnapshot = nextSnapshot;
              nextSnapshot = selector(nextSnapshot);
              if (void 0 !== isEqual2 && inst.hasValue) {
                var currentSelection = inst.value;
                if (isEqual2(currentSelection, nextSnapshot))
                  return memoizedSelection = currentSelection;
              }
              return memoizedSelection = nextSnapshot;
            }
            currentSelection = memoizedSelection;
            if (objectIs(memoizedSnapshot, nextSnapshot))
              return currentSelection;
            var nextSelection = selector(nextSnapshot);
            if (void 0 !== isEqual2 && isEqual2(currentSelection, nextSelection))
              return memoizedSnapshot = nextSnapshot, currentSelection;
            memoizedSnapshot = nextSnapshot;
            return memoizedSelection = nextSelection;
          }
          var hasMemo = false, memoizedSnapshot, memoizedSelection, maybeGetServerSnapshot = void 0 === getServerSnapshot ? null : getServerSnapshot;
          return [
            function() {
              return memoizedSelector(getSnapshot());
            },
            null === maybeGetServerSnapshot ? void 0 : function() {
              return memoizedSelector(maybeGetServerSnapshot());
            }
          ];
        },
        [getSnapshot, getServerSnapshot, selector, isEqual2]
      );
      var value2 = useSyncExternalStore(subscribe, instRef[0], instRef[1]);
      useEffect(
        function() {
          inst.hasValue = true;
          inst.value = value2;
        },
        [value2]
      );
      useDebugValue(value2);
      return value2;
    };
    {
      withSelector.exports = useSyncExternalStoreWithSelector_production;
    }
    var withSelectorExports = withSelector.exports;
    function defaultNoopBatch(callback) {
      callback();
    }
    function createListenerCollection() {
      let first = null;
      let last2 = null;
      return {
        clear() {
          first = null;
          last2 = null;
        },
        notify() {
          defaultNoopBatch(() => {
            let listener = first;
            while (listener) {
              listener.callback();
              listener = listener.next;
            }
          });
        },
        get() {
          const listeners = [];
          let listener = first;
          while (listener) {
            listeners.push(listener);
            listener = listener.next;
          }
          return listeners;
        },
        subscribe(callback) {
          let isSubscribed = true;
          const listener = last2 = {
            callback,
            next: null,
            prev: last2
          };
          if (listener.prev) {
            listener.prev.next = listener;
          } else {
            first = listener;
          }
          return function unsubscribe() {
            if (!isSubscribed || first === null)
              return;
            isSubscribed = false;
            if (listener.next) {
              listener.next.prev = listener.prev;
            } else {
              last2 = listener.prev;
            }
            if (listener.prev) {
              listener.prev.next = listener.next;
            } else {
              first = listener.next;
            }
          };
        }
      };
    }
    var nullListeners = {
      notify() {
      },
      get: () => []
    };
    function createSubscription(store2, parentSub) {
      let unsubscribe;
      let listeners = nullListeners;
      let subscriptionsAmount = 0;
      let selfSubscribed = false;
      function addNestedSub(listener) {
        trySubscribe();
        const cleanupListener = listeners.subscribe(listener);
        let removed = false;
        return () => {
          if (!removed) {
            removed = true;
            cleanupListener();
            tryUnsubscribe();
          }
        };
      }
      function notifyNestedSubs() {
        listeners.notify();
      }
      function handleChangeWrapper() {
        if (subscription.onStateChange) {
          subscription.onStateChange();
        }
      }
      function isSubscribed() {
        return selfSubscribed;
      }
      function trySubscribe() {
        subscriptionsAmount++;
        if (!unsubscribe) {
          unsubscribe = parentSub ? parentSub.addNestedSub(handleChangeWrapper) : store2.subscribe(handleChangeWrapper);
          listeners = createListenerCollection();
        }
      }
      function tryUnsubscribe() {
        subscriptionsAmount--;
        if (unsubscribe && subscriptionsAmount === 0) {
          unsubscribe();
          unsubscribe = void 0;
          listeners.clear();
          listeners = nullListeners;
        }
      }
      function trySubscribeSelf() {
        if (!selfSubscribed) {
          selfSubscribed = true;
          trySubscribe();
        }
      }
      function tryUnsubscribeSelf() {
        if (selfSubscribed) {
          selfSubscribed = false;
          tryUnsubscribe();
        }
      }
      const subscription = {
        addNestedSub,
        notifyNestedSubs,
        handleChangeWrapper,
        isSubscribed,
        trySubscribe: trySubscribeSelf,
        tryUnsubscribe: tryUnsubscribeSelf,
        getListeners: () => listeners
      };
      return subscription;
    }
    var canUseDOM$2 = () => !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
    var isDOM$1 = /* @__PURE__ */ canUseDOM$2();
    var isRunningInReactNative$1 = () => typeof navigator !== "undefined" && navigator.product === "ReactNative";
    var isReactNative$2 = /* @__PURE__ */ isRunningInReactNative$1();
    var getUseIsomorphicLayoutEffect$1 = () => isDOM$1 || isReactNative$2 ? reactExports.useLayoutEffect : reactExports.useEffect;
    var useIsomorphicLayoutEffect$3 = /* @__PURE__ */ getUseIsomorphicLayoutEffect$1();
    function is$1(x2, y2) {
      if (x2 === y2) {
        return x2 !== 0 || y2 !== 0 || 1 / x2 === 1 / y2;
      } else {
        return x2 !== x2 && y2 !== y2;
      }
    }
    function shallowEqual$1(objA, objB) {
      if (is$1(objA, objB))
        return true;
      if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
        return false;
      }
      const keysA = Object.keys(objA);
      const keysB = Object.keys(objB);
      if (keysA.length !== keysB.length)
        return false;
      for (let i2 = 0; i2 < keysA.length; i2++) {
        if (!Object.prototype.hasOwnProperty.call(objB, keysA[i2]) || !is$1(objA[keysA[i2]], objB[keysA[i2]])) {
          return false;
        }
      }
      return true;
    }
    var ContextKey = /* @__PURE__ */ Symbol.for(`react-redux-context`);
    var gT = typeof globalThis !== "undefined" ? globalThis : (
      /* fall back to a per-module scope (pre-8.1 behaviour) if `globalThis` is not available */
      {}
    );
    function getContext() {
      if (!reactExports.createContext)
        return {};
      const contextMap = gT[ContextKey] ?? (gT[ContextKey] = /* @__PURE__ */ new Map());
      let realContext = contextMap.get(reactExports.createContext);
      if (!realContext) {
        realContext = reactExports.createContext(
          null
        );
        contextMap.set(reactExports.createContext, realContext);
      }
      return realContext;
    }
    var ReactReduxContext = /* @__PURE__ */ getContext();
    function Provider(providerProps) {
      const { children, context, serverState, store: store2 } = providerProps;
      const contextValue = reactExports.useMemo(() => {
        const subscription = createSubscription(store2);
        const baseContextValue = {
          store: store2,
          subscription,
          getServerState: serverState ? () => serverState : void 0
        };
        {
          return baseContextValue;
        }
      }, [store2, serverState]);
      const previousState = reactExports.useMemo(() => store2.getState(), [store2]);
      useIsomorphicLayoutEffect$3(() => {
        const { subscription } = contextValue;
        subscription.onStateChange = subscription.notifyNestedSubs;
        subscription.trySubscribe();
        if (previousState !== store2.getState()) {
          subscription.notifyNestedSubs();
        }
        return () => {
          subscription.tryUnsubscribe();
          subscription.onStateChange = void 0;
        };
      }, [contextValue, previousState]);
      const Context = context || ReactReduxContext;
      return /* @__PURE__ */ reactExports.createElement(Context.Provider, { value: contextValue }, children);
    }
    var Provider_default = Provider;
    function createReduxContextHook(context = ReactReduxContext) {
      return function useReduxContext2() {
        const contextValue = reactExports.useContext(context);
        return contextValue;
      };
    }
    var useReduxContext = /* @__PURE__ */ createReduxContextHook();
    function createStoreHook(context = ReactReduxContext) {
      const useReduxContext2 = context === ReactReduxContext ? useReduxContext : (
        // @ts-ignore
        createReduxContextHook(context)
      );
      const useStore2 = () => {
        const { store: store2 } = useReduxContext2();
        return store2;
      };
      Object.assign(useStore2, {
        withTypes: () => useStore2
      });
      return useStore2;
    }
    var useStore = /* @__PURE__ */ createStoreHook();
    function createDispatchHook(context = ReactReduxContext) {
      const useStore2 = context === ReactReduxContext ? useStore : createStoreHook(context);
      const useDispatch2 = () => {
        const store2 = useStore2();
        return store2.dispatch;
      };
      Object.assign(useDispatch2, {
        withTypes: () => useDispatch2
      });
      return useDispatch2;
    }
    var useDispatch = /* @__PURE__ */ createDispatchHook();
    var refEquality = (a2, b2) => a2 === b2;
    function createSelectorHook(context = ReactReduxContext) {
      const useReduxContext2 = context === ReactReduxContext ? useReduxContext : createReduxContextHook(context);
      const useSelector2 = (selector, equalityFnOrOptions = {}) => {
        const { equalityFn = refEquality } = typeof equalityFnOrOptions === "function" ? { equalityFn: equalityFnOrOptions } : equalityFnOrOptions;
        const reduxContext = useReduxContext2();
        const { store: store2, subscription, getServerState } = reduxContext;
        reactExports.useRef(true);
        const wrappedSelector = reactExports.useCallback(
          {
            [selector.name](state) {
              const selected = selector(state);
              return selected;
            }
          }[selector.name],
          [selector]
        );
        const selectedState = withSelectorExports.useSyncExternalStoreWithSelector(
          subscription.addNestedSub,
          store2.getState,
          getServerState || store2.getState,
          wrappedSelector,
          equalityFn
        );
        reactExports.useDebugValue(selectedState);
        return selectedState;
      };
      Object.assign(useSelector2, {
        withTypes: () => useSelector2
      });
      return useSelector2;
    }
    var useSelector = /* @__PURE__ */ createSelectorHook();
    var batch = defaultNoopBatch;
    /**
     * @remix-run/router v1.15.0
     *
     * Copyright (c) Remix Software Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE.md file in the root directory of this source tree.
     *
     * @license MIT
     */
    function _extends$t() {
      _extends$t = Object.assign ? Object.assign.bind() : function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends$t.apply(this, arguments);
    }
    var Action$1;
    (function(Action2) {
      Action2["Pop"] = "POP";
      Action2["Push"] = "PUSH";
      Action2["Replace"] = "REPLACE";
    })(Action$1 || (Action$1 = {}));
    const PopStateEventType = "popstate";
    function createBrowserHistory(options) {
      if (options === void 0) {
        options = {};
      }
      function createBrowserLocation(window2, globalHistory) {
        let {
          pathname,
          search,
          hash
        } = window2.location;
        return createLocation(
          "",
          {
            pathname,
            search,
            hash
          },
          // state defaults to `null` because `window.history.state` does
          globalHistory.state && globalHistory.state.usr || null,
          globalHistory.state && globalHistory.state.key || "default"
        );
      }
      function createBrowserHref(window2, to2) {
        return typeof to2 === "string" ? to2 : createPath(to2);
      }
      return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);
    }
    function invariant$1(value2, message) {
      if (value2 === false || value2 === null || typeof value2 === "undefined") {
        throw new Error(message);
      }
    }
    function warning(cond, message) {
      if (!cond) {
        if (typeof console !== "undefined")
          console.warn(message);
        try {
          throw new Error(message);
        } catch (e3) {
        }
      }
    }
    function createKey() {
      return Math.random().toString(36).substr(2, 8);
    }
    function getHistoryState(location2, index) {
      return {
        usr: location2.state,
        key: location2.key,
        idx: index
      };
    }
    function createLocation(current2, to2, state, key) {
      if (state === void 0) {
        state = null;
      }
      let location2 = _extends$t({
        pathname: typeof current2 === "string" ? current2 : current2.pathname,
        search: "",
        hash: ""
      }, typeof to2 === "string" ? parsePath(to2) : to2, {
        state,
        // TODO: This could be cleaned up.  push/replace should probably just take
        // full Locations now and avoid the need to run through this flow at all
        // But that's a pretty big refactor to the current test suite so going to
        // keep as is for the time being and just let any incoming keys take precedence
        key: to2 && to2.key || key || createKey()
      });
      return location2;
    }
    function createPath(_ref) {
      let {
        pathname = "/",
        search = "",
        hash = ""
      } = _ref;
      if (search && search !== "?")
        pathname += search.charAt(0) === "?" ? search : "?" + search;
      if (hash && hash !== "#")
        pathname += hash.charAt(0) === "#" ? hash : "#" + hash;
      return pathname;
    }
    function parsePath(path) {
      let parsedPath = {};
      if (path) {
        let hashIndex = path.indexOf("#");
        if (hashIndex >= 0) {
          parsedPath.hash = path.substr(hashIndex);
          path = path.substr(0, hashIndex);
        }
        let searchIndex = path.indexOf("?");
        if (searchIndex >= 0) {
          parsedPath.search = path.substr(searchIndex);
          path = path.substr(0, searchIndex);
        }
        if (path) {
          parsedPath.pathname = path;
        }
      }
      return parsedPath;
    }
    function getUrlBasedHistory(getLocation, createHref, validateLocation, options) {
      if (options === void 0) {
        options = {};
      }
      let {
        window: window2 = document.defaultView,
        v5Compat = false
      } = options;
      let globalHistory = window2.history;
      let action = Action$1.Pop;
      let listener = null;
      let index = getIndex();
      if (index == null) {
        index = 0;
        globalHistory.replaceState(_extends$t({}, globalHistory.state, {
          idx: index
        }), "");
      }
      function getIndex() {
        let state = globalHistory.state || {
          idx: null
        };
        return state.idx;
      }
      function handlePop() {
        action = Action$1.Pop;
        let nextIndex = getIndex();
        let delta = nextIndex == null ? null : nextIndex - index;
        index = nextIndex;
        if (listener) {
          listener({
            action,
            location: history.location,
            delta
          });
        }
      }
      function push(to2, state) {
        action = Action$1.Push;
        let location2 = createLocation(history.location, to2, state);
        if (validateLocation)
          validateLocation(location2, to2);
        index = getIndex() + 1;
        let historyState = getHistoryState(location2, index);
        let url2 = history.createHref(location2);
        try {
          globalHistory.pushState(historyState, "", url2);
        } catch (error2) {
          if (error2 instanceof DOMException && error2.name === "DataCloneError") {
            throw error2;
          }
          window2.location.assign(url2);
        }
        if (v5Compat && listener) {
          listener({
            action,
            location: history.location,
            delta: 1
          });
        }
      }
      function replace(to2, state) {
        action = Action$1.Replace;
        let location2 = createLocation(history.location, to2, state);
        if (validateLocation)
          validateLocation(location2, to2);
        index = getIndex();
        let historyState = getHistoryState(location2, index);
        let url2 = history.createHref(location2);
        globalHistory.replaceState(historyState, "", url2);
        if (v5Compat && listener) {
          listener({
            action,
            location: history.location,
            delta: 0
          });
        }
      }
      function createURL(to2) {
        let base = window2.location.origin !== "null" ? window2.location.origin : window2.location.href;
        let href = typeof to2 === "string" ? to2 : createPath(to2);
        invariant$1(base, "No window.location.(origin|href) available to create URL for href: " + href);
        return new URL(href, base);
      }
      let history = {
        get action() {
          return action;
        },
        get location() {
          return getLocation(window2, globalHistory);
        },
        listen(fn) {
          if (listener) {
            throw new Error("A history only accepts one active listener");
          }
          window2.addEventListener(PopStateEventType, handlePop);
          listener = fn;
          return () => {
            window2.removeEventListener(PopStateEventType, handlePop);
            listener = null;
          };
        },
        createHref(to2) {
          return createHref(window2, to2);
        },
        createURL,
        encodeLocation(to2) {
          let url2 = createURL(to2);
          return {
            pathname: url2.pathname,
            search: url2.search,
            hash: url2.hash
          };
        },
        push,
        replace,
        go(n2) {
          return globalHistory.go(n2);
        }
      };
      return history;
    }
    var ResultType;
    (function(ResultType2) {
      ResultType2["data"] = "data";
      ResultType2["deferred"] = "deferred";
      ResultType2["redirect"] = "redirect";
      ResultType2["error"] = "error";
    })(ResultType || (ResultType = {}));
    function matchRoutes(routes, locationArg, basename) {
      if (basename === void 0) {
        basename = "/";
      }
      let location2 = typeof locationArg === "string" ? parsePath(locationArg) : locationArg;
      let pathname = stripBasename(location2.pathname || "/", basename);
      if (pathname == null) {
        return null;
      }
      let branches = flattenRoutes(routes);
      rankRouteBranches(branches);
      let matches2 = null;
      for (let i2 = 0; matches2 == null && i2 < branches.length; ++i2) {
        matches2 = matchRouteBranch(
          branches[i2],
          // Incoming pathnames are generally encoded from either window.location
          // or from router.navigate, but we want to match against the unencoded
          // paths in the route definitions.  Memory router locations won't be
          // encoded here but there also shouldn't be anything to decode so this
          // should be a safe operation.  This avoids needing matchRoutes to be
          // history-aware.
          safelyDecodeURI(pathname)
        );
      }
      return matches2;
    }
    function flattenRoutes(routes, branches, parentsMeta, parentPath) {
      if (branches === void 0) {
        branches = [];
      }
      if (parentsMeta === void 0) {
        parentsMeta = [];
      }
      if (parentPath === void 0) {
        parentPath = "";
      }
      let flattenRoute = (route, index, relativePath) => {
        let meta = {
          relativePath: relativePath === void 0 ? route.path || "" : relativePath,
          caseSensitive: route.caseSensitive === true,
          childrenIndex: index,
          route
        };
        if (meta.relativePath.startsWith("/")) {
          invariant$1(meta.relativePath.startsWith(parentPath), 'Absolute route path "' + meta.relativePath + '" nested under path ' + ('"' + parentPath + '" is not valid. An absolute child route path ') + "must start with the combined path of all its parent routes.");
          meta.relativePath = meta.relativePath.slice(parentPath.length);
        }
        let path = joinPaths([parentPath, meta.relativePath]);
        let routesMeta = parentsMeta.concat(meta);
        if (route.children && route.children.length > 0) {
          invariant$1(
            // Our types know better, but runtime JS may not!
            // @ts-expect-error
            route.index !== true,
            "Index routes must not have child routes. Please remove " + ('all child routes from route path "' + path + '".')
          );
          flattenRoutes(route.children, branches, routesMeta, path);
        }
        if (route.path == null && !route.index) {
          return;
        }
        branches.push({
          path,
          score: computeScore(path, route.index),
          routesMeta
        });
      };
      routes.forEach((route, index) => {
        var _route$path;
        if (route.path === "" || !((_route$path = route.path) != null && _route$path.includes("?"))) {
          flattenRoute(route, index);
        } else {
          for (let exploded of explodeOptionalSegments(route.path)) {
            flattenRoute(route, index, exploded);
          }
        }
      });
      return branches;
    }
    function explodeOptionalSegments(path) {
      let segments = path.split("/");
      if (segments.length === 0)
        return [];
      let [first, ...rest] = segments;
      let isOptional = first.endsWith("?");
      let required = first.replace(/\?$/, "");
      if (rest.length === 0) {
        return isOptional ? [required, ""] : [required];
      }
      let restExploded = explodeOptionalSegments(rest.join("/"));
      let result = [];
      result.push(...restExploded.map((subpath) => subpath === "" ? required : [required, subpath].join("/")));
      if (isOptional) {
        result.push(...restExploded);
      }
      return result.map((exploded) => path.startsWith("/") && exploded === "" ? "/" : exploded);
    }
    function rankRouteBranches(branches) {
      branches.sort((a2, b2) => a2.score !== b2.score ? b2.score - a2.score : compareIndexes(a2.routesMeta.map((meta) => meta.childrenIndex), b2.routesMeta.map((meta) => meta.childrenIndex)));
    }
    const paramRe = /^:[\w-]+$/;
    const dynamicSegmentValue = 3;
    const indexRouteValue = 2;
    const emptySegmentValue = 1;
    const staticSegmentValue = 10;
    const splatPenalty = -2;
    const isSplat = (s2) => s2 === "*";
    function computeScore(path, index) {
      let segments = path.split("/");
      let initialScore = segments.length;
      if (segments.some(isSplat)) {
        initialScore += splatPenalty;
      }
      if (index) {
        initialScore += indexRouteValue;
      }
      return segments.filter((s2) => !isSplat(s2)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === "" ? emptySegmentValue : staticSegmentValue), initialScore);
    }
    function compareIndexes(a2, b2) {
      let siblings = a2.length === b2.length && a2.slice(0, -1).every((n2, i2) => n2 === b2[i2]);
      return siblings ? (
        // If two routes are siblings, we should try to match the earlier sibling
        // first. This allows people to have fine-grained control over the matching
        // behavior by simply putting routes with identical paths in the order they
        // want them tried.
        a2[a2.length - 1] - b2[b2.length - 1]
      ) : (
        // Otherwise, it doesn't really make sense to rank non-siblings by index,
        // so they sort equally.
        0
      );
    }
    function matchRouteBranch(branch, pathname) {
      let {
        routesMeta
      } = branch;
      let matchedParams = {};
      let matchedPathname = "/";
      let matches2 = [];
      for (let i2 = 0; i2 < routesMeta.length; ++i2) {
        let meta = routesMeta[i2];
        let end = i2 === routesMeta.length - 1;
        let remainingPathname = matchedPathname === "/" ? pathname : pathname.slice(matchedPathname.length) || "/";
        let match = matchPath({
          path: meta.relativePath,
          caseSensitive: meta.caseSensitive,
          end
        }, remainingPathname);
        if (!match)
          return null;
        Object.assign(matchedParams, match.params);
        let route = meta.route;
        matches2.push({
          // TODO: Can this as be avoided?
          params: matchedParams,
          pathname: joinPaths([matchedPathname, match.pathname]),
          pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),
          route
        });
        if (match.pathnameBase !== "/") {
          matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);
        }
      }
      return matches2;
    }
    function matchPath(pattern, pathname) {
      if (typeof pattern === "string") {
        pattern = {
          path: pattern,
          caseSensitive: false,
          end: true
        };
      }
      let [matcher, compiledParams] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);
      let match = pathname.match(matcher);
      if (!match)
        return null;
      let matchedPathname = match[0];
      let pathnameBase = matchedPathname.replace(/(.)\/+$/, "$1");
      let captureGroups = match.slice(1);
      let params = compiledParams.reduce((memo, _ref, index) => {
        let {
          paramName,
          isOptional
        } = _ref;
        if (paramName === "*") {
          let splatValue = captureGroups[index] || "";
          pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\/+$/, "$1");
        }
        const value2 = captureGroups[index];
        if (isOptional && !value2) {
          memo[paramName] = void 0;
        } else {
          memo[paramName] = safelyDecodeURIComponent(value2 || "", paramName);
        }
        return memo;
      }, {});
      return {
        params,
        pathname: matchedPathname,
        pathnameBase,
        pattern
      };
    }
    function compilePath(path, caseSensitive, end) {
      if (caseSensitive === void 0) {
        caseSensitive = false;
      }
      if (end === void 0) {
        end = true;
      }
      warning(path === "*" || !path.endsWith("*") || path.endsWith("/*"), 'Route path "' + path + '" will be treated as if it were ' + ('"' + path.replace(/\*$/, "/*") + '" because the `*` character must ') + "always follow a `/` in the pattern. To get rid of this warning, " + ('please change the route path to "' + path.replace(/\*$/, "/*") + '".'));
      let params = [];
      let regexpSource = "^" + path.replace(/\/*\*?$/, "").replace(/^\/*/, "/").replace(/[\\.*+^${}|()[\]]/g, "\\$&").replace(/\/:([\w-]+)(\?)?/g, (_2, paramName, isOptional) => {
        params.push({
          paramName,
          isOptional: isOptional != null
        });
        return isOptional ? "/?([^\\/]+)?" : "/([^\\/]+)";
      });
      if (path.endsWith("*")) {
        params.push({
          paramName: "*"
        });
        regexpSource += path === "*" || path === "/*" ? "(.*)$" : "(?:\\/(.+)|\\/*)$";
      } else if (end) {
        regexpSource += "\\/*$";
      } else if (path !== "" && path !== "/") {
        regexpSource += "(?:(?=\\/|$))";
      } else
        ;
      let matcher = new RegExp(regexpSource, caseSensitive ? void 0 : "i");
      return [matcher, params];
    }
    function safelyDecodeURI(value2) {
      try {
        return decodeURI(value2);
      } catch (error2) {
        warning(false, 'The URL path "' + value2 + '" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent ' + ("encoding (" + error2 + ")."));
        return value2;
      }
    }
    function safelyDecodeURIComponent(value2, paramName) {
      try {
        return decodeURIComponent(value2);
      } catch (error2) {
        warning(false, 'The value for the URL param "' + paramName + '" will not be decoded because' + (' the string "' + value2 + '" is a malformed URL segment. This is probably') + (" due to a bad percent encoding (" + error2 + ")."));
        return value2;
      }
    }
    function stripBasename(pathname, basename) {
      if (basename === "/")
        return pathname;
      if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {
        return null;
      }
      let startIndex = basename.endsWith("/") ? basename.length - 1 : basename.length;
      let nextChar = pathname.charAt(startIndex);
      if (nextChar && nextChar !== "/") {
        return null;
      }
      return pathname.slice(startIndex) || "/";
    }
    function resolvePath(to2, fromPathname) {
      if (fromPathname === void 0) {
        fromPathname = "/";
      }
      let {
        pathname: toPathname,
        search = "",
        hash = ""
      } = typeof to2 === "string" ? parsePath(to2) : to2;
      let pathname = toPathname ? toPathname.startsWith("/") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;
      return {
        pathname,
        search: normalizeSearch(search),
        hash: normalizeHash(hash)
      };
    }
    function resolvePathname(relativePath, fromPathname) {
      let segments = fromPathname.replace(/\/+$/, "").split("/");
      let relativeSegments = relativePath.split("/");
      relativeSegments.forEach((segment) => {
        if (segment === "..") {
          if (segments.length > 1)
            segments.pop();
        } else if (segment !== ".") {
          segments.push(segment);
        }
      });
      return segments.length > 1 ? segments.join("/") : "/";
    }
    function getInvalidPathError(char, field, dest, path) {
      return "Cannot include a '" + char + "' character in a manually specified " + ("`to." + field + "` field [" + JSON.stringify(path) + "].  Please separate it out to the ") + ("`to." + dest + "` field. Alternatively you may provide the full path as ") + 'a string in <Link to="..."> and the router will parse it for you.';
    }
    function getPathContributingMatches(matches2) {
      return matches2.filter((match, index) => index === 0 || match.route.path && match.route.path.length > 0);
    }
    function getResolveToMatches(matches2, v7_relativeSplatPath) {
      let pathMatches = getPathContributingMatches(matches2);
      if (v7_relativeSplatPath) {
        return pathMatches.map((match, idx) => idx === matches2.length - 1 ? match.pathname : match.pathnameBase);
      }
      return pathMatches.map((match) => match.pathnameBase);
    }
    function resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {
      if (isPathRelative === void 0) {
        isPathRelative = false;
      }
      let to2;
      if (typeof toArg === "string") {
        to2 = parsePath(toArg);
      } else {
        to2 = _extends$t({}, toArg);
        invariant$1(!to2.pathname || !to2.pathname.includes("?"), getInvalidPathError("?", "pathname", "search", to2));
        invariant$1(!to2.pathname || !to2.pathname.includes("#"), getInvalidPathError("#", "pathname", "hash", to2));
        invariant$1(!to2.search || !to2.search.includes("#"), getInvalidPathError("#", "search", "hash", to2));
      }
      let isEmptyPath = toArg === "" || to2.pathname === "";
      let toPathname = isEmptyPath ? "/" : to2.pathname;
      let from2;
      if (toPathname == null) {
        from2 = locationPathname;
      } else {
        let routePathnameIndex = routePathnames.length - 1;
        if (!isPathRelative && toPathname.startsWith("..")) {
          let toSegments = toPathname.split("/");
          while (toSegments[0] === "..") {
            toSegments.shift();
            routePathnameIndex -= 1;
          }
          to2.pathname = toSegments.join("/");
        }
        from2 = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : "/";
      }
      let path = resolvePath(to2, from2);
      let hasExplicitTrailingSlash = toPathname && toPathname !== "/" && toPathname.endsWith("/");
      let hasCurrentTrailingSlash = (isEmptyPath || toPathname === ".") && locationPathname.endsWith("/");
      if (!path.pathname.endsWith("/") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {
        path.pathname += "/";
      }
      return path;
    }
    const joinPaths = (paths) => paths.join("/").replace(/\/\/+/g, "/");
    const normalizePathname = (pathname) => pathname.replace(/\/+$/, "").replace(/^\/*/, "/");
    const normalizeSearch = (search) => !search || search === "?" ? "" : search.startsWith("?") ? search : "?" + search;
    const normalizeHash = (hash) => !hash || hash === "#" ? "" : hash.startsWith("#") ? hash : "#" + hash;
    function isRouteErrorResponse(error2) {
      return error2 != null && typeof error2.status === "number" && typeof error2.statusText === "string" && typeof error2.internal === "boolean" && "data" in error2;
    }
    const validMutationMethodsArr = ["post", "put", "patch", "delete"];
    new Set(validMutationMethodsArr);
    const validRequestMethodsArr = ["get", ...validMutationMethodsArr];
    new Set(validRequestMethodsArr);
    /**
     * React Router v6.22.0
     *
     * Copyright (c) Remix Software Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE.md file in the root directory of this source tree.
     *
     * @license MIT
     */
    function _extends$s() {
      _extends$s = Object.assign ? Object.assign.bind() : function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends$s.apply(this, arguments);
    }
    const DataRouterContext = /* @__PURE__ */ reactExports.createContext(null);
    const DataRouterStateContext = /* @__PURE__ */ reactExports.createContext(null);
    const NavigationContext = /* @__PURE__ */ reactExports.createContext(null);
    const LocationContext = /* @__PURE__ */ reactExports.createContext(null);
    const RouteContext = /* @__PURE__ */ reactExports.createContext({
      outlet: null,
      matches: [],
      isDataRoute: false
    });
    const RouteErrorContext = /* @__PURE__ */ reactExports.createContext(null);
    function useHref(to2, _temp) {
      let {
        relative
      } = _temp === void 0 ? {} : _temp;
      !useInRouterContext() ? invariant$1(false) : void 0;
      let {
        basename,
        navigator: navigator2
      } = reactExports.useContext(NavigationContext);
      let {
        hash,
        pathname,
        search
      } = useResolvedPath(to2, {
        relative
      });
      let joinedPathname = pathname;
      if (basename !== "/") {
        joinedPathname = pathname === "/" ? basename : joinPaths([basename, pathname]);
      }
      return navigator2.createHref({
        pathname: joinedPathname,
        search,
        hash
      });
    }
    function useInRouterContext() {
      return reactExports.useContext(LocationContext) != null;
    }
    function useLocation() {
      !useInRouterContext() ? invariant$1(false) : void 0;
      return reactExports.useContext(LocationContext).location;
    }
    function useIsomorphicLayoutEffect$2(cb2) {
      let isStatic = reactExports.useContext(NavigationContext).static;
      if (!isStatic) {
        reactExports.useLayoutEffect(cb2);
      }
    }
    function useNavigate() {
      let {
        isDataRoute
      } = reactExports.useContext(RouteContext);
      return isDataRoute ? useNavigateStable() : useNavigateUnstable();
    }
    function useNavigateUnstable() {
      !useInRouterContext() ? invariant$1(false) : void 0;
      let dataRouterContext = reactExports.useContext(DataRouterContext);
      let {
        basename,
        future,
        navigator: navigator2
      } = reactExports.useContext(NavigationContext);
      let {
        matches: matches2
      } = reactExports.useContext(RouteContext);
      let {
        pathname: locationPathname
      } = useLocation();
      let routePathnamesJson = JSON.stringify(getResolveToMatches(matches2, future.v7_relativeSplatPath));
      let activeRef = reactExports.useRef(false);
      useIsomorphicLayoutEffect$2(() => {
        activeRef.current = true;
      });
      let navigate = reactExports.useCallback(function(to2, options) {
        if (options === void 0) {
          options = {};
        }
        if (!activeRef.current)
          return;
        if (typeof to2 === "number") {
          navigator2.go(to2);
          return;
        }
        let path = resolveTo(to2, JSON.parse(routePathnamesJson), locationPathname, options.relative === "path");
        if (dataRouterContext == null && basename !== "/") {
          path.pathname = path.pathname === "/" ? basename : joinPaths([basename, path.pathname]);
        }
        (!!options.replace ? navigator2.replace : navigator2.push)(path, options.state, options);
      }, [basename, navigator2, routePathnamesJson, locationPathname, dataRouterContext]);
      return navigate;
    }
    const OutletContext = /* @__PURE__ */ reactExports.createContext(null);
    function useOutlet(context) {
      let outlet = reactExports.useContext(RouteContext).outlet;
      if (outlet) {
        return /* @__PURE__ */ reactExports.createElement(OutletContext.Provider, {
          value: context
        }, outlet);
      }
      return outlet;
    }
    function useParams() {
      let {
        matches: matches2
      } = reactExports.useContext(RouteContext);
      let routeMatch = matches2[matches2.length - 1];
      return routeMatch ? routeMatch.params : {};
    }
    function useResolvedPath(to2, _temp2) {
      let {
        relative
      } = _temp2 === void 0 ? {} : _temp2;
      let {
        future
      } = reactExports.useContext(NavigationContext);
      let {
        matches: matches2
      } = reactExports.useContext(RouteContext);
      let {
        pathname: locationPathname
      } = useLocation();
      let routePathnamesJson = JSON.stringify(getResolveToMatches(matches2, future.v7_relativeSplatPath));
      return reactExports.useMemo(() => resolveTo(to2, JSON.parse(routePathnamesJson), locationPathname, relative === "path"), [to2, routePathnamesJson, locationPathname, relative]);
    }
    function useRoutes(routes, locationArg) {
      return useRoutesImpl(routes, locationArg);
    }
    function useRoutesImpl(routes, locationArg, dataRouterState, future) {
      !useInRouterContext() ? invariant$1(false) : void 0;
      let {
        navigator: navigator2
      } = reactExports.useContext(NavigationContext);
      let {
        matches: parentMatches
      } = reactExports.useContext(RouteContext);
      let routeMatch = parentMatches[parentMatches.length - 1];
      let parentParams = routeMatch ? routeMatch.params : {};
      routeMatch ? routeMatch.pathname : "/";
      let parentPathnameBase = routeMatch ? routeMatch.pathnameBase : "/";
      routeMatch && routeMatch.route;
      let locationFromContext = useLocation();
      let location2;
      if (locationArg) {
        var _parsedLocationArg$pa;
        let parsedLocationArg = typeof locationArg === "string" ? parsePath(locationArg) : locationArg;
        !(parentPathnameBase === "/" || ((_parsedLocationArg$pa = parsedLocationArg.pathname) == null ? void 0 : _parsedLocationArg$pa.startsWith(parentPathnameBase))) ? invariant$1(false) : void 0;
        location2 = parsedLocationArg;
      } else {
        location2 = locationFromContext;
      }
      let pathname = location2.pathname || "/";
      let remainingPathname = parentPathnameBase === "/" ? pathname : pathname.slice(parentPathnameBase.length) || "/";
      let matches2 = matchRoutes(routes, {
        pathname: remainingPathname
      });
      let renderedMatches = _renderMatches(matches2 && matches2.map((match) => Object.assign({}, match, {
        params: Object.assign({}, parentParams, match.params),
        pathname: joinPaths([
          parentPathnameBase,
          // Re-encode pathnames that were decoded inside matchRoutes
          navigator2.encodeLocation ? navigator2.encodeLocation(match.pathname).pathname : match.pathname
        ]),
        pathnameBase: match.pathnameBase === "/" ? parentPathnameBase : joinPaths([
          parentPathnameBase,
          // Re-encode pathnames that were decoded inside matchRoutes
          navigator2.encodeLocation ? navigator2.encodeLocation(match.pathnameBase).pathname : match.pathnameBase
        ])
      })), parentMatches, dataRouterState, future);
      if (locationArg && renderedMatches) {
        return /* @__PURE__ */ reactExports.createElement(LocationContext.Provider, {
          value: {
            location: _extends$s({
              pathname: "/",
              search: "",
              hash: "",
              state: null,
              key: "default"
            }, location2),
            navigationType: Action$1.Pop
          }
        }, renderedMatches);
      }
      return renderedMatches;
    }
    function DefaultErrorComponent() {
      let error2 = useRouteError();
      let message = isRouteErrorResponse(error2) ? error2.status + " " + error2.statusText : error2 instanceof Error ? error2.message : JSON.stringify(error2);
      let stack = error2 instanceof Error ? error2.stack : null;
      let lightgrey = "rgba(200,200,200, 0.5)";
      let preStyles = {
        padding: "0.5rem",
        backgroundColor: lightgrey
      };
      let devInfo = null;
      return /* @__PURE__ */ reactExports.createElement(reactExports.Fragment, null, /* @__PURE__ */ reactExports.createElement("h2", null, "Unexpected Application Error!"), /* @__PURE__ */ reactExports.createElement("h3", {
        style: {
          fontStyle: "italic"
        }
      }, message), stack ? /* @__PURE__ */ reactExports.createElement("pre", {
        style: preStyles
      }, stack) : null, devInfo);
    }
    const defaultErrorElement = /* @__PURE__ */ reactExports.createElement(DefaultErrorComponent, null);
    class RenderErrorBoundary extends reactExports.Component {
      constructor(props) {
        super(props);
        this.state = {
          location: props.location,
          revalidation: props.revalidation,
          error: props.error
        };
      }
      static getDerivedStateFromError(error2) {
        return {
          error: error2
        };
      }
      static getDerivedStateFromProps(props, state) {
        if (state.location !== props.location || state.revalidation !== "idle" && props.revalidation === "idle") {
          return {
            error: props.error,
            location: props.location,
            revalidation: props.revalidation
          };
        }
        return {
          error: props.error !== void 0 ? props.error : state.error,
          location: state.location,
          revalidation: props.revalidation || state.revalidation
        };
      }
      componentDidCatch(error2, errorInfo) {
        console.error("React Router caught the following error during render", error2, errorInfo);
      }
      render() {
        return this.state.error !== void 0 ? /* @__PURE__ */ reactExports.createElement(RouteContext.Provider, {
          value: this.props.routeContext
        }, /* @__PURE__ */ reactExports.createElement(RouteErrorContext.Provider, {
          value: this.state.error,
          children: this.props.component
        })) : this.props.children;
      }
    }
    function RenderedRoute(_ref) {
      let {
        routeContext,
        match,
        children
      } = _ref;
      let dataRouterContext = reactExports.useContext(DataRouterContext);
      if (dataRouterContext && dataRouterContext.static && dataRouterContext.staticContext && (match.route.errorElement || match.route.ErrorBoundary)) {
        dataRouterContext.staticContext._deepestRenderedBoundaryId = match.route.id;
      }
      return /* @__PURE__ */ reactExports.createElement(RouteContext.Provider, {
        value: routeContext
      }, children);
    }
    function _renderMatches(matches2, parentMatches, dataRouterState, future) {
      var _dataRouterState2;
      if (parentMatches === void 0) {
        parentMatches = [];
      }
      if (dataRouterState === void 0) {
        dataRouterState = null;
      }
      if (future === void 0) {
        future = null;
      }
      if (matches2 == null) {
        var _dataRouterState;
        if ((_dataRouterState = dataRouterState) != null && _dataRouterState.errors) {
          matches2 = dataRouterState.matches;
        } else {
          return null;
        }
      }
      let renderedMatches = matches2;
      let errors = (_dataRouterState2 = dataRouterState) == null ? void 0 : _dataRouterState2.errors;
      if (errors != null) {
        let errorIndex = renderedMatches.findIndex((m2) => m2.route.id && (errors == null ? void 0 : errors[m2.route.id]));
        !(errorIndex >= 0) ? invariant$1(false) : void 0;
        renderedMatches = renderedMatches.slice(0, Math.min(renderedMatches.length, errorIndex + 1));
      }
      let renderFallback = false;
      let fallbackIndex = -1;
      if (dataRouterState && future && future.v7_partialHydration) {
        for (let i2 = 0; i2 < renderedMatches.length; i2++) {
          let match = renderedMatches[i2];
          if (match.route.HydrateFallback || match.route.hydrateFallbackElement) {
            fallbackIndex = i2;
          }
          if (match.route.id) {
            let {
              loaderData,
              errors: errors2
            } = dataRouterState;
            let needsToRunLoader = match.route.loader && loaderData[match.route.id] === void 0 && (!errors2 || errors2[match.route.id] === void 0);
            if (match.route.lazy || needsToRunLoader) {
              renderFallback = true;
              if (fallbackIndex >= 0) {
                renderedMatches = renderedMatches.slice(0, fallbackIndex + 1);
              } else {
                renderedMatches = [renderedMatches[0]];
              }
              break;
            }
          }
        }
      }
      return renderedMatches.reduceRight((outlet, match, index) => {
        let error2;
        let shouldRenderHydrateFallback = false;
        let errorElement = null;
        let hydrateFallbackElement = null;
        if (dataRouterState) {
          error2 = errors && match.route.id ? errors[match.route.id] : void 0;
          errorElement = match.route.errorElement || defaultErrorElement;
          if (renderFallback) {
            if (fallbackIndex < 0 && index === 0) {
              warningOnce("route-fallback", false);
              shouldRenderHydrateFallback = true;
              hydrateFallbackElement = null;
            } else if (fallbackIndex === index) {
              shouldRenderHydrateFallback = true;
              hydrateFallbackElement = match.route.hydrateFallbackElement || null;
            }
          }
        }
        let matches22 = parentMatches.concat(renderedMatches.slice(0, index + 1));
        let getChildren = () => {
          let children;
          if (error2) {
            children = errorElement;
          } else if (shouldRenderHydrateFallback) {
            children = hydrateFallbackElement;
          } else if (match.route.Component) {
            children = /* @__PURE__ */ reactExports.createElement(match.route.Component, null);
          } else if (match.route.element) {
            children = match.route.element;
          } else {
            children = outlet;
          }
          return /* @__PURE__ */ reactExports.createElement(RenderedRoute, {
            match,
            routeContext: {
              outlet,
              matches: matches22,
              isDataRoute: dataRouterState != null
            },
            children
          });
        };
        return dataRouterState && (match.route.ErrorBoundary || match.route.errorElement || index === 0) ? /* @__PURE__ */ reactExports.createElement(RenderErrorBoundary, {
          location: dataRouterState.location,
          revalidation: dataRouterState.revalidation,
          component: errorElement,
          error: error2,
          children: getChildren(),
          routeContext: {
            outlet: null,
            matches: matches22,
            isDataRoute: true
          }
        }) : getChildren();
      }, null);
    }
    var DataRouterHook$1 = /* @__PURE__ */ function(DataRouterHook2) {
      DataRouterHook2["UseBlocker"] = "useBlocker";
      DataRouterHook2["UseRevalidator"] = "useRevalidator";
      DataRouterHook2["UseNavigateStable"] = "useNavigate";
      return DataRouterHook2;
    }(DataRouterHook$1 || {});
    var DataRouterStateHook$1 = /* @__PURE__ */ function(DataRouterStateHook2) {
      DataRouterStateHook2["UseBlocker"] = "useBlocker";
      DataRouterStateHook2["UseLoaderData"] = "useLoaderData";
      DataRouterStateHook2["UseActionData"] = "useActionData";
      DataRouterStateHook2["UseRouteError"] = "useRouteError";
      DataRouterStateHook2["UseNavigation"] = "useNavigation";
      DataRouterStateHook2["UseRouteLoaderData"] = "useRouteLoaderData";
      DataRouterStateHook2["UseMatches"] = "useMatches";
      DataRouterStateHook2["UseRevalidator"] = "useRevalidator";
      DataRouterStateHook2["UseNavigateStable"] = "useNavigate";
      DataRouterStateHook2["UseRouteId"] = "useRouteId";
      return DataRouterStateHook2;
    }(DataRouterStateHook$1 || {});
    function useDataRouterContext(hookName) {
      let ctx = reactExports.useContext(DataRouterContext);
      !ctx ? invariant$1(false) : void 0;
      return ctx;
    }
    function useDataRouterState(hookName) {
      let state = reactExports.useContext(DataRouterStateContext);
      !state ? invariant$1(false) : void 0;
      return state;
    }
    function useRouteContext(hookName) {
      let route = reactExports.useContext(RouteContext);
      !route ? invariant$1(false) : void 0;
      return route;
    }
    function useCurrentRouteId(hookName) {
      let route = useRouteContext();
      let thisRoute = route.matches[route.matches.length - 1];
      !thisRoute.route.id ? invariant$1(false) : void 0;
      return thisRoute.route.id;
    }
    function useRouteError() {
      var _state$errors;
      let error2 = reactExports.useContext(RouteErrorContext);
      let state = useDataRouterState(DataRouterStateHook$1.UseRouteError);
      let routeId = useCurrentRouteId(DataRouterStateHook$1.UseRouteError);
      if (error2 !== void 0) {
        return error2;
      }
      return (_state$errors = state.errors) == null ? void 0 : _state$errors[routeId];
    }
    function useNavigateStable() {
      let {
        router
      } = useDataRouterContext(DataRouterHook$1.UseNavigateStable);
      let id2 = useCurrentRouteId(DataRouterStateHook$1.UseNavigateStable);
      let activeRef = reactExports.useRef(false);
      useIsomorphicLayoutEffect$2(() => {
        activeRef.current = true;
      });
      let navigate = reactExports.useCallback(function(to2, options) {
        if (options === void 0) {
          options = {};
        }
        if (!activeRef.current)
          return;
        if (typeof to2 === "number") {
          router.navigate(to2);
        } else {
          router.navigate(to2, _extends$s({
            fromRouteId: id2
          }, options));
        }
      }, [router, id2]);
      return navigate;
    }
    const alreadyWarned = {};
    function warningOnce(key, cond, message) {
      if (!cond && !alreadyWarned[key]) {
        alreadyWarned[key] = true;
      }
    }
    function Navigate(_ref4) {
      let {
        to: to2,
        replace,
        state,
        relative
      } = _ref4;
      !useInRouterContext() ? invariant$1(false) : void 0;
      let {
        future,
        static: isStatic
      } = reactExports.useContext(NavigationContext);
      let {
        matches: matches2
      } = reactExports.useContext(RouteContext);
      let {
        pathname: locationPathname
      } = useLocation();
      let navigate = useNavigate();
      let path = resolveTo(to2, getResolveToMatches(matches2, future.v7_relativeSplatPath), locationPathname, relative === "path");
      let jsonPath = JSON.stringify(path);
      reactExports.useEffect(() => navigate(JSON.parse(jsonPath), {
        replace,
        state,
        relative
      }), [navigate, jsonPath, relative, replace, state]);
      return null;
    }
    function Outlet(props) {
      return useOutlet(props.context);
    }
    function Route(_props) {
      invariant$1(false);
    }
    function Router(_ref5) {
      let {
        basename: basenameProp = "/",
        children = null,
        location: locationProp,
        navigationType = Action$1.Pop,
        navigator: navigator2,
        static: staticProp = false,
        future
      } = _ref5;
      !!useInRouterContext() ? invariant$1(false) : void 0;
      let basename = basenameProp.replace(/^\/*/, "/");
      let navigationContext = reactExports.useMemo(() => ({
        basename,
        navigator: navigator2,
        static: staticProp,
        future: _extends$s({
          v7_relativeSplatPath: false
        }, future)
      }), [basename, future, navigator2, staticProp]);
      if (typeof locationProp === "string") {
        locationProp = parsePath(locationProp);
      }
      let {
        pathname = "/",
        search = "",
        hash = "",
        state = null,
        key = "default"
      } = locationProp;
      let locationContext = reactExports.useMemo(() => {
        let trailingPathname = stripBasename(pathname, basename);
        if (trailingPathname == null) {
          return null;
        }
        return {
          location: {
            pathname: trailingPathname,
            search,
            hash,
            state,
            key
          },
          navigationType
        };
      }, [basename, pathname, search, hash, state, key, navigationType]);
      if (locationContext == null) {
        return null;
      }
      return /* @__PURE__ */ reactExports.createElement(NavigationContext.Provider, {
        value: navigationContext
      }, /* @__PURE__ */ reactExports.createElement(LocationContext.Provider, {
        children,
        value: locationContext
      }));
    }
    function Routes(_ref6) {
      let {
        children,
        location: location2
      } = _ref6;
      return useRoutes(createRoutesFromChildren(children), location2);
    }
    new Promise(() => {
    });
    function createRoutesFromChildren(children, parentPath) {
      if (parentPath === void 0) {
        parentPath = [];
      }
      let routes = [];
      reactExports.Children.forEach(children, (element, index) => {
        if (!/* @__PURE__ */ reactExports.isValidElement(element)) {
          return;
        }
        let treePath = [...parentPath, index];
        if (element.type === reactExports.Fragment) {
          routes.push.apply(routes, createRoutesFromChildren(element.props.children, treePath));
          return;
        }
        !(element.type === Route) ? invariant$1(false) : void 0;
        !(!element.props.index || !element.props.children) ? invariant$1(false) : void 0;
        let route = {
          id: element.props.id || treePath.join("-"),
          caseSensitive: element.props.caseSensitive,
          element: element.props.element,
          Component: element.props.Component,
          index: element.props.index,
          path: element.props.path,
          loader: element.props.loader,
          action: element.props.action,
          errorElement: element.props.errorElement,
          ErrorBoundary: element.props.ErrorBoundary,
          hasErrorBoundary: element.props.ErrorBoundary != null || element.props.errorElement != null,
          shouldRevalidate: element.props.shouldRevalidate,
          handle: element.props.handle,
          lazy: element.props.lazy
        };
        if (element.props.children) {
          route.children = createRoutesFromChildren(element.props.children, treePath);
        }
        routes.push(route);
      });
      return routes;
    }
    /**
     * React Router DOM v6.22.0
     *
     * Copyright (c) Remix Software Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE.md file in the root directory of this source tree.
     *
     * @license MIT
     */
    function _extends$r() {
      _extends$r = Object.assign ? Object.assign.bind() : function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends$r.apply(this, arguments);
    }
    function _objectWithoutPropertiesLoose$i(source, excluded) {
      if (source == null)
        return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i2;
      for (i2 = 0; i2 < sourceKeys.length; i2++) {
        key = sourceKeys[i2];
        if (excluded.indexOf(key) >= 0)
          continue;
        target[key] = source[key];
      }
      return target;
    }
    function isModifiedEvent(event) {
      return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
    }
    function shouldProcessLinkClick(event, target) {
      return event.button === 0 && // Ignore everything but left clicks
      (!target || target === "_self") && // Let browser handle "target=_blank" etc.
      !isModifiedEvent(event);
    }
    const _excluded$i = ["onClick", "relative", "reloadDocument", "replace", "state", "target", "to", "preventScrollReset", "unstable_viewTransition"];
    const REACT_ROUTER_VERSION = "6";
    try {
      window.__reactRouterVersion = REACT_ROUTER_VERSION;
    } catch (e3) {
    }
    const START_TRANSITION = "startTransition";
    const startTransitionImpl = e$3[START_TRANSITION];
    function BrowserRouter(_ref4) {
      let {
        basename,
        children,
        future,
        window: window2
      } = _ref4;
      let historyRef = reactExports.useRef();
      if (historyRef.current == null) {
        historyRef.current = createBrowserHistory({
          window: window2,
          v5Compat: true
        });
      }
      let history = historyRef.current;
      let [state, setStateImpl] = reactExports.useState({
        action: history.action,
        location: history.location
      });
      let {
        v7_startTransition
      } = future || {};
      let setState = reactExports.useCallback((newState) => {
        v7_startTransition && startTransitionImpl ? startTransitionImpl(() => setStateImpl(newState)) : setStateImpl(newState);
      }, [setStateImpl, v7_startTransition]);
      reactExports.useLayoutEffect(() => history.listen(setState), [history, setState]);
      return /* @__PURE__ */ reactExports.createElement(Router, {
        basename,
        children,
        location: state.location,
        navigationType: state.action,
        navigator: history,
        future
      });
    }
    const isBrowser = typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined";
    const ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\/\/)/i;
    const Link = /* @__PURE__ */ reactExports.forwardRef(function LinkWithRef(_ref7, ref) {
      let {
        onClick,
        relative,
        reloadDocument,
        replace,
        state,
        target,
        to: to2,
        preventScrollReset,
        unstable_viewTransition
      } = _ref7, rest = _objectWithoutPropertiesLoose$i(_ref7, _excluded$i);
      let {
        basename
      } = reactExports.useContext(NavigationContext);
      let absoluteHref;
      let isExternal = false;
      if (typeof to2 === "string" && ABSOLUTE_URL_REGEX.test(to2)) {
        absoluteHref = to2;
        if (isBrowser) {
          try {
            let currentUrl = new URL(window.location.href);
            let targetUrl = to2.startsWith("//") ? new URL(currentUrl.protocol + to2) : new URL(to2);
            let path = stripBasename(targetUrl.pathname, basename);
            if (targetUrl.origin === currentUrl.origin && path != null) {
              to2 = path + targetUrl.search + targetUrl.hash;
            } else {
              isExternal = true;
            }
          } catch (e3) {
          }
        }
      }
      let href = useHref(to2, {
        relative
      });
      let internalOnClick = useLinkClickHandler(to2, {
        replace,
        state,
        target,
        preventScrollReset,
        relative,
        unstable_viewTransition
      });
      function handleClick(event) {
        if (onClick)
          onClick(event);
        if (!event.defaultPrevented) {
          internalOnClick(event);
        }
      }
      return (
        // eslint-disable-next-line jsx-a11y/anchor-has-content
        /* @__PURE__ */ reactExports.createElement("a", _extends$r({}, rest, {
          href: absoluteHref || href,
          onClick: isExternal || reloadDocument ? onClick : handleClick,
          ref,
          target
        }))
      );
    });
    var DataRouterHook;
    (function(DataRouterHook2) {
      DataRouterHook2["UseScrollRestoration"] = "useScrollRestoration";
      DataRouterHook2["UseSubmit"] = "useSubmit";
      DataRouterHook2["UseSubmitFetcher"] = "useSubmitFetcher";
      DataRouterHook2["UseFetcher"] = "useFetcher";
      DataRouterHook2["useViewTransitionState"] = "useViewTransitionState";
    })(DataRouterHook || (DataRouterHook = {}));
    var DataRouterStateHook;
    (function(DataRouterStateHook2) {
      DataRouterStateHook2["UseFetcher"] = "useFetcher";
      DataRouterStateHook2["UseFetchers"] = "useFetchers";
      DataRouterStateHook2["UseScrollRestoration"] = "useScrollRestoration";
    })(DataRouterStateHook || (DataRouterStateHook = {}));
    function useLinkClickHandler(to2, _temp) {
      let {
        target,
        replace: replaceProp,
        state,
        preventScrollReset,
        relative,
        unstable_viewTransition
      } = _temp === void 0 ? {} : _temp;
      let navigate = useNavigate();
      let location2 = useLocation();
      let path = useResolvedPath(to2, {
        relative
      });
      return reactExports.useCallback((event) => {
        if (shouldProcessLinkClick(event, target)) {
          event.preventDefault();
          let replace = replaceProp !== void 0 ? replaceProp : createPath(location2) === createPath(path);
          navigate(to2, {
            replace,
            state,
            preventScrollReset,
            relative,
            unstable_viewTransition
          });
        }
      }, [location2, navigate, path, replaceProp, state, target, to2, preventScrollReset, relative, unstable_viewTransition]);
    }
    var i$5 = Object.defineProperty;
    var d$7 = (t2, e3, n2) => e3 in t2 ? i$5(t2, e3, { enumerable: true, configurable: true, writable: true, value: n2 }) : t2[e3] = n2;
    var r$5 = (t2, e3, n2) => (d$7(t2, typeof e3 != "symbol" ? e3 + "" : e3, n2), n2);
    let o$7 = class o {
      constructor() {
        r$5(this, "current", this.detect());
        r$5(this, "handoffState", "pending");
        r$5(this, "currentId", 0);
      }
      set(e3) {
        this.current !== e3 && (this.handoffState = "pending", this.currentId = 0, this.current = e3);
      }
      reset() {
        this.set(this.detect());
      }
      nextId() {
        return ++this.currentId;
      }
      get isServer() {
        return this.current === "server";
      }
      get isClient() {
        return this.current === "client";
      }
      detect() {
        return typeof window == "undefined" || typeof document == "undefined" ? "server" : "client";
      }
      handoff() {
        this.handoffState === "pending" && (this.handoffState = "complete");
      }
      get isHandoffComplete() {
        return this.handoffState === "complete";
      }
    };
    let s$b = new o$7();
    let l$6 = (e3, f2) => {
      s$b.isServer ? reactExports.useEffect(e3, f2) : reactExports.useLayoutEffect(e3, f2);
    };
    function s$a(e3) {
      let r2 = reactExports.useRef(e3);
      return l$6(() => {
        r2.current = e3;
      }, [e3]), r2;
    }
    function i$4(e3, o2) {
      let [u2, t2] = reactExports.useState(e3), r2 = s$a(e3);
      return l$6(() => t2(r2.current), [r2, t2, ...o2]), u2;
    }
    let o$6 = function(t2) {
      let e3 = s$a(t2);
      return React$1.useCallback((...r2) => e3.current(...r2), [e3]);
    };
    function T$4(l2, r2, c2) {
      let [i2, s2] = reactExports.useState(c2), e3 = l2 !== void 0, t2 = reactExports.useRef(e3), u2 = reactExports.useRef(false), d2 = reactExports.useRef(false);
      return e3 && !t2.current && !u2.current ? (u2.current = true, t2.current = e3, console.error("A component is changing from uncontrolled to controlled. This may be caused by the value changing from undefined to a defined value, which should not happen.")) : !e3 && t2.current && !d2.current && (d2.current = true, t2.current = e3, console.error("A component is changing from controlled to uncontrolled. This may be caused by the value changing from a defined value to undefined, which should not happen.")), [e3 ? l2 : i2, o$6((n2) => (e3 || s2(n2), r2 == null ? void 0 : r2(n2)))];
    }
    function t$8(e3) {
      typeof queueMicrotask == "function" ? queueMicrotask(e3) : Promise.resolve().then(e3).catch((o2) => setTimeout(() => {
        throw o2;
      }));
    }
    function o$5() {
      let n2 = [], r2 = { addEventListener(e3, t2, s2, a2) {
        return e3.addEventListener(t2, s2, a2), r2.add(() => e3.removeEventListener(t2, s2, a2));
      }, requestAnimationFrame(...e3) {
        let t2 = requestAnimationFrame(...e3);
        return r2.add(() => cancelAnimationFrame(t2));
      }, nextFrame(...e3) {
        return r2.requestAnimationFrame(() => r2.requestAnimationFrame(...e3));
      }, setTimeout(...e3) {
        let t2 = setTimeout(...e3);
        return r2.add(() => clearTimeout(t2));
      }, microTask(...e3) {
        let t2 = { current: true };
        return t$8(() => {
          t2.current && e3[0]();
        }), r2.add(() => {
          t2.current = false;
        });
      }, style(e3, t2, s2) {
        let a2 = e3.style.getPropertyValue(t2);
        return Object.assign(e3.style, { [t2]: s2 }), this.add(() => {
          Object.assign(e3.style, { [t2]: a2 });
        });
      }, group(e3) {
        let t2 = o$5();
        return e3(t2), this.add(() => t2.dispose());
      }, add(e3) {
        return n2.push(e3), () => {
          let t2 = n2.indexOf(e3);
          if (t2 >= 0)
            for (let s2 of n2.splice(t2, 1))
              s2();
        };
      }, dispose() {
        for (let e3 of n2.splice(0))
          e3();
      } };
      return r2;
    }
    function p$4() {
      let [e3] = reactExports.useState(o$5);
      return reactExports.useEffect(() => () => e3.dispose(), [e3]), e3;
    }
    function s$9() {
      let r2 = typeof document == "undefined";
      return "useSyncExternalStore" in e$3 ? ((o2) => o2.useSyncExternalStore)(e$3)(() => () => {
      }, () => false, () => !r2) : false;
    }
    function l$5() {
      let r2 = s$9(), [e3, n2] = reactExports.useState(s$b.isHandoffComplete);
      return e3 && s$b.isHandoffComplete === false && n2(false), reactExports.useEffect(() => {
        e3 !== true && n2(true);
      }, [e3]), reactExports.useEffect(() => s$b.handoff(), []), r2 ? false : e3;
    }
    var o$4;
    let I$6 = (o$4 = React$1.useId) != null ? o$4 : function() {
      let n2 = l$5(), [e3, u2] = React$1.useState(n2 ? () => s$b.nextId() : null);
      return l$6(() => {
        e3 === null && u2(s$b.nextId());
      }, [e3]), e3 != null ? "" + e3 : void 0;
    };
    function u$6(r2, n2, ...a2) {
      if (r2 in n2) {
        let e3 = n2[r2];
        return typeof e3 == "function" ? e3(...a2) : e3;
      }
      let t2 = new Error(`Tried to handle "${r2}" but there is no handler defined. Only defined handlers are: ${Object.keys(n2).map((e3) => `"${e3}"`).join(", ")}.`);
      throw Error.captureStackTrace && Error.captureStackTrace(t2, u$6), t2;
    }
    function o$3(r2) {
      return s$b.isServer ? null : r2 instanceof Node ? r2.ownerDocument : r2 != null && r2.hasOwnProperty("current") && r2.current instanceof Node ? r2.current.ownerDocument : document;
    }
    let c$7 = ["[contentEditable=true]", "[tabindex]", "a[href]", "area[href]", "button:not([disabled])", "iframe", "input:not([disabled])", "select:not([disabled])", "textarea:not([disabled])"].map((e3) => `${e3}:not([tabindex='-1'])`).join(",");
    var M$2 = ((n2) => (n2[n2.First = 1] = "First", n2[n2.Previous = 2] = "Previous", n2[n2.Next = 4] = "Next", n2[n2.Last = 8] = "Last", n2[n2.WrapAround = 16] = "WrapAround", n2[n2.NoScroll = 32] = "NoScroll", n2))(M$2 || {}), N$2 = ((o2) => (o2[o2.Error = 0] = "Error", o2[o2.Overflow = 1] = "Overflow", o2[o2.Success = 2] = "Success", o2[o2.Underflow = 3] = "Underflow", o2))(N$2 || {}), F$3 = ((t2) => (t2[t2.Previous = -1] = "Previous", t2[t2.Next = 1] = "Next", t2))(F$3 || {});
    function f$9(e3 = document.body) {
      return e3 == null ? [] : Array.from(e3.querySelectorAll(c$7)).sort((r2, t2) => Math.sign((r2.tabIndex || Number.MAX_SAFE_INTEGER) - (t2.tabIndex || Number.MAX_SAFE_INTEGER)));
    }
    var T$3 = ((t2) => (t2[t2.Strict = 0] = "Strict", t2[t2.Loose = 1] = "Loose", t2))(T$3 || {});
    function h$4(e3, r2 = 0) {
      var t2;
      return e3 === ((t2 = o$3(e3)) == null ? void 0 : t2.body) ? false : u$6(r2, { [0]() {
        return e3.matches(c$7);
      }, [1]() {
        let l2 = e3;
        for (; l2 !== null; ) {
          if (l2.matches(c$7))
            return true;
          l2 = l2.parentElement;
        }
        return false;
      } });
    }
    function D$3(e3) {
      let r2 = o$3(e3);
      o$5().nextFrame(() => {
        r2 && !h$4(r2.activeElement, 0) && y$6(e3);
      });
    }
    var w$4 = ((t2) => (t2[t2.Keyboard = 0] = "Keyboard", t2[t2.Mouse = 1] = "Mouse", t2))(w$4 || {});
    typeof window != "undefined" && typeof document != "undefined" && (document.addEventListener("keydown", (e3) => {
      e3.metaKey || e3.altKey || e3.ctrlKey || (document.documentElement.dataset.headlessuiFocusVisible = "");
    }, true), document.addEventListener("click", (e3) => {
      e3.detail === 1 ? delete document.documentElement.dataset.headlessuiFocusVisible : e3.detail === 0 && (document.documentElement.dataset.headlessuiFocusVisible = "");
    }, true));
    function y$6(e3) {
      e3 == null || e3.focus({ preventScroll: true });
    }
    let S$5 = ["textarea", "input"].join(",");
    function H(e3) {
      var r2, t2;
      return (t2 = (r2 = e3 == null ? void 0 : e3.matches) == null ? void 0 : r2.call(e3, S$5)) != null ? t2 : false;
    }
    function I$5(e3, r2 = (t2) => t2) {
      return e3.slice().sort((t2, l2) => {
        let o2 = r2(t2), i2 = r2(l2);
        if (o2 === null || i2 === null)
          return 0;
        let n2 = o2.compareDocumentPosition(i2);
        return n2 & Node.DOCUMENT_POSITION_FOLLOWING ? -1 : n2 & Node.DOCUMENT_POSITION_PRECEDING ? 1 : 0;
      });
    }
    function _$2(e3, r2) {
      return O$1(f$9(), r2, { relativeTo: e3 });
    }
    function O$1(e3, r2, { sorted: t2 = true, relativeTo: l2 = null, skipElements: o2 = [] } = {}) {
      let i2 = Array.isArray(e3) ? e3.length > 0 ? e3[0].ownerDocument : document : e3.ownerDocument, n2 = Array.isArray(e3) ? t2 ? I$5(e3) : e3 : f$9(e3);
      o2.length > 0 && n2.length > 1 && (n2 = n2.filter((s2) => !o2.includes(s2))), l2 = l2 != null ? l2 : i2.activeElement;
      let E2 = (() => {
        if (r2 & 5)
          return 1;
        if (r2 & 10)
          return -1;
        throw new Error("Missing Focus.First, Focus.Previous, Focus.Next or Focus.Last");
      })(), x2 = (() => {
        if (r2 & 1)
          return 0;
        if (r2 & 2)
          return Math.max(0, n2.indexOf(l2)) - 1;
        if (r2 & 4)
          return Math.max(0, n2.indexOf(l2)) + 1;
        if (r2 & 8)
          return n2.length - 1;
        throw new Error("Missing Focus.First, Focus.Previous, Focus.Next or Focus.Last");
      })(), p2 = r2 & 32 ? { preventScroll: true } : {}, d2 = 0, a2 = n2.length, u2;
      do {
        if (d2 >= a2 || d2 + a2 <= 0)
          return 0;
        let s2 = x2 + d2;
        if (r2 & 16)
          s2 = (s2 + a2) % a2;
        else {
          if (s2 < 0)
            return 3;
          if (s2 >= a2)
            return 1;
        }
        u2 = n2[s2], u2 == null || u2.focus(p2), d2 += E2;
      } while (u2 !== i2.activeElement);
      return r2 & 6 && H(u2) && u2.select(), 2;
    }
    function t$7() {
      return /iPhone/gi.test(window.navigator.platform) || /Mac/gi.test(window.navigator.platform) && window.navigator.maxTouchPoints > 0;
    }
    function i$3() {
      return /Android/gi.test(window.navigator.userAgent);
    }
    function n$4() {
      return t$7() || i$3();
    }
    function d$6(e3, r2, n2) {
      let o2 = s$a(r2);
      reactExports.useEffect(() => {
        function t2(u2) {
          o2.current(u2);
        }
        return document.addEventListener(e3, t2, n2), () => document.removeEventListener(e3, t2, n2);
      }, [e3, n2]);
    }
    function s$8(e3, r2, n2) {
      let o2 = s$a(r2);
      reactExports.useEffect(() => {
        function t2(i2) {
          o2.current(i2);
        }
        return window.addEventListener(e3, t2, n2), () => window.removeEventListener(e3, t2, n2);
      }, [e3, n2]);
    }
    function y$5(s2, m2, a2 = true) {
      let i2 = reactExports.useRef(false);
      reactExports.useEffect(() => {
        requestAnimationFrame(() => {
          i2.current = a2;
        });
      }, [a2]);
      function c2(e3, r2) {
        if (!i2.current || e3.defaultPrevented)
          return;
        let t2 = r2(e3);
        if (t2 === null || !t2.getRootNode().contains(t2) || !t2.isConnected)
          return;
        let E2 = function u2(n2) {
          return typeof n2 == "function" ? u2(n2()) : Array.isArray(n2) || n2 instanceof Set ? n2 : [n2];
        }(s2);
        for (let u2 of E2) {
          if (u2 === null)
            continue;
          let n2 = u2 instanceof HTMLElement ? u2 : u2.current;
          if (n2 != null && n2.contains(t2) || e3.composed && e3.composedPath().includes(n2))
            return;
        }
        return !h$4(t2, T$3.Loose) && t2.tabIndex !== -1 && e3.preventDefault(), m2(e3, t2);
      }
      let o2 = reactExports.useRef(null);
      d$6("pointerdown", (e3) => {
        var r2, t2;
        i2.current && (o2.current = ((t2 = (r2 = e3.composedPath) == null ? void 0 : r2.call(e3)) == null ? void 0 : t2[0]) || e3.target);
      }, true), d$6("mousedown", (e3) => {
        var r2, t2;
        i2.current && (o2.current = ((t2 = (r2 = e3.composedPath) == null ? void 0 : r2.call(e3)) == null ? void 0 : t2[0]) || e3.target);
      }, true), d$6("click", (e3) => {
        n$4() || o2.current && (c2(e3, () => o2.current), o2.current = null);
      }, true), d$6("touchend", (e3) => c2(e3, () => e3.target instanceof HTMLElement ? e3.target : null), true), s$8("blur", (e3) => c2(e3, () => window.document.activeElement instanceof HTMLIFrameElement ? window.document.activeElement : null), true);
    }
    function n$3(...e3) {
      return reactExports.useMemo(() => o$3(...e3), [...e3]);
    }
    function i$2(t2) {
      var n2;
      if (t2.type)
        return t2.type;
      let e3 = (n2 = t2.as) != null ? n2 : "button";
      if (typeof e3 == "string" && e3.toLowerCase() === "button")
        return "button";
    }
    function T$2(t2, e3) {
      let [n2, u2] = reactExports.useState(() => i$2(t2));
      return l$6(() => {
        u2(i$2(t2));
      }, [t2.type, t2.as]), l$6(() => {
        n2 || e3.current && e3.current instanceof HTMLButtonElement && !e3.current.hasAttribute("type") && u2("button");
      }, [n2, e3]), n2;
    }
    let u$5 = Symbol();
    function T$1(t2, n2 = true) {
      return Object.assign(t2, { [u$5]: n2 });
    }
    function y$4(...t2) {
      let n2 = reactExports.useRef(t2);
      reactExports.useEffect(() => {
        n2.current = t2;
      }, [t2]);
      let c2 = o$6((e3) => {
        for (let o2 of n2.current)
          o2 != null && (typeof o2 == "function" ? o2(e3) : o2.current = e3);
      });
      return t2.every((e3) => e3 == null || (e3 == null ? void 0 : e3[u$5])) ? void 0 : c2;
    }
    function t$6(e3) {
      return [e3.screenX, e3.screenY];
    }
    function u$4() {
      let e3 = reactExports.useRef([-1, -1]);
      return { wasMoved(r2) {
        let n2 = t$6(r2);
        return e3.current[0] === n2[0] && e3.current[1] === n2[1] ? false : (e3.current = n2, true);
      }, update(r2) {
        e3.current = t$6(r2);
      } };
    }
    function F$2({ container: e3, accept: t2, walk: r2, enabled: c2 = true }) {
      let o2 = reactExports.useRef(t2), l2 = reactExports.useRef(r2);
      reactExports.useEffect(() => {
        o2.current = t2, l2.current = r2;
      }, [t2, r2]), l$6(() => {
        if (!e3 || !c2)
          return;
        let n2 = o$3(e3);
        if (!n2)
          return;
        let f2 = o2.current, p2 = l2.current, d2 = Object.assign((i2) => f2(i2), { acceptNode: f2 }), u2 = n2.createTreeWalker(e3, NodeFilter.SHOW_ELEMENT, d2, false);
        for (; u2.nextNode(); )
          p2(u2.currentNode);
      }, [e3, c2, o2, l2]);
    }
    function m$3(u2, t2) {
      let e3 = reactExports.useRef([]), r2 = o$6(u2);
      reactExports.useEffect(() => {
        let o2 = [...e3.current];
        for (let [n2, a2] of t2.entries())
          if (e3.current[n2] !== a2) {
            let l2 = r2(t2, o2);
            return e3.current = t2, l2;
          }
      }, [r2, ...t2]);
    }
    function t$5(...r2) {
      return Array.from(new Set(r2.flatMap((n2) => typeof n2 == "string" ? n2.split(" ") : []))).filter(Boolean).join(" ");
    }
    var O = ((n2) => (n2[n2.None = 0] = "None", n2[n2.RenderStrategy = 1] = "RenderStrategy", n2[n2.Static = 2] = "Static", n2))(O || {}), v$2 = ((e3) => (e3[e3.Unmount = 0] = "Unmount", e3[e3.Hidden = 1] = "Hidden", e3))(v$2 || {});
    function C$2({ ourProps: r2, theirProps: t2, slot: e3, defaultTag: n2, features: o2, visible: a2 = true, name: f2, mergeRefs: l2 }) {
      l2 = l2 != null ? l2 : k$3;
      let s2 = R(t2, r2);
      if (a2)
        return m$2(s2, e3, n2, f2, l2);
      let y2 = o2 != null ? o2 : 0;
      if (y2 & 2) {
        let { static: u2 = false, ...d2 } = s2;
        if (u2)
          return m$2(d2, e3, n2, f2, l2);
      }
      if (y2 & 1) {
        let { unmount: u2 = true, ...d2 } = s2;
        return u$6(u2 ? 0 : 1, { [0]() {
          return null;
        }, [1]() {
          return m$2({ ...d2, hidden: true, style: { display: "none" } }, e3, n2, f2, l2);
        } });
      }
      return m$2(s2, e3, n2, f2, l2);
    }
    function m$2(r2, t2 = {}, e3, n2, o2) {
      let { as: a2 = e3, children: f2, refName: l2 = "ref", ...s2 } = F$1(r2, ["unmount", "static"]), y2 = r2.ref !== void 0 ? { [l2]: r2.ref } : {}, u2 = typeof f2 == "function" ? f2(t2) : f2;
      "className" in s2 && s2.className && typeof s2.className == "function" && (s2.className = s2.className(t2));
      let d2 = {};
      if (t2) {
        let i2 = false, c2 = [];
        for (let [T2, p2] of Object.entries(t2))
          typeof p2 == "boolean" && (i2 = true), p2 === true && c2.push(T2);
        i2 && (d2["data-headlessui-state"] = c2.join(" "));
      }
      if (a2 === reactExports.Fragment && Object.keys(x$3(s2)).length > 0) {
        if (!reactExports.isValidElement(u2) || Array.isArray(u2) && u2.length > 1)
          throw new Error(['Passing props on "Fragment"!', "", `The current component <${n2} /> is rendering a "Fragment".`, "However we need to passthrough the following props:", Object.keys(s2).map((p2) => `  - ${p2}`).join(`
`), "", "You can apply a few solutions:", ['Add an `as="..."` prop, to ensure that we render an actual element instead of a "Fragment".', "Render a single element as the child so that we can forward the props onto that element."].map((p2) => `  - ${p2}`).join(`
`)].join(`
`));
        let i2 = u2.props, c2 = typeof (i2 == null ? void 0 : i2.className) == "function" ? (...p2) => t$5(i2 == null ? void 0 : i2.className(...p2), s2.className) : t$5(i2 == null ? void 0 : i2.className, s2.className), T2 = c2 ? { className: c2 } : {};
        return reactExports.cloneElement(u2, Object.assign({}, R(u2.props, x$3(F$1(s2, ["ref"]))), d2, y2, { ref: o2(u2.ref, y2.ref) }, T2));
      }
      return reactExports.createElement(a2, Object.assign({}, F$1(s2, ["ref"]), a2 !== reactExports.Fragment && y2, a2 !== reactExports.Fragment && d2), u2);
    }
    function I$4() {
      let r2 = reactExports.useRef([]), t2 = reactExports.useCallback((e3) => {
        for (let n2 of r2.current)
          n2 != null && (typeof n2 == "function" ? n2(e3) : n2.current = e3);
      }, []);
      return (...e3) => {
        if (!e3.every((n2) => n2 == null))
          return r2.current = e3, t2;
      };
    }
    function k$3(...r2) {
      return r2.every((t2) => t2 == null) ? void 0 : (t2) => {
        for (let e3 of r2)
          e3 != null && (typeof e3 == "function" ? e3(t2) : e3.current = t2);
      };
    }
    function R(...r2) {
      if (r2.length === 0)
        return {};
      if (r2.length === 1)
        return r2[0];
      let t2 = {}, e3 = {};
      for (let o2 of r2)
        for (let a2 in o2)
          a2.startsWith("on") && typeof o2[a2] == "function" ? (e3[a2] != null || (e3[a2] = []), e3[a2].push(o2[a2])) : t2[a2] = o2[a2];
      if (t2.disabled || t2["aria-disabled"])
        return Object.assign(t2, Object.fromEntries(Object.keys(e3).map((o2) => [o2, void 0])));
      for (let o2 in e3)
        Object.assign(t2, { [o2](a2, ...f2) {
          let l2 = e3[o2];
          for (let s2 of l2) {
            if ((a2 instanceof Event || (a2 == null ? void 0 : a2.nativeEvent) instanceof Event) && a2.defaultPrevented)
              return;
            s2(a2, ...f2);
          }
        } });
      return t2;
    }
    function U$3(r2) {
      var t2;
      return Object.assign(reactExports.forwardRef(r2), { displayName: (t2 = r2.displayName) != null ? t2 : r2.name });
    }
    function x$3(r2) {
      let t2 = Object.assign({}, r2);
      for (let e3 in t2)
        t2[e3] === void 0 && delete t2[e3];
      return t2;
    }
    function F$1(r2, t2 = []) {
      let e3 = Object.assign({}, r2);
      for (let n2 of t2)
        n2 in e3 && delete e3[n2];
      return e3;
    }
    let p$3 = "div";
    var s$7 = ((e3) => (e3[e3.None = 1] = "None", e3[e3.Focusable = 2] = "Focusable", e3[e3.Hidden = 4] = "Hidden", e3))(s$7 || {});
    function l$4(d2, o2) {
      var n2;
      let { features: t2 = 1, ...e3 } = d2, r2 = { ref: o2, "aria-hidden": (t2 & 2) === 2 ? true : (n2 = e3["aria-hidden"]) != null ? n2 : void 0, style: { position: "fixed", top: 1, left: 1, width: 1, height: 0, padding: 0, margin: -1, overflow: "hidden", clip: "rect(0, 0, 0, 0)", whiteSpace: "nowrap", borderWidth: "0", ...(t2 & 4) === 4 && (t2 & 2) !== 2 && { display: "none" } } };
      return C$2({ ourProps: r2, theirProps: e3, slot: {}, defaultTag: p$3, name: "Hidden" });
    }
    let f$8 = U$3(l$4);
    let n$2 = reactExports.createContext(null);
    n$2.displayName = "OpenClosedContext";
    var d$5 = ((e3) => (e3[e3.Open = 1] = "Open", e3[e3.Closed = 2] = "Closed", e3[e3.Closing = 4] = "Closing", e3[e3.Opening = 8] = "Opening", e3))(d$5 || {});
    function u$3() {
      return reactExports.useContext(n$2);
    }
    function s$6({ value: o2, children: r2 }) {
      return React$1.createElement(n$2.Provider, { value: o2 }, r2);
    }
    function t$4(n2) {
      function e3() {
        document.readyState !== "loading" && (n2(), document.removeEventListener("DOMContentLoaded", e3));
      }
      typeof window != "undefined" && typeof document != "undefined" && (document.addEventListener("DOMContentLoaded", e3), e3());
    }
    let t$3 = [];
    t$4(() => {
      function e3(n2) {
        n2.target instanceof HTMLElement && n2.target !== document.body && t$3[0] !== n2.target && (t$3.unshift(n2.target), t$3 = t$3.filter((r2) => r2 != null && r2.isConnected), t$3.splice(10));
      }
      window.addEventListener("click", e3, { capture: true }), window.addEventListener("mousedown", e3, { capture: true }), window.addEventListener("focus", e3, { capture: true }), document.body.addEventListener("click", e3, { capture: true }), document.body.addEventListener("mousedown", e3, { capture: true }), document.body.addEventListener("focus", e3, { capture: true });
    });
    function r$4(n2) {
      let e3 = n2.parentElement, l2 = null;
      for (; e3 && !(e3 instanceof HTMLFieldSetElement); )
        e3 instanceof HTMLLegendElement && (l2 = e3), e3 = e3.parentElement;
      let t2 = (e3 == null ? void 0 : e3.getAttribute("disabled")) === "";
      return t2 && i$1(l2) ? false : t2;
    }
    function i$1(n2) {
      if (!n2)
        return false;
      let e3 = n2.previousElementSibling;
      for (; e3 !== null; ) {
        if (e3 instanceof HTMLLegendElement)
          return false;
        e3 = e3.previousElementSibling;
      }
      return true;
    }
    function u$2(l2) {
      throw new Error("Unexpected object: " + l2);
    }
    var c$6 = ((i2) => (i2[i2.First = 0] = "First", i2[i2.Previous = 1] = "Previous", i2[i2.Next = 2] = "Next", i2[i2.Last = 3] = "Last", i2[i2.Specific = 4] = "Specific", i2[i2.Nothing = 5] = "Nothing", i2))(c$6 || {});
    function f$7(l2, n2) {
      let t2 = n2.resolveItems();
      if (t2.length <= 0)
        return null;
      let r2 = n2.resolveActiveIndex(), s2 = r2 != null ? r2 : -1;
      switch (l2.focus) {
        case 0: {
          for (let e3 = 0; e3 < t2.length; ++e3)
            if (!n2.resolveDisabled(t2[e3], e3, t2))
              return e3;
          return r2;
        }
        case 1: {
          for (let e3 = s2 - 1; e3 >= 0; --e3)
            if (!n2.resolveDisabled(t2[e3], e3, t2))
              return e3;
          return r2;
        }
        case 2: {
          for (let e3 = s2 + 1; e3 < t2.length; ++e3)
            if (!n2.resolveDisabled(t2[e3], e3, t2))
              return e3;
          return r2;
        }
        case 3: {
          for (let e3 = t2.length - 1; e3 >= 0; --e3)
            if (!n2.resolveDisabled(t2[e3], e3, t2))
              return e3;
          return r2;
        }
        case 4: {
          for (let e3 = 0; e3 < t2.length; ++e3)
            if (n2.resolveId(t2[e3], e3, t2) === l2.id)
              return e3;
          return r2;
        }
        case 5:
          return null;
        default:
          u$2(l2);
      }
    }
    function e$2(i2 = {}, s2 = null, t2 = []) {
      for (let [r2, n2] of Object.entries(i2))
        o$2(t2, f$6(s2, r2), n2);
      return t2;
    }
    function f$6(i2, s2) {
      return i2 ? i2 + "[" + s2 + "]" : s2;
    }
    function o$2(i2, s2, t2) {
      if (Array.isArray(t2))
        for (let [r2, n2] of t2.entries())
          o$2(i2, f$6(s2, r2.toString()), n2);
      else
        t2 instanceof Date ? i2.push([s2, t2.toISOString()]) : typeof t2 == "boolean" ? i2.push([s2, t2 ? "1" : "0"]) : typeof t2 == "string" ? i2.push([s2, t2]) : typeof t2 == "number" ? i2.push([s2, `${t2}`]) : t2 == null ? i2.push([s2, ""]) : e$2(t2, s2, i2);
    }
    var o$1 = ((r2) => (r2.Space = " ", r2.Enter = "Enter", r2.Escape = "Escape", r2.Backspace = "Backspace", r2.Delete = "Delete", r2.ArrowLeft = "ArrowLeft", r2.ArrowUp = "ArrowUp", r2.ArrowRight = "ArrowRight", r2.ArrowDown = "ArrowDown", r2.Home = "Home", r2.End = "End", r2.PageUp = "PageUp", r2.PageDown = "PageDown", r2.Tab = "Tab", r2))(o$1 || {});
    function E(n2, e3, a2, t2) {
      let i2 = s$a(a2);
      reactExports.useEffect(() => {
        n2 = n2 != null ? n2 : window;
        function r2(o2) {
          i2.current(o2);
        }
        return n2.addEventListener(e3, r2, t2), () => n2.removeEventListener(e3, r2, t2);
      }, [n2, e3, t2]);
    }
    function f$5() {
      let e3 = reactExports.useRef(false);
      return l$6(() => (e3.current = true, () => {
        e3.current = false;
      }), []), e3;
    }
    function c$5(t2) {
      let r2 = o$6(t2), e3 = reactExports.useRef(false);
      reactExports.useEffect(() => (e3.current = false, () => {
        e3.current = true, t$8(() => {
          e3.current && r2();
        });
      }), [r2]);
    }
    var s$5 = ((r2) => (r2[r2.Forwards = 0] = "Forwards", r2[r2.Backwards = 1] = "Backwards", r2))(s$5 || {});
    function n$1() {
      let e3 = reactExports.useRef(0);
      return s$8("keydown", (o2) => {
        o2.key === "Tab" && (e3.current = o2.shiftKey ? 1 : 0);
      }, true), e3;
    }
    function P$1(t2) {
      if (!t2)
        return /* @__PURE__ */ new Set();
      if (typeof t2 == "function")
        return new Set(t2());
      let n2 = /* @__PURE__ */ new Set();
      for (let e3 of t2.current)
        e3.current instanceof HTMLElement && n2.add(e3.current);
      return n2;
    }
    let X$1 = "div";
    var _$1 = ((r2) => (r2[r2.None = 1] = "None", r2[r2.InitialFocus = 2] = "InitialFocus", r2[r2.TabLock = 4] = "TabLock", r2[r2.FocusLock = 8] = "FocusLock", r2[r2.RestoreFocus = 16] = "RestoreFocus", r2[r2.All = 30] = "All", r2))(_$1 || {});
    function z$2(t2, n2) {
      let e3 = reactExports.useRef(null), o2 = y$4(e3, n2), { initialFocus: l2, containers: c2, features: r2 = 30, ...s2 } = t2;
      l$5() || (r2 = 1);
      let i2 = n$3(e3);
      Y({ ownerDocument: i2 }, Boolean(r2 & 16));
      let u2 = Z({ ownerDocument: i2, container: e3, initialFocus: l2 }, Boolean(r2 & 2));
      $$1({ ownerDocument: i2, container: e3, containers: c2, previousActiveElement: u2 }, Boolean(r2 & 8));
      let y2 = n$1(), R2 = o$6((a2) => {
        let m2 = e3.current;
        if (!m2)
          return;
        ((B2) => B2())(() => {
          u$6(y2.current, { [s$5.Forwards]: () => {
            O$1(m2, M$2.First, { skipElements: [a2.relatedTarget] });
          }, [s$5.Backwards]: () => {
            O$1(m2, M$2.Last, { skipElements: [a2.relatedTarget] });
          } });
        });
      }), h2 = p$4(), H2 = reactExports.useRef(false), j2 = { ref: o2, onKeyDown(a2) {
        a2.key == "Tab" && (H2.current = true, h2.requestAnimationFrame(() => {
          H2.current = false;
        }));
      }, onBlur(a2) {
        let m2 = P$1(c2);
        e3.current instanceof HTMLElement && m2.add(e3.current);
        let T2 = a2.relatedTarget;
        T2 instanceof HTMLElement && T2.dataset.headlessuiFocusGuard !== "true" && (S$4(m2, T2) || (H2.current ? O$1(e3.current, u$6(y2.current, { [s$5.Forwards]: () => M$2.Next, [s$5.Backwards]: () => M$2.Previous }) | M$2.WrapAround, { relativeTo: a2.target }) : a2.target instanceof HTMLElement && y$6(a2.target)));
      } };
      return React$1.createElement(React$1.Fragment, null, Boolean(r2 & 4) && React$1.createElement(f$8, { as: "button", type: "button", "data-headlessui-focus-guard": true, onFocus: R2, features: s$7.Focusable }), C$2({ ourProps: j2, theirProps: s2, defaultTag: X$1, name: "FocusTrap" }), Boolean(r2 & 4) && React$1.createElement(f$8, { as: "button", type: "button", "data-headlessui-focus-guard": true, onFocus: R2, features: s$7.Focusable }));
    }
    let D$2 = U$3(z$2), de$2 = Object.assign(D$2, { features: _$1 });
    function Q(t2 = true) {
      let n2 = reactExports.useRef(t$3.slice());
      return m$3(([e3], [o2]) => {
        o2 === true && e3 === false && t$8(() => {
          n2.current.splice(0);
        }), o2 === false && e3 === true && (n2.current = t$3.slice());
      }, [t2, t$3, n2]), o$6(() => {
        var e3;
        return (e3 = n2.current.find((o2) => o2 != null && o2.isConnected)) != null ? e3 : null;
      });
    }
    function Y({ ownerDocument: t2 }, n2) {
      let e3 = Q(n2);
      m$3(() => {
        n2 || (t2 == null ? void 0 : t2.activeElement) === (t2 == null ? void 0 : t2.body) && y$6(e3());
      }, [n2]), c$5(() => {
        n2 && y$6(e3());
      });
    }
    function Z({ ownerDocument: t2, container: n2, initialFocus: e3 }, o2) {
      let l2 = reactExports.useRef(null), c2 = f$5();
      return m$3(() => {
        if (!o2)
          return;
        let r2 = n2.current;
        r2 && t$8(() => {
          if (!c2.current)
            return;
          let s2 = t2 == null ? void 0 : t2.activeElement;
          if (e3 != null && e3.current) {
            if ((e3 == null ? void 0 : e3.current) === s2) {
              l2.current = s2;
              return;
            }
          } else if (r2.contains(s2)) {
            l2.current = s2;
            return;
          }
          e3 != null && e3.current ? y$6(e3.current) : O$1(r2, M$2.First) === N$2.Error && console.warn("There are no focusable elements inside the <FocusTrap />"), l2.current = t2 == null ? void 0 : t2.activeElement;
        });
      }, [o2]), l2;
    }
    function $$1({ ownerDocument: t2, container: n2, containers: e3, previousActiveElement: o2 }, l2) {
      let c2 = f$5();
      E(t2 == null ? void 0 : t2.defaultView, "focus", (r2) => {
        if (!l2 || !c2.current)
          return;
        let s2 = P$1(e3);
        n2.current instanceof HTMLElement && s2.add(n2.current);
        let i2 = o2.current;
        if (!i2)
          return;
        let u2 = r2.target;
        u2 && u2 instanceof HTMLElement ? S$4(s2, u2) ? (o2.current = u2, y$6(u2)) : (r2.preventDefault(), r2.stopPropagation(), y$6(i2)) : y$6(o2.current);
      }, true);
    }
    function S$4(t2, n2) {
      for (let e3 of t2)
        if (e3.contains(n2))
          return true;
      return false;
    }
    let e$1 = reactExports.createContext(false);
    function a$7() {
      return reactExports.useContext(e$1);
    }
    function l$3(o2) {
      return React$1.createElement(e$1.Provider, { value: o2.force }, o2.children);
    }
    function F(p2) {
      let n2 = a$7(), l2 = reactExports.useContext(_), e3 = n$3(p2), [a2, o2] = reactExports.useState(() => {
        if (!n2 && l2 !== null || s$b.isServer)
          return null;
        let t2 = e3 == null ? void 0 : e3.getElementById("headlessui-portal-root");
        if (t2)
          return t2;
        if (e3 === null)
          return null;
        let r2 = e3.createElement("div");
        return r2.setAttribute("id", "headlessui-portal-root"), e3.body.appendChild(r2);
      });
      return reactExports.useEffect(() => {
        a2 !== null && (e3 != null && e3.body.contains(a2) || e3 == null || e3.body.appendChild(a2));
      }, [a2, e3]), reactExports.useEffect(() => {
        n2 || l2 !== null && o2(l2.current);
      }, [l2, o2, n2]), a2;
    }
    let U$2 = reactExports.Fragment;
    function N$1(p2, n2) {
      let l2 = p2, e3 = reactExports.useRef(null), a2 = y$4(T$1((u2) => {
        e3.current = u2;
      }), n2), o2 = n$3(e3), t2 = F(e3), [r2] = reactExports.useState(() => {
        var u2;
        return s$b.isServer ? null : (u2 = o2 == null ? void 0 : o2.createElement("div")) != null ? u2 : null;
      }), i2 = reactExports.useContext(f$4), v2 = l$5();
      return l$6(() => {
        !t2 || !r2 || t2.contains(r2) || (r2.setAttribute("data-headlessui-portal", ""), t2.appendChild(r2));
      }, [t2, r2]), l$6(() => {
        if (r2 && i2)
          return i2.register(r2);
      }, [i2, r2]), c$5(() => {
        var u2;
        !t2 || !r2 || (r2 instanceof Node && t2.contains(r2) && t2.removeChild(r2), t2.childNodes.length <= 0 && ((u2 = t2.parentElement) == null || u2.removeChild(t2)));
      }), v2 ? !t2 || !r2 ? null : reactDomExports.createPortal(C$2({ ourProps: { ref: a2 }, theirProps: l2, defaultTag: U$2, name: "Portal" }), r2) : null;
    }
    let S$3 = reactExports.Fragment, _ = reactExports.createContext(null);
    function j$1(p2, n2) {
      let { target: l2, ...e3 } = p2, o2 = { ref: y$4(n2) };
      return React$1.createElement(_.Provider, { value: l2 }, C$2({ ourProps: o2, theirProps: e3, defaultTag: S$3, name: "Popover.Group" }));
    }
    let f$4 = reactExports.createContext(null);
    function ee() {
      let p2 = reactExports.useContext(f$4), n2 = reactExports.useRef([]), l2 = o$6((o2) => (n2.current.push(o2), p2 && p2.register(o2), () => e3(o2))), e3 = o$6((o2) => {
        let t2 = n2.current.indexOf(o2);
        t2 !== -1 && n2.current.splice(t2, 1), p2 && p2.unregister(o2);
      }), a2 = reactExports.useMemo(() => ({ register: l2, unregister: e3, portals: n2 }), [l2, e3, n2]);
      return [n2, reactExports.useMemo(() => function({ children: t2 }) {
        return React$1.createElement(f$4.Provider, { value: a2 }, t2);
      }, [a2])];
    }
    let D$1 = U$3(N$1), I$3 = U$3(j$1), te = Object.assign(D$1, { Group: I$3 });
    function i(e3, t2) {
      return e3 === t2 && (e3 !== 0 || 1 / e3 === 1 / t2) || e3 !== e3 && t2 !== t2;
    }
    const d$4 = typeof Object.is == "function" ? Object.is : i, { useState: u$1, useEffect: h$3, useLayoutEffect: f$3, useDebugValue: p$2 } = e$3;
    function y$3(e3, t2, c2) {
      const a2 = t2(), [{ inst: n2 }, o2] = u$1({ inst: { value: a2, getSnapshot: t2 } });
      return f$3(() => {
        n2.value = a2, n2.getSnapshot = t2, r$3(n2) && o2({ inst: n2 });
      }, [e3, a2, t2]), h$3(() => (r$3(n2) && o2({ inst: n2 }), e3(() => {
        r$3(n2) && o2({ inst: n2 });
      })), [e3]), p$2(a2), a2;
    }
    function r$3(e3) {
      const t2 = e3.getSnapshot, c2 = e3.value;
      try {
        const a2 = t2();
        return !d$4(c2, a2);
      } catch {
        return true;
      }
    }
    function t$2(r2, e3, n2) {
      return e3();
    }
    const r$2 = typeof window != "undefined" && typeof window.document != "undefined" && typeof window.document.createElement != "undefined", s$4 = !r$2, c$4 = s$4 ? t$2 : y$3, a$6 = "useSyncExternalStore" in e$3 ? ((n2) => n2.useSyncExternalStore)(e$3) : c$4;
    function S$2(t2) {
      return a$6(t2.subscribe, t2.getSnapshot, t2.getSnapshot);
    }
    function a$5(o2, r2) {
      let t2 = o2(), n2 = /* @__PURE__ */ new Set();
      return { getSnapshot() {
        return t2;
      }, subscribe(e3) {
        return n2.add(e3), () => n2.delete(e3);
      }, dispatch(e3, ...s2) {
        let i2 = r2[e3].call(t2, ...s2);
        i2 && (t2 = i2, n2.forEach((c2) => c2()));
      } };
    }
    function c$3() {
      let o2;
      return { before({ doc: e3 }) {
        var l2;
        let n2 = e3.documentElement;
        o2 = ((l2 = e3.defaultView) != null ? l2 : window).innerWidth - n2.clientWidth;
      }, after({ doc: e3, d: n2 }) {
        let t2 = e3.documentElement, l2 = t2.clientWidth - t2.offsetWidth, r2 = o2 - l2;
        n2.style(t2, "paddingRight", `${r2}px`);
      } };
    }
    function d$3() {
      return t$7() ? { before({ doc: r2, d: l2, meta: c2 }) {
        function o2(a2) {
          return c2.containers.flatMap((n2) => n2()).some((n2) => n2.contains(a2));
        }
        l2.microTask(() => {
          var s2;
          if (window.getComputedStyle(r2.documentElement).scrollBehavior !== "auto") {
            let t2 = o$5();
            t2.style(r2.documentElement, "scrollBehavior", "auto"), l2.add(() => l2.microTask(() => t2.dispose()));
          }
          let a2 = (s2 = window.scrollY) != null ? s2 : window.pageYOffset, n2 = null;
          l2.addEventListener(r2, "click", (t2) => {
            if (t2.target instanceof HTMLElement)
              try {
                let e3 = t2.target.closest("a");
                if (!e3)
                  return;
                let { hash: f2 } = new URL(e3.href), i2 = r2.querySelector(f2);
                i2 && !o2(i2) && (n2 = i2);
              } catch {
              }
          }, true), l2.addEventListener(r2, "touchstart", (t2) => {
            if (t2.target instanceof HTMLElement)
              if (o2(t2.target)) {
                let e3 = t2.target;
                for (; e3.parentElement && o2(e3.parentElement); )
                  e3 = e3.parentElement;
                l2.style(e3, "overscrollBehavior", "contain");
              } else
                l2.style(t2.target, "touchAction", "none");
          }), l2.addEventListener(r2, "touchmove", (t2) => {
            if (t2.target instanceof HTMLElement)
              if (o2(t2.target)) {
                let e3 = t2.target;
                for (; e3.parentElement && e3.dataset.headlessuiPortal !== "" && !(e3.scrollHeight > e3.clientHeight || e3.scrollWidth > e3.clientWidth); )
                  e3 = e3.parentElement;
                e3.dataset.headlessuiPortal === "" && t2.preventDefault();
              } else
                t2.preventDefault();
          }, { passive: false }), l2.add(() => {
            var e3;
            let t2 = (e3 = window.scrollY) != null ? e3 : window.pageYOffset;
            a2 !== t2 && window.scrollTo(0, a2), n2 && n2.isConnected && (n2.scrollIntoView({ block: "nearest" }), n2 = null);
          });
        });
      } } : {};
    }
    function l$2() {
      return { before({ doc: e3, d: o2 }) {
        o2.style(e3.documentElement, "overflow", "hidden");
      } };
    }
    function m$1(e3) {
      let n2 = {};
      for (let t2 of e3)
        Object.assign(n2, t2(n2));
      return n2;
    }
    let a$4 = a$5(() => /* @__PURE__ */ new Map(), { PUSH(e3, n2) {
      var o2;
      let t2 = (o2 = this.get(e3)) != null ? o2 : { doc: e3, count: 0, d: o$5(), meta: /* @__PURE__ */ new Set() };
      return t2.count++, t2.meta.add(n2), this.set(e3, t2), this;
    }, POP(e3, n2) {
      let t2 = this.get(e3);
      return t2 && (t2.count--, t2.meta.delete(n2)), this;
    }, SCROLL_PREVENT({ doc: e3, d: n2, meta: t2 }) {
      let o2 = { doc: e3, d: n2, meta: m$1(t2) }, c2 = [d$3(), c$3(), l$2()];
      c2.forEach(({ before: r2 }) => r2 == null ? void 0 : r2(o2)), c2.forEach(({ after: r2 }) => r2 == null ? void 0 : r2(o2));
    }, SCROLL_ALLOW({ d: e3 }) {
      e3.dispose();
    }, TEARDOWN({ doc: e3 }) {
      this.delete(e3);
    } });
    a$4.subscribe(() => {
      let e3 = a$4.getSnapshot(), n2 = /* @__PURE__ */ new Map();
      for (let [t2] of e3)
        n2.set(t2, t2.documentElement.style.overflow);
      for (let t2 of e3.values()) {
        let o2 = n2.get(t2.doc) === "hidden", c2 = t2.count !== 0;
        (c2 && !o2 || !c2 && o2) && a$4.dispatch(t2.count > 0 ? "SCROLL_PREVENT" : "SCROLL_ALLOW", t2), t2.count === 0 && a$4.dispatch("TEARDOWN", t2);
      }
    });
    function p$1(e3, r2, n2) {
      let f2 = S$2(a$4), o2 = e3 ? f2.get(e3) : void 0, i2 = o2 ? o2.count > 0 : false;
      return l$6(() => {
        if (!(!e3 || !r2))
          return a$4.dispatch("PUSH", e3, n2), () => a$4.dispatch("POP", e3, n2);
      }, [r2, e3]), i2;
    }
    let u = /* @__PURE__ */ new Map(), t$1 = /* @__PURE__ */ new Map();
    function b$5(r2, l2 = true) {
      l$6(() => {
        var o2;
        if (!l2)
          return;
        let e3 = typeof r2 == "function" ? r2() : r2.current;
        if (!e3)
          return;
        function a2() {
          var d2;
          if (!e3)
            return;
          let i2 = (d2 = t$1.get(e3)) != null ? d2 : 1;
          if (i2 === 1 ? t$1.delete(e3) : t$1.set(e3, i2 - 1), i2 !== 1)
            return;
          let n2 = u.get(e3);
          n2 && (n2["aria-hidden"] === null ? e3.removeAttribute("aria-hidden") : e3.setAttribute("aria-hidden", n2["aria-hidden"]), e3.inert = n2.inert, u.delete(e3));
        }
        let f2 = (o2 = t$1.get(e3)) != null ? o2 : 0;
        return t$1.set(e3, f2 + 1), f2 !== 0 || (u.set(e3, { "aria-hidden": e3.getAttribute("aria-hidden"), inert: e3.inert }), e3.setAttribute("aria-hidden", "true"), e3.inert = true), a2;
      }, [r2, l2]);
    }
    function N({ defaultContainers: o2 = [], portals: r2, mainTreeNodeRef: u2 } = {}) {
      var f2;
      let t2 = reactExports.useRef((f2 = u2 == null ? void 0 : u2.current) != null ? f2 : null), l2 = n$3(t2), c2 = o$6(() => {
        var i2, s2, a2;
        let n2 = [];
        for (let e3 of o2)
          e3 !== null && (e3 instanceof HTMLElement ? n2.push(e3) : "current" in e3 && e3.current instanceof HTMLElement && n2.push(e3.current));
        if (r2 != null && r2.current)
          for (let e3 of r2.current)
            n2.push(e3);
        for (let e3 of (i2 = l2 == null ? void 0 : l2.querySelectorAll("html > *, body > *")) != null ? i2 : [])
          e3 !== document.body && e3 !== document.head && e3 instanceof HTMLElement && e3.id !== "headlessui-portal-root" && (e3.contains(t2.current) || e3.contains((a2 = (s2 = t2.current) == null ? void 0 : s2.getRootNode()) == null ? void 0 : a2.host) || n2.some((L2) => e3.contains(L2)) || n2.push(e3));
        return n2;
      });
      return { resolveContainers: c2, contains: o$6((n2) => c2().some((i2) => i2.contains(n2))), mainTreeNodeRef: t2, MainTreeNode: reactExports.useMemo(() => function() {
        return u2 != null ? null : React$1.createElement(f$8, { features: s$7.Hidden, ref: t2 });
      }, [t2, u2]) };
    }
    function y$2() {
      let o2 = reactExports.useRef(null);
      return { mainTreeNodeRef: o2, MainTreeNode: reactExports.useMemo(() => function() {
        return React$1.createElement(f$8, { features: s$7.Hidden, ref: o2 });
      }, [o2]) };
    }
    let a$3 = reactExports.createContext(() => {
    });
    a$3.displayName = "StackContext";
    var s$3 = ((e3) => (e3[e3.Add = 0] = "Add", e3[e3.Remove = 1] = "Remove", e3))(s$3 || {});
    function x$2() {
      return reactExports.useContext(a$3);
    }
    function b$4({ children: i2, onUpdate: r2, type: e3, element: n2, enabled: u2 }) {
      let l2 = x$2(), o2 = o$6((...t2) => {
        r2 == null || r2(...t2), l2(...t2);
      });
      return l$6(() => {
        let t2 = u2 === void 0 || u2 === true;
        return t2 && o2(0, e3, n2), () => {
          t2 && o2(1, e3, n2);
        };
      }, [o2, e3, n2, u2]), React$1.createElement(a$3.Provider, { value: o2 }, i2);
    }
    let d$2 = reactExports.createContext(null);
    function f$2() {
      let r2 = reactExports.useContext(d$2);
      if (r2 === null) {
        let t2 = new Error("You used a <Description /> component, but it is not inside a relevant parent.");
        throw Error.captureStackTrace && Error.captureStackTrace(t2, f$2), t2;
      }
      return r2;
    }
    function w$3() {
      let [r2, t2] = reactExports.useState([]);
      return [r2.length > 0 ? r2.join(" ") : void 0, reactExports.useMemo(() => function(e3) {
        let i2 = o$6((s2) => (t2((o2) => [...o2, s2]), () => t2((o2) => {
          let p2 = o2.slice(), c2 = p2.indexOf(s2);
          return c2 !== -1 && p2.splice(c2, 1), p2;
        }))), n2 = reactExports.useMemo(() => ({ register: i2, slot: e3.slot, name: e3.name, props: e3.props }), [i2, e3.slot, e3.name, e3.props]);
        return React$1.createElement(d$2.Provider, { value: n2 }, e3.children);
      }, [t2])];
    }
    let I$2 = "p";
    function S$1(r2, t2) {
      let a2 = I$6(), { id: e3 = `headlessui-description-${a2}`, ...i2 } = r2, n2 = f$2(), s2 = y$4(t2);
      l$6(() => n2.register(e3), [e3, n2.register]);
      let o2 = { ref: s2, ...n2.props, id: e3 };
      return C$2({ ourProps: o2, theirProps: i2, slot: n2.slot || {}, defaultTag: I$2, name: n2.name || "Description" });
    }
    let h$2 = U$3(S$1), G = Object.assign(h$2, {});
    var Me$1 = ((r2) => (r2[r2.Open = 0] = "Open", r2[r2.Closed = 1] = "Closed", r2))(Me$1 || {}), we$1 = ((e3) => (e3[e3.SetTitleId = 0] = "SetTitleId", e3))(we$1 || {});
    let He$3 = { [0](t2, e3) {
      return t2.titleId === e3.id ? t2 : { ...t2, titleId: e3.id };
    } }, I$1 = reactExports.createContext(null);
    I$1.displayName = "DialogContext";
    function b$3(t2) {
      let e3 = reactExports.useContext(I$1);
      if (e3 === null) {
        let r2 = new Error(`<${t2} /> is missing a parent <Dialog /> component.`);
        throw Error.captureStackTrace && Error.captureStackTrace(r2, b$3), r2;
      }
      return e3;
    }
    function Be$1(t2, e3, r2 = () => [document.body]) {
      p$1(t2, e3, (i2) => {
        var n2;
        return { containers: [...(n2 = i2.containers) != null ? n2 : [], r2] };
      });
    }
    function Ge$2(t2, e3) {
      return u$6(e3.type, He$3, t2, e3);
    }
    let Ne$3 = "div", Ue$1 = O.RenderStrategy | O.Static;
    function We$2(t2, e3) {
      let r2 = I$6(), { id: i2 = `headlessui-dialog-${r2}`, open: n2, onClose: l2, initialFocus: s2, role: a2 = "dialog", __demoMode: T2 = false, ...m2 } = t2, [M2, f2] = reactExports.useState(0), U2 = reactExports.useRef(false);
      a2 = function() {
        return a2 === "dialog" || a2 === "alertdialog" ? a2 : (U2.current || (U2.current = true, console.warn(`Invalid role [${a2}] passed to <Dialog />. Only \`dialog\` and and \`alertdialog\` are supported. Using \`dialog\` instead.`)), "dialog");
      }();
      let E$12 = u$3();
      n2 === void 0 && E$12 !== null && (n2 = (E$12 & d$5.Open) === d$5.Open);
      let D2 = reactExports.useRef(null), ee$12 = y$4(D2, e3), g2 = n$3(D2), W2 = t2.hasOwnProperty("open") || E$12 !== null, $2 = t2.hasOwnProperty("onClose");
      if (!W2 && !$2)
        throw new Error("You have to provide an `open` and an `onClose` prop to the `Dialog` component.");
      if (!W2)
        throw new Error("You provided an `onClose` prop to the `Dialog`, but forgot an `open` prop.");
      if (!$2)
        throw new Error("You provided an `open` prop to the `Dialog`, but forgot an `onClose` prop.");
      if (typeof n2 != "boolean")
        throw new Error(`You provided an \`open\` prop to the \`Dialog\`, but the value is not a boolean. Received: ${n2}`);
      if (typeof l2 != "function")
        throw new Error(`You provided an \`onClose\` prop to the \`Dialog\`, but the value is not a function. Received: ${l2}`);
      let p2 = n2 ? 0 : 1, [h2, te$12] = reactExports.useReducer(Ge$2, { titleId: null, descriptionId: null, panelRef: reactExports.createRef() }), P2 = o$6(() => l2(false)), Y2 = o$6((o2) => te$12({ type: 0, id: o2 })), S2 = l$5() ? T2 ? false : p2 === 0 : false, x2 = M2 > 1, j2 = reactExports.useContext(I$1) !== null, [oe2, re2] = ee(), ne2 = { get current() {
        var o2;
        return (o2 = h2.panelRef.current) != null ? o2 : D2.current;
      } }, { resolveContainers: w2, mainTreeNodeRef: L2, MainTreeNode: le2 } = N({ portals: oe2, defaultContainers: [ne2] }), ae2 = x2 ? "parent" : "leaf", J2 = E$12 !== null ? (E$12 & d$5.Closing) === d$5.Closing : false, ie2 = /* @__PURE__ */ (() => j2 || J2 ? false : S2)(), se2 = reactExports.useCallback(() => {
        var o2, c2;
        return (c2 = Array.from((o2 = g2 == null ? void 0 : g2.querySelectorAll("body > *")) != null ? o2 : []).find((d2) => d2.id === "headlessui-portal-root" ? false : d2.contains(L2.current) && d2 instanceof HTMLElement)) != null ? c2 : null;
      }, [L2]);
      b$5(se2, ie2);
      let pe2 = /* @__PURE__ */ (() => x2 ? true : S2)(), de2 = reactExports.useCallback(() => {
        var o2, c2;
        return (c2 = Array.from((o2 = g2 == null ? void 0 : g2.querySelectorAll("[data-headlessui-portal]")) != null ? o2 : []).find((d2) => d2.contains(L2.current) && d2 instanceof HTMLElement)) != null ? c2 : null;
      }, [L2]);
      b$5(de2, pe2);
      let ue2 = /* @__PURE__ */ (() => !(!S2 || x2))();
      y$5(w2, P2, ue2);
      let fe2 = /* @__PURE__ */ (() => !(x2 || p2 !== 0))();
      E(g2 == null ? void 0 : g2.defaultView, "keydown", (o2) => {
        fe2 && (o2.defaultPrevented || o2.key === o$1.Escape && (o2.preventDefault(), o2.stopPropagation(), P2()));
      });
      let ge2 = /* @__PURE__ */ (() => !(J2 || p2 !== 0 || j2))();
      Be$1(g2, ge2, w2), reactExports.useEffect(() => {
        if (p2 !== 0 || !D2.current)
          return;
        let o2 = new ResizeObserver((c2) => {
          for (let d2 of c2) {
            let F2 = d2.target.getBoundingClientRect();
            F2.x === 0 && F2.y === 0 && F2.width === 0 && F2.height === 0 && P2();
          }
        });
        return o2.observe(D2.current), () => o2.disconnect();
      }, [p2, D2, P2]);
      let [Te2, ce2] = w$3(), De2 = reactExports.useMemo(() => [{ dialogState: p2, close: P2, setTitleId: Y2 }, h2], [p2, h2, P2, Y2]), X2 = reactExports.useMemo(() => ({ open: p2 === 0 }), [p2]), me2 = { ref: ee$12, id: i2, role: a2, "aria-modal": p2 === 0 ? true : void 0, "aria-labelledby": h2.titleId, "aria-describedby": Te2 };
      return React$1.createElement(b$4, { type: "Dialog", enabled: p2 === 0, element: D2, onUpdate: o$6((o2, c2) => {
        c2 === "Dialog" && u$6(o2, { [s$3.Add]: () => f2((d2) => d2 + 1), [s$3.Remove]: () => f2((d2) => d2 - 1) });
      }) }, React$1.createElement(l$3, { force: true }, React$1.createElement(te, null, React$1.createElement(I$1.Provider, { value: De2 }, React$1.createElement(te.Group, { target: D2 }, React$1.createElement(l$3, { force: false }, React$1.createElement(ce2, { slot: X2, name: "Dialog.Description" }, React$1.createElement(de$2, { initialFocus: s2, containers: w2, features: S2 ? u$6(ae2, { parent: de$2.features.RestoreFocus, leaf: de$2.features.All & ~de$2.features.FocusLock }) : de$2.features.None }, React$1.createElement(re2, null, C$2({ ourProps: me2, theirProps: m2, slot: X2, defaultTag: Ne$3, features: Ue$1, visible: p2 === 0, name: "Dialog" }))))))))), React$1.createElement(le2, null));
    }
    let $e$3 = "div";
    function Ye$2(t2, e3) {
      let r2 = I$6(), { id: i2 = `headlessui-dialog-overlay-${r2}`, ...n2 } = t2, [{ dialogState: l2, close: s2 }] = b$3("Dialog.Overlay"), a2 = y$4(e3), T2 = o$6((f2) => {
        if (f2.target === f2.currentTarget) {
          if (r$4(f2.currentTarget))
            return f2.preventDefault();
          f2.preventDefault(), f2.stopPropagation(), s2();
        }
      }), m2 = reactExports.useMemo(() => ({ open: l2 === 0 }), [l2]);
      return C$2({ ourProps: { ref: a2, id: i2, "aria-hidden": true, onClick: T2 }, theirProps: n2, slot: m2, defaultTag: $e$3, name: "Dialog.Overlay" });
    }
    let je$2 = "div";
    function Je$2(t2, e3) {
      let r2 = I$6(), { id: i2 = `headlessui-dialog-backdrop-${r2}`, ...n2 } = t2, [{ dialogState: l2 }, s2] = b$3("Dialog.Backdrop"), a2 = y$4(e3);
      reactExports.useEffect(() => {
        if (s2.panelRef.current === null)
          throw new Error("A <Dialog.Backdrop /> component is being used, but a <Dialog.Panel /> component is missing.");
      }, [s2.panelRef]);
      let T2 = reactExports.useMemo(() => ({ open: l2 === 0 }), [l2]);
      return React$1.createElement(l$3, { force: true }, React$1.createElement(te, null, C$2({ ourProps: { ref: a2, id: i2, "aria-hidden": true }, theirProps: n2, slot: T2, defaultTag: je$2, name: "Dialog.Backdrop" })));
    }
    let Xe$2 = "div";
    function Ke$2(t2, e3) {
      let r2 = I$6(), { id: i2 = `headlessui-dialog-panel-${r2}`, ...n2 } = t2, [{ dialogState: l2 }, s2] = b$3("Dialog.Panel"), a2 = y$4(e3, s2.panelRef), T2 = reactExports.useMemo(() => ({ open: l2 === 0 }), [l2]), m2 = o$6((f2) => {
        f2.stopPropagation();
      });
      return C$2({ ourProps: { ref: a2, id: i2, onClick: m2 }, theirProps: n2, slot: T2, defaultTag: Xe$2, name: "Dialog.Panel" });
    }
    let Ve$2 = "h2";
    function qe$4(t2, e3) {
      let r2 = I$6(), { id: i2 = `headlessui-dialog-title-${r2}`, ...n2 } = t2, [{ dialogState: l2, setTitleId: s2 }] = b$3("Dialog.Title"), a2 = y$4(e3);
      reactExports.useEffect(() => (s2(i2), () => s2(null)), [i2, s2]);
      let T2 = reactExports.useMemo(() => ({ open: l2 === 0 }), [l2]);
      return C$2({ ourProps: { ref: a2, id: i2 }, theirProps: n2, slot: T2, defaultTag: Ve$2, name: "Dialog.Title" });
    }
    let ze$2 = U$3(We$2), Qe$2 = U$3(Je$2), Ze$2 = U$3(Ke$2), et$2 = U$3(Ye$2), tt$2 = U$3(qe$4), _t$1 = Object.assign(ze$2, { Backdrop: Qe$2, Panel: Ze$2, Overlay: et$2, Title: tt$2, Description: G });
    let a$2 = /([\u2700-\u27BF]|[\uE000-\uF8FF]|\uD83C[\uDC00-\uDFFF]|\uD83D[\uDC00-\uDFFF]|[\u2011-\u26FF]|\uD83E[\uDD10-\uDDFF])/g;
    function o(e3) {
      var r2, i2;
      let n2 = (r2 = e3.innerText) != null ? r2 : "", t2 = e3.cloneNode(true);
      if (!(t2 instanceof HTMLElement))
        return n2;
      let u2 = false;
      for (let f2 of t2.querySelectorAll('[hidden],[aria-hidden],[role="img"]'))
        f2.remove(), u2 = true;
      let l2 = u2 ? (i2 = t2.innerText) != null ? i2 : "" : n2;
      return a$2.test(l2) && (l2 = l2.replace(a$2, "")), l2;
    }
    function g$2(e3) {
      let n2 = e3.getAttribute("aria-label");
      if (typeof n2 == "string")
        return n2.trim();
      let t2 = e3.getAttribute("aria-labelledby");
      if (t2) {
        let u2 = t2.split(" ").map((l2) => {
          let r2 = document.getElementById(l2);
          if (r2) {
            let i2 = r2.getAttribute("aria-label");
            return typeof i2 == "string" ? i2.trim() : o(r2).trim();
          }
          return null;
        }).filter(Boolean);
        if (u2.length > 0)
          return u2.join(", ");
      }
      return o(e3).trim();
    }
    function s$2(c2) {
      let t2 = reactExports.useRef(""), r2 = reactExports.useRef("");
      return o$6(() => {
        let e3 = c2.current;
        if (!e3)
          return "";
        let u2 = e3.innerText;
        if (t2.current === u2)
          return r2.current;
        let n2 = g$2(e3).trim().toLowerCase();
        return t2.current = u2, r2.current = n2, n2;
      });
    }
    var Be = ((n2) => (n2[n2.Open = 0] = "Open", n2[n2.Closed = 1] = "Closed", n2))(Be || {}), He$2 = ((n2) => (n2[n2.Single = 0] = "Single", n2[n2.Multi = 1] = "Multi", n2))(He$2 || {}), Ge$1 = ((n2) => (n2[n2.Pointer = 0] = "Pointer", n2[n2.Other = 1] = "Other", n2))(Ge$1 || {}), Ne$2 = ((i2) => (i2[i2.OpenListbox = 0] = "OpenListbox", i2[i2.CloseListbox = 1] = "CloseListbox", i2[i2.GoToOption = 2] = "GoToOption", i2[i2.Search = 3] = "Search", i2[i2.ClearSearch = 4] = "ClearSearch", i2[i2.RegisterOption = 5] = "RegisterOption", i2[i2.UnregisterOption = 6] = "UnregisterOption", i2[i2.RegisterLabel = 7] = "RegisterLabel", i2))(Ne$2 || {});
    function z$1(e3, a2 = (n2) => n2) {
      let n2 = e3.activeOptionIndex !== null ? e3.options[e3.activeOptionIndex] : null, r2 = I$5(a2(e3.options.slice()), (t2) => t2.dataRef.current.domRef.current), l2 = n2 ? r2.indexOf(n2) : null;
      return l2 === -1 && (l2 = null), { options: r2, activeOptionIndex: l2 };
    }
    let je$1 = { [1](e3) {
      return e3.dataRef.current.disabled || e3.listboxState === 1 ? e3 : { ...e3, activeOptionIndex: null, listboxState: 1 };
    }, [0](e3) {
      if (e3.dataRef.current.disabled || e3.listboxState === 0)
        return e3;
      let a2 = e3.activeOptionIndex, { isSelected: n2 } = e3.dataRef.current, r2 = e3.options.findIndex((l2) => n2(l2.dataRef.current.value));
      return r2 !== -1 && (a2 = r2), { ...e3, listboxState: 0, activeOptionIndex: a2 };
    }, [2](e3, a2) {
      var l2;
      if (e3.dataRef.current.disabled || e3.listboxState === 1)
        return e3;
      let n2 = z$1(e3), r2 = f$7(a2, { resolveItems: () => n2.options, resolveActiveIndex: () => n2.activeOptionIndex, resolveId: (t2) => t2.id, resolveDisabled: (t2) => t2.dataRef.current.disabled });
      return { ...e3, ...n2, searchQuery: "", activeOptionIndex: r2, activationTrigger: (l2 = a2.trigger) != null ? l2 : 1 };
    }, [3]: (e3, a2) => {
      if (e3.dataRef.current.disabled || e3.listboxState === 1)
        return e3;
      let r2 = e3.searchQuery !== "" ? 0 : 1, l2 = e3.searchQuery + a2.value.toLowerCase(), p2 = (e3.activeOptionIndex !== null ? e3.options.slice(e3.activeOptionIndex + r2).concat(e3.options.slice(0, e3.activeOptionIndex + r2)) : e3.options).find((i2) => {
        var b2;
        return !i2.dataRef.current.disabled && ((b2 = i2.dataRef.current.textValue) == null ? void 0 : b2.startsWith(l2));
      }), u2 = p2 ? e3.options.indexOf(p2) : -1;
      return u2 === -1 || u2 === e3.activeOptionIndex ? { ...e3, searchQuery: l2 } : { ...e3, searchQuery: l2, activeOptionIndex: u2, activationTrigger: 1 };
    }, [4](e3) {
      return e3.dataRef.current.disabled || e3.listboxState === 1 || e3.searchQuery === "" ? e3 : { ...e3, searchQuery: "" };
    }, [5]: (e3, a2) => {
      let n2 = { id: a2.id, dataRef: a2.dataRef }, r2 = z$1(e3, (l2) => [...l2, n2]);
      return e3.activeOptionIndex === null && e3.dataRef.current.isSelected(a2.dataRef.current.value) && (r2.activeOptionIndex = r2.options.indexOf(n2)), { ...e3, ...r2 };
    }, [6]: (e3, a2) => {
      let n2 = z$1(e3, (r2) => {
        let l2 = r2.findIndex((t2) => t2.id === a2.id);
        return l2 !== -1 && r2.splice(l2, 1), r2;
      });
      return { ...e3, ...n2, activationTrigger: 1 };
    }, [7]: (e3, a2) => ({ ...e3, labelId: a2.id }) }, J = reactExports.createContext(null);
    J.displayName = "ListboxActionsContext";
    function k$2(e3) {
      let a2 = reactExports.useContext(J);
      if (a2 === null) {
        let n2 = new Error(`<${e3} /> is missing a parent <Listbox /> component.`);
        throw Error.captureStackTrace && Error.captureStackTrace(n2, k$2), n2;
      }
      return a2;
    }
    let q$3 = reactExports.createContext(null);
    q$3.displayName = "ListboxDataContext";
    function w$2(e3) {
      let a2 = reactExports.useContext(q$3);
      if (a2 === null) {
        let n2 = new Error(`<${e3} /> is missing a parent <Listbox /> component.`);
        throw Error.captureStackTrace && Error.captureStackTrace(n2, w$2), n2;
      }
      return a2;
    }
    function Ve$1(e3, a2) {
      return u$6(a2.type, je$1, e3, a2);
    }
    let Ke$1 = reactExports.Fragment;
    function Qe$1(e3, a2) {
      let { value: n2, defaultValue: r2, form: l2, name: t2, onChange: p2, by: u2 = (s2, c2) => s2 === c2, disabled: i2 = false, horizontal: b2 = false, multiple: R2 = false, ...m2 } = e3;
      const P2 = b2 ? "horizontal" : "vertical";
      let S2 = y$4(a2), [g2 = R2 ? [] : void 0, x2] = T$4(n2, p2, r2), [T2, o2] = reactExports.useReducer(Ve$1, { dataRef: reactExports.createRef(), listboxState: 1, options: [], searchQuery: "", labelId: null, activeOptionIndex: null, activationTrigger: 1 }), L2 = reactExports.useRef({ static: false, hold: false }), U2 = reactExports.useRef(null), B2 = reactExports.useRef(null), W2 = reactExports.useRef(null), I2 = o$6(typeof u2 == "string" ? (s2, c2) => {
        let O2 = u2;
        return (s2 == null ? void 0 : s2[O2]) === (c2 == null ? void 0 : c2[O2]);
      } : u2), A2 = reactExports.useCallback((s2) => u$6(d2.mode, { [1]: () => g2.some((c2) => I2(c2, s2)), [0]: () => I2(g2, s2) }), [g2]), d2 = reactExports.useMemo(() => ({ ...T2, value: g2, disabled: i2, mode: R2 ? 1 : 0, orientation: P2, compare: I2, isSelected: A2, optionsPropsRef: L2, labelRef: U2, buttonRef: B2, optionsRef: W2 }), [g2, i2, R2, T2]);
      l$6(() => {
        T2.dataRef.current = d2;
      }, [d2]), y$5([d2.buttonRef, d2.optionsRef], (s2, c2) => {
        var O2;
        o2({ type: 1 }), h$4(c2, T$3.Loose) || (s2.preventDefault(), (O2 = d2.buttonRef.current) == null || O2.focus());
      }, d2.listboxState === 0);
      let H2 = reactExports.useMemo(() => ({ open: d2.listboxState === 0, disabled: i2, value: g2 }), [d2, i2, g2]), ie2 = o$6((s2) => {
        let c2 = d2.options.find((O2) => O2.id === s2);
        c2 && X2(c2.dataRef.current.value);
      }), re2 = o$6(() => {
        if (d2.activeOptionIndex !== null) {
          let { dataRef: s2, id: c2 } = d2.options[d2.activeOptionIndex];
          X2(s2.current.value), o2({ type: 2, focus: c$6.Specific, id: c2 });
        }
      }), ae2 = o$6(() => o2({ type: 0 })), le2 = o$6(() => o2({ type: 1 })), se2 = o$6((s2, c2, O2) => s2 === c$6.Specific ? o2({ type: 2, focus: c$6.Specific, id: c2, trigger: O2 }) : o2({ type: 2, focus: s2, trigger: O2 })), pe2 = o$6((s2, c2) => (o2({ type: 5, id: s2, dataRef: c2 }), () => o2({ type: 6, id: s2 }))), ue2 = o$6((s2) => (o2({ type: 7, id: s2 }), () => o2({ type: 7, id: null }))), X2 = o$6((s2) => u$6(d2.mode, { [0]() {
        return x2 == null ? void 0 : x2(s2);
      }, [1]() {
        let c2 = d2.value.slice(), O2 = c2.findIndex((C2) => I2(C2, s2));
        return O2 === -1 ? c2.push(s2) : c2.splice(O2, 1), x2 == null ? void 0 : x2(c2);
      } })), de2 = o$6((s2) => o2({ type: 3, value: s2 })), ce2 = o$6(() => o2({ type: 4 })), fe2 = reactExports.useMemo(() => ({ onChange: X2, registerOption: pe2, registerLabel: ue2, goToOption: se2, closeListbox: le2, openListbox: ae2, selectActiveOption: re2, selectOption: ie2, search: de2, clearSearch: ce2 }), []), Te2 = { ref: S2 }, G2 = reactExports.useRef(null), be2 = p$4();
      return reactExports.useEffect(() => {
        G2.current && r2 !== void 0 && be2.addEventListener(G2.current, "reset", () => {
          x2 == null || x2(r2);
        });
      }, [G2, x2]), React$1.createElement(J.Provider, { value: fe2 }, React$1.createElement(q$3.Provider, { value: d2 }, React$1.createElement(s$6, { value: u$6(d2.listboxState, { [0]: d$5.Open, [1]: d$5.Closed }) }, t2 != null && g2 != null && e$2({ [t2]: g2 }).map(([s2, c2], O2) => React$1.createElement(f$8, { features: s$7.Hidden, ref: O2 === 0 ? (C2) => {
        var Y2;
        G2.current = (Y2 = C2 == null ? void 0 : C2.closest("form")) != null ? Y2 : null;
      } : void 0, ...x$3({ key: s2, as: "input", type: "hidden", hidden: true, readOnly: true, form: l2, name: s2, value: c2 }) })), C$2({ ourProps: Te2, theirProps: m2, slot: H2, defaultTag: Ke$1, name: "Listbox" }))));
    }
    let We$1 = "button";
    function Xe$1(e3, a2) {
      var x2;
      let n2 = I$6(), { id: r2 = `headlessui-listbox-button-${n2}`, ...l2 } = e3, t2 = w$2("Listbox.Button"), p2 = k$2("Listbox.Button"), u2 = y$4(t2.buttonRef, a2), i2 = p$4(), b2 = o$6((T2) => {
        switch (T2.key) {
          case o$1.Space:
          case o$1.Enter:
          case o$1.ArrowDown:
            T2.preventDefault(), p2.openListbox(), i2.nextFrame(() => {
              t2.value || p2.goToOption(c$6.First);
            });
            break;
          case o$1.ArrowUp:
            T2.preventDefault(), p2.openListbox(), i2.nextFrame(() => {
              t2.value || p2.goToOption(c$6.Last);
            });
            break;
        }
      }), R2 = o$6((T2) => {
        switch (T2.key) {
          case o$1.Space:
            T2.preventDefault();
            break;
        }
      }), m2 = o$6((T2) => {
        if (r$4(T2.currentTarget))
          return T2.preventDefault();
        t2.listboxState === 0 ? (p2.closeListbox(), i2.nextFrame(() => {
          var o2;
          return (o2 = t2.buttonRef.current) == null ? void 0 : o2.focus({ preventScroll: true });
        })) : (T2.preventDefault(), p2.openListbox());
      }), P2 = i$4(() => {
        if (t2.labelId)
          return [t2.labelId, r2].join(" ");
      }, [t2.labelId, r2]), S2 = reactExports.useMemo(() => ({ open: t2.listboxState === 0, disabled: t2.disabled, value: t2.value }), [t2]), g2 = { ref: u2, id: r2, type: T$2(e3, t2.buttonRef), "aria-haspopup": "listbox", "aria-controls": (x2 = t2.optionsRef.current) == null ? void 0 : x2.id, "aria-expanded": t2.listboxState === 0, "aria-labelledby": P2, disabled: t2.disabled, onKeyDown: b2, onKeyUp: R2, onClick: m2 };
      return C$2({ ourProps: g2, theirProps: l2, slot: S2, defaultTag: We$1, name: "Listbox.Button" });
    }
    let $e$2 = "label";
    function ze$1(e3, a2) {
      let n2 = I$6(), { id: r2 = `headlessui-listbox-label-${n2}`, ...l2 } = e3, t2 = w$2("Listbox.Label"), p2 = k$2("Listbox.Label"), u2 = y$4(t2.labelRef, a2);
      l$6(() => p2.registerLabel(r2), [r2]);
      let i2 = o$6(() => {
        var m2;
        return (m2 = t2.buttonRef.current) == null ? void 0 : m2.focus({ preventScroll: true });
      }), b2 = reactExports.useMemo(() => ({ open: t2.listboxState === 0, disabled: t2.disabled }), [t2]);
      return C$2({ ourProps: { ref: u2, id: r2, onClick: i2 }, theirProps: l2, slot: b2, defaultTag: $e$2, name: "Listbox.Label" });
    }
    let Je$1 = "ul", qe$3 = O.RenderStrategy | O.Static;
    function Ye$1(e3, a2) {
      var T2;
      let n2 = I$6(), { id: r2 = `headlessui-listbox-options-${n2}`, ...l2 } = e3, t2 = w$2("Listbox.Options"), p2 = k$2("Listbox.Options"), u2 = y$4(t2.optionsRef, a2), i2 = p$4(), b2 = p$4(), R2 = u$3(), m2 = (() => R2 !== null ? (R2 & d$5.Open) === d$5.Open : t2.listboxState === 0)();
      reactExports.useEffect(() => {
        var L2;
        let o2 = t2.optionsRef.current;
        o2 && t2.listboxState === 0 && o2 !== ((L2 = o$3(o2)) == null ? void 0 : L2.activeElement) && o2.focus({ preventScroll: true });
      }, [t2.listboxState, t2.optionsRef]);
      let P2 = o$6((o2) => {
        switch (b2.dispose(), o2.key) {
          case o$1.Space:
            if (t2.searchQuery !== "")
              return o2.preventDefault(), o2.stopPropagation(), p2.search(o2.key);
          case o$1.Enter:
            if (o2.preventDefault(), o2.stopPropagation(), t2.activeOptionIndex !== null) {
              let { dataRef: L2 } = t2.options[t2.activeOptionIndex];
              p2.onChange(L2.current.value);
            }
            t2.mode === 0 && (p2.closeListbox(), o$5().nextFrame(() => {
              var L2;
              return (L2 = t2.buttonRef.current) == null ? void 0 : L2.focus({ preventScroll: true });
            }));
            break;
          case u$6(t2.orientation, { vertical: o$1.ArrowDown, horizontal: o$1.ArrowRight }):
            return o2.preventDefault(), o2.stopPropagation(), p2.goToOption(c$6.Next);
          case u$6(t2.orientation, { vertical: o$1.ArrowUp, horizontal: o$1.ArrowLeft }):
            return o2.preventDefault(), o2.stopPropagation(), p2.goToOption(c$6.Previous);
          case o$1.Home:
          case o$1.PageUp:
            return o2.preventDefault(), o2.stopPropagation(), p2.goToOption(c$6.First);
          case o$1.End:
          case o$1.PageDown:
            return o2.preventDefault(), o2.stopPropagation(), p2.goToOption(c$6.Last);
          case o$1.Escape:
            return o2.preventDefault(), o2.stopPropagation(), p2.closeListbox(), i2.nextFrame(() => {
              var L2;
              return (L2 = t2.buttonRef.current) == null ? void 0 : L2.focus({ preventScroll: true });
            });
          case o$1.Tab:
            o2.preventDefault(), o2.stopPropagation();
            break;
          default:
            o2.key.length === 1 && (p2.search(o2.key), b2.setTimeout(() => p2.clearSearch(), 350));
            break;
        }
      }), S2 = i$4(() => {
        var o2;
        return (o2 = t2.buttonRef.current) == null ? void 0 : o2.id;
      }, [t2.buttonRef.current]), g2 = reactExports.useMemo(() => ({ open: t2.listboxState === 0 }), [t2]), x2 = { "aria-activedescendant": t2.activeOptionIndex === null || (T2 = t2.options[t2.activeOptionIndex]) == null ? void 0 : T2.id, "aria-multiselectable": t2.mode === 1 ? true : void 0, "aria-labelledby": S2, "aria-orientation": t2.orientation, id: r2, onKeyDown: P2, role: "listbox", tabIndex: 0, ref: u2 };
      return C$2({ ourProps: x2, theirProps: l2, slot: g2, defaultTag: Je$1, features: qe$3, visible: m2, name: "Listbox.Options" });
    }
    let Ze$1 = "li";
    function et$1(e3, a2) {
      let n2 = I$6(), { id: r2 = `headlessui-listbox-option-${n2}`, disabled: l2 = false, value: t2, ...p2 } = e3, u2 = w$2("Listbox.Option"), i2 = k$2("Listbox.Option"), b2 = u2.activeOptionIndex !== null ? u2.options[u2.activeOptionIndex].id === r2 : false, R2 = u2.isSelected(t2), m2 = reactExports.useRef(null), P2 = s$2(m2), S2 = s$a({ disabled: l2, value: t2, domRef: m2, get textValue() {
        return P2();
      } }), g2 = y$4(a2, m2);
      l$6(() => {
        if (u2.listboxState !== 0 || !b2 || u2.activationTrigger === 0)
          return;
        let A2 = o$5();
        return A2.requestAnimationFrame(() => {
          var d2, H2;
          (H2 = (d2 = m2.current) == null ? void 0 : d2.scrollIntoView) == null || H2.call(d2, { block: "nearest" });
        }), A2.dispose;
      }, [m2, b2, u2.listboxState, u2.activationTrigger, u2.activeOptionIndex]), l$6(() => i2.registerOption(r2, S2), [S2, r2]);
      let x2 = o$6((A2) => {
        if (l2)
          return A2.preventDefault();
        i2.onChange(t2), u2.mode === 0 && (i2.closeListbox(), o$5().nextFrame(() => {
          var d2;
          return (d2 = u2.buttonRef.current) == null ? void 0 : d2.focus({ preventScroll: true });
        }));
      }), T2 = o$6(() => {
        if (l2)
          return i2.goToOption(c$6.Nothing);
        i2.goToOption(c$6.Specific, r2);
      }), o2 = u$4(), L2 = o$6((A2) => o2.update(A2)), U2 = o$6((A2) => {
        o2.wasMoved(A2) && (l2 || b2 || i2.goToOption(c$6.Specific, r2, 0));
      }), B2 = o$6((A2) => {
        o2.wasMoved(A2) && (l2 || b2 && i2.goToOption(c$6.Nothing));
      }), W2 = reactExports.useMemo(() => ({ active: b2, selected: R2, disabled: l2 }), [b2, R2, l2]);
      return C$2({ ourProps: { id: r2, ref: g2, role: "option", tabIndex: l2 === true ? void 0 : -1, "aria-disabled": l2 === true ? true : void 0, "aria-selected": R2, disabled: void 0, onClick: x2, onFocus: T2, onPointerEnter: L2, onMouseEnter: L2, onPointerMove: U2, onMouseMove: U2, onPointerLeave: B2, onMouseLeave: B2 }, theirProps: p2, slot: W2, defaultTag: Ze$1, name: "Listbox.Option" });
    }
    let tt$1 = U$3(Qe$1), ot$1 = U$3(Xe$1), nt = U$3(ze$1), it = U$3(Ye$1), rt = U$3(et$1), It = Object.assign(tt$1, { Button: ot$1, Label: nt, Options: it, Option: rt });
    var me$1 = ((r2) => (r2[r2.Open = 0] = "Open", r2[r2.Closed = 1] = "Closed", r2))(me$1 || {}), de$1 = ((r2) => (r2[r2.Pointer = 0] = "Pointer", r2[r2.Other = 1] = "Other", r2))(de$1 || {}), fe$2 = ((a2) => (a2[a2.OpenMenu = 0] = "OpenMenu", a2[a2.CloseMenu = 1] = "CloseMenu", a2[a2.GoToItem = 2] = "GoToItem", a2[a2.Search = 3] = "Search", a2[a2.ClearSearch = 4] = "ClearSearch", a2[a2.RegisterItem = 5] = "RegisterItem", a2[a2.UnregisterItem = 6] = "UnregisterItem", a2))(fe$2 || {});
    function w$1(e3, u2 = (r2) => r2) {
      let r2 = e3.activeItemIndex !== null ? e3.items[e3.activeItemIndex] : null, s2 = I$5(u2(e3.items.slice()), (t2) => t2.dataRef.current.domRef.current), i2 = r2 ? s2.indexOf(r2) : null;
      return i2 === -1 && (i2 = null), { items: s2, activeItemIndex: i2 };
    }
    let Te$1 = { [1](e3) {
      return e3.menuState === 1 ? e3 : { ...e3, activeItemIndex: null, menuState: 1 };
    }, [0](e3) {
      return e3.menuState === 0 ? e3 : { ...e3, __demoMode: false, menuState: 0 };
    }, [2]: (e3, u2) => {
      var i2;
      let r2 = w$1(e3), s2 = f$7(u2, { resolveItems: () => r2.items, resolveActiveIndex: () => r2.activeItemIndex, resolveId: (t2) => t2.id, resolveDisabled: (t2) => t2.dataRef.current.disabled });
      return { ...e3, ...r2, searchQuery: "", activeItemIndex: s2, activationTrigger: (i2 = u2.trigger) != null ? i2 : 1 };
    }, [3]: (e3, u2) => {
      let s2 = e3.searchQuery !== "" ? 0 : 1, i2 = e3.searchQuery + u2.value.toLowerCase(), o2 = (e3.activeItemIndex !== null ? e3.items.slice(e3.activeItemIndex + s2).concat(e3.items.slice(0, e3.activeItemIndex + s2)) : e3.items).find((l2) => {
        var m2;
        return ((m2 = l2.dataRef.current.textValue) == null ? void 0 : m2.startsWith(i2)) && !l2.dataRef.current.disabled;
      }), a2 = o2 ? e3.items.indexOf(o2) : -1;
      return a2 === -1 || a2 === e3.activeItemIndex ? { ...e3, searchQuery: i2 } : { ...e3, searchQuery: i2, activeItemIndex: a2, activationTrigger: 1 };
    }, [4](e3) {
      return e3.searchQuery === "" ? e3 : { ...e3, searchQuery: "", searchActiveItemIndex: null };
    }, [5]: (e3, u2) => {
      let r2 = w$1(e3, (s2) => [...s2, { id: u2.id, dataRef: u2.dataRef }]);
      return { ...e3, ...r2 };
    }, [6]: (e3, u2) => {
      let r2 = w$1(e3, (s2) => {
        let i2 = s2.findIndex((t2) => t2.id === u2.id);
        return i2 !== -1 && s2.splice(i2, 1), s2;
      });
      return { ...e3, ...r2, activationTrigger: 1 };
    } }, U$1 = reactExports.createContext(null);
    U$1.displayName = "MenuContext";
    function C$1(e3) {
      let u2 = reactExports.useContext(U$1);
      if (u2 === null) {
        let r2 = new Error(`<${e3} /> is missing a parent <Menu /> component.`);
        throw Error.captureStackTrace && Error.captureStackTrace(r2, C$1), r2;
      }
      return u2;
    }
    function ye$2(e3, u2) {
      return u$6(u2.type, Te$1, e3, u2);
    }
    let Ie$1 = reactExports.Fragment;
    function Me(e3, u2) {
      let { __demoMode: r2 = false, ...s2 } = e3, i2 = reactExports.useReducer(ye$2, { __demoMode: r2, menuState: r2 ? 0 : 1, buttonRef: reactExports.createRef(), itemsRef: reactExports.createRef(), items: [], searchQuery: "", activeItemIndex: null, activationTrigger: 1 }), [{ menuState: t2, itemsRef: o2, buttonRef: a2 }, l2] = i2, m2 = y$4(u2);
      y$5([a2, o2], (g2, R2) => {
        var p2;
        l2({ type: 1 }), h$4(R2, T$3.Loose) || (g2.preventDefault(), (p2 = a2.current) == null || p2.focus());
      }, t2 === 0);
      let I2 = o$6(() => {
        l2({ type: 1 });
      }), A2 = reactExports.useMemo(() => ({ open: t2 === 0, close: I2 }), [t2, I2]), f2 = { ref: m2 };
      return React$1.createElement(U$1.Provider, { value: i2 }, React$1.createElement(s$6, { value: u$6(t2, { [0]: d$5.Open, [1]: d$5.Closed }) }, C$2({ ourProps: f2, theirProps: s2, slot: A2, defaultTag: Ie$1, name: "Menu" })));
    }
    let ge$1 = "button";
    function Re$2(e3, u2) {
      var R2;
      let r2 = I$6(), { id: s2 = `headlessui-menu-button-${r2}`, ...i2 } = e3, [t2, o2] = C$1("Menu.Button"), a2 = y$4(t2.buttonRef, u2), l2 = p$4(), m2 = o$6((p2) => {
        switch (p2.key) {
          case o$1.Space:
          case o$1.Enter:
          case o$1.ArrowDown:
            p2.preventDefault(), p2.stopPropagation(), o2({ type: 0 }), l2.nextFrame(() => o2({ type: 2, focus: c$6.First }));
            break;
          case o$1.ArrowUp:
            p2.preventDefault(), p2.stopPropagation(), o2({ type: 0 }), l2.nextFrame(() => o2({ type: 2, focus: c$6.Last }));
            break;
        }
      }), I2 = o$6((p2) => {
        switch (p2.key) {
          case o$1.Space:
            p2.preventDefault();
            break;
        }
      }), A2 = o$6((p2) => {
        if (r$4(p2.currentTarget))
          return p2.preventDefault();
        e3.disabled || (t2.menuState === 0 ? (o2({ type: 1 }), l2.nextFrame(() => {
          var M2;
          return (M2 = t2.buttonRef.current) == null ? void 0 : M2.focus({ preventScroll: true });
        })) : (p2.preventDefault(), o2({ type: 0 })));
      }), f2 = reactExports.useMemo(() => ({ open: t2.menuState === 0 }), [t2]), g2 = { ref: a2, id: s2, type: T$2(e3, t2.buttonRef), "aria-haspopup": "menu", "aria-controls": (R2 = t2.itemsRef.current) == null ? void 0 : R2.id, "aria-expanded": t2.menuState === 0, onKeyDown: m2, onKeyUp: I2, onClick: A2 };
      return C$2({ ourProps: g2, theirProps: i2, slot: f2, defaultTag: ge$1, name: "Menu.Button" });
    }
    let Ae$1 = "div", be$1 = O.RenderStrategy | O.Static;
    function Ee$2(e3, u2) {
      var M2, b2;
      let r2 = I$6(), { id: s2 = `headlessui-menu-items-${r2}`, ...i2 } = e3, [t2, o2] = C$1("Menu.Items"), a2 = y$4(t2.itemsRef, u2), l2 = n$3(t2.itemsRef), m2 = p$4(), I2 = u$3(), A2 = (() => I2 !== null ? (I2 & d$5.Open) === d$5.Open : t2.menuState === 0)();
      reactExports.useEffect(() => {
        let n2 = t2.itemsRef.current;
        n2 && t2.menuState === 0 && n2 !== (l2 == null ? void 0 : l2.activeElement) && n2.focus({ preventScroll: true });
      }, [t2.menuState, t2.itemsRef, l2]), F$2({ container: t2.itemsRef.current, enabled: t2.menuState === 0, accept(n2) {
        return n2.getAttribute("role") === "menuitem" ? NodeFilter.FILTER_REJECT : n2.hasAttribute("role") ? NodeFilter.FILTER_SKIP : NodeFilter.FILTER_ACCEPT;
      }, walk(n2) {
        n2.setAttribute("role", "none");
      } });
      let f2 = o$6((n2) => {
        var E2, x2;
        switch (m2.dispose(), n2.key) {
          case o$1.Space:
            if (t2.searchQuery !== "")
              return n2.preventDefault(), n2.stopPropagation(), o2({ type: 3, value: n2.key });
          case o$1.Enter:
            if (n2.preventDefault(), n2.stopPropagation(), o2({ type: 1 }), t2.activeItemIndex !== null) {
              let { dataRef: S2 } = t2.items[t2.activeItemIndex];
              (x2 = (E2 = S2.current) == null ? void 0 : E2.domRef.current) == null || x2.click();
            }
            D$3(t2.buttonRef.current);
            break;
          case o$1.ArrowDown:
            return n2.preventDefault(), n2.stopPropagation(), o2({ type: 2, focus: c$6.Next });
          case o$1.ArrowUp:
            return n2.preventDefault(), n2.stopPropagation(), o2({ type: 2, focus: c$6.Previous });
          case o$1.Home:
          case o$1.PageUp:
            return n2.preventDefault(), n2.stopPropagation(), o2({ type: 2, focus: c$6.First });
          case o$1.End:
          case o$1.PageDown:
            return n2.preventDefault(), n2.stopPropagation(), o2({ type: 2, focus: c$6.Last });
          case o$1.Escape:
            n2.preventDefault(), n2.stopPropagation(), o2({ type: 1 }), o$5().nextFrame(() => {
              var S2;
              return (S2 = t2.buttonRef.current) == null ? void 0 : S2.focus({ preventScroll: true });
            });
            break;
          case o$1.Tab:
            n2.preventDefault(), n2.stopPropagation(), o2({ type: 1 }), o$5().nextFrame(() => {
              _$2(t2.buttonRef.current, n2.shiftKey ? M$2.Previous : M$2.Next);
            });
            break;
          default:
            n2.key.length === 1 && (o2({ type: 3, value: n2.key }), m2.setTimeout(() => o2({ type: 4 }), 350));
            break;
        }
      }), g2 = o$6((n2) => {
        switch (n2.key) {
          case o$1.Space:
            n2.preventDefault();
            break;
        }
      }), R2 = reactExports.useMemo(() => ({ open: t2.menuState === 0 }), [t2]), p2 = { "aria-activedescendant": t2.activeItemIndex === null || (M2 = t2.items[t2.activeItemIndex]) == null ? void 0 : M2.id, "aria-labelledby": (b2 = t2.buttonRef.current) == null ? void 0 : b2.id, id: s2, onKeyDown: f2, onKeyUp: g2, role: "menu", tabIndex: 0, ref: a2 };
      return C$2({ ourProps: p2, theirProps: i2, slot: R2, defaultTag: Ae$1, features: be$1, visible: A2, name: "Menu.Items" });
    }
    let Se$2 = reactExports.Fragment;
    function xe$2(e3, u2) {
      let r2 = I$6(), { id: s2 = `headlessui-menu-item-${r2}`, disabled: i2 = false, ...t2 } = e3, [o2, a2] = C$1("Menu.Item"), l2 = o2.activeItemIndex !== null ? o2.items[o2.activeItemIndex].id === s2 : false, m2 = reactExports.useRef(null), I2 = y$4(u2, m2);
      l$6(() => {
        if (o2.__demoMode || o2.menuState !== 0 || !l2 || o2.activationTrigger === 0)
          return;
        let T2 = o$5();
        return T2.requestAnimationFrame(() => {
          var P2, B2;
          (B2 = (P2 = m2.current) == null ? void 0 : P2.scrollIntoView) == null || B2.call(P2, { block: "nearest" });
        }), T2.dispose;
      }, [o2.__demoMode, m2, l2, o2.menuState, o2.activationTrigger, o2.activeItemIndex]);
      let A2 = s$2(m2), f2 = reactExports.useRef({ disabled: i2, domRef: m2, get textValue() {
        return A2();
      } });
      l$6(() => {
        f2.current.disabled = i2;
      }, [f2, i2]), l$6(() => (a2({ type: 5, id: s2, dataRef: f2 }), () => a2({ type: 6, id: s2 })), [f2, s2]);
      let g2 = o$6(() => {
        a2({ type: 1 });
      }), R2 = o$6((T2) => {
        if (i2)
          return T2.preventDefault();
        a2({ type: 1 }), D$3(o2.buttonRef.current);
      }), p2 = o$6(() => {
        if (i2)
          return a2({ type: 2, focus: c$6.Nothing });
        a2({ type: 2, focus: c$6.Specific, id: s2 });
      }), M2 = u$4(), b2 = o$6((T2) => M2.update(T2)), n2 = o$6((T2) => {
        M2.wasMoved(T2) && (i2 || l2 || a2({ type: 2, focus: c$6.Specific, id: s2, trigger: 0 }));
      }), E2 = o$6((T2) => {
        M2.wasMoved(T2) && (i2 || l2 && a2({ type: 2, focus: c$6.Nothing }));
      }), x2 = reactExports.useMemo(() => ({ active: l2, disabled: i2, close: g2 }), [l2, i2, g2]);
      return C$2({ ourProps: { id: s2, ref: I2, role: "menuitem", tabIndex: i2 === true ? void 0 : -1, "aria-disabled": i2 === true ? true : void 0, disabled: void 0, onClick: R2, onFocus: p2, onPointerEnter: b2, onMouseEnter: b2, onPointerMove: n2, onMouseMove: n2, onPointerLeave: E2, onMouseLeave: E2 }, theirProps: t2, slot: x2, defaultTag: Se$2, name: "Menu.Item" });
    }
    let Pe$3 = U$3(Me), ve = U$3(Re$2), he$2 = U$3(Ee$2), De$2 = U$3(xe$2), qe$2 = Object.assign(Pe$3, { Button: ve, Items: he$2, Item: De$2 });
    var he$1 = ((u2) => (u2[u2.Open = 0] = "Open", u2[u2.Closed = 1] = "Closed", u2))(he$1 || {}), He$1 = ((e3) => (e3[e3.TogglePopover = 0] = "TogglePopover", e3[e3.ClosePopover = 1] = "ClosePopover", e3[e3.SetButton = 2] = "SetButton", e3[e3.SetButtonId = 3] = "SetButtonId", e3[e3.SetPanel = 4] = "SetPanel", e3[e3.SetPanelId = 5] = "SetPanelId", e3))(He$1 || {});
    let Ge = { [0]: (t2) => {
      let o2 = { ...t2, popoverState: u$6(t2.popoverState, { [0]: 1, [1]: 0 }) };
      return o2.popoverState === 0 && (o2.__demoMode = false), o2;
    }, [1](t2) {
      return t2.popoverState === 1 ? t2 : { ...t2, popoverState: 1 };
    }, [2](t2, o2) {
      return t2.button === o2.button ? t2 : { ...t2, button: o2.button };
    }, [3](t2, o2) {
      return t2.buttonId === o2.buttonId ? t2 : { ...t2, buttonId: o2.buttonId };
    }, [4](t2, o2) {
      return t2.panel === o2.panel ? t2 : { ...t2, panel: o2.panel };
    }, [5](t2, o2) {
      return t2.panelId === o2.panelId ? t2 : { ...t2, panelId: o2.panelId };
    } }, ue$2 = reactExports.createContext(null);
    ue$2.displayName = "PopoverContext";
    function oe(t2) {
      let o2 = reactExports.useContext(ue$2);
      if (o2 === null) {
        let u2 = new Error(`<${t2} /> is missing a parent <Popover /> component.`);
        throw Error.captureStackTrace && Error.captureStackTrace(u2, oe), u2;
      }
      return o2;
    }
    let ie = reactExports.createContext(null);
    ie.displayName = "PopoverAPIContext";
    function fe$1(t2) {
      let o2 = reactExports.useContext(ie);
      if (o2 === null) {
        let u2 = new Error(`<${t2} /> is missing a parent <Popover /> component.`);
        throw Error.captureStackTrace && Error.captureStackTrace(u2, fe$1), u2;
      }
      return o2;
    }
    let Pe$2 = reactExports.createContext(null);
    Pe$2.displayName = "PopoverGroupContext";
    function Ee$1() {
      return reactExports.useContext(Pe$2);
    }
    let re$2 = reactExports.createContext(null);
    re$2.displayName = "PopoverPanelContext";
    function Ne$1() {
      return reactExports.useContext(re$2);
    }
    function ke(t2, o2) {
      return u$6(o2.type, Ge, t2, o2);
    }
    let we = "div";
    function Ue(t2, o2) {
      var B2;
      let { __demoMode: u2 = false, ...M2 } = t2, x2 = reactExports.useRef(null), n2 = y$4(o2, T$1((l2) => {
        x2.current = l2;
      })), e3 = reactExports.useRef([]), c2 = reactExports.useReducer(ke, { __demoMode: u2, popoverState: u2 ? 0 : 1, buttons: e3, button: null, buttonId: null, panel: null, panelId: null, beforePanelSentinel: reactExports.createRef(), afterPanelSentinel: reactExports.createRef() }), [{ popoverState: f2, button: s2, buttonId: I2, panel: a2, panelId: v2, beforePanelSentinel: y2, afterPanelSentinel: A2 }, P2] = c2, p2 = n$3((B2 = x2.current) != null ? B2 : s2), E$12 = reactExports.useMemo(() => {
        if (!s2 || !a2)
          return false;
        for (let W2 of document.querySelectorAll("body > *"))
          if (Number(W2 == null ? void 0 : W2.contains(s2)) ^ Number(W2 == null ? void 0 : W2.contains(a2)))
            return true;
        let l2 = f$9(), S2 = l2.indexOf(s2), q2 = (S2 + l2.length - 1) % l2.length, U2 = (S2 + 1) % l2.length, z2 = l2[q2], be2 = l2[U2];
        return !a2.contains(z2) && !a2.contains(be2);
      }, [s2, a2]), F2 = s$a(I2), D2 = s$a(v2), _2 = reactExports.useMemo(() => ({ buttonId: F2, panelId: D2, close: () => P2({ type: 1 }) }), [F2, D2, P2]), O2 = Ee$1(), L2 = O2 == null ? void 0 : O2.registerPopover, $2 = o$6(() => {
        var l2;
        return (l2 = O2 == null ? void 0 : O2.isFocusWithinPopoverGroup()) != null ? l2 : (p2 == null ? void 0 : p2.activeElement) && ((s2 == null ? void 0 : s2.contains(p2.activeElement)) || (a2 == null ? void 0 : a2.contains(p2.activeElement)));
      });
      reactExports.useEffect(() => L2 == null ? void 0 : L2(_2), [L2, _2]);
      let [i2, b2] = ee(), T2 = N({ mainTreeNodeRef: O2 == null ? void 0 : O2.mainTreeNodeRef, portals: i2, defaultContainers: [s2, a2] });
      E(p2 == null ? void 0 : p2.defaultView, "focus", (l2) => {
        var S2, q2, U2, z2;
        l2.target !== window && l2.target instanceof HTMLElement && f2 === 0 && ($2() || s2 && a2 && (T2.contains(l2.target) || (q2 = (S2 = y2.current) == null ? void 0 : S2.contains) != null && q2.call(S2, l2.target) || (z2 = (U2 = A2.current) == null ? void 0 : U2.contains) != null && z2.call(U2, l2.target) || P2({ type: 1 })));
      }, true), y$5(T2.resolveContainers, (l2, S2) => {
        P2({ type: 1 }), h$4(S2, T$3.Loose) || (l2.preventDefault(), s2 == null || s2.focus());
      }, f2 === 0);
      let d2 = o$6((l2) => {
        P2({ type: 1 });
        let S2 = (() => l2 ? l2 instanceof HTMLElement ? l2 : "current" in l2 && l2.current instanceof HTMLElement ? l2.current : s2 : s2)();
        S2 == null || S2.focus();
      }), r2 = reactExports.useMemo(() => ({ close: d2, isPortalled: E$12 }), [d2, E$12]), m2 = reactExports.useMemo(() => ({ open: f2 === 0, close: d2 }), [f2, d2]), g2 = { ref: n2 };
      return React$1.createElement(re$2.Provider, { value: null }, React$1.createElement(ue$2.Provider, { value: c2 }, React$1.createElement(ie.Provider, { value: r2 }, React$1.createElement(s$6, { value: u$6(f2, { [0]: d$5.Open, [1]: d$5.Closed }) }, React$1.createElement(b2, null, C$2({ ourProps: g2, theirProps: M2, slot: m2, defaultTag: we, name: "Popover" }), React$1.createElement(T2.MainTreeNode, null))))));
    }
    let We = "button";
    function Ke(t2, o2) {
      let u2 = I$6(), { id: M2 = `headlessui-popover-button-${u2}`, ...x2 } = t2, [n2, e3] = oe("Popover.Button"), { isPortalled: c2 } = fe$1("Popover.Button"), f2 = reactExports.useRef(null), s2 = `headlessui-focus-sentinel-${I$6()}`, I2 = Ee$1(), a2 = I2 == null ? void 0 : I2.closeOthers, y2 = Ne$1() !== null;
      reactExports.useEffect(() => {
        if (!y2)
          return e3({ type: 3, buttonId: M2 }), () => {
            e3({ type: 3, buttonId: null });
          };
      }, [y2, M2, e3]);
      let [A2] = reactExports.useState(() => Symbol()), P2 = y$4(f2, o2, y2 ? null : (r2) => {
        if (r2)
          n2.buttons.current.push(A2);
        else {
          let m2 = n2.buttons.current.indexOf(A2);
          m2 !== -1 && n2.buttons.current.splice(m2, 1);
        }
        n2.buttons.current.length > 1 && console.warn("You are already using a <Popover.Button /> but only 1 <Popover.Button /> is supported."), r2 && e3({ type: 2, button: r2 });
      }), p2 = y$4(f2, o2), E2 = n$3(f2), F2 = o$6((r2) => {
        var m2, g2, B2;
        if (y2) {
          if (n2.popoverState === 1)
            return;
          switch (r2.key) {
            case o$1.Space:
            case o$1.Enter:
              r2.preventDefault(), (g2 = (m2 = r2.target).click) == null || g2.call(m2), e3({ type: 1 }), (B2 = n2.button) == null || B2.focus();
              break;
          }
        } else
          switch (r2.key) {
            case o$1.Space:
            case o$1.Enter:
              r2.preventDefault(), r2.stopPropagation(), n2.popoverState === 1 && (a2 == null || a2(n2.buttonId)), e3({ type: 0 });
              break;
            case o$1.Escape:
              if (n2.popoverState !== 0)
                return a2 == null ? void 0 : a2(n2.buttonId);
              if (!f2.current || E2 != null && E2.activeElement && !f2.current.contains(E2.activeElement))
                return;
              r2.preventDefault(), r2.stopPropagation(), e3({ type: 1 });
              break;
          }
      }), D2 = o$6((r2) => {
        y2 || r2.key === o$1.Space && r2.preventDefault();
      }), _2 = o$6((r2) => {
        var m2, g2;
        r$4(r2.currentTarget) || t2.disabled || (y2 ? (e3({ type: 1 }), (m2 = n2.button) == null || m2.focus()) : (r2.preventDefault(), r2.stopPropagation(), n2.popoverState === 1 && (a2 == null || a2(n2.buttonId)), e3({ type: 0 }), (g2 = n2.button) == null || g2.focus()));
      }), O2 = o$6((r2) => {
        r2.preventDefault(), r2.stopPropagation();
      }), L2 = n2.popoverState === 0, $2 = reactExports.useMemo(() => ({ open: L2 }), [L2]), i2 = T$2(t2, f2), b2 = y2 ? { ref: p2, type: i2, onKeyDown: F2, onClick: _2 } : { ref: P2, id: n2.buttonId, type: i2, "aria-expanded": n2.popoverState === 0, "aria-controls": n2.panel ? n2.panelId : void 0, onKeyDown: F2, onKeyUp: D2, onClick: _2, onMouseDown: O2 }, T2 = n$1(), d2 = o$6(() => {
        let r2 = n2.panel;
        if (!r2)
          return;
        function m2() {
          u$6(T2.current, { [s$5.Forwards]: () => O$1(r2, M$2.First), [s$5.Backwards]: () => O$1(r2, M$2.Last) }) === N$2.Error && O$1(f$9().filter((B2) => B2.dataset.headlessuiFocusGuard !== "true"), u$6(T2.current, { [s$5.Forwards]: M$2.Next, [s$5.Backwards]: M$2.Previous }), { relativeTo: n2.button });
        }
        m2();
      });
      return React$1.createElement(React$1.Fragment, null, C$2({ ourProps: b2, theirProps: x2, slot: $2, defaultTag: We, name: "Popover.Button" }), L2 && !y2 && c2 && React$1.createElement(f$8, { id: s2, features: s$7.Focusable, "data-headlessui-focus-guard": true, as: "button", type: "button", onFocus: d2 }));
    }
    let je = "div", Ve = O.RenderStrategy | O.Static;
    function $e$1(t2, o2) {
      let u2 = I$6(), { id: M2 = `headlessui-popover-overlay-${u2}`, ...x2 } = t2, [{ popoverState: n2 }, e3] = oe("Popover.Overlay"), c2 = y$4(o2), f2 = u$3(), s2 = (() => f2 !== null ? (f2 & d$5.Open) === d$5.Open : n2 === 0)(), I2 = o$6((y2) => {
        if (r$4(y2.currentTarget))
          return y2.preventDefault();
        e3({ type: 1 });
      }), a2 = reactExports.useMemo(() => ({ open: n2 === 0 }), [n2]);
      return C$2({ ourProps: { ref: c2, id: M2, "aria-hidden": true, onClick: I2 }, theirProps: x2, slot: a2, defaultTag: je, features: Ve, visible: s2, name: "Popover.Overlay" });
    }
    let Je = "div", Xe = O.RenderStrategy | O.Static;
    function Ye(t2, o2) {
      let u2 = I$6(), { id: M2 = `headlessui-popover-panel-${u2}`, focus: x2 = false, ...n2 } = t2, [e3, c2] = oe("Popover.Panel"), { close: f2, isPortalled: s2 } = fe$1("Popover.Panel"), I2 = `headlessui-focus-sentinel-before-${I$6()}`, a2 = `headlessui-focus-sentinel-after-${I$6()}`, v2 = reactExports.useRef(null), y2 = y$4(v2, o2, (i2) => {
        c2({ type: 4, panel: i2 });
      }), A2 = n$3(v2), P2 = I$4();
      l$6(() => (c2({ type: 5, panelId: M2 }), () => {
        c2({ type: 5, panelId: null });
      }), [M2, c2]);
      let p2 = u$3(), E2 = (() => p2 !== null ? (p2 & d$5.Open) === d$5.Open : e3.popoverState === 0)(), F2 = o$6((i2) => {
        var b2;
        switch (i2.key) {
          case o$1.Escape:
            if (e3.popoverState !== 0 || !v2.current || A2 != null && A2.activeElement && !v2.current.contains(A2.activeElement))
              return;
            i2.preventDefault(), i2.stopPropagation(), c2({ type: 1 }), (b2 = e3.button) == null || b2.focus();
            break;
        }
      });
      reactExports.useEffect(() => {
        var i2;
        t2.static || e3.popoverState === 1 && ((i2 = t2.unmount) == null || i2) && c2({ type: 4, panel: null });
      }, [e3.popoverState, t2.unmount, t2.static, c2]), reactExports.useEffect(() => {
        if (e3.__demoMode || !x2 || e3.popoverState !== 0 || !v2.current)
          return;
        let i2 = A2 == null ? void 0 : A2.activeElement;
        v2.current.contains(i2) || O$1(v2.current, M$2.First);
      }, [e3.__demoMode, x2, v2, e3.popoverState]);
      let D2 = reactExports.useMemo(() => ({ open: e3.popoverState === 0, close: f2 }), [e3, f2]), _2 = { ref: y2, id: M2, onKeyDown: F2, onBlur: x2 && e3.popoverState === 0 ? (i2) => {
        var T2, d2, r2, m2, g2;
        let b2 = i2.relatedTarget;
        b2 && v2.current && ((T2 = v2.current) != null && T2.contains(b2) || (c2({ type: 1 }), ((r2 = (d2 = e3.beforePanelSentinel.current) == null ? void 0 : d2.contains) != null && r2.call(d2, b2) || (g2 = (m2 = e3.afterPanelSentinel.current) == null ? void 0 : m2.contains) != null && g2.call(m2, b2)) && b2.focus({ preventScroll: true })));
      } : void 0, tabIndex: -1 }, O2 = n$1(), L2 = o$6(() => {
        let i2 = v2.current;
        if (!i2)
          return;
        function b2() {
          u$6(O2.current, { [s$5.Forwards]: () => {
            var d2;
            O$1(i2, M$2.First) === N$2.Error && ((d2 = e3.afterPanelSentinel.current) == null || d2.focus());
          }, [s$5.Backwards]: () => {
            var T2;
            (T2 = e3.button) == null || T2.focus({ preventScroll: true });
          } });
        }
        b2();
      }), $2 = o$6(() => {
        let i2 = v2.current;
        if (!i2)
          return;
        function b2() {
          u$6(O2.current, { [s$5.Forwards]: () => {
            var B2;
            if (!e3.button)
              return;
            let T2 = f$9(), d2 = T2.indexOf(e3.button), r2 = T2.slice(0, d2 + 1), g2 = [...T2.slice(d2 + 1), ...r2];
            for (let l2 of g2.slice())
              if (l2.dataset.headlessuiFocusGuard === "true" || (B2 = e3.panel) != null && B2.contains(l2)) {
                let S2 = g2.indexOf(l2);
                S2 !== -1 && g2.splice(S2, 1);
              }
            O$1(g2, M$2.First, { sorted: false });
          }, [s$5.Backwards]: () => {
            var d2;
            O$1(i2, M$2.Previous) === N$2.Error && ((d2 = e3.button) == null || d2.focus());
          } });
        }
        b2();
      });
      return React$1.createElement(re$2.Provider, { value: M2 }, E2 && s2 && React$1.createElement(f$8, { id: I2, ref: e3.beforePanelSentinel, features: s$7.Focusable, "data-headlessui-focus-guard": true, as: "button", type: "button", onFocus: L2 }), C$2({ mergeRefs: P2, ourProps: _2, theirProps: n2, slot: D2, defaultTag: Je, features: Xe, visible: E2, name: "Popover.Panel" }), E2 && s2 && React$1.createElement(f$8, { id: a2, ref: e3.afterPanelSentinel, features: s$7.Focusable, "data-headlessui-focus-guard": true, as: "button", type: "button", onFocus: $2 }));
    }
    let qe$1 = "div";
    function ze(t2, o2) {
      let u2 = reactExports.useRef(null), M2 = y$4(u2, o2), [x2, n2] = reactExports.useState([]), e3 = y$2(), c2 = o$6((P2) => {
        n2((p2) => {
          let E2 = p2.indexOf(P2);
          if (E2 !== -1) {
            let F2 = p2.slice();
            return F2.splice(E2, 1), F2;
          }
          return p2;
        });
      }), f2 = o$6((P2) => (n2((p2) => [...p2, P2]), () => c2(P2))), s2 = o$6(() => {
        var E2;
        let P2 = o$3(u2);
        if (!P2)
          return false;
        let p2 = P2.activeElement;
        return (E2 = u2.current) != null && E2.contains(p2) ? true : x2.some((F2) => {
          var D2, _2;
          return ((D2 = P2.getElementById(F2.buttonId.current)) == null ? void 0 : D2.contains(p2)) || ((_2 = P2.getElementById(F2.panelId.current)) == null ? void 0 : _2.contains(p2));
        });
      }), I2 = o$6((P2) => {
        for (let p2 of x2)
          p2.buttonId.current !== P2 && p2.close();
      }), a2 = reactExports.useMemo(() => ({ registerPopover: f2, unregisterPopover: c2, isFocusWithinPopoverGroup: s2, closeOthers: I2, mainTreeNodeRef: e3.mainTreeNodeRef }), [f2, c2, s2, I2, e3.mainTreeNodeRef]), v2 = reactExports.useMemo(() => ({}), []), y2 = t2, A2 = { ref: M2 };
      return React$1.createElement(Pe$2.Provider, { value: a2 }, C$2({ ourProps: A2, theirProps: y2, slot: v2, defaultTag: qe$1, name: "Popover.Group" }), React$1.createElement(e3.MainTreeNode, null));
    }
    let Qe = U$3(Ue), Ze = U$3(Ke), et = U$3($e$1), tt = U$3(Ye), ot = U$3(ze), Ct = Object.assign(Qe, { Button: Ze, Overlay: et, Panel: tt, Group: ot });
    function c$2(a2 = 0) {
      let [l2, r2] = reactExports.useState(a2), t2 = f$5(), o2 = reactExports.useCallback((e3) => {
        t2.current && r2((u2) => u2 | e3);
      }, [l2, t2]), m2 = reactExports.useCallback((e3) => Boolean(l2 & e3), [l2]), s2 = reactExports.useCallback((e3) => {
        t2.current && r2((u2) => u2 & ~e3);
      }, [r2, t2]), g2 = reactExports.useCallback((e3) => {
        t2.current && r2((u2) => u2 ^ e3);
      }, [r2]);
      return { flags: l2, addFlag: o2, hasFlag: m2, removeFlag: s2, toggleFlag: g2 };
    }
    function b$2({ onFocus: n2 }) {
      let [r2, o2] = reactExports.useState(true), u2 = f$5();
      return r2 ? React$1.createElement(f$8, { as: "button", type: "button", features: s$7.Focusable, onFocus: (a2) => {
        a2.preventDefault();
        let e3, i2 = 50;
        function t2() {
          if (i2-- <= 0) {
            e3 && cancelAnimationFrame(e3);
            return;
          }
          if (n2()) {
            if (cancelAnimationFrame(e3), !u2.current)
              return;
            o2(false);
            return;
          }
          e3 = requestAnimationFrame(t2);
        }
        e3 = requestAnimationFrame(t2);
      } }) : null;
    }
    const s$1 = reactExports.createContext(null);
    function a$1() {
      return { groups: /* @__PURE__ */ new Map(), get(n2, t2) {
        var c2;
        let e3 = this.groups.get(n2);
        e3 || (e3 = /* @__PURE__ */ new Map(), this.groups.set(n2, e3));
        let l2 = (c2 = e3.get(t2)) != null ? c2 : 0;
        e3.set(t2, l2 + 1);
        let o2 = Array.from(e3.keys()).indexOf(t2);
        function i2() {
          let u2 = e3.get(t2);
          u2 > 1 ? e3.set(t2, u2 - 1) : e3.delete(t2);
        }
        return [o2, i2];
      } };
    }
    function C({ children: n2 }) {
      let t2 = reactExports.useRef(a$1());
      return reactExports.createElement(s$1.Provider, { value: t2 }, n2);
    }
    function d$1(n2) {
      let t2 = reactExports.useContext(s$1);
      if (!t2)
        throw new Error("You must wrap your component in a <StableCollection>");
      let e3 = f$1(), [l2, o2] = t2.current.get(n2, e3);
      return reactExports.useEffect(() => o2, []), l2;
    }
    function f$1() {
      var l2, o2, i2;
      let n2 = (i2 = (o2 = (l2 = reactExports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED) == null ? void 0 : l2.ReactCurrentOwner) == null ? void 0 : o2.current) != null ? i2 : null;
      if (!n2)
        return Symbol();
      let t2 = [], e3 = n2;
      for (; e3; )
        t2.push(e3.index), e3 = e3.return;
      return "$." + t2.join(".");
    }
    var ue$1 = ((t2) => (t2[t2.Forwards = 0] = "Forwards", t2[t2.Backwards = 1] = "Backwards", t2))(ue$1 || {}), Te = ((o2) => (o2[o2.Less = -1] = "Less", o2[o2.Equal = 0] = "Equal", o2[o2.Greater = 1] = "Greater", o2))(Te || {}), de = ((r2) => (r2[r2.SetSelectedIndex = 0] = "SetSelectedIndex", r2[r2.RegisterTab = 1] = "RegisterTab", r2[r2.UnregisterTab = 2] = "UnregisterTab", r2[r2.RegisterPanel = 3] = "RegisterPanel", r2[r2.UnregisterPanel = 4] = "UnregisterPanel", r2))(de || {});
    let ce$1 = { [0](e3, n2) {
      var u2;
      let t2 = I$5(e3.tabs, (T2) => T2.current), o2 = I$5(e3.panels, (T2) => T2.current), s2 = t2.filter((T2) => {
        var l2;
        return !((l2 = T2.current) != null && l2.hasAttribute("disabled"));
      }), r2 = { ...e3, tabs: t2, panels: o2 };
      if (n2.index < 0 || n2.index > t2.length - 1) {
        let T2 = u$6(Math.sign(n2.index - e3.selectedIndex), { [-1]: () => 1, [0]: () => u$6(Math.sign(n2.index), { [-1]: () => 0, [0]: () => 0, [1]: () => 1 }), [1]: () => 0 });
        if (s2.length === 0)
          return r2;
        let l2 = u$6(T2, { [0]: () => t2.indexOf(s2[0]), [1]: () => t2.indexOf(s2[s2.length - 1]) });
        return { ...r2, selectedIndex: l2 === -1 ? e3.selectedIndex : l2 };
      }
      let i2 = t2.slice(0, n2.index), b2 = [...t2.slice(n2.index), ...i2].find((T2) => s2.includes(T2));
      if (!b2)
        return r2;
      let c2 = (u2 = t2.indexOf(b2)) != null ? u2 : e3.selectedIndex;
      return c2 === -1 && (c2 = e3.selectedIndex), { ...r2, selectedIndex: c2 };
    }, [1](e3, n2) {
      var r2;
      if (e3.tabs.includes(n2.tab))
        return e3;
      let t2 = e3.tabs[e3.selectedIndex], o2 = I$5([...e3.tabs, n2.tab], (i2) => i2.current), s2 = (r2 = o2.indexOf(t2)) != null ? r2 : e3.selectedIndex;
      return s2 === -1 && (s2 = e3.selectedIndex), { ...e3, tabs: o2, selectedIndex: s2 };
    }, [2](e3, n2) {
      return { ...e3, tabs: e3.tabs.filter((t2) => t2 !== n2.tab) };
    }, [3](e3, n2) {
      return e3.panels.includes(n2.panel) ? e3 : { ...e3, panels: I$5([...e3.panels, n2.panel], (t2) => t2.current) };
    }, [4](e3, n2) {
      return { ...e3, panels: e3.panels.filter((t2) => t2 !== n2.panel) };
    } }, X = reactExports.createContext(null);
    X.displayName = "TabsDataContext";
    function h$1(e3) {
      let n2 = reactExports.useContext(X);
      if (n2 === null) {
        let t2 = new Error(`<${e3} /> is missing a parent <Tab.Group /> component.`);
        throw Error.captureStackTrace && Error.captureStackTrace(t2, h$1), t2;
      }
      return n2;
    }
    let $ = reactExports.createContext(null);
    $.displayName = "TabsActionsContext";
    function q$2(e3) {
      let n2 = reactExports.useContext($);
      if (n2 === null) {
        let t2 = new Error(`<${e3} /> is missing a parent <Tab.Group /> component.`);
        throw Error.captureStackTrace && Error.captureStackTrace(t2, q$2), t2;
      }
      return n2;
    }
    function fe(e3, n2) {
      return u$6(n2.type, ce$1, e3, n2);
    }
    let be = reactExports.Fragment;
    function me(e3, n2) {
      let { defaultIndex: t2 = 0, vertical: o2 = false, manual: s2 = false, onChange: r2, selectedIndex: i2 = null, ...R2 } = e3;
      const b2 = o2 ? "vertical" : "horizontal", c2 = s2 ? "manual" : "auto";
      let u2 = i2 !== null, T2 = y$4(n2), [l2, d2] = reactExports.useReducer(fe, { selectedIndex: i2 != null ? i2 : t2, tabs: [], panels: [] }), x2 = reactExports.useMemo(() => ({ selectedIndex: l2.selectedIndex }), [l2.selectedIndex]), m2 = s$a(r2 || (() => {
      })), g2 = s$a(l2.tabs), E2 = reactExports.useMemo(() => ({ orientation: b2, activation: c2, ...l2 }), [b2, c2, l2]), S2 = o$6((p2) => (d2({ type: 1, tab: p2 }), () => d2({ type: 2, tab: p2 }))), A2 = o$6((p2) => (d2({ type: 3, panel: p2 }), () => d2({ type: 4, panel: p2 }))), L2 = o$6((p2) => {
        M2.current !== p2 && m2.current(p2), u2 || d2({ type: 0, index: p2 });
      }), M2 = s$a(u2 ? e3.selectedIndex : l2.selectedIndex), N2 = reactExports.useMemo(() => ({ registerTab: S2, registerPanel: A2, change: L2 }), []);
      l$6(() => {
        d2({ type: 0, index: i2 != null ? i2 : t2 });
      }, [i2]), l$6(() => {
        if (M2.current === void 0 || l2.tabs.length <= 0)
          return;
        let p2 = I$5(l2.tabs, (a2) => a2.current);
        p2.some((a2, f2) => l2.tabs[f2] !== a2) && L2(p2.indexOf(l2.tabs[M2.current]));
      });
      let B2 = { ref: T2 };
      return React$1.createElement(C, null, React$1.createElement($.Provider, { value: N2 }, React$1.createElement(X.Provider, { value: E2 }, E2.tabs.length <= 0 && React$1.createElement(b$2, { onFocus: () => {
        var p2, I2;
        for (let a2 of g2.current)
          if (((p2 = a2.current) == null ? void 0 : p2.tabIndex) === 0)
            return (I2 = a2.current) == null || I2.focus(), true;
        return false;
      } }), C$2({ ourProps: B2, theirProps: R2, slot: x2, defaultTag: be, name: "Tabs" }))));
    }
    let Pe$1 = "div";
    function ye$1(e3, n2) {
      let { orientation: t2, selectedIndex: o2 } = h$1("Tab.List"), s2 = y$4(n2);
      return C$2({ ourProps: { ref: s2, role: "tablist", "aria-orientation": t2 }, theirProps: e3, slot: { selectedIndex: o2 }, defaultTag: Pe$1, name: "Tabs.List" });
    }
    let xe$1 = "button";
    function ge(e3, n2) {
      var p2, I2;
      let t2 = I$6(), { id: o2 = `headlessui-tabs-tab-${t2}`, ...s2 } = e3, { orientation: r2, activation: i2, selectedIndex: R2, tabs: b2, panels: c2 } = h$1("Tab"), u2 = q$2("Tab"), T2 = h$1("Tab"), l2 = reactExports.useRef(null), d2 = y$4(l2, n2);
      l$6(() => u2.registerTab(l2), [u2, l2]);
      let x2 = d$1("tabs"), m2 = b2.indexOf(l2);
      m2 === -1 && (m2 = x2);
      let g2 = m2 === R2, E2 = o$6((a2) => {
        var j2;
        let f2 = a2();
        if (f2 === N$2.Success && i2 === "auto") {
          let W2 = (j2 = o$3(l2)) == null ? void 0 : j2.activeElement, z2 = T2.tabs.findIndex((te2) => te2.current === W2);
          z2 !== -1 && u2.change(z2);
        }
        return f2;
      }), S2 = o$6((a2) => {
        let f2 = b2.map((W2) => W2.current).filter(Boolean);
        if (a2.key === o$1.Space || a2.key === o$1.Enter) {
          a2.preventDefault(), a2.stopPropagation(), u2.change(m2);
          return;
        }
        switch (a2.key) {
          case o$1.Home:
          case o$1.PageUp:
            return a2.preventDefault(), a2.stopPropagation(), E2(() => O$1(f2, M$2.First));
          case o$1.End:
          case o$1.PageDown:
            return a2.preventDefault(), a2.stopPropagation(), E2(() => O$1(f2, M$2.Last));
        }
        if (E2(() => u$6(r2, { vertical() {
          return a2.key === o$1.ArrowUp ? O$1(f2, M$2.Previous | M$2.WrapAround) : a2.key === o$1.ArrowDown ? O$1(f2, M$2.Next | M$2.WrapAround) : N$2.Error;
        }, horizontal() {
          return a2.key === o$1.ArrowLeft ? O$1(f2, M$2.Previous | M$2.WrapAround) : a2.key === o$1.ArrowRight ? O$1(f2, M$2.Next | M$2.WrapAround) : N$2.Error;
        } })) === N$2.Success)
          return a2.preventDefault();
      }), A2 = reactExports.useRef(false), L2 = o$6(() => {
        var a2;
        A2.current || (A2.current = true, (a2 = l2.current) == null || a2.focus({ preventScroll: true }), u2.change(m2), t$8(() => {
          A2.current = false;
        }));
      }), M2 = o$6((a2) => {
        a2.preventDefault();
      }), N2 = reactExports.useMemo(() => ({ selected: g2 }), [g2]), B2 = { ref: d2, onKeyDown: S2, onMouseDown: M2, onClick: L2, id: o2, role: "tab", type: T$2(e3, l2), "aria-controls": (I2 = (p2 = c2[m2]) == null ? void 0 : p2.current) == null ? void 0 : I2.id, "aria-selected": g2, tabIndex: g2 ? 0 : -1 };
      return C$2({ ourProps: B2, theirProps: s2, slot: N2, defaultTag: xe$1, name: "Tabs.Tab" });
    }
    let Ee = "div";
    function Ae(e3, n2) {
      let { selectedIndex: t2 } = h$1("Tab.Panels"), o2 = y$4(n2), s2 = reactExports.useMemo(() => ({ selectedIndex: t2 }), [t2]);
      return C$2({ ourProps: { ref: o2 }, theirProps: e3, slot: s2, defaultTag: Ee, name: "Tabs.Panels" });
    }
    let Re$1 = "div", Le$1 = O.RenderStrategy | O.Static;
    function _e$1(e3, n2) {
      var E2, S2, A2, L2;
      let t2 = I$6(), { id: o2 = `headlessui-tabs-panel-${t2}`, tabIndex: s2 = 0, ...r2 } = e3, { selectedIndex: i2, tabs: R2, panels: b2 } = h$1("Tab.Panel"), c2 = q$2("Tab.Panel"), u2 = reactExports.useRef(null), T2 = y$4(u2, n2);
      l$6(() => c2.registerPanel(u2), [c2, u2]);
      let l2 = d$1("panels"), d2 = b2.indexOf(u2);
      d2 === -1 && (d2 = l2);
      let x2 = d2 === i2, m2 = reactExports.useMemo(() => ({ selected: x2 }), [x2]), g2 = { ref: T2, id: o2, role: "tabpanel", "aria-labelledby": (S2 = (E2 = R2[d2]) == null ? void 0 : E2.current) == null ? void 0 : S2.id, tabIndex: x2 ? s2 : -1 };
      return !x2 && ((A2 = r2.unmount) == null || A2) && !((L2 = r2.static) != null && L2) ? React$1.createElement(f$8, { as: "span", "aria-hidden": "true", ...g2 }) : C$2({ ourProps: g2, theirProps: r2, slot: m2, defaultTag: Re$1, features: Le$1, visible: x2, name: "Tabs.Panel" });
    }
    let Se$1 = U$3(ge), Ie = U$3(me), De$1 = U$3(ye$1), Fe$1 = U$3(Ae), he = U$3(_e$1), $e = Object.assign(Se$1, { Group: Ie, List: De$1, Panels: Fe$1, Panel: he });
    function l$1(r2) {
      let e3 = { called: false };
      return (...t2) => {
        if (!e3.called)
          return e3.called = true, r2(...t2);
      };
    }
    function g$1(t2, ...e3) {
      t2 && e3.length > 0 && t2.classList.add(...e3);
    }
    function v$1(t2, ...e3) {
      t2 && e3.length > 0 && t2.classList.remove(...e3);
    }
    function b$1(t2, e3) {
      let n2 = o$5();
      if (!t2)
        return n2.dispose;
      let { transitionDuration: m2, transitionDelay: a2 } = getComputedStyle(t2), [u2, p2] = [m2, a2].map((l2) => {
        let [r2 = 0] = l2.split(",").filter(Boolean).map((i2) => i2.includes("ms") ? parseFloat(i2) : parseFloat(i2) * 1e3).sort((i2, T2) => T2 - i2);
        return r2;
      }), o2 = u2 + p2;
      if (o2 !== 0) {
        n2.group((r2) => {
          r2.setTimeout(() => {
            e3(), r2.dispose();
          }, o2), r2.addEventListener(t2, "transitionrun", (i2) => {
            i2.target === i2.currentTarget && r2.dispose();
          });
        });
        let l2 = n2.addEventListener(t2, "transitionend", (r2) => {
          r2.target === r2.currentTarget && (e3(), l2());
        });
      } else
        e3();
      return n2.add(() => e3()), n2.dispose;
    }
    function M$1(t2, e3, n2, m2) {
      let a2 = n2 ? "enter" : "leave", u2 = o$5(), p2 = m2 !== void 0 ? l$1(m2) : () => {
      };
      a2 === "enter" && (t2.removeAttribute("hidden"), t2.style.display = "");
      let o2 = u$6(a2, { enter: () => e3.enter, leave: () => e3.leave }), l2 = u$6(a2, { enter: () => e3.enterTo, leave: () => e3.leaveTo }), r2 = u$6(a2, { enter: () => e3.enterFrom, leave: () => e3.leaveFrom });
      return v$1(t2, ...e3.base, ...e3.enter, ...e3.enterTo, ...e3.enterFrom, ...e3.leave, ...e3.leaveFrom, ...e3.leaveTo, ...e3.entered), g$1(t2, ...e3.base, ...o2, ...r2), u2.nextFrame(() => {
        v$1(t2, ...e3.base, ...o2, ...r2), g$1(t2, ...e3.base, ...o2, ...l2), b$1(t2, () => (v$1(t2, ...e3.base, ...o2), g$1(t2, ...e3.base, ...e3.entered), p2()));
      }), u2.dispose;
    }
    function D({ immediate: t2, container: s2, direction: n2, classes: u2, onStart: a2, onStop: c2 }) {
      let l2 = f$5(), d2 = p$4(), e3 = s$a(n2);
      l$6(() => {
        t2 && (e3.current = "enter");
      }, [t2]), l$6(() => {
        let r2 = o$5();
        d2.add(r2.dispose);
        let i2 = s2.current;
        if (i2 && e3.current !== "idle" && l2.current)
          return r2.dispose(), a2.current(e3.current), r2.add(M$1(i2, u2.current, e3.current === "enter", () => {
            r2.dispose(), c2.current(e3.current);
          })), r2.dispose;
      }, [n2]);
    }
    function S(t2 = "") {
      return t2.split(/\s+/).filter((n2) => n2.length > 1);
    }
    let I = reactExports.createContext(null);
    I.displayName = "TransitionContext";
    var Se = ((r2) => (r2.Visible = "visible", r2.Hidden = "hidden", r2))(Se || {});
    function ye() {
      let t2 = reactExports.useContext(I);
      if (t2 === null)
        throw new Error("A <Transition.Child /> is used but it is missing a parent <Transition /> or <Transition.Root />.");
      return t2;
    }
    function xe() {
      let t2 = reactExports.useContext(M);
      if (t2 === null)
        throw new Error("A <Transition.Child /> is used but it is missing a parent <Transition /> or <Transition.Root />.");
      return t2;
    }
    let M = reactExports.createContext(null);
    M.displayName = "NestingContext";
    function U(t2) {
      return "children" in t2 ? U(t2.children) : t2.current.filter(({ el: n2 }) => n2.current !== null).filter(({ state: n2 }) => n2 === "visible").length > 0;
    }
    function se(t2, n2) {
      let r2 = s$a(t2), s2 = reactExports.useRef([]), R2 = f$5(), D2 = p$4(), p2 = o$6((i2, e3 = v$2.Hidden) => {
        let a2 = s2.current.findIndex(({ el: o2 }) => o2 === i2);
        a2 !== -1 && (u$6(e3, { [v$2.Unmount]() {
          s2.current.splice(a2, 1);
        }, [v$2.Hidden]() {
          s2.current[a2].state = "hidden";
        } }), D2.microTask(() => {
          var o2;
          !U(s2) && R2.current && ((o2 = r2.current) == null || o2.call(r2));
        }));
      }), x2 = o$6((i2) => {
        let e3 = s2.current.find(({ el: a2 }) => a2 === i2);
        return e3 ? e3.state !== "visible" && (e3.state = "visible") : s2.current.push({ el: i2, state: "visible" }), () => p2(i2, v$2.Unmount);
      }), h2 = reactExports.useRef([]), v2 = reactExports.useRef(Promise.resolve()), u2 = reactExports.useRef({ enter: [], leave: [], idle: [] }), g2 = o$6((i2, e3, a2) => {
        h2.current.splice(0), n2 && (n2.chains.current[e3] = n2.chains.current[e3].filter(([o2]) => o2 !== i2)), n2 == null || n2.chains.current[e3].push([i2, new Promise((o2) => {
          h2.current.push(o2);
        })]), n2 == null || n2.chains.current[e3].push([i2, new Promise((o2) => {
          Promise.all(u2.current[e3].map(([f2, N2]) => N2)).then(() => o2());
        })]), e3 === "enter" ? v2.current = v2.current.then(() => n2 == null ? void 0 : n2.wait.current).then(() => a2(e3)) : a2(e3);
      }), d2 = o$6((i2, e3, a2) => {
        Promise.all(u2.current[e3].splice(0).map(([o2, f2]) => f2)).then(() => {
          var o2;
          (o2 = h2.current.shift()) == null || o2();
        }).then(() => a2(e3));
      });
      return reactExports.useMemo(() => ({ children: s2, register: x2, unregister: p2, onStart: g2, onStop: d2, wait: v2, chains: u2 }), [x2, p2, s2, g2, d2, u2, v2]);
    }
    function Ne() {
    }
    let Pe = ["beforeEnter", "afterEnter", "beforeLeave", "afterLeave"];
    function ae(t2) {
      var r2;
      let n2 = {};
      for (let s2 of Pe)
        n2[s2] = (r2 = t2[s2]) != null ? r2 : Ne;
      return n2;
    }
    function Re(t2) {
      let n2 = reactExports.useRef(ae(t2));
      return reactExports.useEffect(() => {
        n2.current = ae(t2);
      }, [t2]), n2;
    }
    let De = "div", le = O.RenderStrategy;
    function He(t2, n2) {
      var Q2, Y2;
      let { beforeEnter: r2, afterEnter: s2, beforeLeave: R2, afterLeave: D$12, enter: p2, enterFrom: x2, enterTo: h2, entered: v2, leave: u2, leaveFrom: g2, leaveTo: d2, ...i2 } = t2, e3 = reactExports.useRef(null), a2 = y$4(e3, n2), o2 = (Q2 = i2.unmount) == null || Q2 ? v$2.Unmount : v$2.Hidden, { show: f2, appear: N2, initial: T2 } = ye(), [l2, j2] = reactExports.useState(f2 ? "visible" : "hidden"), z2 = xe(), { register: L2, unregister: O2 } = z2;
      reactExports.useEffect(() => L2(e3), [L2, e3]), reactExports.useEffect(() => {
        if (o2 === v$2.Hidden && e3.current) {
          if (f2 && l2 !== "visible") {
            j2("visible");
            return;
          }
          return u$6(l2, { ["hidden"]: () => O2(e3), ["visible"]: () => L2(e3) });
        }
      }, [l2, e3, L2, O2, f2, o2]);
      let k2 = s$a({ base: S(i2.className), enter: S(p2), enterFrom: S(x2), enterTo: S(h2), entered: S(v2), leave: S(u2), leaveFrom: S(g2), leaveTo: S(d2) }), V2 = Re({ beforeEnter: r2, afterEnter: s2, beforeLeave: R2, afterLeave: D$12 }), G2 = l$5();
      reactExports.useEffect(() => {
        if (G2 && l2 === "visible" && e3.current === null)
          throw new Error("Did you forget to passthrough the `ref` to the actual DOM node?");
      }, [e3, l2, G2]);
      let Te2 = T2 && !N2, K2 = N2 && f2 && T2, de2 = /* @__PURE__ */ (() => !G2 || Te2 ? "idle" : f2 ? "enter" : "leave")(), H2 = c$2(0), fe2 = o$6((C2) => u$6(C2, { enter: () => {
        H2.addFlag(d$5.Opening), V2.current.beforeEnter();
      }, leave: () => {
        H2.addFlag(d$5.Closing), V2.current.beforeLeave();
      }, idle: () => {
      } })), me2 = o$6((C2) => u$6(C2, { enter: () => {
        H2.removeFlag(d$5.Opening), V2.current.afterEnter();
      }, leave: () => {
        H2.removeFlag(d$5.Closing), V2.current.afterLeave();
      }, idle: () => {
      } })), w2 = se(() => {
        j2("hidden"), O2(e3);
      }, z2), B2 = reactExports.useRef(false);
      D({ immediate: K2, container: e3, classes: k2, direction: de2, onStart: s$a((C2) => {
        B2.current = true, w2.onStart(e3, C2, fe2);
      }), onStop: s$a((C2) => {
        B2.current = false, w2.onStop(e3, C2, me2), C2 === "leave" && !U(w2) && (j2("hidden"), O2(e3));
      }) });
      let P2 = i2, ce2 = { ref: a2 };
      return K2 ? P2 = { ...P2, className: t$5(i2.className, ...k2.current.enter, ...k2.current.enterFrom) } : B2.current && (P2.className = t$5(i2.className, (Y2 = e3.current) == null ? void 0 : Y2.className), P2.className === "" && delete P2.className), React$1.createElement(M.Provider, { value: w2 }, React$1.createElement(s$6, { value: u$6(l2, { ["visible"]: d$5.Open, ["hidden"]: d$5.Closed }) | H2.flags }, C$2({ ourProps: ce2, theirProps: P2, defaultTag: De, features: le, visible: l2 === "visible", name: "Transition.Child" })));
    }
    function Fe(t2, n2) {
      let { show: r2, appear: s2 = false, unmount: R2 = true, ...D2 } = t2, p2 = reactExports.useRef(null), x2 = y$4(p2, n2);
      l$5();
      let h2 = u$3();
      if (r2 === void 0 && h2 !== null && (r2 = (h2 & d$5.Open) === d$5.Open), ![true, false].includes(r2))
        throw new Error("A <Transition /> is used but it is missing a `show={true | false}` prop.");
      let [v2, u2] = reactExports.useState(r2 ? "visible" : "hidden"), g2 = se(() => {
        u2("hidden");
      }), [d2, i2] = reactExports.useState(true), e3 = reactExports.useRef([r2]);
      l$6(() => {
        d2 !== false && e3.current[e3.current.length - 1] !== r2 && (e3.current.push(r2), i2(false));
      }, [e3, r2]);
      let a2 = reactExports.useMemo(() => ({ show: r2, appear: s2, initial: d2 }), [r2, s2, d2]);
      reactExports.useEffect(() => {
        if (r2)
          u2("visible");
        else if (!U(g2))
          u2("hidden");
        else {
          let T2 = p2.current;
          if (!T2)
            return;
          let l2 = T2.getBoundingClientRect();
          l2.x === 0 && l2.y === 0 && l2.width === 0 && l2.height === 0 && u2("hidden");
        }
      }, [r2, g2]);
      let o2 = { unmount: R2 }, f2 = o$6(() => {
        var T2;
        d2 && i2(false), (T2 = t2.beforeEnter) == null || T2.call(t2);
      }), N2 = o$6(() => {
        var T2;
        d2 && i2(false), (T2 = t2.beforeLeave) == null || T2.call(t2);
      });
      return React$1.createElement(M.Provider, { value: g2 }, React$1.createElement(I.Provider, { value: a2 }, C$2({ ourProps: { ...o2, as: reactExports.Fragment, children: React$1.createElement(ue, { ref: x2, ...o2, ...D2, beforeEnter: f2, beforeLeave: N2 }) }, theirProps: {}, defaultTag: reactExports.Fragment, features: le, visible: v2 === "visible", name: "Transition" })));
    }
    function _e(t2, n2) {
      let r2 = reactExports.useContext(I) !== null, s2 = u$3() !== null;
      return React$1.createElement(React$1.Fragment, null, !r2 && s2 ? React$1.createElement(q$1, { ref: n2, ...t2 }) : React$1.createElement(ue, { ref: n2, ...t2 }));
    }
    let q$1 = U$3(Fe), ue = U$3(He), Le = U$3(_e), qe = Object.assign(q$1, { Child: Le, Root: q$1 });
    function r$1(e3) {
      var t2, f2, n2 = "";
      if ("string" == typeof e3 || "number" == typeof e3)
        n2 += e3;
      else if ("object" == typeof e3)
        if (Array.isArray(e3)) {
          var o2 = e3.length;
          for (t2 = 0; t2 < o2; t2++)
            e3[t2] && (f2 = r$1(e3[t2])) && (n2 && (n2 += " "), n2 += f2);
        } else
          for (f2 in e3)
            e3[f2] && (n2 && (n2 += " "), n2 += f2);
      return n2;
    }
    function clsx() {
      for (var e3, t2, f2 = 0, n2 = "", o2 = arguments.length; f2 < o2; f2++)
        (e3 = arguments[f2]) && (t2 = r$1(e3)) && (n2 && (n2 += " "), n2 += t2);
      return n2;
    }
    var DefaultContext = {
      color: void 0,
      size: void 0,
      className: void 0,
      style: void 0,
      attr: void 0
    };
    var IconContext = React$1.createContext && /* @__PURE__ */ React$1.createContext(DefaultContext);
    var _excluded$h = ["attr", "size", "title"];
    function _objectWithoutProperties$h(source, excluded) {
      if (source == null)
        return {};
      var target = _objectWithoutPropertiesLoose$h(source, excluded);
      var key, i2;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i2 = 0; i2 < sourceSymbolKeys.length; i2++) {
          key = sourceSymbolKeys[i2];
          if (excluded.indexOf(key) >= 0)
            continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key))
            continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose$h(source, excluded) {
      if (source == null)
        return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i2;
      for (i2 = 0; i2 < sourceKeys.length; i2++) {
        key = sourceKeys[i2];
        if (excluded.indexOf(key) >= 0)
          continue;
        target[key] = source[key];
      }
      return target;
    }
    function _extends$q() {
      _extends$q = Object.assign ? Object.assign.bind() : function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends$q.apply(this, arguments);
    }
    function ownKeys$z(e3, r2) {
      var t2 = Object.keys(e3);
      if (Object.getOwnPropertySymbols) {
        var o2 = Object.getOwnPropertySymbols(e3);
        r2 && (o2 = o2.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e3, r3).enumerable;
        })), t2.push.apply(t2, o2);
      }
      return t2;
    }
    function _objectSpread$z(e3) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t2 = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$z(Object(t2), true).forEach(function(r3) {
          _defineProperty$C(e3, r3, t2[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$z(Object(t2)).forEach(function(r3) {
          Object.defineProperty(e3, r3, Object.getOwnPropertyDescriptor(t2, r3));
        });
      }
      return e3;
    }
    function _defineProperty$C(obj, key, value2) {
      key = _toPropertyKey$C(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value: value2, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value2;
      }
      return obj;
    }
    function _toPropertyKey$C(arg) {
      var key = _toPrimitive$C(arg, "string");
      return typeof key === "symbol" ? key : String(key);
    }
    function _toPrimitive$C(input, hint) {
      if (typeof input !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (typeof res !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    function Tree2Element(tree) {
      return tree && tree.map((node, i2) => /* @__PURE__ */ React$1.createElement(node.tag, _objectSpread$z({
        key: i2
      }, node.attr), Tree2Element(node.child)));
    }
    function GenIcon(data) {
      return (props) => /* @__PURE__ */ React$1.createElement(IconBase, _extends$q({
        attr: _objectSpread$z({}, data.attr)
      }, props), Tree2Element(data.child));
    }
    function IconBase(props) {
      var elem = (conf) => {
        var {
          attr,
          size,
          title
        } = props, svgProps = _objectWithoutProperties$h(props, _excluded$h);
        var computedSize = size || conf.size || "1em";
        var className;
        if (conf.className)
          className = conf.className;
        if (props.className)
          className = (className ? className + " " : "") + props.className;
        return /* @__PURE__ */ React$1.createElement("svg", _extends$q({
          stroke: "currentColor",
          fill: "currentColor",
          strokeWidth: "0"
        }, conf.attr, attr, svgProps, {
          className,
          style: _objectSpread$z(_objectSpread$z({
            color: props.color || conf.color
          }, conf.style), props.style),
          height: computedSize,
          width: computedSize,
          xmlns: "http://www.w3.org/2000/svg"
        }), title && /* @__PURE__ */ React$1.createElement("title", null, title), props.children);
      };
      return IconContext !== void 0 ? /* @__PURE__ */ React$1.createElement(IconContext.Consumer, null, (conf) => elem(conf)) : elem(DefaultContext);
    }
    function IoClose(props) {
      return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 512 512" }, "child": [{ "tag": "path", "attr": { "d": "m289.94 256 95-95A24 24 0 0 0 351 127l-95 95-95-95a24 24 0 0 0-34 34l95 95-95 95a24 24 0 1 0 34 34l95-95 95 95a24 24 0 0 0 34-34z" }, "child": [] }] })(props);
    }
    function IoLogOutOutline(props) {
      return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 512 512" }, "child": [{ "tag": "path", "attr": { "fill": "none", "strokeLinecap": "round", "strokeLinejoin": "round", "strokeWidth": "32", "d": "M304 336v40a40 40 0 0 1-40 40H104a40 40 0 0 1-40-40V136a40 40 0 0 1 40-40h152c22.09 0 48 17.91 48 40v40m64 160 80-80-80-80m-192 80h256" }, "child": [] }] })(props);
    }
    function lt(c2, { insertAt: a2 } = {}) {
      if (!c2 || typeof document == "undefined")
        return;
      let t2 = document.head || document.getElementsByTagName("head")[0], s2 = document.createElement("style");
      s2.type = "text/css", a2 === "top" && t2.firstChild ? t2.insertBefore(s2, t2.firstChild) : t2.appendChild(s2), s2.styleSheet ? s2.styleSheet.cssText = c2 : s2.appendChild(document.createTextNode(c2));
    }
    lt(`html[dir=ltr],[data-sonner-toaster][dir=ltr]{--toast-icon-margin-start: -3px;--toast-icon-margin-end: 4px;--toast-svg-margin-start: -1px;--toast-svg-margin-end: 0px;--toast-button-margin-start: auto;--toast-button-margin-end: 0;--toast-close-button-start: 0;--toast-close-button-end: unset;--toast-close-button-transform: translate(-35%, -35%)}html[dir=rtl],[data-sonner-toaster][dir=rtl]{--toast-icon-margin-start: 4px;--toast-icon-margin-end: -3px;--toast-svg-margin-start: 0px;--toast-svg-margin-end: -1px;--toast-button-margin-start: 0;--toast-button-margin-end: auto;--toast-close-button-start: unset;--toast-close-button-end: 0;--toast-close-button-transform: translate(35%, -35%)}[data-sonner-toaster]{position:fixed;width:var(--width);font-family:ui-sans-serif,system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica Neue,Arial,Noto Sans,sans-serif,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol,Noto Color Emoji;--gray1: hsl(0, 0%, 99%);--gray2: hsl(0, 0%, 97.3%);--gray3: hsl(0, 0%, 95.1%);--gray4: hsl(0, 0%, 93%);--gray5: hsl(0, 0%, 90.9%);--gray6: hsl(0, 0%, 88.7%);--gray7: hsl(0, 0%, 85.8%);--gray8: hsl(0, 0%, 78%);--gray9: hsl(0, 0%, 56.1%);--gray10: hsl(0, 0%, 52.3%);--gray11: hsl(0, 0%, 43.5%);--gray12: hsl(0, 0%, 9%);--border-radius: 8px;box-sizing:border-box;padding:0;margin:0;list-style:none;outline:none;z-index:999999999}[data-sonner-toaster][data-x-position=right]{right:max(var(--offset),env(safe-area-inset-right))}[data-sonner-toaster][data-x-position=left]{left:max(var(--offset),env(safe-area-inset-left))}[data-sonner-toaster][data-x-position=center]{left:50%;transform:translate(-50%)}[data-sonner-toaster][data-y-position=top]{top:max(var(--offset),env(safe-area-inset-top))}[data-sonner-toaster][data-y-position=bottom]{bottom:max(var(--offset),env(safe-area-inset-bottom))}[data-sonner-toast]{--y: translateY(100%);--lift-amount: calc(var(--lift) * var(--gap));z-index:var(--z-index);position:absolute;opacity:0;transform:var(--y);touch-action:none;will-change:transform,opacity,height;transition:transform .4s,opacity .4s,height .4s,box-shadow .2s;box-sizing:border-box;outline:none;overflow-wrap:anywhere}[data-sonner-toast][data-styled=true]{padding:16px;background:var(--normal-bg);border:1px solid var(--normal-border);color:var(--normal-text);border-radius:var(--border-radius);box-shadow:0 4px 12px #0000001a;width:var(--width);font-size:13px;display:flex;align-items:center;gap:6px}[data-sonner-toast]:focus-visible{box-shadow:0 4px 12px #0000001a,0 0 0 2px #0003}[data-sonner-toast][data-y-position=top]{top:0;--y: translateY(-100%);--lift: 1;--lift-amount: calc(1 * var(--gap))}[data-sonner-toast][data-y-position=bottom]{bottom:0;--y: translateY(100%);--lift: -1;--lift-amount: calc(var(--lift) * var(--gap))}[data-sonner-toast] [data-description]{font-weight:400;line-height:1.4;color:inherit}[data-sonner-toast] [data-title]{font-weight:500;line-height:1.5;color:inherit}[data-sonner-toast] [data-icon]{display:flex;height:16px;width:16px;position:relative;justify-content:flex-start;align-items:center;flex-shrink:0;margin-left:var(--toast-icon-margin-start);margin-right:var(--toast-icon-margin-end)}[data-sonner-toast][data-promise=true] [data-icon]>svg{opacity:0;transform:scale(.8);transform-origin:center;animation:sonner-fade-in .3s ease forwards}[data-sonner-toast] [data-icon]>*{flex-shrink:0}[data-sonner-toast] [data-icon] svg{margin-left:var(--toast-svg-margin-start);margin-right:var(--toast-svg-margin-end)}[data-sonner-toast] [data-content]{display:flex;flex-direction:column;gap:2px}[data-sonner-toast] [data-button]{border-radius:4px;padding-left:8px;padding-right:8px;height:24px;font-size:12px;color:var(--normal-bg);background:var(--normal-text);margin-left:var(--toast-button-margin-start);margin-right:var(--toast-button-margin-end);border:none;cursor:pointer;outline:none;display:flex;align-items:center;flex-shrink:0;transition:opacity .4s,box-shadow .2s}[data-sonner-toast] [data-button]:focus-visible{box-shadow:0 0 0 2px #0006}[data-sonner-toast] [data-button]:first-of-type{margin-left:var(--toast-button-margin-start);margin-right:var(--toast-button-margin-end)}[data-sonner-toast] [data-cancel]{color:var(--normal-text);background:rgba(0,0,0,.08)}[data-sonner-toast][data-theme=dark] [data-cancel]{background:rgba(255,255,255,.3)}[data-sonner-toast] [data-close-button]{position:absolute;left:var(--toast-close-button-start);right:var(--toast-close-button-end);top:0;height:20px;width:20px;display:flex;justify-content:center;align-items:center;padding:0;background:var(--gray1);color:var(--gray12);border:1px solid var(--gray4);transform:var(--toast-close-button-transform);border-radius:50%;cursor:pointer;z-index:1;transition:opacity .1s,background .2s,border-color .2s}[data-sonner-toast] [data-close-button]:focus-visible{box-shadow:0 4px 12px #0000001a,0 0 0 2px #0003}[data-sonner-toast] [data-disabled=true]{cursor:not-allowed}[data-sonner-toast]:hover [data-close-button]:hover{background:var(--gray2);border-color:var(--gray5)}[data-sonner-toast][data-swiping=true]:before{content:"";position:absolute;left:0;right:0;height:100%;z-index:-1}[data-sonner-toast][data-y-position=top][data-swiping=true]:before{bottom:50%;transform:scaleY(3) translateY(50%)}[data-sonner-toast][data-y-position=bottom][data-swiping=true]:before{top:50%;transform:scaleY(3) translateY(-50%)}[data-sonner-toast][data-swiping=false][data-removed=true]:before{content:"";position:absolute;inset:0;transform:scaleY(2)}[data-sonner-toast]:after{content:"";position:absolute;left:0;height:calc(var(--gap) + 1px);bottom:100%;width:100%}[data-sonner-toast][data-mounted=true]{--y: translateY(0);opacity:1}[data-sonner-toast][data-expanded=false][data-front=false]{--scale: var(--toasts-before) * .05 + 1;--y: translateY(calc(var(--lift-amount) * var(--toasts-before))) scale(calc(-1 * var(--scale)));height:var(--front-toast-height)}[data-sonner-toast]>*{transition:opacity .4s}[data-sonner-toast][data-expanded=false][data-front=false][data-styled=true]>*{opacity:0}[data-sonner-toast][data-visible=false]{opacity:0;pointer-events:none}[data-sonner-toast][data-mounted=true][data-expanded=true]{--y: translateY(calc(var(--lift) * var(--offset)));height:var(--initial-height)}[data-sonner-toast][data-removed=true][data-front=true][data-swipe-out=false]{--y: translateY(calc(var(--lift) * -100%));opacity:0}[data-sonner-toast][data-removed=true][data-front=false][data-swipe-out=false][data-expanded=true]{--y: translateY(calc(var(--lift) * var(--offset) + var(--lift) * -100%));opacity:0}[data-sonner-toast][data-removed=true][data-front=false][data-swipe-out=false][data-expanded=false]{--y: translateY(40%);opacity:0;transition:transform .5s,opacity .2s}[data-sonner-toast][data-removed=true][data-front=false]:before{height:calc(var(--initial-height) + 20%)}[data-sonner-toast][data-swiping=true]{transform:var(--y) translateY(var(--swipe-amount, 0px));transition:none}[data-sonner-toast][data-swipe-out=true][data-y-position=bottom],[data-sonner-toast][data-swipe-out=true][data-y-position=top]{animation:swipe-out .2s ease-out forwards}@keyframes swipe-out{0%{transform:translateY(calc(var(--lift) * var(--offset) + var(--swipe-amount)));opacity:1}to{transform:translateY(calc(var(--lift) * var(--offset) + var(--swipe-amount) + var(--lift) * -100%));opacity:0}}@media (max-width: 600px){[data-sonner-toaster]{position:fixed;--mobile-offset: 16px;right:var(--mobile-offset);left:var(--mobile-offset);width:100%}[data-sonner-toaster] [data-sonner-toast]{left:0;right:0;width:calc(100% - 32px)}[data-sonner-toaster][data-x-position=left]{left:var(--mobile-offset)}[data-sonner-toaster][data-y-position=bottom]{bottom:20px}[data-sonner-toaster][data-y-position=top]{top:20px}[data-sonner-toaster][data-x-position=center]{left:var(--mobile-offset);right:var(--mobile-offset);transform:none}}[data-sonner-toaster][data-theme=light]{--normal-bg: #fff;--normal-border: var(--gray4);--normal-text: var(--gray12);--success-bg: hsl(143, 85%, 96%);--success-border: hsl(145, 92%, 91%);--success-text: hsl(140, 100%, 27%);--info-bg: hsl(208, 100%, 97%);--info-border: hsl(221, 91%, 91%);--info-text: hsl(210, 92%, 45%);--warning-bg: hsl(49, 100%, 97%);--warning-border: hsl(49, 91%, 91%);--warning-text: hsl(31, 92%, 45%);--error-bg: hsl(359, 100%, 97%);--error-border: hsl(359, 100%, 94%);--error-text: hsl(360, 100%, 45%)}[data-sonner-toaster][data-theme=light] [data-sonner-toast][data-invert=true]{--normal-bg: #000;--normal-border: hsl(0, 0%, 20%);--normal-text: var(--gray1)}[data-sonner-toaster][data-theme=dark] [data-sonner-toast][data-invert=true]{--normal-bg: #fff;--normal-border: var(--gray3);--normal-text: var(--gray12)}[data-sonner-toaster][data-theme=dark]{--normal-bg: #000;--normal-border: hsl(0, 0%, 20%);--normal-text: var(--gray1);--success-bg: hsl(150, 100%, 6%);--success-border: hsl(147, 100%, 12%);--success-text: hsl(150, 86%, 65%);--info-bg: hsl(215, 100%, 6%);--info-border: hsl(223, 100%, 12%);--info-text: hsl(216, 87%, 65%);--warning-bg: hsl(64, 100%, 6%);--warning-border: hsl(60, 100%, 12%);--warning-text: hsl(46, 87%, 65%);--error-bg: hsl(358, 76%, 10%);--error-border: hsl(357, 89%, 16%);--error-text: hsl(358, 100%, 81%)}[data-rich-colors=true] [data-sonner-toast][data-type=success],[data-rich-colors=true] [data-sonner-toast][data-type=success] [data-close-button]{background:var(--success-bg);border-color:var(--success-border);color:var(--success-text)}[data-rich-colors=true] [data-sonner-toast][data-type=info],[data-rich-colors=true] [data-sonner-toast][data-type=info] [data-close-button]{background:var(--info-bg);border-color:var(--info-border);color:var(--info-text)}[data-rich-colors=true] [data-sonner-toast][data-type=warning],[data-rich-colors=true] [data-sonner-toast][data-type=warning] [data-close-button]{background:var(--warning-bg);border-color:var(--warning-border);color:var(--warning-text)}[data-rich-colors=true] [data-sonner-toast][data-type=error],[data-rich-colors=true] [data-sonner-toast][data-type=error] [data-close-button]{background:var(--error-bg);border-color:var(--error-border);color:var(--error-text)}.sonner-loading-wrapper{--size: 16px;height:var(--size);width:var(--size);position:absolute;inset:0;z-index:10}.sonner-loading-wrapper[data-visible=false]{transform-origin:center;animation:sonner-fade-out .2s ease forwards}.sonner-spinner{position:relative;top:50%;left:50%;height:var(--size);width:var(--size)}.sonner-loading-bar{animation:sonner-spin 1.2s linear infinite;background:var(--gray11);border-radius:6px;height:8%;left:-10%;position:absolute;top:-3.9%;width:24%}.sonner-loading-bar:nth-child(1){animation-delay:-1.2s;transform:rotate(.0001deg) translate(146%)}.sonner-loading-bar:nth-child(2){animation-delay:-1.1s;transform:rotate(30deg) translate(146%)}.sonner-loading-bar:nth-child(3){animation-delay:-1s;transform:rotate(60deg) translate(146%)}.sonner-loading-bar:nth-child(4){animation-delay:-.9s;transform:rotate(90deg) translate(146%)}.sonner-loading-bar:nth-child(5){animation-delay:-.8s;transform:rotate(120deg) translate(146%)}.sonner-loading-bar:nth-child(6){animation-delay:-.7s;transform:rotate(150deg) translate(146%)}.sonner-loading-bar:nth-child(7){animation-delay:-.6s;transform:rotate(180deg) translate(146%)}.sonner-loading-bar:nth-child(8){animation-delay:-.5s;transform:rotate(210deg) translate(146%)}.sonner-loading-bar:nth-child(9){animation-delay:-.4s;transform:rotate(240deg) translate(146%)}.sonner-loading-bar:nth-child(10){animation-delay:-.3s;transform:rotate(270deg) translate(146%)}.sonner-loading-bar:nth-child(11){animation-delay:-.2s;transform:rotate(300deg) translate(146%)}.sonner-loading-bar:nth-child(12){animation-delay:-.1s;transform:rotate(330deg) translate(146%)}@keyframes sonner-fade-in{0%{opacity:0;transform:scale(.8)}to{opacity:1;transform:scale(1)}}@keyframes sonner-fade-out{0%{opacity:1;transform:scale(1)}to{opacity:0;transform:scale(.8)}}@keyframes sonner-spin{0%{opacity:1}to{opacity:.15}}@media (prefers-reduced-motion){[data-sonner-toast],[data-sonner-toast]>*,.sonner-loading-bar{transition:none!important;animation:none!important}}.sonner-loader{position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);transform-origin:center;transition:opacity .2s,transform .2s}.sonner-loader[data-visible=false]{opacity:0;transform:scale(.8) translate(-50%,-50%)}
`);
    var St = (c2) => {
      switch (c2) {
        case "success":
          return zt;
        case "info":
          return Yt;
        case "warning":
          return At;
        case "error":
          return jt;
        default:
          return null;
      }
    }, Lt = Array(12).fill(0), kt = ({ visible: c2 }) => React$1.createElement("div", { className: "sonner-loading-wrapper", "data-visible": c2 }, React$1.createElement("div", { className: "sonner-spinner" }, Lt.map((a2, t2) => React$1.createElement("div", { className: "sonner-loading-bar", key: `spinner-bar-${t2}` })))), zt = React$1.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 20 20", fill: "currentColor", height: "20", width: "20" }, React$1.createElement("path", { fillRule: "evenodd", d: "M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z", clipRule: "evenodd" })), At = React$1.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", fill: "currentColor", height: "20", width: "20" }, React$1.createElement("path", { fillRule: "evenodd", d: "M9.401 3.003c1.155-2 4.043-2 5.197 0l7.355 12.748c1.154 2-.29 4.5-2.599 4.5H4.645c-2.309 0-3.752-2.5-2.598-4.5L9.4 3.003zM12 8.25a.75.75 0 01.75.75v3.75a.75.75 0 01-1.5 0V9a.75.75 0 01.75-.75zm0 8.25a.75.75 0 100-1.5.75.75 0 000 1.5z", clipRule: "evenodd" })), Yt = React$1.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 20 20", fill: "currentColor", height: "20", width: "20" }, React$1.createElement("path", { fillRule: "evenodd", d: "M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a.75.75 0 000 1.5h.253a.25.25 0 01.244.304l-.459 2.066A1.75 1.75 0 0010.747 15H11a.75.75 0 000-1.5h-.253a.25.25 0 01-.244-.304l.459-2.066A1.75 1.75 0 009.253 9H9z", clipRule: "evenodd" })), jt = React$1.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 20 20", fill: "currentColor", height: "20", width: "20" }, React$1.createElement("path", { fillRule: "evenodd", d: "M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-8-5a.75.75 0 01.75.75v4.5a.75.75 0 01-1.5 0v-4.5A.75.75 0 0110 5zm0 10a1 1 0 100-2 1 1 0 000 2z", clipRule: "evenodd" }));
    var Bt = () => {
      let [c2, a2] = React$1.useState(false);
      return React$1.useEffect(() => {
        let t2 = () => {
          a2(document.hidden);
        };
        return document.addEventListener("visibilitychange", t2), () => window.removeEventListener("visibilitychange", t2);
      }, []), c2;
    };
    var dt = 1, ct = class {
      constructor() {
        this.subscribe = (a2) => (this.subscribers.push(a2), () => {
          let t2 = this.subscribers.indexOf(a2);
          this.subscribers.splice(t2, 1);
        });
        this.publish = (a2) => {
          this.subscribers.forEach((t2) => t2(a2));
        };
        this.addToast = (a2) => {
          this.publish(a2), this.toasts = [...this.toasts, a2];
        };
        this.create = (a2) => {
          var m2;
          let { message: t2, ...s2 } = a2, y2 = typeof (a2 == null ? void 0 : a2.id) == "number" || ((m2 = a2.id) == null ? void 0 : m2.length) > 0 ? a2.id : dt++, g2 = this.toasts.find((r2) => r2.id === y2), f2 = a2.dismissible === void 0 ? true : a2.dismissible;
          return g2 ? this.toasts = this.toasts.map((r2) => r2.id === y2 ? (this.publish({ ...r2, ...a2, id: y2, title: t2 }), { ...r2, ...a2, id: y2, dismissible: f2, title: t2 }) : r2) : this.addToast({ title: t2, ...s2, dismissible: f2, id: y2 }), y2;
        };
        this.dismiss = (a2) => (a2 || this.toasts.forEach((t2) => {
          this.subscribers.forEach((s2) => s2({ id: t2.id, dismiss: true }));
        }), this.subscribers.forEach((t2) => t2({ id: a2, dismiss: true })), a2);
        this.message = (a2, t2) => this.create({ ...t2, message: a2 });
        this.error = (a2, t2) => this.create({ ...t2, message: a2, type: "error" });
        this.success = (a2, t2) => this.create({ ...t2, type: "success", message: a2 });
        this.info = (a2, t2) => this.create({ ...t2, type: "info", message: a2 });
        this.warning = (a2, t2) => this.create({ ...t2, type: "warning", message: a2 });
        this.loading = (a2, t2) => this.create({ ...t2, type: "loading", message: a2 });
        this.promise = (a2, t2) => {
          if (!t2)
            return;
          let s2;
          t2.loading !== void 0 && (s2 = this.create({ ...t2, promise: a2, type: "loading", message: t2.loading, description: typeof t2.description != "function" ? t2.description : void 0 }));
          let y2 = a2 instanceof Promise ? a2 : a2(), g2 = s2 !== void 0;
          return y2.then((f2) => {
            if (f2 && typeof f2.ok == "boolean" && !f2.ok) {
              g2 = false;
              let m2 = typeof t2.error == "function" ? t2.error(`HTTP error! status: ${f2.status}`) : t2.error, r2 = typeof t2.description == "function" ? t2.description(`HTTP error! status: ${f2.status}`) : t2.description;
              this.create({ id: s2, type: "error", message: m2, description: r2 });
            } else if (t2.success !== void 0) {
              g2 = false;
              let m2 = typeof t2.success == "function" ? t2.success(f2) : t2.success, r2 = typeof t2.description == "function" ? t2.description(f2) : t2.description;
              this.create({ id: s2, type: "success", message: m2, description: r2 });
            }
          }).catch((f2) => {
            if (t2.error !== void 0) {
              g2 = false;
              let m2 = typeof t2.error == "function" ? t2.error(f2) : t2.error, r2 = typeof t2.description == "function" ? t2.description(f2) : t2.description;
              this.create({ id: s2, type: "error", message: m2, description: r2 });
            }
          }).finally(() => {
            var f2;
            g2 && (this.dismiss(s2), s2 = void 0), (f2 = t2.finally) == null || f2.call(t2);
          }), s2;
        };
        this.custom = (a2, t2) => {
          let s2 = (t2 == null ? void 0 : t2.id) || dt++;
          return this.create({ jsx: a2(s2), id: s2, ...t2 }), s2;
        };
        this.subscribers = [], this.toasts = [];
      }
    }, T = new ct(), Ft = (c2, a2) => {
      let t2 = (a2 == null ? void 0 : a2.id) || dt++;
      return T.addToast({ title: c2, ...a2, id: t2 }), t2;
    }, $t = Ft, Ut = Object.assign($t, { success: T.success, info: T.info, warning: T.warning, error: T.error, custom: T.custom, message: T.message, promise: T.promise, dismiss: T.dismiss, loading: T.loading });
    var _t = 3, Vt = "32px", Kt = 4e3, Xt = 356, Nt = 14, Jt = 20, Gt = 200;
    function j(...c2) {
      return c2.filter(Boolean).join(" ");
    }
    var qt = (c2) => {
      var ht, bt, yt, vt, xt, Tt, wt;
      let { invert: a2, toast: t2, unstyled: s2, interacting: y2, setHeights: g2, visibleToasts: f2, heights: m2, index: r2, toasts: Z2, expanded: F2, removeToast: _2, closeButton: V2, style: n2, cancelButtonStyle: K2, actionButtonStyle: tt2, className: et2 = "", descriptionClassName: at = "", duration: X2, position: B2, gap: $2 = Nt, loadingIcon: J2, expandByDefault: z2, classNames: l2, closeButtonAriaLabel: ot2 = "Close toast", pauseWhenPageIsHidden: M2 } = c2, [H2, G2] = React$1.useState(false), [q2, R2] = React$1.useState(false), [P2, O2] = React$1.useState(false), [S2, L2] = React$1.useState(false), [st, i2] = React$1.useState(0), [p2, h2] = React$1.useState(0), N2 = React$1.useRef(null), x2 = React$1.useRef(null), u2 = r2 === 0, U2 = r2 + 1 <= f2, v2 = t2.type, D2 = t2.dismissible !== false, W2 = t2.className || "", Dt = t2.descriptionClassName || "", Q2 = React$1.useMemo(() => m2.findIndex((o2) => o2.toastId === t2.id) || 0, [m2, t2.id]), Pt = React$1.useMemo(() => {
        var o2;
        return (o2 = t2.closeButton) != null ? o2 : V2;
      }, [t2.closeButton, V2]), ut = React$1.useMemo(() => t2.duration || X2 || Kt, [t2.duration, X2]), nt2 = React$1.useRef(0), A2 = React$1.useRef(0), ft = React$1.useRef(0), Y2 = React$1.useRef(null), [mt, Ct2] = B2.split("-"), pt = React$1.useMemo(() => m2.reduce((o2, d2, b2) => b2 >= Q2 ? o2 : o2 + d2.height, 0), [m2, Q2]), gt = Bt(), Ht = t2.invert || a2, rt2 = v2 === "loading";
      A2.current = React$1.useMemo(() => Q2 * $2 + pt, [Q2, pt]), React$1.useEffect(() => {
        G2(true);
      }, []), React$1.useLayoutEffect(() => {
        if (!H2)
          return;
        let o2 = x2.current, d2 = o2.style.height;
        o2.style.height = "auto";
        let b2 = o2.getBoundingClientRect().height;
        o2.style.height = d2, h2(b2), g2((k2) => k2.find((w2) => w2.toastId === t2.id) ? k2.map((w2) => w2.toastId === t2.id ? { ...w2, height: b2 } : w2) : [{ toastId: t2.id, height: b2, position: t2.position }, ...k2]);
      }, [H2, t2.title, t2.description, g2, t2.id]);
      let C2 = React$1.useCallback(() => {
        R2(true), i2(A2.current), g2((o2) => o2.filter((d2) => d2.toastId !== t2.id)), setTimeout(() => {
          _2(t2);
        }, Gt);
      }, [t2, _2, g2, A2]);
      React$1.useEffect(() => {
        if (t2.promise && v2 === "loading" || t2.duration === 1 / 0 || t2.type === "loading")
          return;
        let o2, d2 = ut;
        return F2 || y2 || M2 && gt ? (() => {
          if (ft.current < nt2.current) {
            let I2 = (/* @__PURE__ */ new Date()).getTime() - nt2.current;
            d2 = d2 - I2;
          }
          ft.current = (/* @__PURE__ */ new Date()).getTime();
        })() : (() => {
          nt2.current = (/* @__PURE__ */ new Date()).getTime(), o2 = setTimeout(() => {
            var I2;
            (I2 = t2.onAutoClose) == null || I2.call(t2, t2), C2();
          }, d2);
        })(), () => clearTimeout(o2);
      }, [F2, y2, z2, t2, ut, C2, t2.promise, v2, M2, gt]), React$1.useEffect(() => {
        let o2 = x2.current;
        if (o2) {
          let d2 = o2.getBoundingClientRect().height;
          return h2(d2), g2((b2) => [{ toastId: t2.id, height: d2, position: t2.position }, ...b2]), () => g2((b2) => b2.filter((k2) => k2.toastId !== t2.id));
        }
      }, [g2, t2.id]), React$1.useEffect(() => {
        t2.delete && C2();
      }, [C2, t2.delete]);
      function Rt() {
        return J2 ? React$1.createElement("div", { className: "sonner-loader", "data-visible": v2 === "loading" }, J2) : React$1.createElement(kt, { visible: v2 === "loading" });
      }
      return React$1.createElement("li", { "aria-live": t2.important ? "assertive" : "polite", "aria-atomic": "true", role: "status", tabIndex: 0, ref: x2, className: j(et2, W2, l2 == null ? void 0 : l2.toast, (ht = t2 == null ? void 0 : t2.classNames) == null ? void 0 : ht.toast, l2 == null ? void 0 : l2[v2], (bt = t2 == null ? void 0 : t2.classNames) == null ? void 0 : bt[v2]), "data-sonner-toast": "", "data-styled": !(t2.jsx || t2.unstyled || s2), "data-mounted": H2, "data-promise": !!t2.promise, "data-removed": q2, "data-visible": U2, "data-y-position": mt, "data-x-position": Ct2, "data-index": r2, "data-front": u2, "data-swiping": P2, "data-dismissible": D2, "data-type": v2, "data-invert": Ht, "data-swipe-out": S2, "data-expanded": !!(F2 || z2 && H2), style: { "--index": r2, "--toasts-before": r2, "--z-index": Z2.length - r2, "--offset": `${q2 ? st : A2.current}px`, "--initial-height": z2 ? "auto" : `${p2}px`, ...n2, ...t2.style }, onPointerDown: (o2) => {
        rt2 || !D2 || (N2.current = /* @__PURE__ */ new Date(), i2(A2.current), o2.target.setPointerCapture(o2.pointerId), o2.target.tagName !== "BUTTON" && (O2(true), Y2.current = { x: o2.clientX, y: o2.clientY }));
      }, onPointerUp: () => {
        var k2, I2, w2, it2;
        if (S2 || !D2)
          return;
        Y2.current = null;
        let o2 = Number(((k2 = x2.current) == null ? void 0 : k2.style.getPropertyValue("--swipe-amount").replace("px", "")) || 0), d2 = (/* @__PURE__ */ new Date()).getTime() - ((I2 = N2.current) == null ? void 0 : I2.getTime()), b2 = Math.abs(o2) / d2;
        if (Math.abs(o2) >= Jt || b2 > 0.11) {
          i2(A2.current), (w2 = t2.onDismiss) == null || w2.call(t2, t2), C2(), L2(true);
          return;
        }
        (it2 = x2.current) == null || it2.style.setProperty("--swipe-amount", "0px"), O2(false);
      }, onPointerMove: (o2) => {
        var Et;
        if (!Y2.current || !D2)
          return;
        let d2 = o2.clientY - Y2.current.y, b2 = o2.clientX - Y2.current.x, I2 = (mt === "top" ? Math.min : Math.max)(0, d2), w2 = o2.pointerType === "touch" ? 10 : 2;
        Math.abs(I2) > w2 ? (Et = x2.current) == null || Et.style.setProperty("--swipe-amount", `${d2}px`) : Math.abs(b2) > w2 && (Y2.current = null);
      } }, Pt && !t2.jsx ? React$1.createElement("button", { "aria-label": ot2, "data-disabled": rt2, "data-close-button": true, onClick: rt2 || !D2 ? () => {
      } : () => {
        var o2;
        C2(), (o2 = t2.onDismiss) == null || o2.call(t2, t2);
      }, className: j(l2 == null ? void 0 : l2.closeButton, (yt = t2 == null ? void 0 : t2.classNames) == null ? void 0 : yt.closeButton) }, React$1.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", width: "12", height: "12", viewBox: "0 0 24 24", fill: "none", stroke: "currentColor", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" }, React$1.createElement("line", { x1: "18", y1: "6", x2: "6", y2: "18" }), React$1.createElement("line", { x1: "6", y1: "6", x2: "18", y2: "18" }))) : null, t2.jsx || React$1.isValidElement(t2.title) ? t2.jsx || t2.title : React$1.createElement(React$1.Fragment, null, v2 || t2.icon || t2.promise ? React$1.createElement("div", { "data-icon": "" }, (t2.promise || t2.type === "loading") && !t2.icon ? Rt() : null, t2.icon || St(v2)) : null, React$1.createElement("div", { "data-content": "" }, React$1.createElement("div", { "data-title": "", className: j(l2 == null ? void 0 : l2.title, (vt = t2 == null ? void 0 : t2.classNames) == null ? void 0 : vt.title) }, t2.title), t2.description ? React$1.createElement("div", { "data-description": "", className: j(at, Dt, l2 == null ? void 0 : l2.description, (xt = t2 == null ? void 0 : t2.classNames) == null ? void 0 : xt.description) }, t2.description) : null), t2.cancel ? React$1.createElement("button", { "data-button": true, "data-cancel": true, style: t2.cancelButtonStyle || K2, onClick: (o2) => {
        var d2;
        D2 && (C2(), (d2 = t2.cancel) != null && d2.onClick && t2.cancel.onClick(o2));
      }, className: j(l2 == null ? void 0 : l2.cancelButton, (Tt = t2 == null ? void 0 : t2.classNames) == null ? void 0 : Tt.cancelButton) }, t2.cancel.label) : null, t2.action ? React$1.createElement("button", { "data-button": "", style: t2.actionButtonStyle || tt2, onClick: (o2) => {
        var d2;
        (d2 = t2.action) == null || d2.onClick(o2), !o2.defaultPrevented && C2();
      }, className: j(l2 == null ? void 0 : l2.actionButton, (wt = t2 == null ? void 0 : t2.classNames) == null ? void 0 : wt.actionButton) }, t2.action.label) : null));
    };
    function Mt() {
      if (typeof window == "undefined" || typeof document == "undefined")
        return "ltr";
      let c2 = document.documentElement.getAttribute("dir");
      return c2 === "auto" || !c2 ? window.getComputedStyle(document.documentElement).direction : c2;
    }
    var ce = (c2) => {
      let { invert: a2, position: t2 = "bottom-right", hotkey: s2 = ["altKey", "KeyT"], expand: y2, closeButton: g2, className: f2, offset: m2, theme: r2 = "light", richColors: Z2, duration: F2, style: _2, visibleToasts: V2 = _t, toastOptions: n2, dir: K2 = Mt(), gap: tt2, loadingIcon: et2, containerAriaLabel: at = "Notifications", pauseWhenPageIsHidden: X2 } = c2, [B2, $2] = React$1.useState([]), J2 = React$1.useMemo(() => Array.from(new Set([t2].concat(B2.filter((i2) => i2.position).map((i2) => i2.position)))), [B2, t2]), [z2, l2] = React$1.useState([]), [ot2, M2] = React$1.useState(false), [H2, G2] = React$1.useState(false), [q2, R2] = React$1.useState(r2 !== "system" ? r2 : typeof window != "undefined" && window.matchMedia && window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light"), P2 = React$1.useRef(null), O2 = s2.join("+").replace(/Key/g, "").replace(/Digit/g, ""), S2 = React$1.useRef(null), L2 = React$1.useRef(false), st = React$1.useCallback((i2) => $2((p2) => p2.filter(({ id: h2 }) => h2 !== i2.id)), []);
      return React$1.useEffect(() => T.subscribe((i2) => {
        if (i2.dismiss) {
          $2((p2) => p2.map((h2) => h2.id === i2.id ? { ...h2, delete: true } : h2));
          return;
        }
        setTimeout(() => {
          ReactDOM.flushSync(() => {
            $2((p2) => {
              let h2 = p2.findIndex((N2) => N2.id === i2.id);
              return h2 !== -1 ? [...p2.slice(0, h2), { ...p2[h2], ...i2 }, ...p2.slice(h2 + 1)] : [i2, ...p2];
            });
          });
        });
      }), []), React$1.useEffect(() => {
        if (r2 !== "system") {
          R2(r2);
          return;
        }
        r2 === "system" && (window.matchMedia && window.matchMedia("(prefers-color-scheme: dark)").matches ? R2("dark") : R2("light")), typeof window != "undefined" && window.matchMedia("(prefers-color-scheme: dark)").addEventListener("change", ({ matches: i2 }) => {
          R2(i2 ? "dark" : "light");
        });
      }, [r2]), React$1.useEffect(() => {
        B2.length <= 1 && M2(false);
      }, [B2]), React$1.useEffect(() => {
        let i2 = (p2) => {
          var N2, x2;
          s2.every((u2) => p2[u2] || p2.code === u2) && (M2(true), (N2 = P2.current) == null || N2.focus()), p2.code === "Escape" && (document.activeElement === P2.current || (x2 = P2.current) != null && x2.contains(document.activeElement)) && M2(false);
        };
        return document.addEventListener("keydown", i2), () => document.removeEventListener("keydown", i2);
      }, [s2]), React$1.useEffect(() => {
        if (P2.current)
          return () => {
            S2.current && (S2.current.focus({ preventScroll: true }), S2.current = null, L2.current = false);
          };
      }, [P2.current]), B2.length ? React$1.createElement("section", { "aria-label": `${at} ${O2}`, tabIndex: -1 }, J2.map((i2, p2) => {
        var x2;
        let [h2, N2] = i2.split("-");
        return React$1.createElement("ol", { key: i2, dir: K2 === "auto" ? Mt() : K2, tabIndex: -1, ref: P2, className: f2, "data-sonner-toaster": true, "data-theme": q2, "data-rich-colors": Z2, "data-y-position": h2, "data-x-position": N2, style: { "--front-toast-height": `${(x2 = z2[0]) == null ? void 0 : x2.height}px`, "--offset": typeof m2 == "number" ? `${m2}px` : m2 || Vt, "--width": `${Xt}px`, "--gap": `${Nt}px`, ..._2 }, onBlur: (u2) => {
          L2.current && !u2.currentTarget.contains(u2.relatedTarget) && (L2.current = false, S2.current && (S2.current.focus({ preventScroll: true }), S2.current = null));
        }, onFocus: (u2) => {
          u2.target instanceof HTMLElement && u2.target.dataset.dismissible === "false" || L2.current || (L2.current = true, S2.current = u2.relatedTarget);
        }, onMouseEnter: () => M2(true), onMouseMove: () => M2(true), onMouseLeave: () => {
          H2 || M2(false);
        }, onPointerDown: (u2) => {
          u2.target instanceof HTMLElement && u2.target.dataset.dismissible === "false" || G2(true);
        }, onPointerUp: () => G2(false) }, B2.filter((u2) => !u2.position && p2 === 0 || u2.position === i2).map((u2, U2) => {
          var v2, D2;
          return React$1.createElement(qt, { key: u2.id, index: U2, toast: u2, duration: (v2 = n2 == null ? void 0 : n2.duration) != null ? v2 : F2, className: n2 == null ? void 0 : n2.className, descriptionClassName: n2 == null ? void 0 : n2.descriptionClassName, invert: a2, visibleToasts: V2, closeButton: (D2 = n2 == null ? void 0 : n2.closeButton) != null ? D2 : g2, interacting: H2, position: i2, style: n2 == null ? void 0 : n2.style, unstyled: n2 == null ? void 0 : n2.unstyled, classNames: n2 == null ? void 0 : n2.classNames, cancelButtonStyle: n2 == null ? void 0 : n2.cancelButtonStyle, actionButtonStyle: n2 == null ? void 0 : n2.actionButtonStyle, removeToast: st, toasts: B2.filter((W2) => W2.position == u2.position), heights: z2.filter((W2) => W2.position == u2.position), setHeights: l2, expandByDefault: y2, gap: tt2, loadingIcon: et2, expanded: ot2, pauseWhenPageIsHidden: X2 });
        }));
      })) : null;
    };
    function MdAdminPanelSettings(props) {
      return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24" }, "child": [{ "tag": "path", "attr": { "fill": "none", "d": "M0 0h24v24H0z" }, "child": [] }, { "tag": "path", "attr": { "d": "M17 11c.34 0 .67.04 1 .09V6.27L10.5 3 3 6.27v4.91c0 4.54 3.2 8.79 7.5 9.82.55-.13 1.08-.32 1.6-.55-.69-.98-1.1-2.17-1.1-3.45 0-3.31 2.69-6 6-6z" }, "child": [] }, { "tag": "path", "attr": { "d": "M17 13c-2.21 0-4 1.79-4 4s1.79 4 4 4 4-1.79 4-4-1.79-4-4-4zm0 1.38c.62 0 1.12.51 1.12 1.12s-.51 1.12-1.12 1.12-1.12-.51-1.12-1.12.5-1.12 1.12-1.12zm0 5.37c-.93 0-1.74-.46-2.24-1.17.05-.72 1.51-1.08 2.24-1.08s2.19.36 2.24 1.08c-.5.71-1.31 1.17-2.24 1.17z" }, "child": [] }] })(props);
    }
    function MdDashboard(props) {
      return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24" }, "child": [{ "tag": "path", "attr": { "fill": "none", "d": "M0 0h24v24H0z" }, "child": [] }, { "tag": "path", "attr": { "d": "M3 13h8V3H3v10zm0 8h8v-6H3v6zm10 0h8V11h-8v10zm0-18v6h8V3h-8z" }, "child": [] }] })(props);
    }
    function MdSettings(props) {
      return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24" }, "child": [{ "tag": "path", "attr": { "fill": "none", "d": "M0 0h24v24H0V0z" }, "child": [] }, { "tag": "path", "attr": { "d": "M19.14 12.94c.04-.3.06-.61.06-.94 0-.32-.02-.64-.07-.94l2.03-1.58a.49.49 0 0 0 .12-.61l-1.92-3.32a.488.488 0 0 0-.59-.22l-2.39.96c-.5-.38-1.03-.7-1.62-.94l-.36-2.54a.484.484 0 0 0-.48-.41h-3.84c-.24 0-.43.17-.47.41l-.36 2.54c-.59.24-1.13.57-1.62.94l-2.39-.96c-.22-.08-.47 0-.59.22L2.74 8.87c-.12.21-.08.47.12.61l2.03 1.58c-.05.3-.09.63-.09.94s.02.64.07.94l-2.03 1.58a.49.49 0 0 0-.12.61l1.92 3.32c.12.22.37.29.59.22l2.39-.96c.5.38 1.03.7 1.62.94l.36 2.54c.05.24.24.41.48.41h3.84c.24 0 .44-.17.47-.41l.36-2.54c.59-.24 1.13-.56 1.62-.94l2.39.96c.22.08.47 0 .59-.22l1.92-3.32c.12-.22.07-.47-.12-.61l-2.01-1.58zM12 15.6c-1.98 0-3.6-1.62-3.6-3.6s1.62-3.6 3.6-3.6 3.6 1.62 3.6 3.6-1.62 3.6-3.6 3.6z" }, "child": [] }] })(props);
    }
    function MdTaskAlt(props) {
      return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24" }, "child": [{ "tag": "path", "attr": { "fill": "none", "d": "M0 0h24v24H0z" }, "child": [] }, { "tag": "path", "attr": { "d": "M22 5.18 10.59 16.6l-4.24-4.24 1.41-1.41 2.83 2.83 10-10L22 5.18zm-2.21 5.04c.13.57.21 1.17.21 1.78 0 4.42-3.58 8-8 8s-8-3.58-8-8 3.58-8 8-8c1.58 0 3.04.46 4.28 1.25l1.44-1.44A9.9 9.9 0 0 0 12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10c0-1.19-.22-2.33-.6-3.39l-1.61 1.61z" }, "child": [] }] })(props);
    }
    function MdAdd(props) {
      return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24" }, "child": [{ "tag": "path", "attr": { "fill": "none", "d": "M0 0h24v24H0z" }, "child": [] }, { "tag": "path", "attr": { "d": "M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z" }, "child": [] }] })(props);
    }
    function MdKeyboardArrowDown(props) {
      return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24" }, "child": [{ "tag": "path", "attr": { "fill": "none", "d": "M0 0h24v24H0V0z" }, "child": [] }, { "tag": "path", "attr": { "d": "M7.41 8.59 12 13.17l4.59-4.58L18 10l-6 6-6-6 1.41-1.41z" }, "child": [] }] })(props);
    }
    function MdKeyboardArrowUp(props) {
      return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24" }, "child": [{ "tag": "path", "attr": { "fill": "none", "d": "M0 0h24v24H0z" }, "child": [] }, { "tag": "path", "attr": { "d": "M7.41 15.41 12 10.83l4.59 4.58L18 14l-6-6-6 6z" }, "child": [] }] })(props);
    }
    function MdKeyboardDoubleArrowUp(props) {
      return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24" }, "child": [{ "tag": "path", "attr": { "fill": "none", "d": "M0 0h24v24H0z" }, "child": [] }, { "tag": "path", "attr": { "d": "M6 17.59 7.41 19 12 14.42 16.59 19 18 17.59l-6-6z" }, "child": [] }, { "tag": "path", "attr": { "d": "m6 11 1.41 1.41L12 7.83l4.59 4.58L18 11l-6-6z" }, "child": [] }] })(props);
    }
    function MdCheck(props) {
      return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24" }, "child": [{ "tag": "path", "attr": { "fill": "none", "d": "M0 0h24v24H0z" }, "child": [] }, { "tag": "path", "attr": { "d": "M9 16.17 4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z" }, "child": [] }] })(props);
    }
    function MdOutlineDoneAll(props) {
      return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24" }, "child": [{ "tag": "path", "attr": { "fill": "none", "d": "M0 0h24v24H0V0z" }, "child": [] }, { "tag": "path", "attr": { "d": "m18 7-1.41-1.41-6.34 6.34 1.41 1.41L18 7zm4.24-1.41L11.66 16.17 7.48 12l-1.41 1.41L11.66 19l12-12-1.42-1.41zM.41 13.41 6 19l1.41-1.41L1.83 12 .41 13.41z" }, "child": [] }] })(props);
    }
    function MdOutlineMessage(props) {
      return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24" }, "child": [{ "tag": "path", "attr": { "fill": "none", "d": "M0 0h24v24H0V0z" }, "child": [] }, { "tag": "path", "attr": { "d": "M4 4h16v12H5.17L4 17.17V4m0-2c-1.1 0-1.99.9-1.99 2L2 22l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2H4zm2 10h12v2H6v-2zm0-3h12v2H6V9zm0-3h12v2H6V6z" }, "child": [] }] })(props);
    }
    function MdOutlineEdit(props) {
      return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24" }, "child": [{ "tag": "path", "attr": { "fill": "none", "d": "M0 0h24v24H0V0z" }, "child": [] }, { "tag": "path", "attr": { "d": "m14.06 9.02.92.92L5.92 19H5v-.92l9.06-9.06M17.66 3c-.25 0-.51.1-.7.29l-1.83 1.83 3.75 3.75 1.83-1.83a.996.996 0 0 0 0-1.41l-2.34-2.34c-.2-.2-.45-.29-.71-.29zm-3.6 3.19L3 17.25V21h3.75L17.81 9.94l-3.75-3.75z" }, "child": [] }] })(props);
    }
    function formatProdErrorMessage$1(code) {
      return `Minified Redux error #${code}; visit https://redux.js.org/Errors?code=${code} for the full message or use the non-minified dev environment for full errors. `;
    }
    var $$observable = /* @__PURE__ */ (() => typeof Symbol === "function" && Symbol.observable || "@@observable")();
    var symbol_observable_default = $$observable;
    var randomString$1 = () => Math.random().toString(36).substring(7).split("").join(".");
    var ActionTypes = {
      INIT: `@@redux/INIT${/* @__PURE__ */ randomString$1()}`,
      REPLACE: `@@redux/REPLACE${/* @__PURE__ */ randomString$1()}`,
      PROBE_UNKNOWN_ACTION: () => `@@redux/PROBE_UNKNOWN_ACTION${randomString$1()}`
    };
    var actionTypes_default = ActionTypes;
    function isPlainObject$6(obj) {
      if (typeof obj !== "object" || obj === null)
        return false;
      let proto2 = obj;
      while (Object.getPrototypeOf(proto2) !== null) {
        proto2 = Object.getPrototypeOf(proto2);
      }
      return Object.getPrototypeOf(obj) === proto2 || Object.getPrototypeOf(obj) === null;
    }
    function createStore(reducer2, preloadedState, enhancer) {
      if (typeof reducer2 !== "function") {
        throw new Error(formatProdErrorMessage$1(2));
      }
      if (typeof preloadedState === "function" && typeof enhancer === "function" || typeof enhancer === "function" && typeof arguments[3] === "function") {
        throw new Error(formatProdErrorMessage$1(0));
      }
      if (typeof preloadedState === "function" && typeof enhancer === "undefined") {
        enhancer = preloadedState;
        preloadedState = void 0;
      }
      if (typeof enhancer !== "undefined") {
        if (typeof enhancer !== "function") {
          throw new Error(formatProdErrorMessage$1(1));
        }
        return enhancer(createStore)(reducer2, preloadedState);
      }
      let currentReducer = reducer2;
      let currentState = preloadedState;
      let currentListeners = /* @__PURE__ */ new Map();
      let nextListeners = currentListeners;
      let listenerIdCounter = 0;
      let isDispatching = false;
      function ensureCanMutateNextListeners() {
        if (nextListeners === currentListeners) {
          nextListeners = /* @__PURE__ */ new Map();
          currentListeners.forEach((listener, key) => {
            nextListeners.set(key, listener);
          });
        }
      }
      function getState() {
        if (isDispatching) {
          throw new Error(formatProdErrorMessage$1(3));
        }
        return currentState;
      }
      function subscribe(listener) {
        if (typeof listener !== "function") {
          throw new Error(formatProdErrorMessage$1(4));
        }
        if (isDispatching) {
          throw new Error(formatProdErrorMessage$1(5));
        }
        let isSubscribed = true;
        ensureCanMutateNextListeners();
        const listenerId = listenerIdCounter++;
        nextListeners.set(listenerId, listener);
        return function unsubscribe() {
          if (!isSubscribed) {
            return;
          }
          if (isDispatching) {
            throw new Error(formatProdErrorMessage$1(6));
          }
          isSubscribed = false;
          ensureCanMutateNextListeners();
          nextListeners.delete(listenerId);
          currentListeners = null;
        };
      }
      function dispatch(action) {
        if (!isPlainObject$6(action)) {
          throw new Error(formatProdErrorMessage$1(7));
        }
        if (typeof action.type === "undefined") {
          throw new Error(formatProdErrorMessage$1(8));
        }
        if (typeof action.type !== "string") {
          throw new Error(formatProdErrorMessage$1(17));
        }
        if (isDispatching) {
          throw new Error(formatProdErrorMessage$1(9));
        }
        try {
          isDispatching = true;
          currentState = currentReducer(currentState, action);
        } finally {
          isDispatching = false;
        }
        const listeners = currentListeners = nextListeners;
        listeners.forEach((listener) => {
          listener();
        });
        return action;
      }
      function replaceReducer(nextReducer) {
        if (typeof nextReducer !== "function") {
          throw new Error(formatProdErrorMessage$1(10));
        }
        currentReducer = nextReducer;
        dispatch({
          type: actionTypes_default.REPLACE
        });
      }
      function observable() {
        const outerSubscribe = subscribe;
        return {
          /**
           * The minimal observable subscription method.
           * @param observer Any object that can be used as an observer.
           * The observer object should have a `next` method.
           * @returns An object with an `unsubscribe` method that can
           * be used to unsubscribe the observable from the store, and prevent further
           * emission of values from the observable.
           */
          subscribe(observer) {
            if (typeof observer !== "object" || observer === null) {
              throw new Error(formatProdErrorMessage$1(11));
            }
            function observeState() {
              const observerAsObserver = observer;
              if (observerAsObserver.next) {
                observerAsObserver.next(getState());
              }
            }
            observeState();
            const unsubscribe = outerSubscribe(observeState);
            return {
              unsubscribe
            };
          },
          [symbol_observable_default]() {
            return this;
          }
        };
      }
      dispatch({
        type: actionTypes_default.INIT
      });
      const store2 = {
        dispatch,
        subscribe,
        getState,
        replaceReducer,
        [symbol_observable_default]: observable
      };
      return store2;
    }
    function assertReducerShape(reducers) {
      Object.keys(reducers).forEach((key) => {
        const reducer2 = reducers[key];
        const initialState2 = reducer2(void 0, {
          type: actionTypes_default.INIT
        });
        if (typeof initialState2 === "undefined") {
          throw new Error(formatProdErrorMessage$1(12));
        }
        if (typeof reducer2(void 0, {
          type: actionTypes_default.PROBE_UNKNOWN_ACTION()
        }) === "undefined") {
          throw new Error(formatProdErrorMessage$1(13));
        }
      });
    }
    function combineReducers(reducers) {
      const reducerKeys = Object.keys(reducers);
      const finalReducers = {};
      for (let i2 = 0; i2 < reducerKeys.length; i2++) {
        const key = reducerKeys[i2];
        if (typeof reducers[key] === "function") {
          finalReducers[key] = reducers[key];
        }
      }
      const finalReducerKeys = Object.keys(finalReducers);
      let shapeAssertionError;
      try {
        assertReducerShape(finalReducers);
      } catch (e3) {
        shapeAssertionError = e3;
      }
      return function combination(state = {}, action) {
        if (shapeAssertionError) {
          throw shapeAssertionError;
        }
        let hasChanged = false;
        const nextState = {};
        for (let i2 = 0; i2 < finalReducerKeys.length; i2++) {
          const key = finalReducerKeys[i2];
          const reducer2 = finalReducers[key];
          const previousStateForKey = state[key];
          const nextStateForKey = reducer2(previousStateForKey, action);
          if (typeof nextStateForKey === "undefined") {
            action && action.type;
            throw new Error(formatProdErrorMessage$1(14));
          }
          nextState[key] = nextStateForKey;
          hasChanged = hasChanged || nextStateForKey !== previousStateForKey;
        }
        hasChanged = hasChanged || finalReducerKeys.length !== Object.keys(state).length;
        return hasChanged ? nextState : state;
      };
    }
    function compose$1(...funcs) {
      if (funcs.length === 0) {
        return (arg) => arg;
      }
      if (funcs.length === 1) {
        return funcs[0];
      }
      return funcs.reduce((a2, b2) => (...args) => a2(b2(...args)));
    }
    function applyMiddleware(...middlewares) {
      return (createStore2) => (reducer2, preloadedState) => {
        const store2 = createStore2(reducer2, preloadedState);
        let dispatch = () => {
          throw new Error(formatProdErrorMessage$1(15));
        };
        const middlewareAPI = {
          getState: store2.getState,
          dispatch: (action, ...args) => dispatch(action, ...args)
        };
        const chain = middlewares.map((middleware) => middleware(middlewareAPI));
        dispatch = compose$1(...chain)(store2.dispatch);
        return {
          ...store2,
          dispatch
        };
      };
    }
    function isAction(action) {
      return isPlainObject$6(action) && "type" in action && typeof action.type === "string";
    }
    var NOTHING = Symbol.for("immer-nothing");
    var DRAFTABLE = Symbol.for("immer-draftable");
    var DRAFT_STATE = Symbol.for("immer-state");
    function die(error2, ...args) {
      throw new Error(
        `[Immer] minified error nr: ${error2}. Full error at: https://bit.ly/3cXEKWf`
      );
    }
    var getPrototypeOf$1 = Object.getPrototypeOf;
    function isDraft(value2) {
      return !!value2 && !!value2[DRAFT_STATE];
    }
    function isDraftable(value2) {
      var _a2;
      if (!value2)
        return false;
      return isPlainObject$5(value2) || Array.isArray(value2) || !!value2[DRAFTABLE] || !!((_a2 = value2.constructor) == null ? void 0 : _a2[DRAFTABLE]) || isMap(value2) || isSet(value2);
    }
    var objectCtorString$1 = Object.prototype.constructor.toString();
    function isPlainObject$5(value2) {
      if (!value2 || typeof value2 !== "object")
        return false;
      const proto2 = getPrototypeOf$1(value2);
      if (proto2 === null) {
        return true;
      }
      const Ctor = Object.hasOwnProperty.call(proto2, "constructor") && proto2.constructor;
      if (Ctor === Object)
        return true;
      return typeof Ctor == "function" && Function.toString.call(Ctor) === objectCtorString$1;
    }
    function original(value2) {
      if (!isDraft(value2))
        die(15, value2);
      return value2[DRAFT_STATE].base_;
    }
    function each(obj, iter) {
      if (getArchtype(obj) === 0) {
        Object.entries(obj).forEach(([key, value2]) => {
          iter(key, value2, obj);
        });
      } else {
        obj.forEach((entry, index) => iter(index, entry, obj));
      }
    }
    function getArchtype(thing) {
      const state = thing[DRAFT_STATE];
      return state ? state.type_ : Array.isArray(thing) ? 1 : isMap(thing) ? 2 : isSet(thing) ? 3 : 0;
    }
    function has(thing, prop) {
      return getArchtype(thing) === 2 ? thing.has(prop) : Object.prototype.hasOwnProperty.call(thing, prop);
    }
    function get$5(thing, prop) {
      return getArchtype(thing) === 2 ? thing.get(prop) : thing[prop];
    }
    function set$2(thing, propOrOldValue, value2) {
      const t2 = getArchtype(thing);
      if (t2 === 2)
        thing.set(propOrOldValue, value2);
      else if (t2 === 3) {
        thing.add(value2);
      } else
        thing[propOrOldValue] = value2;
    }
    function is(x2, y2) {
      if (x2 === y2) {
        return x2 !== 0 || 1 / x2 === 1 / y2;
      } else {
        return x2 !== x2 && y2 !== y2;
      }
    }
    function isMap(target) {
      return target instanceof Map;
    }
    function isSet(target) {
      return target instanceof Set;
    }
    function latest(state) {
      return state.copy_ || state.base_;
    }
    function shallowCopy(base, strict) {
      if (isMap(base)) {
        return new Map(base);
      }
      if (isSet(base)) {
        return new Set(base);
      }
      if (Array.isArray(base))
        return Array.prototype.slice.call(base);
      if (!strict && isPlainObject$5(base)) {
        if (!getPrototypeOf$1(base)) {
          const obj = /* @__PURE__ */ Object.create(null);
          return Object.assign(obj, base);
        }
        return { ...base };
      }
      const descriptors2 = Object.getOwnPropertyDescriptors(base);
      delete descriptors2[DRAFT_STATE];
      let keys2 = Reflect.ownKeys(descriptors2);
      for (let i2 = 0; i2 < keys2.length; i2++) {
        const key = keys2[i2];
        const desc = descriptors2[key];
        if (desc.writable === false) {
          desc.writable = true;
          desc.configurable = true;
        }
        if (desc.get || desc.set)
          descriptors2[key] = {
            configurable: true,
            writable: true,
            // could live with !!desc.set as well here...
            enumerable: desc.enumerable,
            value: base[key]
          };
      }
      return Object.create(getPrototypeOf$1(base), descriptors2);
    }
    function freeze(obj, deep = false) {
      if (isFrozen(obj) || isDraft(obj) || !isDraftable(obj))
        return obj;
      if (getArchtype(obj) > 1) {
        obj.set = obj.add = obj.clear = obj.delete = dontMutateFrozenCollections;
      }
      Object.freeze(obj);
      if (deep)
        each(obj, (_key, value2) => freeze(value2, true));
      return obj;
    }
    function dontMutateFrozenCollections() {
      die(2);
    }
    function isFrozen(obj) {
      return Object.isFrozen(obj);
    }
    var plugins = {};
    function getPlugin(pluginKey) {
      const plugin = plugins[pluginKey];
      if (!plugin) {
        die(0, pluginKey);
      }
      return plugin;
    }
    function loadPlugin(pluginKey, implementation) {
      if (!plugins[pluginKey])
        plugins[pluginKey] = implementation;
    }
    var currentScope;
    function getCurrentScope() {
      return currentScope;
    }
    function createScope(parent_, immer_) {
      return {
        drafts_: [],
        parent_,
        immer_,
        // Whenever the modified draft contains a draft from another scope, we
        // need to prevent auto-freezing so the unowned draft can be finalized.
        canAutoFreeze_: true,
        unfinalizedDrafts_: 0
      };
    }
    function usePatchesInScope(scope, patchListener) {
      if (patchListener) {
        getPlugin("Patches");
        scope.patches_ = [];
        scope.inversePatches_ = [];
        scope.patchListener_ = patchListener;
      }
    }
    function revokeScope(scope) {
      leaveScope(scope);
      scope.drafts_.forEach(revokeDraft);
      scope.drafts_ = null;
    }
    function leaveScope(scope) {
      if (scope === currentScope) {
        currentScope = scope.parent_;
      }
    }
    function enterScope(immer2) {
      return currentScope = createScope(currentScope, immer2);
    }
    function revokeDraft(draft) {
      const state = draft[DRAFT_STATE];
      if (state.type_ === 0 || state.type_ === 1)
        state.revoke_();
      else
        state.revoked_ = true;
    }
    function processResult(result, scope) {
      scope.unfinalizedDrafts_ = scope.drafts_.length;
      const baseDraft = scope.drafts_[0];
      const isReplaced = result !== void 0 && result !== baseDraft;
      if (isReplaced) {
        if (baseDraft[DRAFT_STATE].modified_) {
          revokeScope(scope);
          die(4);
        }
        if (isDraftable(result)) {
          result = finalize(scope, result);
          if (!scope.parent_)
            maybeFreeze(scope, result);
        }
        if (scope.patches_) {
          getPlugin("Patches").generateReplacementPatches_(
            baseDraft[DRAFT_STATE].base_,
            result,
            scope.patches_,
            scope.inversePatches_
          );
        }
      } else {
        result = finalize(scope, baseDraft, []);
      }
      revokeScope(scope);
      if (scope.patches_) {
        scope.patchListener_(scope.patches_, scope.inversePatches_);
      }
      return result !== NOTHING ? result : void 0;
    }
    function finalize(rootScope, value2, path) {
      if (isFrozen(value2))
        return value2;
      const state = value2[DRAFT_STATE];
      if (!state) {
        each(
          value2,
          (key, childValue) => finalizeProperty(rootScope, state, value2, key, childValue, path)
        );
        return value2;
      }
      if (state.scope_ !== rootScope)
        return value2;
      if (!state.modified_) {
        maybeFreeze(rootScope, state.base_, true);
        return state.base_;
      }
      if (!state.finalized_) {
        state.finalized_ = true;
        state.scope_.unfinalizedDrafts_--;
        const result = state.copy_;
        let resultEach = result;
        let isSet2 = false;
        if (state.type_ === 3) {
          resultEach = new Set(result);
          result.clear();
          isSet2 = true;
        }
        each(
          resultEach,
          (key, childValue) => finalizeProperty(rootScope, state, result, key, childValue, path, isSet2)
        );
        maybeFreeze(rootScope, result, false);
        if (path && rootScope.patches_) {
          getPlugin("Patches").generatePatches_(
            state,
            path,
            rootScope.patches_,
            rootScope.inversePatches_
          );
        }
      }
      return state.copy_;
    }
    function finalizeProperty(rootScope, parentState, targetObject, prop, childValue, rootPath, targetIsSet) {
      if (isDraft(childValue)) {
        const path = rootPath && parentState && parentState.type_ !== 3 && // Set objects are atomic since they have no keys.
        !has(parentState.assigned_, prop) ? rootPath.concat(prop) : void 0;
        const res = finalize(rootScope, childValue, path);
        set$2(targetObject, prop, res);
        if (isDraft(res)) {
          rootScope.canAutoFreeze_ = false;
        } else
          return;
      } else if (targetIsSet) {
        targetObject.add(childValue);
      }
      if (isDraftable(childValue) && !isFrozen(childValue)) {
        if (!rootScope.immer_.autoFreeze_ && rootScope.unfinalizedDrafts_ < 1) {
          return;
        }
        finalize(rootScope, childValue);
        if (!parentState || !parentState.scope_.parent_)
          maybeFreeze(rootScope, childValue);
      }
    }
    function maybeFreeze(scope, value2, deep = false) {
      if (!scope.parent_ && scope.immer_.autoFreeze_ && scope.canAutoFreeze_) {
        freeze(value2, deep);
      }
    }
    function createProxyProxy(base, parent) {
      const isArray2 = Array.isArray(base);
      const state = {
        type_: isArray2 ? 1 : 0,
        // Track which produce call this is associated with.
        scope_: parent ? parent.scope_ : getCurrentScope(),
        // True for both shallow and deep changes.
        modified_: false,
        // Used during finalization.
        finalized_: false,
        // Track which properties have been assigned (true) or deleted (false).
        assigned_: {},
        // The parent draft state.
        parent_: parent,
        // The base state.
        base_: base,
        // The base proxy.
        draft_: null,
        // set below
        // The base copy with any updated values.
        copy_: null,
        // Called by the `produce` function.
        revoke_: null,
        isManual_: false
      };
      let target = state;
      let traps = objectTraps;
      if (isArray2) {
        target = [state];
        traps = arrayTraps;
      }
      const { revoke, proxy } = Proxy.revocable(target, traps);
      state.draft_ = proxy;
      state.revoke_ = revoke;
      return proxy;
    }
    var objectTraps = {
      get(state, prop) {
        if (prop === DRAFT_STATE)
          return state;
        const source = latest(state);
        if (!has(source, prop)) {
          return readPropFromProto(state, source, prop);
        }
        const value2 = source[prop];
        if (state.finalized_ || !isDraftable(value2)) {
          return value2;
        }
        if (value2 === peek(state.base_, prop)) {
          prepareCopy(state);
          return state.copy_[prop] = createProxy(value2, state);
        }
        return value2;
      },
      has(state, prop) {
        return prop in latest(state);
      },
      ownKeys(state) {
        return Reflect.ownKeys(latest(state));
      },
      set(state, prop, value2) {
        const desc = getDescriptorFromProto(latest(state), prop);
        if (desc == null ? void 0 : desc.set) {
          desc.set.call(state.draft_, value2);
          return true;
        }
        if (!state.modified_) {
          const current2 = peek(latest(state), prop);
          const currentState = current2 == null ? void 0 : current2[DRAFT_STATE];
          if (currentState && currentState.base_ === value2) {
            state.copy_[prop] = value2;
            state.assigned_[prop] = false;
            return true;
          }
          if (is(value2, current2) && (value2 !== void 0 || has(state.base_, prop)))
            return true;
          prepareCopy(state);
          markChanged(state);
        }
        if (state.copy_[prop] === value2 && // special case: handle new props with value 'undefined'
        (value2 !== void 0 || prop in state.copy_) || // special case: NaN
        Number.isNaN(value2) && Number.isNaN(state.copy_[prop]))
          return true;
        state.copy_[prop] = value2;
        state.assigned_[prop] = true;
        return true;
      },
      deleteProperty(state, prop) {
        if (peek(state.base_, prop) !== void 0 || prop in state.base_) {
          state.assigned_[prop] = false;
          prepareCopy(state);
          markChanged(state);
        } else {
          delete state.assigned_[prop];
        }
        if (state.copy_) {
          delete state.copy_[prop];
        }
        return true;
      },
      // Note: We never coerce `desc.value` into an Immer draft, because we can't make
      // the same guarantee in ES5 mode.
      getOwnPropertyDescriptor(state, prop) {
        const owner = latest(state);
        const desc = Reflect.getOwnPropertyDescriptor(owner, prop);
        if (!desc)
          return desc;
        return {
          writable: true,
          configurable: state.type_ !== 1 || prop !== "length",
          enumerable: desc.enumerable,
          value: owner[prop]
        };
      },
      defineProperty() {
        die(11);
      },
      getPrototypeOf(state) {
        return getPrototypeOf$1(state.base_);
      },
      setPrototypeOf() {
        die(12);
      }
    };
    var arrayTraps = {};
    each(objectTraps, (key, fn) => {
      arrayTraps[key] = function() {
        arguments[0] = arguments[0][0];
        return fn.apply(this, arguments);
      };
    });
    arrayTraps.deleteProperty = function(state, prop) {
      return arrayTraps.set.call(this, state, prop, void 0);
    };
    arrayTraps.set = function(state, prop, value2) {
      return objectTraps.set.call(this, state[0], prop, value2, state[0]);
    };
    function peek(draft, prop) {
      const state = draft[DRAFT_STATE];
      const source = state ? latest(state) : draft;
      return source[prop];
    }
    function readPropFromProto(state, source, prop) {
      var _a2;
      const desc = getDescriptorFromProto(source, prop);
      return desc ? `value` in desc ? desc.value : (
        // This is a very special case, if the prop is a getter defined by the
        // prototype, we should invoke it with the draft as context!
        (_a2 = desc.get) == null ? void 0 : _a2.call(state.draft_)
      ) : void 0;
    }
    function getDescriptorFromProto(source, prop) {
      if (!(prop in source))
        return void 0;
      let proto2 = getPrototypeOf$1(source);
      while (proto2) {
        const desc = Object.getOwnPropertyDescriptor(proto2, prop);
        if (desc)
          return desc;
        proto2 = getPrototypeOf$1(proto2);
      }
      return void 0;
    }
    function markChanged(state) {
      if (!state.modified_) {
        state.modified_ = true;
        if (state.parent_) {
          markChanged(state.parent_);
        }
      }
    }
    function prepareCopy(state) {
      if (!state.copy_) {
        state.copy_ = shallowCopy(
          state.base_,
          state.scope_.immer_.useStrictShallowCopy_
        );
      }
    }
    var Immer2 = class {
      constructor(config2) {
        this.autoFreeze_ = true;
        this.useStrictShallowCopy_ = false;
        this.produce = (base, recipe, patchListener) => {
          if (typeof base === "function" && typeof recipe !== "function") {
            const defaultBase = recipe;
            recipe = base;
            const self2 = this;
            return function curriedProduce(base2 = defaultBase, ...args) {
              return self2.produce(base2, (draft) => recipe.call(this, draft, ...args));
            };
          }
          if (typeof recipe !== "function")
            die(6);
          if (patchListener !== void 0 && typeof patchListener !== "function")
            die(7);
          let result;
          if (isDraftable(base)) {
            const scope = enterScope(this);
            const proxy = createProxy(base, void 0);
            let hasError = true;
            try {
              result = recipe(proxy);
              hasError = false;
            } finally {
              if (hasError)
                revokeScope(scope);
              else
                leaveScope(scope);
            }
            usePatchesInScope(scope, patchListener);
            return processResult(result, scope);
          } else if (!base || typeof base !== "object") {
            result = recipe(base);
            if (result === void 0)
              result = base;
            if (result === NOTHING)
              result = void 0;
            if (this.autoFreeze_)
              freeze(result, true);
            if (patchListener) {
              const p2 = [];
              const ip = [];
              getPlugin("Patches").generateReplacementPatches_(base, result, p2, ip);
              patchListener(p2, ip);
            }
            return result;
          } else
            die(1, base);
        };
        this.produceWithPatches = (base, recipe) => {
          if (typeof base === "function") {
            return (state, ...args) => this.produceWithPatches(state, (draft) => base(draft, ...args));
          }
          let patches, inversePatches;
          const result = this.produce(base, recipe, (p2, ip) => {
            patches = p2;
            inversePatches = ip;
          });
          return [result, patches, inversePatches];
        };
        if (typeof (config2 == null ? void 0 : config2.autoFreeze) === "boolean")
          this.setAutoFreeze(config2.autoFreeze);
        if (typeof (config2 == null ? void 0 : config2.useStrictShallowCopy) === "boolean")
          this.setUseStrictShallowCopy(config2.useStrictShallowCopy);
      }
      createDraft(base) {
        if (!isDraftable(base))
          die(8);
        if (isDraft(base))
          base = current(base);
        const scope = enterScope(this);
        const proxy = createProxy(base, void 0);
        proxy[DRAFT_STATE].isManual_ = true;
        leaveScope(scope);
        return proxy;
      }
      finishDraft(draft, patchListener) {
        const state = draft && draft[DRAFT_STATE];
        if (!state || !state.isManual_)
          die(9);
        const { scope_: scope } = state;
        usePatchesInScope(scope, patchListener);
        return processResult(void 0, scope);
      }
      /**
       * Pass true to automatically freeze all copies created by Immer.
       *
       * By default, auto-freezing is enabled.
       */
      setAutoFreeze(value2) {
        this.autoFreeze_ = value2;
      }
      /**
       * Pass true to enable strict shallow copy.
       *
       * By default, immer does not copy the object descriptors such as getter, setter and non-enumrable properties.
       */
      setUseStrictShallowCopy(value2) {
        this.useStrictShallowCopy_ = value2;
      }
      applyPatches(base, patches) {
        let i2;
        for (i2 = patches.length - 1; i2 >= 0; i2--) {
          const patch = patches[i2];
          if (patch.path.length === 0 && patch.op === "replace") {
            base = patch.value;
            break;
          }
        }
        if (i2 > -1) {
          patches = patches.slice(i2 + 1);
        }
        const applyPatchesImpl = getPlugin("Patches").applyPatches_;
        if (isDraft(base)) {
          return applyPatchesImpl(base, patches);
        }
        return this.produce(
          base,
          (draft) => applyPatchesImpl(draft, patches)
        );
      }
    };
    function createProxy(value2, parent) {
      const draft = isMap(value2) ? getPlugin("MapSet").proxyMap_(value2, parent) : isSet(value2) ? getPlugin("MapSet").proxySet_(value2, parent) : createProxyProxy(value2, parent);
      const scope = parent ? parent.scope_ : getCurrentScope();
      scope.drafts_.push(draft);
      return draft;
    }
    function current(value2) {
      if (!isDraft(value2))
        die(10, value2);
      return currentImpl(value2);
    }
    function currentImpl(value2) {
      if (!isDraftable(value2) || isFrozen(value2))
        return value2;
      const state = value2[DRAFT_STATE];
      let copy2;
      if (state) {
        if (!state.modified_)
          return state.base_;
        state.finalized_ = true;
        copy2 = shallowCopy(value2, state.scope_.immer_.useStrictShallowCopy_);
      } else {
        copy2 = shallowCopy(value2, true);
      }
      each(copy2, (key, childValue) => {
        set$2(copy2, key, currentImpl(childValue));
      });
      if (state) {
        state.finalized_ = false;
      }
      return copy2;
    }
    function enablePatches() {
      const errorOffset = 16;
      const REPLACE = "replace";
      const ADD = "add";
      const REMOVE = "remove";
      function generatePatches_(state, basePath, patches, inversePatches) {
        switch (state.type_) {
          case 0:
          case 2:
            return generatePatchesFromAssigned(
              state,
              basePath,
              patches,
              inversePatches
            );
          case 1:
            return generateArrayPatches(state, basePath, patches, inversePatches);
          case 3:
            return generateSetPatches(
              state,
              basePath,
              patches,
              inversePatches
            );
        }
      }
      function generateArrayPatches(state, basePath, patches, inversePatches) {
        let { base_, assigned_ } = state;
        let copy_ = state.copy_;
        if (copy_.length < base_.length) {
          [base_, copy_] = [copy_, base_];
          [patches, inversePatches] = [inversePatches, patches];
        }
        for (let i2 = 0; i2 < base_.length; i2++) {
          if (assigned_[i2] && copy_[i2] !== base_[i2]) {
            const path = basePath.concat([i2]);
            patches.push({
              op: REPLACE,
              path,
              // Need to maybe clone it, as it can in fact be the original value
              // due to the base/copy inversion at the start of this function
              value: clonePatchValueIfNeeded(copy_[i2])
            });
            inversePatches.push({
              op: REPLACE,
              path,
              value: clonePatchValueIfNeeded(base_[i2])
            });
          }
        }
        for (let i2 = base_.length; i2 < copy_.length; i2++) {
          const path = basePath.concat([i2]);
          patches.push({
            op: ADD,
            path,
            // Need to maybe clone it, as it can in fact be the original value
            // due to the base/copy inversion at the start of this function
            value: clonePatchValueIfNeeded(copy_[i2])
          });
        }
        for (let i2 = copy_.length - 1; base_.length <= i2; --i2) {
          const path = basePath.concat([i2]);
          inversePatches.push({
            op: REMOVE,
            path
          });
        }
      }
      function generatePatchesFromAssigned(state, basePath, patches, inversePatches) {
        const { base_, copy_ } = state;
        each(state.assigned_, (key, assignedValue) => {
          const origValue = get$5(base_, key);
          const value2 = get$5(copy_, key);
          const op = !assignedValue ? REMOVE : has(base_, key) ? REPLACE : ADD;
          if (origValue === value2 && op === REPLACE)
            return;
          const path = basePath.concat(key);
          patches.push(op === REMOVE ? { op, path } : { op, path, value: value2 });
          inversePatches.push(
            op === ADD ? { op: REMOVE, path } : op === REMOVE ? { op: ADD, path, value: clonePatchValueIfNeeded(origValue) } : { op: REPLACE, path, value: clonePatchValueIfNeeded(origValue) }
          );
        });
      }
      function generateSetPatches(state, basePath, patches, inversePatches) {
        let { base_, copy_ } = state;
        let i2 = 0;
        base_.forEach((value2) => {
          if (!copy_.has(value2)) {
            const path = basePath.concat([i2]);
            patches.push({
              op: REMOVE,
              path,
              value: value2
            });
            inversePatches.unshift({
              op: ADD,
              path,
              value: value2
            });
          }
          i2++;
        });
        i2 = 0;
        copy_.forEach((value2) => {
          if (!base_.has(value2)) {
            const path = basePath.concat([i2]);
            patches.push({
              op: ADD,
              path,
              value: value2
            });
            inversePatches.unshift({
              op: REMOVE,
              path,
              value: value2
            });
          }
          i2++;
        });
      }
      function generateReplacementPatches_(baseValue, replacement, patches, inversePatches) {
        patches.push({
          op: REPLACE,
          path: [],
          value: replacement === NOTHING ? void 0 : replacement
        });
        inversePatches.push({
          op: REPLACE,
          path: [],
          value: baseValue
        });
      }
      function applyPatches_(draft, patches) {
        patches.forEach((patch) => {
          const { path, op } = patch;
          let base = draft;
          for (let i2 = 0; i2 < path.length - 1; i2++) {
            const parentType = getArchtype(base);
            let p2 = path[i2];
            if (typeof p2 !== "string" && typeof p2 !== "number") {
              p2 = "" + p2;
            }
            if ((parentType === 0 || parentType === 1) && (p2 === "__proto__" || p2 === "constructor"))
              die(errorOffset + 3);
            if (typeof base === "function" && p2 === "prototype")
              die(errorOffset + 3);
            base = get$5(base, p2);
            if (typeof base !== "object")
              die(errorOffset + 2, path.join("/"));
          }
          const type = getArchtype(base);
          const value2 = deepClonePatchValue(patch.value);
          const key = path[path.length - 1];
          switch (op) {
            case REPLACE:
              switch (type) {
                case 2:
                  return base.set(key, value2);
                case 3:
                  die(errorOffset);
                default:
                  return base[key] = value2;
              }
            case ADD:
              switch (type) {
                case 1:
                  return key === "-" ? base.push(value2) : base.splice(key, 0, value2);
                case 2:
                  return base.set(key, value2);
                case 3:
                  return base.add(value2);
                default:
                  return base[key] = value2;
              }
            case REMOVE:
              switch (type) {
                case 1:
                  return base.splice(key, 1);
                case 2:
                  return base.delete(key);
                case 3:
                  return base.delete(patch.value);
                default:
                  return delete base[key];
              }
            default:
              die(errorOffset + 1, op);
          }
        });
        return draft;
      }
      function deepClonePatchValue(obj) {
        if (!isDraftable(obj))
          return obj;
        if (Array.isArray(obj))
          return obj.map(deepClonePatchValue);
        if (isMap(obj))
          return new Map(
            Array.from(obj.entries()).map(([k2, v2]) => [k2, deepClonePatchValue(v2)])
          );
        if (isSet(obj))
          return new Set(Array.from(obj).map(deepClonePatchValue));
        const cloned = Object.create(getPrototypeOf$1(obj));
        for (const key in obj)
          cloned[key] = deepClonePatchValue(obj[key]);
        if (has(obj, DRAFTABLE))
          cloned[DRAFTABLE] = obj[DRAFTABLE];
        return cloned;
      }
      function clonePatchValueIfNeeded(obj) {
        if (isDraft(obj)) {
          return deepClonePatchValue(obj);
        } else
          return obj;
      }
      loadPlugin("Patches", {
        applyPatches_,
        generatePatches_,
        generateReplacementPatches_
      });
    }
    var immer = new Immer2();
    var produce = immer.produce;
    var produceWithPatches = immer.produceWithPatches.bind(
      immer
    );
    immer.setAutoFreeze.bind(immer);
    immer.setUseStrictShallowCopy.bind(immer);
    var applyPatches = immer.applyPatches.bind(immer);
    immer.createDraft.bind(immer);
    immer.finishDraft.bind(immer);
    function assertIsFunction(func, errorMessage = `expected a function, instead received ${typeof func}`) {
      if (typeof func !== "function") {
        throw new TypeError(errorMessage);
      }
    }
    function assertIsObject(object2, errorMessage = `expected an object, instead received ${typeof object2}`) {
      if (typeof object2 !== "object") {
        throw new TypeError(errorMessage);
      }
    }
    function assertIsArrayOfFunctions(array2, errorMessage = `expected all items to be functions, instead received the following types: `) {
      if (!array2.every((item) => typeof item === "function")) {
        const itemTypes = array2.map(
          (item) => typeof item === "function" ? `function ${item.name || "unnamed"}()` : typeof item
        ).join(", ");
        throw new TypeError(`${errorMessage}[${itemTypes}]`);
      }
    }
    var ensureIsArray = (item) => {
      return Array.isArray(item) ? item : [item];
    };
    function getDependencies(createSelectorArgs) {
      const dependencies = Array.isArray(createSelectorArgs[0]) ? createSelectorArgs[0] : createSelectorArgs;
      assertIsArrayOfFunctions(
        dependencies,
        `createSelector expects all input-selectors to be functions, but received the following types: `
      );
      return dependencies;
    }
    function collectInputSelectorResults(dependencies, inputSelectorArgs) {
      const inputSelectorResults = [];
      const { length } = dependencies;
      for (let i2 = 0; i2 < length; i2++) {
        inputSelectorResults.push(dependencies[i2].apply(null, inputSelectorArgs));
      }
      return inputSelectorResults;
    }
    var StrongRef = class {
      constructor(value2) {
        this.value = value2;
      }
      deref() {
        return this.value;
      }
    };
    var Ref = typeof WeakRef !== "undefined" ? WeakRef : StrongRef;
    var UNTERMINATED = 0;
    var TERMINATED = 1;
    function createCacheNode() {
      return {
        s: UNTERMINATED,
        v: void 0,
        o: null,
        p: null
      };
    }
    function weakMapMemoize(func, options = {}) {
      let fnNode = createCacheNode();
      const { resultEqualityCheck } = options;
      let lastResult2;
      let resultsCount = 0;
      function memoized() {
        var _a2;
        let cacheNode = fnNode;
        const { length } = arguments;
        for (let i2 = 0, l2 = length; i2 < l2; i2++) {
          const arg = arguments[i2];
          if (typeof arg === "function" || typeof arg === "object" && arg !== null) {
            let objectCache = cacheNode.o;
            if (objectCache === null) {
              cacheNode.o = objectCache = /* @__PURE__ */ new WeakMap();
            }
            const objectNode = objectCache.get(arg);
            if (objectNode === void 0) {
              cacheNode = createCacheNode();
              objectCache.set(arg, cacheNode);
            } else {
              cacheNode = objectNode;
            }
          } else {
            let primitiveCache = cacheNode.p;
            if (primitiveCache === null) {
              cacheNode.p = primitiveCache = /* @__PURE__ */ new Map();
            }
            const primitiveNode = primitiveCache.get(arg);
            if (primitiveNode === void 0) {
              cacheNode = createCacheNode();
              primitiveCache.set(arg, cacheNode);
            } else {
              cacheNode = primitiveNode;
            }
          }
        }
        const terminatedNode = cacheNode;
        let result;
        if (cacheNode.s === TERMINATED) {
          result = cacheNode.v;
        } else {
          result = func.apply(null, arguments);
          resultsCount++;
        }
        terminatedNode.s = TERMINATED;
        if (resultEqualityCheck) {
          const lastResultValue = ((_a2 = lastResult2 == null ? void 0 : lastResult2.deref) == null ? void 0 : _a2.call(lastResult2)) ?? lastResult2;
          if (lastResultValue != null && resultEqualityCheck(lastResultValue, result)) {
            result = lastResultValue;
            resultsCount !== 0 && resultsCount--;
          }
          const needsWeakRef = typeof result === "object" && result !== null || typeof result === "function";
          lastResult2 = needsWeakRef ? new Ref(result) : result;
        }
        terminatedNode.v = result;
        return result;
      }
      memoized.clearCache = () => {
        fnNode = createCacheNode();
        memoized.resetResultsCount();
      };
      memoized.resultsCount = () => resultsCount;
      memoized.resetResultsCount = () => {
        resultsCount = 0;
      };
      return memoized;
    }
    function createSelectorCreator(memoizeOrOptions, ...memoizeOptionsFromArgs) {
      const createSelectorCreatorOptions = typeof memoizeOrOptions === "function" ? {
        memoize: memoizeOrOptions,
        memoizeOptions: memoizeOptionsFromArgs
      } : memoizeOrOptions;
      const createSelector2 = (...createSelectorArgs) => {
        let recomputations = 0;
        let dependencyRecomputations = 0;
        let lastResult2;
        let directlyPassedOptions = {};
        let resultFunc = createSelectorArgs.pop();
        if (typeof resultFunc === "object") {
          directlyPassedOptions = resultFunc;
          resultFunc = createSelectorArgs.pop();
        }
        assertIsFunction(
          resultFunc,
          `createSelector expects an output function after the inputs, but received: [${typeof resultFunc}]`
        );
        const combinedOptions = {
          ...createSelectorCreatorOptions,
          ...directlyPassedOptions
        };
        const {
          memoize: memoize2,
          memoizeOptions = [],
          argsMemoize = weakMapMemoize,
          argsMemoizeOptions = [],
          devModeChecks = {}
        } = combinedOptions;
        const finalMemoizeOptions = ensureIsArray(memoizeOptions);
        const finalArgsMemoizeOptions = ensureIsArray(argsMemoizeOptions);
        const dependencies = getDependencies(createSelectorArgs);
        const memoizedResultFunc = memoize2(function recomputationWrapper() {
          recomputations++;
          return resultFunc.apply(
            null,
            arguments
          );
        }, ...finalMemoizeOptions);
        const selector = argsMemoize(function dependenciesChecker() {
          dependencyRecomputations++;
          const inputSelectorResults = collectInputSelectorResults(
            dependencies,
            arguments
          );
          lastResult2 = memoizedResultFunc.apply(null, inputSelectorResults);
          return lastResult2;
        }, ...finalArgsMemoizeOptions);
        return Object.assign(selector, {
          resultFunc,
          memoizedResultFunc,
          dependencies,
          dependencyRecomputations: () => dependencyRecomputations,
          resetDependencyRecomputations: () => {
            dependencyRecomputations = 0;
          },
          lastResult: () => lastResult2,
          recomputations: () => recomputations,
          resetRecomputations: () => {
            recomputations = 0;
          },
          memoize: memoize2,
          argsMemoize
        });
      };
      Object.assign(createSelector2, {
        withTypes: () => createSelector2
      });
      return createSelector2;
    }
    var createSelector = /* @__PURE__ */ createSelectorCreator(weakMapMemoize);
    var createStructuredSelector = Object.assign(
      (inputSelectorsObject, selectorCreator = createSelector) => {
        assertIsObject(
          inputSelectorsObject,
          `createStructuredSelector expects first argument to be an object where each property is a selector, instead received a ${typeof inputSelectorsObject}`
        );
        const inputSelectorKeys = Object.keys(inputSelectorsObject);
        const dependencies = inputSelectorKeys.map(
          (key) => inputSelectorsObject[key]
        );
        const structuredSelector = selectorCreator(
          dependencies,
          (...inputSelectorResults) => {
            return inputSelectorResults.reduce((composition, value2, index) => {
              composition[inputSelectorKeys[index]] = value2;
              return composition;
            }, {});
          }
        );
        return structuredSelector;
      },
      { withTypes: () => createStructuredSelector }
    );
    function createThunkMiddleware(extraArgument) {
      const middleware = ({ dispatch, getState }) => (next) => (action) => {
        if (typeof action === "function") {
          return action(dispatch, getState, extraArgument);
        }
        return next(action);
      };
      return middleware;
    }
    var thunk = createThunkMiddleware();
    var withExtraArgument = createThunkMiddleware;
    var composeWithDevTools = typeof window !== "undefined" && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ : function() {
      if (arguments.length === 0)
        return void 0;
      if (typeof arguments[0] === "object")
        return compose$1;
      return compose$1.apply(null, arguments);
    };
    var hasMatchFunction = (v2) => {
      return v2 && typeof v2.match === "function";
    };
    function createAction(type, prepareAction) {
      function actionCreator(...args) {
        if (prepareAction) {
          let prepared = prepareAction(...args);
          if (!prepared) {
            throw new Error(formatProdErrorMessage(0));
          }
          return {
            type,
            payload: prepared.payload,
            ..."meta" in prepared && {
              meta: prepared.meta
            },
            ..."error" in prepared && {
              error: prepared.error
            }
          };
        }
        return {
          type,
          payload: args[0]
        };
      }
      actionCreator.toString = () => `${type}`;
      actionCreator.type = type;
      actionCreator.match = (action) => isAction(action) && action.type === type;
      return actionCreator;
    }
    var Tuple = class _Tuple extends Array {
      constructor(...items) {
        super(...items);
        Object.setPrototypeOf(this, _Tuple.prototype);
      }
      static get [Symbol.species]() {
        return _Tuple;
      }
      concat(...arr) {
        return super.concat.apply(this, arr);
      }
      prepend(...arr) {
        if (arr.length === 1 && Array.isArray(arr[0])) {
          return new _Tuple(...arr[0].concat(this));
        }
        return new _Tuple(...arr.concat(this));
      }
    };
    function freezeDraftable(val) {
      return isDraftable(val) ? produce(val, () => {
      }) : val;
    }
    function getOrInsertComputed(map2, key, compute) {
      if (map2.has(key))
        return map2.get(key);
      return map2.set(key, compute(key)).get(key);
    }
    function isBoolean$4(x2) {
      return typeof x2 === "boolean";
    }
    var buildGetDefaultMiddleware = () => function getDefaultMiddleware(options) {
      const {
        thunk: thunk$1 = true,
        immutableCheck = true,
        serializableCheck = true,
        actionCreatorCheck = true
      } = options ?? {};
      let middlewareArray = new Tuple();
      if (thunk$1) {
        if (isBoolean$4(thunk$1)) {
          middlewareArray.push(thunk);
        } else {
          middlewareArray.push(withExtraArgument(thunk$1.extraArgument));
        }
      }
      return middlewareArray;
    };
    var SHOULD_AUTOBATCH = "RTK_autoBatch";
    var prepareAutoBatched = () => (payload) => ({
      payload,
      meta: {
        [SHOULD_AUTOBATCH]: true
      }
    });
    var createQueueWithTimer = (timeout) => {
      return (notify) => {
        setTimeout(notify, timeout);
      };
    };
    var autoBatchEnhancer = (options = {
      type: "raf"
    }) => (next) => (...args) => {
      const store2 = next(...args);
      let notifying = true;
      let shouldNotifyAtEndOfTick = false;
      let notificationQueued = false;
      const listeners = /* @__PURE__ */ new Set();
      const queueCallback = options.type === "tick" ? queueMicrotask : options.type === "raf" ? (
        // requestAnimationFrame won't exist in SSR environments. Fall back to a vague approximation just to keep from erroring.
        typeof window !== "undefined" && window.requestAnimationFrame ? window.requestAnimationFrame : createQueueWithTimer(10)
      ) : options.type === "callback" ? options.queueNotification : createQueueWithTimer(options.timeout);
      const notifyListeners = () => {
        notificationQueued = false;
        if (shouldNotifyAtEndOfTick) {
          shouldNotifyAtEndOfTick = false;
          listeners.forEach((l2) => l2());
        }
      };
      return Object.assign({}, store2, {
        // Override the base `store.subscribe` method to keep original listeners
        // from running if we're delaying notifications
        subscribe(listener2) {
          const wrappedListener = () => notifying && listener2();
          const unsubscribe = store2.subscribe(wrappedListener);
          listeners.add(listener2);
          return () => {
            unsubscribe();
            listeners.delete(listener2);
          };
        },
        // Override the base `store.dispatch` method so that we can check actions
        // for the `shouldAutoBatch` flag and determine if batching is active
        dispatch(action) {
          var _a2;
          try {
            notifying = !((_a2 = action == null ? void 0 : action.meta) == null ? void 0 : _a2[SHOULD_AUTOBATCH]);
            shouldNotifyAtEndOfTick = !notifying;
            if (shouldNotifyAtEndOfTick) {
              if (!notificationQueued) {
                notificationQueued = true;
                queueCallback(notifyListeners);
              }
            }
            return store2.dispatch(action);
          } finally {
            notifying = true;
          }
        }
      });
    };
    var buildGetDefaultEnhancers = (middlewareEnhancer) => function getDefaultEnhancers(options) {
      const {
        autoBatch = true
      } = options ?? {};
      let enhancerArray = new Tuple(middlewareEnhancer);
      if (autoBatch) {
        enhancerArray.push(autoBatchEnhancer(typeof autoBatch === "object" ? autoBatch : void 0));
      }
      return enhancerArray;
    };
    function configureStore(options) {
      const getDefaultMiddleware = buildGetDefaultMiddleware();
      const {
        reducer: reducer2 = void 0,
        middleware,
        devTools = true,
        preloadedState = void 0,
        enhancers = void 0
      } = options || {};
      let rootReducer;
      if (typeof reducer2 === "function") {
        rootReducer = reducer2;
      } else if (isPlainObject$6(reducer2)) {
        rootReducer = combineReducers(reducer2);
      } else {
        throw new Error(formatProdErrorMessage(1));
      }
      let finalMiddleware;
      if (typeof middleware === "function") {
        finalMiddleware = middleware(getDefaultMiddleware);
      } else {
        finalMiddleware = getDefaultMiddleware();
      }
      let finalCompose = compose$1;
      if (devTools) {
        finalCompose = composeWithDevTools({
          // Enable capture of stack traces for dispatched Redux actions
          trace: false,
          ...typeof devTools === "object" && devTools
        });
      }
      const middlewareEnhancer = applyMiddleware(...finalMiddleware);
      const getDefaultEnhancers = buildGetDefaultEnhancers(middlewareEnhancer);
      let storeEnhancers = typeof enhancers === "function" ? enhancers(getDefaultEnhancers) : getDefaultEnhancers();
      const composedEnhancer = finalCompose(...storeEnhancers);
      return createStore(rootReducer, preloadedState, composedEnhancer);
    }
    function executeReducerBuilderCallback(builderCallback) {
      const actionsMap = {};
      const actionMatchers = [];
      let defaultCaseReducer;
      const builder = {
        addCase(typeOrActionCreator, reducer2) {
          const type = typeof typeOrActionCreator === "string" ? typeOrActionCreator : typeOrActionCreator.type;
          if (!type) {
            throw new Error(formatProdErrorMessage(28));
          }
          if (type in actionsMap) {
            throw new Error(formatProdErrorMessage(29));
          }
          actionsMap[type] = reducer2;
          return builder;
        },
        addMatcher(matcher, reducer2) {
          actionMatchers.push({
            matcher,
            reducer: reducer2
          });
          return builder;
        },
        addDefaultCase(reducer2) {
          defaultCaseReducer = reducer2;
          return builder;
        }
      };
      builderCallback(builder);
      return [actionsMap, actionMatchers, defaultCaseReducer];
    }
    function isStateFunction(x2) {
      return typeof x2 === "function";
    }
    function createReducer(initialState2, mapOrBuilderCallback) {
      let [actionsMap, finalActionMatchers, finalDefaultCaseReducer] = executeReducerBuilderCallback(mapOrBuilderCallback);
      let getInitialState2;
      if (isStateFunction(initialState2)) {
        getInitialState2 = () => freezeDraftable(initialState2());
      } else {
        const frozenInitialState = freezeDraftable(initialState2);
        getInitialState2 = () => frozenInitialState;
      }
      function reducer2(state = getInitialState2(), action) {
        let caseReducers = [actionsMap[action.type], ...finalActionMatchers.filter(({
          matcher
        }) => matcher(action)).map(({
          reducer: reducer22
        }) => reducer22)];
        if (caseReducers.filter((cr) => !!cr).length === 0) {
          caseReducers = [finalDefaultCaseReducer];
        }
        return caseReducers.reduce((previousState, caseReducer) => {
          if (caseReducer) {
            if (isDraft(previousState)) {
              const draft = previousState;
              const result = caseReducer(draft, action);
              if (result === void 0) {
                return previousState;
              }
              return result;
            } else if (!isDraftable(previousState)) {
              const result = caseReducer(previousState, action);
              if (result === void 0) {
                if (previousState === null) {
                  return previousState;
                }
                throw Error("A case reducer on a non-draftable value must not return undefined");
              }
              return result;
            } else {
              return produce(previousState, (draft) => {
                return caseReducer(draft, action);
              });
            }
          }
          return previousState;
        }, state);
      }
      reducer2.getInitialState = getInitialState2;
      return reducer2;
    }
    var matches = (matcher, action) => {
      if (hasMatchFunction(matcher)) {
        return matcher.match(action);
      } else {
        return matcher(action);
      }
    };
    function isAnyOf(...matchers) {
      return (action) => {
        return matchers.some((matcher) => matches(matcher, action));
      };
    }
    function isAllOf(...matchers) {
      return (action) => {
        return matchers.every((matcher) => matches(matcher, action));
      };
    }
    function hasExpectedRequestMetadata(action, validStatus) {
      if (!action || !action.meta)
        return false;
      const hasValidRequestId = typeof action.meta.requestId === "string";
      const hasValidRequestStatus = validStatus.indexOf(action.meta.requestStatus) > -1;
      return hasValidRequestId && hasValidRequestStatus;
    }
    function isAsyncThunkArray(a2) {
      return typeof a2[0] === "function" && "pending" in a2[0] && "fulfilled" in a2[0] && "rejected" in a2[0];
    }
    function isPending(...asyncThunks) {
      if (asyncThunks.length === 0) {
        return (action) => hasExpectedRequestMetadata(action, ["pending"]);
      }
      if (!isAsyncThunkArray(asyncThunks)) {
        return isPending()(asyncThunks[0]);
      }
      return isAnyOf(...asyncThunks.map((asyncThunk) => asyncThunk.pending));
    }
    function isRejected(...asyncThunks) {
      if (asyncThunks.length === 0) {
        return (action) => hasExpectedRequestMetadata(action, ["rejected"]);
      }
      if (!isAsyncThunkArray(asyncThunks)) {
        return isRejected()(asyncThunks[0]);
      }
      return isAnyOf(...asyncThunks.map((asyncThunk) => asyncThunk.rejected));
    }
    function isRejectedWithValue(...asyncThunks) {
      const hasFlag = (action) => {
        return action && action.meta && action.meta.rejectedWithValue;
      };
      if (asyncThunks.length === 0) {
        return isAllOf(isRejected(...asyncThunks), hasFlag);
      }
      if (!isAsyncThunkArray(asyncThunks)) {
        return isRejectedWithValue()(asyncThunks[0]);
      }
      return isAllOf(isRejected(...asyncThunks), hasFlag);
    }
    function isFulfilled(...asyncThunks) {
      if (asyncThunks.length === 0) {
        return (action) => hasExpectedRequestMetadata(action, ["fulfilled"]);
      }
      if (!isAsyncThunkArray(asyncThunks)) {
        return isFulfilled()(asyncThunks[0]);
      }
      return isAnyOf(...asyncThunks.map((asyncThunk) => asyncThunk.fulfilled));
    }
    function isAsyncThunkAction(...asyncThunks) {
      if (asyncThunks.length === 0) {
        return (action) => hasExpectedRequestMetadata(action, ["pending", "fulfilled", "rejected"]);
      }
      if (!isAsyncThunkArray(asyncThunks)) {
        return isAsyncThunkAction()(asyncThunks[0]);
      }
      return isAnyOf(...asyncThunks.flatMap((asyncThunk) => [asyncThunk.pending, asyncThunk.rejected, asyncThunk.fulfilled]));
    }
    var urlAlphabet = "ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW";
    var nanoid = (size = 21) => {
      let id2 = "";
      let i2 = size;
      while (i2--) {
        id2 += urlAlphabet[Math.random() * 64 | 0];
      }
      return id2;
    };
    var commonProperties = ["name", "message", "stack", "code"];
    var RejectWithValue = class {
      constructor(payload, meta) {
        /*
        type-only property to distinguish between RejectWithValue and FulfillWithMeta
        does not exist at runtime
        */
        __publicField(this, "_type");
        this.payload = payload;
        this.meta = meta;
      }
    };
    var FulfillWithMeta = class {
      constructor(payload, meta) {
        /*
        type-only property to distinguish between RejectWithValue and FulfillWithMeta
        does not exist at runtime
        */
        __publicField(this, "_type");
        this.payload = payload;
        this.meta = meta;
      }
    };
    var miniSerializeError = (value2) => {
      if (typeof value2 === "object" && value2 !== null) {
        const simpleError = {};
        for (const property2 of commonProperties) {
          if (typeof value2[property2] === "string") {
            simpleError[property2] = value2[property2];
          }
        }
        return simpleError;
      }
      return {
        message: String(value2)
      };
    };
    var createAsyncThunk = /* @__PURE__ */ (() => {
      function createAsyncThunk2(typePrefix, payloadCreator, options) {
        const fulfilled = createAction(typePrefix + "/fulfilled", (payload, requestId, arg, meta) => ({
          payload,
          meta: {
            ...meta || {},
            arg,
            requestId,
            requestStatus: "fulfilled"
          }
        }));
        const pending = createAction(typePrefix + "/pending", (requestId, arg, meta) => ({
          payload: void 0,
          meta: {
            ...meta || {},
            arg,
            requestId,
            requestStatus: "pending"
          }
        }));
        const rejected = createAction(typePrefix + "/rejected", (error2, requestId, arg, payload, meta) => ({
          payload,
          error: (options && options.serializeError || miniSerializeError)(error2 || "Rejected"),
          meta: {
            ...meta || {},
            arg,
            requestId,
            rejectedWithValue: !!payload,
            requestStatus: "rejected",
            aborted: (error2 == null ? void 0 : error2.name) === "AbortError",
            condition: (error2 == null ? void 0 : error2.name) === "ConditionError"
          }
        }));
        function actionCreator(arg) {
          return (dispatch, getState, extra) => {
            const requestId = (options == null ? void 0 : options.idGenerator) ? options.idGenerator(arg) : nanoid();
            const abortController = new AbortController();
            let abortHandler;
            let abortReason;
            function abort(reason) {
              abortReason = reason;
              abortController.abort();
            }
            const promise = async function() {
              var _a2, _b2;
              let finalAction;
              try {
                let conditionResult = (_a2 = options == null ? void 0 : options.condition) == null ? void 0 : _a2.call(options, arg, {
                  getState,
                  extra
                });
                if (isThenable$1(conditionResult)) {
                  conditionResult = await conditionResult;
                }
                if (conditionResult === false || abortController.signal.aborted) {
                  throw {
                    name: "ConditionError",
                    message: "Aborted due to condition callback returning false."
                  };
                }
                const abortedPromise = new Promise((_2, reject) => {
                  abortHandler = () => {
                    reject({
                      name: "AbortError",
                      message: abortReason || "Aborted"
                    });
                  };
                  abortController.signal.addEventListener("abort", abortHandler);
                });
                dispatch(pending(requestId, arg, (_b2 = options == null ? void 0 : options.getPendingMeta) == null ? void 0 : _b2.call(options, {
                  requestId,
                  arg
                }, {
                  getState,
                  extra
                })));
                finalAction = await Promise.race([abortedPromise, Promise.resolve(payloadCreator(arg, {
                  dispatch,
                  getState,
                  extra,
                  requestId,
                  signal: abortController.signal,
                  abort,
                  rejectWithValue: (value2, meta) => {
                    return new RejectWithValue(value2, meta);
                  },
                  fulfillWithValue: (value2, meta) => {
                    return new FulfillWithMeta(value2, meta);
                  }
                })).then((result) => {
                  if (result instanceof RejectWithValue) {
                    throw result;
                  }
                  if (result instanceof FulfillWithMeta) {
                    return fulfilled(result.payload, requestId, arg, result.meta);
                  }
                  return fulfilled(result, requestId, arg);
                })]);
              } catch (err) {
                finalAction = err instanceof RejectWithValue ? rejected(null, requestId, arg, err.payload, err.meta) : rejected(err, requestId, arg);
              } finally {
                if (abortHandler) {
                  abortController.signal.removeEventListener("abort", abortHandler);
                }
              }
              const skipDispatch = options && !options.dispatchConditionRejection && rejected.match(finalAction) && finalAction.meta.condition;
              if (!skipDispatch) {
                dispatch(finalAction);
              }
              return finalAction;
            }();
            return Object.assign(promise, {
              abort,
              requestId,
              arg,
              unwrap() {
                return promise.then(unwrapResult);
              }
            });
          };
        }
        return Object.assign(actionCreator, {
          pending,
          rejected,
          fulfilled,
          settled: isAnyOf(rejected, fulfilled),
          typePrefix
        });
      }
      createAsyncThunk2.withTypes = () => createAsyncThunk2;
      return createAsyncThunk2;
    })();
    function unwrapResult(action) {
      if (action.meta && action.meta.rejectedWithValue) {
        throw action.payload;
      }
      if (action.error) {
        throw action.error;
      }
      return action.payload;
    }
    function isThenable$1(value2) {
      return value2 !== null && typeof value2 === "object" && typeof value2.then === "function";
    }
    var asyncThunkSymbol = /* @__PURE__ */ Symbol.for("rtk-slice-createasyncthunk");
    function getType(slice, actionKey) {
      return `${slice}/${actionKey}`;
    }
    function buildCreateSlice({
      creators
    } = {}) {
      var _a2;
      const cAT = (_a2 = creators == null ? void 0 : creators.asyncThunk) == null ? void 0 : _a2[asyncThunkSymbol];
      return function createSlice2(options) {
        const {
          name,
          reducerPath = name
        } = options;
        if (!name) {
          throw new Error(formatProdErrorMessage(11));
        }
        if (typeof process !== "undefined" && false) {
          if (options.initialState === void 0) {
            console.error("You must provide an `initialState` value that is not `undefined`. You may have misspelled `initialState`");
          }
        }
        const reducers = (typeof options.reducers === "function" ? options.reducers(buildReducerCreators()) : options.reducers) || {};
        const reducerNames = Object.keys(reducers);
        const context = {
          sliceCaseReducersByName: {},
          sliceCaseReducersByType: {},
          actionCreators: {},
          sliceMatchers: []
        };
        const contextMethods = {
          addCase(typeOrActionCreator, reducer22) {
            const type = typeof typeOrActionCreator === "string" ? typeOrActionCreator : typeOrActionCreator.type;
            if (!type) {
              throw new Error(formatProdErrorMessage(12));
            }
            if (type in context.sliceCaseReducersByType) {
              throw new Error(formatProdErrorMessage(13));
            }
            context.sliceCaseReducersByType[type] = reducer22;
            return contextMethods;
          },
          addMatcher(matcher, reducer22) {
            context.sliceMatchers.push({
              matcher,
              reducer: reducer22
            });
            return contextMethods;
          },
          exposeAction(name2, actionCreator) {
            context.actionCreators[name2] = actionCreator;
            return contextMethods;
          },
          exposeCaseReducer(name2, reducer22) {
            context.sliceCaseReducersByName[name2] = reducer22;
            return contextMethods;
          }
        };
        reducerNames.forEach((reducerName) => {
          const reducerDefinition = reducers[reducerName];
          const reducerDetails = {
            reducerName,
            type: getType(name, reducerName),
            createNotation: typeof options.reducers === "function"
          };
          if (isAsyncThunkSliceReducerDefinition(reducerDefinition)) {
            handleThunkCaseReducerDefinition(reducerDetails, reducerDefinition, contextMethods, cAT);
          } else {
            handleNormalReducerDefinition(reducerDetails, reducerDefinition, contextMethods);
          }
        });
        function buildReducer() {
          const [extraReducers = {}, actionMatchers = [], defaultCaseReducer = void 0] = typeof options.extraReducers === "function" ? executeReducerBuilderCallback(options.extraReducers) : [options.extraReducers];
          const finalCaseReducers = {
            ...extraReducers,
            ...context.sliceCaseReducersByType
          };
          return createReducer(options.initialState, (builder) => {
            for (let key in finalCaseReducers) {
              builder.addCase(key, finalCaseReducers[key]);
            }
            for (let sM of context.sliceMatchers) {
              builder.addMatcher(sM.matcher, sM.reducer);
            }
            for (let m2 of actionMatchers) {
              builder.addMatcher(m2.matcher, m2.reducer);
            }
            if (defaultCaseReducer) {
              builder.addDefaultCase(defaultCaseReducer);
            }
          });
        }
        const selectSelf = (state) => state;
        const injectedSelectorCache = /* @__PURE__ */ new Map();
        let _reducer;
        function reducer2(state, action) {
          if (!_reducer)
            _reducer = buildReducer();
          return _reducer(state, action);
        }
        function getInitialState2() {
          if (!_reducer)
            _reducer = buildReducer();
          return _reducer.getInitialState();
        }
        function makeSelectorProps(reducerPath2, injected = false) {
          function selectSlice(state) {
            let sliceState = state[reducerPath2];
            if (typeof sliceState === "undefined") {
              if (injected) {
                sliceState = getInitialState2();
              }
            }
            return sliceState;
          }
          function getSelectors(selectState = selectSelf) {
            const selectorCache = getOrInsertComputed(injectedSelectorCache, injected, () => /* @__PURE__ */ new WeakMap());
            return getOrInsertComputed(selectorCache, selectState, () => {
              const map2 = {};
              for (const [name2, selector] of Object.entries(options.selectors ?? {})) {
                map2[name2] = wrapSelector(selector, selectState, getInitialState2, injected);
              }
              return map2;
            });
          }
          return {
            reducerPath: reducerPath2,
            getSelectors,
            get selectors() {
              return getSelectors(selectSlice);
            },
            selectSlice
          };
        }
        const slice = {
          name,
          reducer: reducer2,
          actions: context.actionCreators,
          caseReducers: context.sliceCaseReducersByName,
          getInitialState: getInitialState2,
          ...makeSelectorProps(reducerPath),
          injectInto(injectable, {
            reducerPath: pathOpt,
            ...config2
          } = {}) {
            const newReducerPath = pathOpt ?? reducerPath;
            injectable.inject({
              reducerPath: newReducerPath,
              reducer: reducer2
            }, config2);
            return {
              ...slice,
              ...makeSelectorProps(newReducerPath, true)
            };
          }
        };
        return slice;
      };
    }
    function wrapSelector(selector, selectState, getInitialState2, injected) {
      function wrapper(rootState, ...args) {
        let sliceState = selectState(rootState);
        if (typeof sliceState === "undefined") {
          if (injected) {
            sliceState = getInitialState2();
          }
        }
        return selector(sliceState, ...args);
      }
      wrapper.unwrapped = selector;
      return wrapper;
    }
    var createSlice = /* @__PURE__ */ buildCreateSlice();
    function buildReducerCreators() {
      function asyncThunk(payloadCreator, config2) {
        return {
          _reducerDefinitionType: "asyncThunk",
          payloadCreator,
          ...config2
        };
      }
      asyncThunk.withTypes = () => asyncThunk;
      return {
        reducer(caseReducer) {
          return Object.assign({
            // hack so the wrapping function has the same name as the original
            // we need to create a wrapper so the `reducerDefinitionType` is not assigned to the original
            [caseReducer.name](...args) {
              return caseReducer(...args);
            }
          }[caseReducer.name], {
            _reducerDefinitionType: "reducer"
            /* reducer */
          });
        },
        preparedReducer(prepare, reducer2) {
          return {
            _reducerDefinitionType: "reducerWithPrepare",
            prepare,
            reducer: reducer2
          };
        },
        asyncThunk
      };
    }
    function handleNormalReducerDefinition({
      type,
      reducerName,
      createNotation
    }, maybeReducerWithPrepare, context) {
      let caseReducer;
      let prepareCallback;
      if ("reducer" in maybeReducerWithPrepare) {
        if (createNotation && !isCaseReducerWithPrepareDefinition(maybeReducerWithPrepare)) {
          throw new Error(formatProdErrorMessage(17));
        }
        caseReducer = maybeReducerWithPrepare.reducer;
        prepareCallback = maybeReducerWithPrepare.prepare;
      } else {
        caseReducer = maybeReducerWithPrepare;
      }
      context.addCase(type, caseReducer).exposeCaseReducer(reducerName, caseReducer).exposeAction(reducerName, prepareCallback ? createAction(type, prepareCallback) : createAction(type));
    }
    function isAsyncThunkSliceReducerDefinition(reducerDefinition) {
      return reducerDefinition._reducerDefinitionType === "asyncThunk";
    }
    function isCaseReducerWithPrepareDefinition(reducerDefinition) {
      return reducerDefinition._reducerDefinitionType === "reducerWithPrepare";
    }
    function handleThunkCaseReducerDefinition({
      type,
      reducerName
    }, reducerDefinition, context, cAT) {
      if (!cAT) {
        throw new Error(formatProdErrorMessage(18));
      }
      const {
        payloadCreator,
        fulfilled,
        pending,
        rejected,
        settled,
        options
      } = reducerDefinition;
      const thunk2 = cAT(type, payloadCreator, options);
      context.exposeAction(reducerName, thunk2);
      if (fulfilled) {
        context.addCase(thunk2.fulfilled, fulfilled);
      }
      if (pending) {
        context.addCase(thunk2.pending, pending);
      }
      if (rejected) {
        context.addCase(thunk2.rejected, rejected);
      }
      if (settled) {
        context.addMatcher(thunk2.settled, settled);
      }
      context.exposeCaseReducer(reducerName, {
        fulfilled: fulfilled || noop$7,
        pending: pending || noop$7,
        rejected: rejected || noop$7,
        settled: settled || noop$7
      });
    }
    function noop$7() {
    }
    function formatProdErrorMessage(code) {
      return `Minified Redux Toolkit error #${code}; visit https://redux-toolkit.js.org/Errors?code=${code} for the full message or use the non-minified dev environment for full errors. `;
    }
    const summary = {
      totalTasks: 10,
      last10Task: [
        {
          _id: "65c5f12ab5204a81bde866a9",
          title: "Test task",
          date: "2024-02-09T00:00:00.000Z",
          priority: "high",
          stage: "todo",
          assets: [
            "https://firebasestorage.googleapis.com/v0/b/taskmanager-557d7.appspot.com/o/1707471138863original-a005132062ca5bafc505c4c74f0e1865.jpg?alt=media&token=55f909f2-7f05-42f3-af4f-dc7f87cdea1d",
            "https://firebasestorage.googleapis.com/v0/b/taskmanager-557d7.appspot.com/o/1707471144712PsZch9E1_400x400.jpg?alt=media&token=7ce62c7e-c240-4032-83c6-bb6c9cdc0d4b"
          ],
          team: [
            {
              _id: "65c202d4aa62f32ffd1303cc",
              name: "Codewave Asante",
              title: "Administrator",
              role: "Admin",
              email: "admin@gmail.com"
            },
            {
              _id: "65c30b96e639681a13def0b5",
              name: "Jane Smith",
              title: "Product Manager",
              role: "Manager",
              email: "jane.smith@example.com"
            },
            {
              _id: "65c317360fd860f958baa08e",
              name: "Alex Johnson",
              title: "UX Designer",
              role: "Designer",
              email: "alex.johnson@example.com"
            }
          ],
          isTrashed: false,
          activities: [],
          subTasks: [
            {
              title: "Task manager youtube tutorial",
              date: "2024-02-09T00:00:00.000Z",
              tag: "tutorial",
              _id: "65c5f153b5204a81bde866c8"
            }
          ],
          createdAt: "2024-02-09T09:32:26.574Z",
          updatedAt: "2024-02-09T09:36:53.339Z",
          __v: 1
        },
        {
          _id: "65c5d547660756f6fd453a7a",
          title: "Duplicate - Duplicate - Review Code Changes",
          date: "2024-02-09T00:00:00.000Z",
          priority: "medium",
          stage: "in progress",
          assets: [],
          team: [
            {
              _id: "65c317360fd860f958baa08e",
              name: "Alex Johnson",
              title: "UX Designer",
              role: "Designer",
              email: "alex.johnson@example.com"
            },
            {
              _id: "65c3176a0fd860f958baa099",
              name: "Emily Wilson",
              title: "Data Analyst",
              role: "Analyst",
              email: "emily.wilson@example.com"
            }
          ],
          isTrashed: false,
          activities: [
            {
              type: "started",
              activity: "Project started",
              date: "2024-02-09T09:16:56.623Z",
              by: "65c202d4aa62f32ffd1303cc",
              _id: "65c5f18bb5204a81bde866d1"
            },
            {
              type: "commented",
              activity: "i like coding!!",
              date: "2024-02-09T09:16:56.623Z",
              by: "65c202d4aa62f32ffd1303cc",
              _id: "65c5f19eb5204a81bde866dd"
            },
            {
              type: "bug",
              activity: "bug found",
              date: "2024-02-09T09:16:56.623Z",
              by: "65c202d4aa62f32ffd1303cc",
              _id: "65c5f1abb5204a81bde866eb"
            }
          ],
          subTasks: [
            {
              title: "Blog App Admin Dashboard",
              date: "2024-02-08T00:00:00.000Z",
              tag: "Website App",
              _id: "65c3535476ed5c48f9440973"
            }
          ],
          createdAt: "2024-02-09T07:33:27.590Z",
          updatedAt: "2024-02-09T09:36:10.386Z",
          __v: 4
        },
        {
          _id: "65c46026af6ec0118be9407a",
          title: "Website Project Proposal Review",
          date: "2024-02-07T00:00:00.000Z",
          priority: "high",
          stage: "todo",
          assets: [
            "https://firebasestorage.googleapis.com/v0/b/taskmanager-557d7.appspot.com/o/1707410130023hand-holding-writing-checklist-application-form-document-clipboard-white-background-3d-illustration.jpg?alt=media&token=08de4848-517f-48ca-a9b4-624744d5ddb0",
            "https://firebasestorage.googleapis.com/v0/b/taskmanager-557d7.appspot.com/o/1707412301523image_processing20220706-26930-ktfgon.png?alt=media&token=6cd185c1-9fc3-4f52-bb0b-0d4a29e65b85",
            "https://firebasestorage.googleapis.com/v0/b/taskmanager-557d7.appspot.com/o/1707412306237image_processing20220706-11953-1f826f4.png?alt=media&token=7270475f-a994-41fd-8ae6-62e00f72b0b3"
          ],
          team: [
            {
              _id: "65c202d4aa62f32ffd1303cc",
              name: "Codewave Asante",
              title: "Administrator",
              role: "Admin",
              email: "admin@gmail.com"
            },
            {
              _id: "65c27a0e18c0a1b750ad5cad",
              name: "John Doe",
              title: "Software Engineer",
              role: "Developer",
              email: "john.doe@example.com"
            },
            {
              _id: "65c30b96e639681a13def0b5",
              name: "Jane Smith",
              title: "Product Manager",
              role: "Manager",
              email: "jane.smith@example.com"
            }
          ],
          isTrashed: false,
          activities: [
            {
              type: "assigned",
              activity: "Test activity. Let's go!!!",
              date: "2024-02-08T17:55:34.353Z",
              by: "65c202d4aa62f32ffd1303cc",
              _id: "65c5188be1585cfa650b79c4"
            },
            {
              type: "in progress",
              activity: "Project is progress. Hiope to fin=ish soon!!",
              date: "2024-02-08T17:55:34.353Z",
              by: "65c202d4aa62f32ffd1303cc",
              _id: "65c518dce1585cfa650b79da"
            },
            {
              type: "bug",
              activity: "Bug found in the code. Kindly check and fixed ASAP!!!",
              date: "2024-02-08T18:13:14.717Z",
              by: "65c202d4aa62f32ffd1303cc",
              _id: "65c51a5e8064df97d208b392"
            },
            {
              type: "commented",
              activity: "Nice work. Let's finished hard!!!",
              date: "2024-02-08T18:13:14.717Z",
              by: "65c202d4aa62f32ffd1303cc",
              _id: "65c51af08064df97d208b3b0"
            }
          ],
          subTasks: [
            {
              title: "Blog App Dashboard",
              date: "2024-02-06T00:00:00.000Z",
              tag: "Design",
              _id: "65c352e776ed5c48f944095c"
            },
            {
              title: "Blog App Admin Dashboard",
              date: "2024-02-07T00:00:00.000Z",
              tag: "Design",
              _id: "65c3531476ed5c48f9440965"
            }
          ],
          createdAt: "2024-02-08T05:01:26.983Z",
          updatedAt: "2024-02-09T06:51:15.005Z",
          __v: 8
        },
        {
          _id: "65c45fb6af6ec0118be94052",
          title: "Task Manager Youtube Video",
          date: "2024-02-11T00:00:00.000Z",
          priority: "medium",
          stage: "completed",
          assets: [
            "https://firebasestorage.googleapis.com/v0/b/taskmanager-557d7.appspot.com/o/1707412043078report.jpg?alt=media&token=41d02b42-c25c-4fbb-90a9-340a45f4bbe1",
            "https://firebasestorage.googleapis.com/v0/b/taskmanager-557d7.appspot.com/o/1707412052287hand-holding-writing-checklist-application-form-document-clipboard-white-background-3d-illustration.jpg?alt=media&token=98b360b4-954c-47e3-8283-8228a54a327c"
          ],
          team: [
            {
              _id: "65c317360fd860f958baa08e",
              name: "Alex Johnson",
              title: "UX Designer",
              role: "Designer",
              email: "alex.johnson@example.com"
            },
            {
              _id: "65c3176a0fd860f958baa099",
              name: "Emily Wilson",
              title: "Data Analyst",
              role: "Analyst",
              email: "emily.wilson@example.com"
            }
          ],
          isTrashed: false,
          activities: [
            {
              type: "completed",
              activity: "Project completed!!",
              date: "2024-02-08T18:13:14.717Z",
              by: "65c202d4aa62f32ffd1303cc",
              _id: "65c51b998064df97d208b3f9"
            }
          ],
          subTasks: [
            {
              title: "Blog App Admin Dashboard",
              date: "2024-02-08T00:00:00.000Z",
              tag: "Website App",
              _id: "65c3535476ed5c48f9440973"
            }
          ],
          createdAt: "2024-02-08T04:59:34.826Z",
          updatedAt: "2024-02-09T06:51:15.005Z",
          __v: 3
        },
        {
          _id: "65c4586f0548279012f8c256",
          title: "Bug Fixing",
          date: "2024-02-07T00:00:00.000Z",
          priority: "high",
          stage: "todo",
          assets: [
            "https://firebasestorage.googleapis.com/v0/b/taskmanager-557d7.appspot.com/o/1707412457946Wed%20Dev%20Course.png?alt=media&token=028416bf-88c6-4738-9a5a-d90e6d53b202",
            "https://firebasestorage.googleapis.com/v0/b/taskmanager-557d7.appspot.com/o/1707412466672original-380755132e03e80a9fa3ef1203219cf3.png?alt=media&token=10d96b0d-feea-4627-aa1e-9b8f87cf7500",
            "https://firebasestorage.googleapis.com/v0/b/taskmanager-557d7.appspot.com/o/1707412469358original-a738b8d0cbced29ae8609072d006fbcb.jpg?alt=media&token=9a6cc56f-63ff-4405-b978-d962c3c1f1d0",
            "https://firebasestorage.googleapis.com/v0/b/taskmanager-557d7.appspot.com/o/1707412472346cosial.png?alt=media&token=b6e427b3-bc36-4fa2-a8f9-438f9ebf93e2",
            "https://firebasestorage.googleapis.com/v0/b/taskmanager-557d7.appspot.com/o/1707412478590original-a005132062ca5bafc505c4c74f0e1865.jpg?alt=media&token=e81047bd-a1e2-49e5-85f5-feda31c423f2"
          ],
          team: [
            {
              _id: "65c30b96e639681a13def0b5",
              name: "Jane Smith",
              title: "Product Manager",
              role: "Manager",
              email: "jane.smith@example.com"
            },
            {
              _id: "65c202d4aa62f32ffd1303cc",
              name: "Codewave Asante",
              title: "Administrator",
              role: "Admin",
              email: "admin@gmail.com"
            },
            {
              _id: "65c317360fd860f958baa08e",
              name: "Alex Johnson",
              title: "UX Designer",
              role: "Designer",
              email: "alex.johnson@example.com"
            }
          ],
          isTrashed: false,
          activities: [
            {
              type: "commented",
              activity: "Great!!!",
              date: "2024-02-08T18:13:14.717Z",
              by: "65c202d4aa62f32ffd1303cc",
              _id: "65c51b678064df97d208b3d6"
            }
          ],
          subTasks: [
            {
              title: "Check Login code and fix bugs asap",
              date: "2024-02-08T00:00:00.000Z",
              tag: "Bug Fixing",
              _id: "65c46074af6ec0118be94094"
            }
          ],
          createdAt: "2024-02-08T04:28:31.966Z",
          updatedAt: "2024-02-09T06:51:15.005Z",
          __v: 3
        },
        {
          _id: "65c3c457fb9c6768ce4bc31a",
          title: "Duplicate - Website Project Proposal",
          date: "2024-02-07T17:55:13.218Z",
          priority: "high",
          stage: "todo",
          assets: [],
          team: [
            {
              _id: "65c202d4aa62f32ffd1303cc",
              name: "Codewave Asante",
              title: "Administrator",
              role: "Admin",
              email: "admin@gmail.com"
            },
            {
              _id: "65c27a0e18c0a1b750ad5cad",
              name: "John Doe",
              title: "Software Engineer",
              role: "Developer",
              email: "john.doe@example.com"
            },
            {
              _id: "65c30b96e639681a13def0b5",
              name: "Jane Smith",
              title: "Product Manager",
              role: "Manager",
              email: "jane.smith@example.com"
            }
          ],
          isTrashed: false,
          activities: [],
          subTasks: [
            {
              title: "Blog App Dashboard",
              date: "2024-02-06T00:00:00.000Z",
              tag: "Design",
              _id: "65c352e776ed5c48f944095c"
            },
            {
              title: "Blog App Admin Dashboard",
              date: "2024-02-07T00:00:00.000Z",
              tag: "Design",
              _id: "65c3531476ed5c48f9440965"
            }
          ],
          createdAt: "2024-02-07T17:56:39.969Z",
          updatedAt: "2024-02-09T06:51:15.005Z",
          __v: 1
        },
        {
          _id: "65c3c439fb9c6768ce4bc308",
          title: "Duplicate - Review Code Changes",
          date: "2024-02-07T17:55:13.218Z",
          priority: "medium",
          stage: "in progress",
          assets: [],
          team: [
            {
              _id: "65c317360fd860f958baa08e",
              name: "Alex Johnson",
              title: "UX Designer",
              role: "Designer",
              email: "alex.johnson@example.com"
            },
            {
              _id: "65c3176a0fd860f958baa099",
              name: "Emily Wilson",
              title: "Data Analyst",
              role: "Analyst",
              email: "emily.wilson@example.com"
            }
          ],
          isTrashed: false,
          activities: [],
          subTasks: [
            {
              title: "Blog App Admin Dashboard",
              date: "2024-02-08T00:00:00.000Z",
              tag: "Website App",
              _id: "65c3535476ed5c48f9440973"
            }
          ],
          createdAt: "2024-02-07T17:56:09.174Z",
          updatedAt: "2024-02-07T17:56:09.456Z",
          __v: 1
        },
        {
          _id: "65c3c21f55ae9b2f7666e86c",
          title: "Duplicate - Website Project Proposal",
          date: "2024-02-07T17:46:56.040Z",
          priority: "normal",
          stage: "todo",
          assets: [],
          team: [
            {
              _id: "65c202d4aa62f32ffd1303cc",
              name: "Codewave Asante",
              title: "Administrator",
              role: "Admin",
              email: "admin@gmail.com"
            },
            {
              _id: "65c27a0e18c0a1b750ad5cad",
              name: "John Doe",
              title: "Software Engineer",
              role: "Developer",
              email: "john.doe@example.com"
            },
            {
              _id: "65c30b96e639681a13def0b5",
              name: "Jane Smith",
              title: "Product Manager",
              role: "Manager",
              email: "jane.smith@example.com"
            }
          ],
          isTrashed: false,
          activities: [],
          subTasks: [
            {
              title: "Blog App Dashboard",
              date: "2024-02-06T00:00:00.000Z",
              tag: "Design",
              _id: "65c352e776ed5c48f944095c"
            },
            {
              title: "Blog App Admin Dashboard",
              date: "2024-02-07T00:00:00.000Z",
              tag: "Design",
              _id: "65c3531476ed5c48f9440965"
            }
          ],
          createdAt: "2024-02-07T17:47:11.560Z",
          updatedAt: "2024-02-07T17:47:11.972Z",
          __v: 1
        },
        {
          _id: "65c352b376ed5c48f9440955",
          title: "Review Code Changes",
          date: "2024-02-05T00:00:00.000Z",
          priority: "medium",
          stage: "in progress",
          assets: [],
          team: [
            {
              _id: "65c317360fd860f958baa08e",
              name: "Alex Johnson",
              title: "UX Designer",
              role: "Designer",
              email: "alex.johnson@example.com"
            },
            {
              _id: "65c3176a0fd860f958baa099",
              name: "Emily Wilson",
              title: "Data Analyst",
              role: "Analyst",
              email: "emily.wilson@example.com"
            }
          ],
          isTrashed: false,
          activities: [],
          subTasks: [
            {
              title: "Blog App Admin Dashboard",
              date: "2024-02-08T00:00:00.000Z",
              tag: "Website App",
              _id: "65c3535476ed5c48f9440973"
            }
          ],
          createdAt: "2024-02-07T09:51:47.149Z",
          updatedAt: "2024-02-07T09:54:28.645Z",
          __v: 1
        },
        {
          _id: "65c351b976ed5c48f9440947",
          title: "Website Project Proposal",
          date: "2024-02-07T00:00:00.000Z",
          priority: "high",
          stage: "todo",
          assets: [],
          team: [
            {
              _id: "65c202d4aa62f32ffd1303cc",
              name: "Codewave Asante",
              title: "Administrator",
              role: "Admin",
              email: "admin@gmail.com"
            },
            {
              _id: "65c27a0e18c0a1b750ad5cad",
              name: "John Doe",
              title: "Software Engineer",
              role: "Developer",
              email: "john.doe@example.com"
            },
            {
              _id: "65c30b96e639681a13def0b5",
              name: "Jane Smith",
              title: "Product Manager",
              role: "Manager",
              email: "jane.smith@example.com"
            }
          ],
          isTrashed: false,
          activities: [],
          subTasks: [
            {
              title: "Blog App Dashboard",
              date: "2024-02-06T00:00:00.000Z",
              tag: "Design",
              _id: "65c352e776ed5c48f944095c"
            },
            {
              title: "Blog App Admin Dashboard",
              date: "2024-02-07T00:00:00.000Z",
              tag: "Design",
              _id: "65c3531476ed5c48f9440965"
            }
          ],
          createdAt: "2024-02-07T09:47:37.337Z",
          updatedAt: "2024-02-07T09:53:24.079Z",
          __v: 2
        }
      ],
      users: [
        {
          _id: "65c5f27fb5204a81bde86833",
          name: "New User",
          title: "Designer",
          role: "Developer",
          isActive: true,
          createdAt: "2024-02-09T09:38:07.765Z"
        },
        {
          _id: "65c3176a0fd860f958baa099",
          name: "Emily Wilson",
          title: "Data Analyst",
          role: "Analyst",
          isActive: true,
          createdAt: "2024-02-07T05:38:50.816Z"
        },
        {
          _id: "65c317360fd860f958baa08e",
          name: "Alex Johnson",
          title: "UX Designer",
          role: "Designer",
          isActive: true,
          createdAt: "2024-02-07T05:37:58.862Z"
        },
        {
          _id: "65c30b96e639681a13def0b5",
          name: "Jane Smith",
          title: "Product Manager",
          role: "Manager",
          isActive: true,
          createdAt: "2024-02-07T04:48:22.519Z"
        },
        {
          _id: "65c202d4aa62f32ffd1303cc",
          name: "Codewave Asante",
          title: "Administrator",
          role: "Admin",
          createdAt: "2024-02-06T09:58:44.794Z",
          isActive: true
        }
      ],
      tasks: {
        todo: 6,
        "in progress": 3,
        completed: 1
      }
    };
    const tasks = [
      {
        _id: "65c5f12ab5204a81bde866a9",
        title: "Test task",
        date: "2024-02-09T00:00:00.000Z",
        priority: "high",
        stage: "todo",
        assets: [
          "https://firebasestorage.googleapis.com/v0/b/taskmanager-557d7.appspot.com/o/1707471138863original-a005132062ca5bafc505c4c74f0e1865.jpg?alt=media&token=55f909f2-7f05-42f3-af4f-dc7f87cdea1d",
          "https://firebasestorage.googleapis.com/v0/b/taskmanager-557d7.appspot.com/o/1707471144712PsZch9E1_400x400.jpg?alt=media&token=7ce62c7e-c240-4032-83c6-bb6c9cdc0d4b"
        ],
        team: [
          {
            _id: "65c202d4aa62f32ffd1303cc",
            name: "Codewave Asante",
            title: "Administrator",
            email: "admin@gmail.com"
          },
          {
            _id: "65c30b96e639681a13def0b5",
            name: "Jane Smith",
            title: "Product Manager",
            email: "jane.smith@example.com"
          },
          {
            _id: "65c317360fd860f958baa08e",
            name: "Alex Johnson",
            title: "UX Designer",
            email: "alex.johnson@example.com"
          }
        ],
        isTrashed: false,
        activities: [],
        subTasks: [
          {
            title: "Task manager youtube tutorial",
            date: "2024-02-09T00:00:00.000Z",
            tag: "tutorial",
            _id: "65c5f153b5204a81bde866c8"
          }
        ],
        createdAt: "2024-02-09T09:32:26.574Z",
        updatedAt: "2024-02-09T09:36:53.339Z",
        __v: 1
      },
      {
        _id: "65c5d547660756f6fd453a7a",
        title: "Duplicate - Duplicate - Review Code Changes",
        date: "2024-02-09T00:00:00.000Z",
        priority: "medium",
        stage: "in progress",
        assets: [],
        team: [
          {
            _id: "65c317360fd860f958baa08e",
            name: "Alex Johnson",
            title: "UX Designer",
            email: "alex.johnson@example.com"
          },
          {
            _id: "65c3176a0fd860f958baa099",
            name: "Emily Wilson",
            title: "Data Analyst",
            email: "emily.wilson@example.com"
          }
        ],
        isTrashed: false,
        activities: [
          {
            type: "started",
            activity: "Project started",
            date: "2024-02-09T09:16:56.623Z",
            by: "65c202d4aa62f32ffd1303cc",
            _id: "65c5f18bb5204a81bde866d1"
          },
          {
            type: "commented",
            activity: "i like coding!!",
            date: "2024-02-09T09:16:56.623Z",
            by: "65c202d4aa62f32ffd1303cc",
            _id: "65c5f19eb5204a81bde866dd"
          },
          {
            type: "bug",
            activity: "bug found",
            date: "2024-02-09T09:16:56.623Z",
            by: "65c202d4aa62f32ffd1303cc",
            _id: "65c5f1abb5204a81bde866eb"
          }
        ],
        subTasks: [
          {
            title: "Blog App Admin Dashboard",
            date: "2024-02-08T00:00:00.000Z",
            tag: "Website App",
            _id: "65c3535476ed5c48f9440973"
          }
        ],
        createdAt: "2024-02-09T07:33:27.590Z",
        updatedAt: "2024-02-09T09:36:10.386Z",
        __v: 4
      },
      {
        _id: "65c46026af6ec0118be9407a",
        title: "Website Project Proposal Review",
        date: "2024-02-07T00:00:00.000Z",
        priority: "high",
        stage: "todo",
        assets: [
          "https://firebasestorage.googleapis.com/v0/b/taskmanager-557d7.appspot.com/o/1707410130023hand-holding-writing-checklist-application-form-document-clipboard-white-background-3d-illustration.jpg?alt=media&token=08de4848-517f-48ca-a9b4-624744d5ddb0",
          "https://firebasestorage.googleapis.com/v0/b/taskmanager-557d7.appspot.com/o/1707412301523image_processing20220706-26930-ktfgon.png?alt=media&token=6cd185c1-9fc3-4f52-bb0b-0d4a29e65b85",
          "https://firebasestorage.googleapis.com/v0/b/taskmanager-557d7.appspot.com/o/1707412306237image_processing20220706-11953-1f826f4.png?alt=media&token=7270475f-a994-41fd-8ae6-62e00f72b0b3"
        ],
        team: [
          {
            _id: "65c202d4aa62f32ffd1303cc",
            name: "Codewave Asante",
            title: "Administrator",
            email: "admin@gmail.com"
          },
          {
            _id: "65c27a0e18c0a1b750ad5cad",
            name: "John Doe",
            title: "Software Engineer",
            email: "john.doe@example.com"
          },
          {
            _id: "65c30b96e639681a13def0b5",
            name: "Jane Smith",
            title: "Product Manager",
            email: "jane.smith@example.com"
          }
        ],
        isTrashed: false,
        activities: [
          {
            type: "assigned",
            activity: "Test activity. Let's go!!!",
            date: "2024-02-08T17:55:34.353Z",
            by: "65c202d4aa62f32ffd1303cc",
            _id: "65c5188be1585cfa650b79c4"
          },
          {
            type: "in progress",
            activity: "Project is progress. Hiope to fin=ish soon!!",
            date: "2024-02-08T17:55:34.353Z",
            by: "65c202d4aa62f32ffd1303cc",
            _id: "65c518dce1585cfa650b79da"
          },
          {
            type: "bug",
            activity: "Bug found in the code. Kindly check and fixed ASAP!!!",
            date: "2024-02-08T18:13:14.717Z",
            by: "65c202d4aa62f32ffd1303cc",
            _id: "65c51a5e8064df97d208b392"
          },
          {
            type: "commented",
            activity: "Nice work. Let's finished hard!!!",
            date: "2024-02-08T18:13:14.717Z",
            by: "65c202d4aa62f32ffd1303cc",
            _id: "65c51af08064df97d208b3b0"
          }
        ],
        subTasks: [
          {
            title: "Blog App Dashboard",
            date: "2024-02-06T00:00:00.000Z",
            tag: "Design",
            _id: "65c352e776ed5c48f944095c"
          },
          {
            title: "Blog App Admin Dashboard",
            date: "2024-02-07T00:00:00.000Z",
            tag: "Design",
            _id: "65c3531476ed5c48f9440965"
          }
        ],
        createdAt: "2024-02-08T05:01:26.983Z",
        updatedAt: "2024-02-09T06:51:15.005Z",
        __v: 8
      },
      {
        _id: "65c45fb6af6ec0118be94052",
        title: "Task Manager Youtube Video",
        date: "2024-02-11T00:00:00.000Z",
        priority: "medium",
        stage: "completed",
        assets: [
          "https://firebasestorage.googleapis.com/v0/b/taskmanager-557d7.appspot.com/o/1707412043078report.jpg?alt=media&token=41d02b42-c25c-4fbb-90a9-340a45f4bbe1",
          "https://firebasestorage.googleapis.com/v0/b/taskmanager-557d7.appspot.com/o/1707412052287hand-holding-writing-checklist-application-form-document-clipboard-white-background-3d-illustration.jpg?alt=media&token=98b360b4-954c-47e3-8283-8228a54a327c"
        ],
        team: [
          {
            _id: "65c317360fd860f958baa08e",
            name: "Alex Johnson",
            title: "UX Designer",
            email: "alex.johnson@example.com"
          },
          {
            _id: "65c3176a0fd860f958baa099",
            name: "Emily Wilson",
            title: "Data Analyst",
            email: "emily.wilson@example.com"
          }
        ],
        isTrashed: false,
        activities: [
          {
            type: "started",
            activity: "Project completed!!",
            date: "2024-02-08T18:13:14.717Z",
            by: { _id: "65c202d4aa62f32ffd1303cc", name: "Codewave" },
            _id: "65c51b998064dfd208b3f9"
          },
          {
            type: "commented",
            activity: "Project completed!!",
            date: "2024-02-08T18:13:14.717Z",
            by: { _id: "65c202d4aa62f32ffd1303cc", name: "Codewave" },
            _id: "65c51b98064df97d208b3f9"
          },
          {
            type: "completed",
            activity: "Project completed!!",
            date: "2024-02-08T18:13:14.717Z",
            by: { _id: "65c202d4aa62f32ffd1303cc", name: "Codewave" },
            _id: "65c51b998064df97d208b3f9"
          }
        ],
        subTasks: [
          {
            title: "Blog App Admin Dashboard",
            date: "2024-02-08T00:00:00.000Z",
            tag: "Website App",
            _id: "65c3535476ed5c48f9440973"
          }
        ],
        createdAt: "2024-02-08T04:59:34.826Z",
        updatedAt: "2024-02-09T06:51:15.005Z",
        __v: 3
      },
      {
        _id: "65c4586f0548279012f8c256",
        title: "Bug Fixing",
        date: "2024-02-07T00:00:00.000Z",
        priority: "high",
        stage: "todo",
        assets: [
          "https://firebasestorage.googleapis.com/v0/b/taskmanager-557d7.appspot.com/o/1707412457946Wed%20Dev%20Course.png?alt=media&token=028416bf-88c6-4738-9a5a-d90e6d53b202",
          "https://firebasestorage.googleapis.com/v0/b/taskmanager-557d7.appspot.com/o/1707412466672original-380755132e03e80a9fa3ef1203219cf3.png?alt=media&token=10d96b0d-feea-4627-aa1e-9b8f87cf7500",
          "https://firebasestorage.googleapis.com/v0/b/taskmanager-557d7.appspot.com/o/1707412469358original-a738b8d0cbced29ae8609072d006fbcb.jpg?alt=media&token=9a6cc56f-63ff-4405-b978-d962c3c1f1d0",
          "https://firebasestorage.googleapis.com/v0/b/taskmanager-557d7.appspot.com/o/1707412472346cosial.png?alt=media&token=b6e427b3-bc36-4fa2-a8f9-438f9ebf93e2",
          "https://firebasestorage.googleapis.com/v0/b/taskmanager-557d7.appspot.com/o/1707412478590original-a005132062ca5bafc505c4c74f0e1865.jpg?alt=media&token=e81047bd-a1e2-49e5-85f5-feda31c423f2"
        ],
        team: [
          {
            _id: "65c30b96e639681a13def0b5",
            name: "Jane Smith",
            title: "Product Manager",
            email: "jane.smith@example.com"
          },
          {
            _id: "65c202d4aa62f32ffd1303cc",
            name: "Codewave Asante",
            title: "Administrator",
            email: "admin@gmail.com"
          },
          {
            _id: "65c317360fd860f958baa08e",
            name: "Alex Johnson",
            title: "UX Designer",
            email: "alex.johnson@example.com"
          }
        ],
        isTrashed: false,
        activities: [
          {
            type: "commented",
            activity: "Great!!!",
            date: "2024-02-08T18:13:14.717Z",
            by: "65c202d4aa62f32ffd1303cc",
            _id: "65c51b678064df97d208b3d6"
          }
        ],
        subTasks: [
          {
            title: "Check Login code and fix bugs asap",
            date: "2024-02-08T00:00:00.000Z",
            tag: "Bug Fixing",
            _id: "65c46074af6ec0118be94094"
          }
        ],
        createdAt: "2024-02-08T04:28:31.966Z",
        updatedAt: "2024-02-09T06:51:15.005Z",
        __v: 3
      },
      {
        _id: "65c3c457fb9c6768ce4bc31a",
        title: "Duplicate - Website Project Proposal",
        date: "2024-02-07T17:55:13.218Z",
        priority: "high",
        stage: "todo",
        assets: [],
        team: [
          {
            _id: "65c202d4aa62f32ffd1303cc",
            name: "Codewave Asante",
            title: "Administrator",
            email: "admin@gmail.com"
          },
          {
            _id: "65c27a0e18c0a1b750ad5cad",
            name: "John Doe",
            title: "Software Engineer",
            email: "john.doe@example.com"
          },
          {
            _id: "65c30b96e639681a13def0b5",
            name: "Jane Smith",
            title: "Product Manager",
            email: "jane.smith@example.com"
          }
        ],
        isTrashed: false,
        activities: [],
        subTasks: [
          {
            title: "Blog App Dashboard",
            date: "2024-02-06T00:00:00.000Z",
            tag: "Design",
            _id: "65c352e776ed5c48f944095c"
          },
          {
            title: "Blog App Admin Dashboard",
            date: "2024-02-07T00:00:00.000Z",
            tag: "Design",
            _id: "65c3531476ed5c48f9440965"
          }
        ],
        createdAt: "2024-02-07T17:56:39.969Z",
        updatedAt: "2024-02-09T06:51:15.005Z",
        __v: 1
      },
      {
        _id: "65c3c439fb9c6768ce4bc308",
        title: "Duplicate - Review Code Changes",
        date: "2024-02-07T17:55:13.218Z",
        priority: "medium",
        stage: "in progress",
        assets: [],
        team: [
          {
            _id: "65c317360fd860f958baa08e",
            name: "Alex Johnson",
            title: "UX Designer",
            email: "alex.johnson@example.com"
          },
          {
            _id: "65c3176a0fd860f958baa099",
            name: "Emily Wilson",
            title: "Data Analyst",
            email: "emily.wilson@example.com"
          }
        ],
        isTrashed: false,
        activities: [],
        subTasks: [
          {
            title: "Blog App Admin Dashboard",
            date: "2024-02-08T00:00:00.000Z",
            tag: "Website App",
            _id: "65c3535476ed5c48f9440973"
          }
        ],
        createdAt: "2024-02-07T17:56:09.174Z",
        updatedAt: "2024-02-07T17:56:09.456Z",
        __v: 1
      },
      {
        _id: "65c3c21f55ae9b2f7666e86c",
        title: "Duplicate - Website Project Proposal",
        date: "2024-02-07T17:46:56.040Z",
        priority: "normal",
        stage: "todo",
        assets: [],
        team: [
          {
            _id: "65c202d4aa62f32ffd1303cc",
            name: "Codewave Asante",
            title: "Administrator",
            email: "admin@gmail.com"
          },
          {
            _id: "65c27a0e18c0a1b750ad5cad",
            name: "John Doe",
            title: "Software Engineer",
            email: "john.doe@example.com"
          },
          {
            _id: "65c30b96e639681a13def0b5",
            name: "Jane Smith",
            title: "Product Manager",
            email: "jane.smith@example.com"
          }
        ],
        isTrashed: false,
        activities: [],
        subTasks: [
          {
            title: "Blog App Dashboard",
            date: "2024-02-06T00:00:00.000Z",
            tag: "Design",
            _id: "65c352e776ed5c48f944095c"
          },
          {
            title: "Blog App Admin Dashboard",
            date: "2024-02-07T00:00:00.000Z",
            tag: "Design",
            _id: "65c3531476ed5c48f9440965"
          }
        ],
        createdAt: "2024-02-07T17:47:11.560Z",
        updatedAt: "2024-02-07T17:47:11.972Z",
        __v: 1
      },
      {
        _id: "65c352b376ed5c48f9440955",
        title: "Review Code Changes",
        date: "2024-02-05T00:00:00.000Z",
        priority: "medium",
        stage: "in progress",
        assets: [],
        team: [
          {
            _id: "65c317360fd860f958baa08e",
            name: "Alex Johnson",
            title: "UX Designer",
            email: "alex.johnson@example.com"
          },
          {
            _id: "65c3176a0fd860f958baa099",
            name: "Emily Wilson",
            title: "Data Analyst",
            email: "emily.wilson@example.com"
          }
        ],
        isTrashed: false,
        activities: [],
        subTasks: [
          {
            title: "Blog App Admin Dashboard",
            date: "2024-02-08T00:00:00.000Z",
            tag: "Website App",
            _id: "65c3535476ed5c48f9440973"
          }
        ],
        createdAt: "2024-02-07T09:51:47.149Z",
        updatedAt: "2024-02-07T09:54:28.645Z",
        __v: 1
      },
      {
        _id: "65c351b976ed5c48f9440947",
        title: "Website Project Proposal",
        date: "2024-02-07T00:00:00.000Z",
        priority: "high",
        stage: "todo",
        assets: [],
        team: [
          {
            _id: "65c202d4aa62f32ffd1303cc",
            name: "Codewave Asante",
            title: "Administrator",
            email: "admin@gmail.com"
          },
          {
            _id: "65c27a0e18c0a1b750ad5cad",
            name: "John Doe",
            title: "Software Engineer",
            email: "john.doe@example.com"
          },
          {
            _id: "65c30b96e639681a13def0b5",
            name: "Jane Smith",
            title: "Product Manager",
            email: "jane.smith@example.com"
          }
        ],
        isTrashed: false,
        activities: [],
        subTasks: [
          {
            title: "Blog App Dashboard",
            date: "2024-02-06T00:00:00.000Z",
            tag: "Design",
            _id: "65c352e776ed5c48f944095c"
          },
          {
            title: "Blog App Admin Dashboard",
            date: "2024-02-07T00:00:00.000Z",
            tag: "Design",
            _id: "65c3531476ed5c48f9440965"
          }
        ],
        createdAt: "2024-02-07T09:47:37.337Z",
        updatedAt: "2024-02-07T09:53:24.079Z",
        __v: 2
      }
    ];
    [
      {
        _id: "0",
        type: "started",
        activity: "started this task.",
        date: (/* @__PURE__ */ new Date("2023-01-15")).toISOString(),
        by: "Akwasi Asante"
      },
      {
        _id: "1",
        type: "commented",
        activity: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Tincidunt nunc ipsum tempor purus vitae id. Morbi in vestibulum nec varius. Et diam cursus quis sed purus nam.",
        date: (/* @__PURE__ */ new Date("2023-01-15")).toISOString(),
        by: "Eduardo Benz"
      },
      {
        _id: "2",
        type: "assigned",
        activity: "task to Codewave Asante",
        date: (/* @__PURE__ */ new Date("2023-01-15")).toISOString(),
        by: "Akwasi Asante"
      },
      {
        _id: "3",
        type: "in progress",
        activity: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Tincidunt nunc ipsum.",
        date: (/* @__PURE__ */ new Date("2024-01-15")).toISOString(),
        by: "Jason Meyers"
      },
      {
        _id: "5",
        type: "bug",
        activity: "bug to Codewave Asante",
        date: (/* @__PURE__ */ new Date("2023-01-15")).toISOString(),
        by: "Akwasi Asante"
      },
      {
        _id: "4",
        type: "completed",
        activity: "Codewave Asante has completed the task assigned",
        date: (/* @__PURE__ */ new Date("2023-01-15")).toISOString(),
        by: "Akwasi Asante"
      }
    ];
    const initialState$1 = {
      user: localStorage.getItem("user") ? JSON.parse(localStorage.getItem("user")) : null,
      isSidebarOpen: false
    };
    const authSlice = createSlice({
      name: "auth",
      initialState: initialState$1,
      reducers: {
        setCredentials: (state, action) => {
          state.user = action.payload.user;
          state.token = action.payload.token;
          localStorage.setItem("user", JSON.stringify(action.payload.user));
          localStorage.setItem("token", action.payload.token);
        },
        logout: (state) => {
          state.user = null;
          state.token = null;
          localStorage.removeItem("user");
          localStorage.removeItem("token");
          localStorage.removeItem("notifications");
        },
        setOpenSidebar: (state, action) => {
          state.isSidebarOpen = action.payload;
        }
      }
    });
    const { setCredentials, logout, setOpenSidebar } = authSlice.actions;
    const authReducer = authSlice.reducer;
    function FaBug(props) {
      return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 512 512" }, "child": [{ "tag": "path", "attr": { "d": "M511.988 288.9c-.478 17.43-15.217 31.1-32.653 31.1H424v16c0 21.864-4.882 42.584-13.6 61.145l60.228 60.228c12.496 12.497 12.496 32.758 0 45.255-12.498 12.497-32.759 12.496-45.256 0l-54.736-54.736C345.886 467.965 314.351 480 280 480V236c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v244c-34.351 0-65.886-12.035-90.636-32.108l-54.736 54.736c-12.498 12.497-32.759 12.496-45.256 0-12.496-12.497-12.496-32.758 0-45.255l60.228-60.228C92.882 378.584 88 357.864 88 336v-16H32.666C15.23 320 .491 306.33.013 288.9-.484 270.816 14.028 256 32 256h56v-58.745l-46.628-46.628c-12.496-12.497-12.496-32.758 0-45.255 12.498-12.497 32.758-12.497 45.256 0L141.255 160h229.489l54.627-54.627c12.498-12.497 32.758-12.497 45.256 0 12.496 12.497 12.496 32.758 0 45.255L424 197.255V256h56c17.972 0 32.484 14.816 31.988 32.9zM257 0c-61.856 0-112 50.144-112 112h224C369 50.144 318.856 0 257 0z" }, "child": [] }] })(props);
    }
    function FaNewspaper(props) {
      return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 576 512" }, "child": [{ "tag": "path", "attr": { "d": "M552 64H88c-13.255 0-24 10.745-24 24v8H24c-13.255 0-24 10.745-24 24v272c0 30.928 25.072 56 56 56h472c26.51 0 48-21.49 48-48V88c0-13.255-10.745-24-24-24zM56 400a8 8 0 0 1-8-8V144h16v248a8 8 0 0 1-8 8zm236-16H140c-6.627 0-12-5.373-12-12v-8c0-6.627 5.373-12 12-12h152c6.627 0 12 5.373 12 12v8c0 6.627-5.373 12-12 12zm208 0H348c-6.627 0-12-5.373-12-12v-8c0-6.627 5.373-12 12-12h152c6.627 0 12 5.373 12 12v8c0 6.627-5.373 12-12 12zm-208-96H140c-6.627 0-12-5.373-12-12v-8c0-6.627 5.373-12 12-12h152c6.627 0 12 5.373 12 12v8c0 6.627-5.373 12-12 12zm208 0H348c-6.627 0-12-5.373-12-12v-8c0-6.627 5.373-12 12-12h152c6.627 0 12 5.373 12 12v8c0 6.627-5.373 12-12 12zm0-96H140c-6.627 0-12-5.373-12-12v-40c0-6.627 5.373-12 12-12h360c6.627 0 12 5.373 12 12v40c0 6.627-5.373 12-12 12z" }, "child": [] }] })(props);
    }
    function FaQuestion(props) {
      return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 384 512" }, "child": [{ "tag": "path", "attr": { "d": "M202.021 0C122.202 0 70.503 32.703 29.914 91.026c-7.363 10.58-5.093 25.086 5.178 32.874l43.138 32.709c10.373 7.865 25.132 6.026 33.253-4.148 25.049-31.381 43.63-49.449 82.757-49.449 30.764 0 68.816 19.799 68.816 49.631 0 22.552-18.617 34.134-48.993 51.164-35.423 19.86-82.299 44.576-82.299 106.405V320c0 13.255 10.745 24 24 24h72.471c13.255 0 24-10.745 24-24v-5.773c0-42.86 125.268-44.645 125.268-160.627C377.504 66.256 286.902 0 202.021 0zM192 373.459c-38.196 0-69.271 31.075-69.271 69.271 0 38.195 31.075 69.27 69.271 69.27s69.271-31.075 69.271-69.271-31.075-69.27-69.271-69.27z" }, "child": [] }] })(props);
    }
    function FaTasks(props) {
      return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 512 512" }, "child": [{ "tag": "path", "attr": { "d": "M139.61 35.5a12 12 0 0 0-17 0L58.93 98.81l-22.7-22.12a12 12 0 0 0-17 0L3.53 92.41a12 12 0 0 0 0 17l47.59 47.4a12.78 12.78 0 0 0 17.61 0l15.59-15.62L156.52 69a12.09 12.09 0 0 0 .09-17zm0 159.19a12 12 0 0 0-17 0l-63.68 63.72-22.7-22.1a12 12 0 0 0-17 0L3.53 252a12 12 0 0 0 0 17L51 316.5a12.77 12.77 0 0 0 17.6 0l15.7-15.69 72.2-72.22a12 12 0 0 0 .09-16.9zM64 368c-26.49 0-48.59 21.5-48.59 48S37.53 464 64 464a48 48 0 0 0 0-96zm432 16H208a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h288a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm0-320H208a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h288a16 16 0 0 0 16-16V80a16 16 0 0 0-16-16zm0 160H208a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h288a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16z" }, "child": [] }] })(props);
    }
    function FaThumbsUp(props) {
      return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 512 512" }, "child": [{ "tag": "path", "attr": { "d": "M104 224H24c-13.255 0-24 10.745-24 24v240c0 13.255 10.745 24 24 24h80c13.255 0 24-10.745 24-24V248c0-13.255-10.745-24-24-24zM64 472c-13.255 0-24-10.745-24-24s10.745-24 24-24 24 10.745 24 24-10.745 24-24 24zM384 81.452c0 42.416-25.97 66.208-33.277 94.548h101.723c33.397 0 59.397 27.746 59.553 58.098.084 17.938-7.546 37.249-19.439 49.197l-.11.11c9.836 23.337 8.237 56.037-9.308 79.469 8.681 25.895-.069 57.704-16.382 74.757 4.298 17.598 2.244 32.575-6.148 44.632C440.202 511.587 389.616 512 346.839 512l-2.845-.001c-48.287-.017-87.806-17.598-119.56-31.725-15.957-7.099-36.821-15.887-52.651-16.178-6.54-.12-11.783-5.457-11.783-11.998v-213.77c0-3.2 1.282-6.271 3.558-8.521 39.614-39.144 56.648-80.587 89.117-113.111 14.804-14.832 20.188-37.236 25.393-58.902C282.515 39.293 291.817 0 312 0c24 0 72 8 72 81.452z" }, "child": [] }] })(props);
    }
    function FaUser(props) {
      return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 448 512" }, "child": [{ "tag": "path", "attr": { "d": "M224 256c70.7 0 128-57.3 128-128S294.7 0 224 0 96 57.3 96 128s57.3 128 128 128zm89.6 32h-16.7c-22.2 10.2-46.9 16-72.9 16s-50.6-5.8-72.9-16h-16.7C60.2 288 0 348.2 0 422.4V464c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48v-41.6c0-74.2-60.2-134.4-134.4-134.4z" }, "child": [] }] })(props);
    }
    const formatDate = (date2) => {
      const month = date2.toLocaleString("en-US", { month: "short" });
      const day = date2.getDate();
      const year = date2.getFullYear();
      const formattedDate = `${day}-${month}-${year}`;
      return formattedDate;
    };
    function getInitials(fullName) {
      const names = fullName.split(" ");
      const initials = names.slice(0, 2).map((name) => name[0].toUpperCase());
      const initialsStr = initials.join("");
      return initialsStr;
    }
    const PRIOTITYSTYELS = {
      high: "text-red-600",
      medium: "text-yellow-600",
      low: "text-blue-600"
    };
    const TASK_TYPE$1 = {
      pending: "bg-blue-600",
      "in progress": "bg-yellow-600",
      completed: "bg-green-600"
    };
    const BGS = [
      "bg-blue-600",
      "bg-yellow-600",
      "bg-red-600",
      "bg-green-600"
    ];
    const UserAvatar = () => {
      reactExports.useState(false);
      reactExports.useState(false);
      const { user } = useSelector((state) => state.auth);
      const dispatch = useDispatch();
      useNavigate();
      const logoutHandler = () => {
        Ut.success("Logged out successfully", {
          position: "top-center",
          duration: 2e3
        });
        dispatch(logout());
      };
      return /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { children: /* @__PURE__ */ jsxRuntimeExports.jsxs(qe$2, { as: "div", className: "relative inline-block text-left", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { children: /* @__PURE__ */ jsxRuntimeExports.jsx(qe$2.Button, { className: "w-10 h-10 2xl:w-12 2xl:h-12 items-center justify-center rounded-full bg-blue-600", children: /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-white font-semibold", children: getInitials(user == null ? void 0 : user.name) }) }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          qe,
          {
            as: reactExports.Fragment,
            enter: "transition ease-out duration-100",
            enterFrom: "transform opacity-0 scale-95",
            enterTo: "transform opacity-100 scale-100",
            leave: "transition ease-in duration-75",
            leaveFrom: "transform opacity-100 scale-100",
            leaveTo: "transform opacity-0 scale-95",
            children: /* @__PURE__ */ jsxRuntimeExports.jsx(qe$2.Items, { className: "absolute right-0 mt-2 w-56 origin-top-right divide-gray-100 rounded-md bg-white shadow-2xl ring-1 ring-black/5 focus:outline-none", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "p-4", children: /* @__PURE__ */ jsxRuntimeExports.jsx(qe$2.Item, { children: ({ active }) => /* @__PURE__ */ jsxRuntimeExports.jsxs(
              "button",
              {
                onClick: logoutHandler,
                className: `text-red-600 group flex w-full items-center rounded-md px-2 py-2 text-base`,
                children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(IoLogOutOutline, { className: "mr-2", "aria-hidden": "true" }),
                  "Logout"
                ]
              }
            ) }) }) })
          }
        )
      ] }) }) });
    };
    //! moment.js
    //! version : 2.30.1
    //! authors : Tim Wood, Iskren Chernev, Moment.js contributors
    //! license : MIT
    //! momentjs.com
    var hookCallback;
    function hooks() {
      return hookCallback.apply(null, arguments);
    }
    function setHookCallback(callback) {
      hookCallback = callback;
    }
    function isArray$h(input) {
      return input instanceof Array || Object.prototype.toString.call(input) === "[object Array]";
    }
    function isObject$c(input) {
      return input != null && Object.prototype.toString.call(input) === "[object Object]";
    }
    function hasOwnProp(a2, b2) {
      return Object.prototype.hasOwnProperty.call(a2, b2);
    }
    function isObjectEmpty$1(obj) {
      if (Object.getOwnPropertyNames) {
        return Object.getOwnPropertyNames(obj).length === 0;
      } else {
        var k2;
        for (k2 in obj) {
          if (hasOwnProp(obj, k2)) {
            return false;
          }
        }
        return true;
      }
    }
    function isUndefined$2(input) {
      return input === void 0;
    }
    function isNumber$5(input) {
      return typeof input === "number" || Object.prototype.toString.call(input) === "[object Number]";
    }
    function isDate$1(input) {
      return input instanceof Date || Object.prototype.toString.call(input) === "[object Date]";
    }
    function map$4(arr, fn) {
      var res = [], i2, arrLen = arr.length;
      for (i2 = 0; i2 < arrLen; ++i2) {
        res.push(fn(arr[i2], i2));
      }
      return res;
    }
    function extend$2(a2, b2) {
      for (var i2 in b2) {
        if (hasOwnProp(b2, i2)) {
          a2[i2] = b2[i2];
        }
      }
      if (hasOwnProp(b2, "toString")) {
        a2.toString = b2.toString;
      }
      if (hasOwnProp(b2, "valueOf")) {
        a2.valueOf = b2.valueOf;
      }
      return a2;
    }
    function createUTC(input, format2, locale2, strict) {
      return createLocalOrUTC(input, format2, locale2, strict, true).utc();
    }
    function defaultParsingFlags() {
      return {
        empty: false,
        unusedTokens: [],
        unusedInput: [],
        overflow: -2,
        charsLeftOver: 0,
        nullInput: false,
        invalidEra: null,
        invalidMonth: null,
        invalidFormat: false,
        userInvalidated: false,
        iso: false,
        parsedDateParts: [],
        era: null,
        meridiem: null,
        rfc2822: false,
        weekdayMismatch: false
      };
    }
    function getParsingFlags(m2) {
      if (m2._pf == null) {
        m2._pf = defaultParsingFlags();
      }
      return m2._pf;
    }
    var some$2;
    if (Array.prototype.some) {
      some$2 = Array.prototype.some;
    } else {
      some$2 = function(fun) {
        var t2 = Object(this), len = t2.length >>> 0, i2;
        for (i2 = 0; i2 < len; i2++) {
          if (i2 in t2 && fun.call(this, t2[i2], i2, t2)) {
            return true;
          }
        }
        return false;
      };
    }
    function isValid(m2) {
      var flags = null, parsedParts = false, isNowValid = m2._d && !isNaN(m2._d.getTime());
      if (isNowValid) {
        flags = getParsingFlags(m2);
        parsedParts = some$2.call(flags.parsedDateParts, function(i2) {
          return i2 != null;
        });
        isNowValid = flags.overflow < 0 && !flags.empty && !flags.invalidEra && !flags.invalidMonth && !flags.invalidWeekday && !flags.weekdayMismatch && !flags.nullInput && !flags.invalidFormat && !flags.userInvalidated && (!flags.meridiem || flags.meridiem && parsedParts);
        if (m2._strict) {
          isNowValid = isNowValid && flags.charsLeftOver === 0 && flags.unusedTokens.length === 0 && flags.bigHour === void 0;
        }
      }
      if (Object.isFrozen == null || !Object.isFrozen(m2)) {
        m2._isValid = isNowValid;
      } else {
        return isNowValid;
      }
      return m2._isValid;
    }
    function createInvalid(flags) {
      var m2 = createUTC(NaN);
      if (flags != null) {
        extend$2(getParsingFlags(m2), flags);
      } else {
        getParsingFlags(m2).userInvalidated = true;
      }
      return m2;
    }
    var momentProperties = hooks.momentProperties = [], updateInProgress = false;
    function copyConfig(to2, from2) {
      var i2, prop, val, momentPropertiesLen = momentProperties.length;
      if (!isUndefined$2(from2._isAMomentObject)) {
        to2._isAMomentObject = from2._isAMomentObject;
      }
      if (!isUndefined$2(from2._i)) {
        to2._i = from2._i;
      }
      if (!isUndefined$2(from2._f)) {
        to2._f = from2._f;
      }
      if (!isUndefined$2(from2._l)) {
        to2._l = from2._l;
      }
      if (!isUndefined$2(from2._strict)) {
        to2._strict = from2._strict;
      }
      if (!isUndefined$2(from2._tzm)) {
        to2._tzm = from2._tzm;
      }
      if (!isUndefined$2(from2._isUTC)) {
        to2._isUTC = from2._isUTC;
      }
      if (!isUndefined$2(from2._offset)) {
        to2._offset = from2._offset;
      }
      if (!isUndefined$2(from2._pf)) {
        to2._pf = getParsingFlags(from2);
      }
      if (!isUndefined$2(from2._locale)) {
        to2._locale = from2._locale;
      }
      if (momentPropertiesLen > 0) {
        for (i2 = 0; i2 < momentPropertiesLen; i2++) {
          prop = momentProperties[i2];
          val = from2[prop];
          if (!isUndefined$2(val)) {
            to2[prop] = val;
          }
        }
      }
      return to2;
    }
    function Moment(config2) {
      copyConfig(this, config2);
      this._d = new Date(config2._d != null ? config2._d.getTime() : NaN);
      if (!this.isValid()) {
        this._d = /* @__PURE__ */ new Date(NaN);
      }
      if (updateInProgress === false) {
        updateInProgress = true;
        hooks.updateOffset(this);
        updateInProgress = false;
      }
    }
    function isMoment(obj) {
      return obj instanceof Moment || obj != null && obj._isAMomentObject != null;
    }
    function warn$1(msg) {
      if (hooks.suppressDeprecationWarnings === false && typeof console !== "undefined" && console.warn) {
        console.warn("Deprecation warning: " + msg);
      }
    }
    function deprecate(msg, fn) {
      var firstTime = true;
      return extend$2(function() {
        if (hooks.deprecationHandler != null) {
          hooks.deprecationHandler(null, msg);
        }
        if (firstTime) {
          var args = [], arg, i2, key, argLen = arguments.length;
          for (i2 = 0; i2 < argLen; i2++) {
            arg = "";
            if (typeof arguments[i2] === "object") {
              arg += "\n[" + i2 + "] ";
              for (key in arguments[0]) {
                if (hasOwnProp(arguments[0], key)) {
                  arg += key + ": " + arguments[0][key] + ", ";
                }
              }
              arg = arg.slice(0, -2);
            } else {
              arg = arguments[i2];
            }
            args.push(arg);
          }
          warn$1(
            msg + "\nArguments: " + Array.prototype.slice.call(args).join("") + "\n" + new Error().stack
          );
          firstTime = false;
        }
        return fn.apply(this, arguments);
      }, fn);
    }
    var deprecations = {};
    function deprecateSimple(name, msg) {
      if (hooks.deprecationHandler != null) {
        hooks.deprecationHandler(name, msg);
      }
      if (!deprecations[name]) {
        warn$1(msg);
        deprecations[name] = true;
      }
    }
    hooks.suppressDeprecationWarnings = false;
    hooks.deprecationHandler = null;
    function isFunction$7(input) {
      return typeof Function !== "undefined" && input instanceof Function || Object.prototype.toString.call(input) === "[object Function]";
    }
    function set$1(config2) {
      var prop, i2;
      for (i2 in config2) {
        if (hasOwnProp(config2, i2)) {
          prop = config2[i2];
          if (isFunction$7(prop)) {
            this[i2] = prop;
          } else {
            this["_" + i2] = prop;
          }
        }
      }
      this._config = config2;
      this._dayOfMonthOrdinalParseLenient = new RegExp(
        (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) + "|" + /\d{1,2}/.source
      );
    }
    function mergeConfigs(parentConfig, childConfig) {
      var res = extend$2({}, parentConfig), prop;
      for (prop in childConfig) {
        if (hasOwnProp(childConfig, prop)) {
          if (isObject$c(parentConfig[prop]) && isObject$c(childConfig[prop])) {
            res[prop] = {};
            extend$2(res[prop], parentConfig[prop]);
            extend$2(res[prop], childConfig[prop]);
          } else if (childConfig[prop] != null) {
            res[prop] = childConfig[prop];
          } else {
            delete res[prop];
          }
        }
      }
      for (prop in parentConfig) {
        if (hasOwnProp(parentConfig, prop) && !hasOwnProp(childConfig, prop) && isObject$c(parentConfig[prop])) {
          res[prop] = extend$2({}, res[prop]);
        }
      }
      return res;
    }
    function Locale(config2) {
      if (config2 != null) {
        this.set(config2);
      }
    }
    var keys$6;
    if (Object.keys) {
      keys$6 = Object.keys;
    } else {
      keys$6 = function(obj) {
        var i2, res = [];
        for (i2 in obj) {
          if (hasOwnProp(obj, i2)) {
            res.push(i2);
          }
        }
        return res;
      };
    }
    var defaultCalendar = {
      sameDay: "[Today at] LT",
      nextDay: "[Tomorrow at] LT",
      nextWeek: "dddd [at] LT",
      lastDay: "[Yesterday at] LT",
      lastWeek: "[Last] dddd [at] LT",
      sameElse: "L"
    };
    function calendar$1(key, mom, now2) {
      var output = this._calendar[key] || this._calendar["sameElse"];
      return isFunction$7(output) ? output.call(mom, now2) : output;
    }
    function zeroFill(number2, targetLength, forceSign) {
      var absNumber = "" + Math.abs(number2), zerosToFill = targetLength - absNumber.length, sign2 = number2 >= 0;
      return (sign2 ? forceSign ? "+" : "" : "-") + Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
    }
    var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g, localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g, formatFunctions = {}, formatTokenFunctions = {};
    function addFormatToken(token2, padded, ordinal2, callback) {
      var func = callback;
      if (typeof callback === "string") {
        func = function() {
          return this[callback]();
        };
      }
      if (token2) {
        formatTokenFunctions[token2] = func;
      }
      if (padded) {
        formatTokenFunctions[padded[0]] = function() {
          return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
        };
      }
      if (ordinal2) {
        formatTokenFunctions[ordinal2] = function() {
          return this.localeData().ordinal(
            func.apply(this, arguments),
            token2
          );
        };
      }
    }
    function removeFormattingTokens(input) {
      if (input.match(/\[[\s\S]/)) {
        return input.replace(/^\[|\]$/g, "");
      }
      return input.replace(/\\/g, "");
    }
    function makeFormatFunction(format2) {
      var array2 = format2.match(formattingTokens), i2, length;
      for (i2 = 0, length = array2.length; i2 < length; i2++) {
        if (formatTokenFunctions[array2[i2]]) {
          array2[i2] = formatTokenFunctions[array2[i2]];
        } else {
          array2[i2] = removeFormattingTokens(array2[i2]);
        }
      }
      return function(mom) {
        var output = "", i3;
        for (i3 = 0; i3 < length; i3++) {
          output += isFunction$7(array2[i3]) ? array2[i3].call(mom, format2) : array2[i3];
        }
        return output;
      };
    }
    function formatMoment(m2, format2) {
      if (!m2.isValid()) {
        return m2.localeData().invalidDate();
      }
      format2 = expandFormat(format2, m2.localeData());
      formatFunctions[format2] = formatFunctions[format2] || makeFormatFunction(format2);
      return formatFunctions[format2](m2);
    }
    function expandFormat(format2, locale2) {
      var i2 = 5;
      function replaceLongDateFormatTokens(input) {
        return locale2.longDateFormat(input) || input;
      }
      localFormattingTokens.lastIndex = 0;
      while (i2 >= 0 && localFormattingTokens.test(format2)) {
        format2 = format2.replace(
          localFormattingTokens,
          replaceLongDateFormatTokens
        );
        localFormattingTokens.lastIndex = 0;
        i2 -= 1;
      }
      return format2;
    }
    var defaultLongDateFormat = {
      LTS: "h:mm:ss A",
      LT: "h:mm A",
      L: "MM/DD/YYYY",
      LL: "MMMM D, YYYY",
      LLL: "MMMM D, YYYY h:mm A",
      LLLL: "dddd, MMMM D, YYYY h:mm A"
    };
    function longDateFormat(key) {
      var format2 = this._longDateFormat[key], formatUpper = this._longDateFormat[key.toUpperCase()];
      if (format2 || !formatUpper) {
        return format2;
      }
      this._longDateFormat[key] = formatUpper.match(formattingTokens).map(function(tok) {
        if (tok === "MMMM" || tok === "MM" || tok === "DD" || tok === "dddd") {
          return tok.slice(1);
        }
        return tok;
      }).join("");
      return this._longDateFormat[key];
    }
    var defaultInvalidDate = "Invalid date";
    function invalidDate() {
      return this._invalidDate;
    }
    var defaultOrdinal = "%d", defaultDayOfMonthOrdinalParse = /\d{1,2}/;
    function ordinal$1(number2) {
      return this._ordinal.replace("%d", number2);
    }
    var defaultRelativeTime = {
      future: "in %s",
      past: "%s ago",
      s: "a few seconds",
      ss: "%d seconds",
      m: "a minute",
      mm: "%d minutes",
      h: "an hour",
      hh: "%d hours",
      d: "a day",
      dd: "%d days",
      w: "a week",
      ww: "%d weeks",
      M: "a month",
      MM: "%d months",
      y: "a year",
      yy: "%d years"
    };
    function relativeTime(number2, withoutSuffix, string2, isFuture) {
      var output = this._relativeTime[string2];
      return isFunction$7(output) ? output(number2, withoutSuffix, string2, isFuture) : output.replace(/%d/i, number2);
    }
    function pastFuture(diff2, output) {
      var format2 = this._relativeTime[diff2 > 0 ? "future" : "past"];
      return isFunction$7(format2) ? format2(output) : format2.replace(/%s/i, output);
    }
    var aliases = {
      D: "date",
      dates: "date",
      date: "date",
      d: "day",
      days: "day",
      day: "day",
      e: "weekday",
      weekdays: "weekday",
      weekday: "weekday",
      E: "isoWeekday",
      isoweekdays: "isoWeekday",
      isoweekday: "isoWeekday",
      DDD: "dayOfYear",
      dayofyears: "dayOfYear",
      dayofyear: "dayOfYear",
      h: "hour",
      hours: "hour",
      hour: "hour",
      ms: "millisecond",
      milliseconds: "millisecond",
      millisecond: "millisecond",
      m: "minute",
      minutes: "minute",
      minute: "minute",
      M: "month",
      months: "month",
      month: "month",
      Q: "quarter",
      quarters: "quarter",
      quarter: "quarter",
      s: "second",
      seconds: "second",
      second: "second",
      gg: "weekYear",
      weekyears: "weekYear",
      weekyear: "weekYear",
      GG: "isoWeekYear",
      isoweekyears: "isoWeekYear",
      isoweekyear: "isoWeekYear",
      w: "week",
      weeks: "week",
      week: "week",
      W: "isoWeek",
      isoweeks: "isoWeek",
      isoweek: "isoWeek",
      y: "year",
      years: "year",
      year: "year"
    };
    function normalizeUnits(units) {
      return typeof units === "string" ? aliases[units] || aliases[units.toLowerCase()] : void 0;
    }
    function normalizeObjectUnits(inputObject) {
      var normalizedInput = {}, normalizedProp, prop;
      for (prop in inputObject) {
        if (hasOwnProp(inputObject, prop)) {
          normalizedProp = normalizeUnits(prop);
          if (normalizedProp) {
            normalizedInput[normalizedProp] = inputObject[prop];
          }
        }
      }
      return normalizedInput;
    }
    var priorities = {
      date: 9,
      day: 11,
      weekday: 11,
      isoWeekday: 11,
      dayOfYear: 4,
      hour: 13,
      millisecond: 16,
      minute: 14,
      month: 8,
      quarter: 7,
      second: 15,
      weekYear: 1,
      isoWeekYear: 1,
      week: 5,
      isoWeek: 5,
      year: 1
    };
    function getPrioritizedUnits(unitsObj) {
      var units = [], u2;
      for (u2 in unitsObj) {
        if (hasOwnProp(unitsObj, u2)) {
          units.push({ unit: u2, priority: priorities[u2] });
        }
      }
      units.sort(function(a2, b2) {
        return a2.priority - b2.priority;
      });
      return units;
    }
    var match1 = /\d/, match2 = /\d\d/, match3 = /\d{3}/, match4 = /\d{4}/, match6 = /[+-]?\d{6}/, match1to2 = /\d\d?/, match3to4 = /\d\d\d\d?/, match5to6 = /\d\d\d\d\d\d?/, match1to3 = /\d{1,3}/, match1to4 = /\d{1,4}/, match1to6 = /[+-]?\d{1,6}/, matchUnsigned = /\d+/, matchSigned = /[+-]?\d+/, matchOffset = /Z|[+-]\d\d:?\d\d/gi, matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi, matchTimestamp = /[+-]?\d+(\.\d{1,3})?/, matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i, match1to2NoLeadingZero = /^[1-9]\d?/, match1to2HasZero = /^([1-9]\d|\d)/, regexes;
    regexes = {};
    function addRegexToken(token2, regex, strictRegex) {
      regexes[token2] = isFunction$7(regex) ? regex : function(isStrict, localeData2) {
        return isStrict && strictRegex ? strictRegex : regex;
      };
    }
    function getParseRegexForToken(token2, config2) {
      if (!hasOwnProp(regexes, token2)) {
        return new RegExp(unescapeFormat(token2));
      }
      return regexes[token2](config2._strict, config2._locale);
    }
    function unescapeFormat(s2) {
      return regexEscape(
        s2.replace("\\", "").replace(
          /\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,
          function(matched, p1, p2, p3, p4) {
            return p1 || p2 || p3 || p4;
          }
        )
      );
    }
    function regexEscape(s2) {
      return s2.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&");
    }
    function absFloor(number2) {
      if (number2 < 0) {
        return Math.ceil(number2) || 0;
      } else {
        return Math.floor(number2);
      }
    }
    function toInt(argumentForCoercion) {
      var coercedNumber = +argumentForCoercion, value2 = 0;
      if (coercedNumber !== 0 && isFinite(coercedNumber)) {
        value2 = absFloor(coercedNumber);
      }
      return value2;
    }
    var tokens = {};
    function addParseToken(token2, callback) {
      var i2, func = callback, tokenLen;
      if (typeof token2 === "string") {
        token2 = [token2];
      }
      if (isNumber$5(callback)) {
        func = function(input, array2) {
          array2[callback] = toInt(input);
        };
      }
      tokenLen = token2.length;
      for (i2 = 0; i2 < tokenLen; i2++) {
        tokens[token2[i2]] = func;
      }
    }
    function addWeekParseToken(token2, callback) {
      addParseToken(token2, function(input, array2, config2, token3) {
        config2._w = config2._w || {};
        callback(input, config2._w, config2, token3);
      });
    }
    function addTimeToArrayFromToken(token2, input, config2) {
      if (input != null && hasOwnProp(tokens, token2)) {
        tokens[token2](input, config2._a, config2, token2);
      }
    }
    function isLeapYear(year) {
      return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
    }
    var YEAR = 0, MONTH = 1, DATE = 2, HOUR = 3, MINUTE = 4, SECOND = 5, MILLISECOND = 6, WEEK = 7, WEEKDAY = 8;
    addFormatToken("Y", 0, 0, function() {
      var y2 = this.year();
      return y2 <= 9999 ? zeroFill(y2, 4) : "+" + y2;
    });
    addFormatToken(0, ["YY", 2], 0, function() {
      return this.year() % 100;
    });
    addFormatToken(0, ["YYYY", 4], 0, "year");
    addFormatToken(0, ["YYYYY", 5], 0, "year");
    addFormatToken(0, ["YYYYYY", 6, true], 0, "year");
    addRegexToken("Y", matchSigned);
    addRegexToken("YY", match1to2, match2);
    addRegexToken("YYYY", match1to4, match4);
    addRegexToken("YYYYY", match1to6, match6);
    addRegexToken("YYYYYY", match1to6, match6);
    addParseToken(["YYYYY", "YYYYYY"], YEAR);
    addParseToken("YYYY", function(input, array2) {
      array2[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
    });
    addParseToken("YY", function(input, array2) {
      array2[YEAR] = hooks.parseTwoDigitYear(input);
    });
    addParseToken("Y", function(input, array2) {
      array2[YEAR] = parseInt(input, 10);
    });
    function daysInYear(year) {
      return isLeapYear(year) ? 366 : 365;
    }
    hooks.parseTwoDigitYear = function(input) {
      return toInt(input) + (toInt(input) > 68 ? 1900 : 2e3);
    };
    var getSetYear = makeGetSet("FullYear", true);
    function getIsLeapYear() {
      return isLeapYear(this.year());
    }
    function makeGetSet(unit2, keepTime) {
      return function(value2) {
        if (value2 != null) {
          set$1$1(this, unit2, value2);
          hooks.updateOffset(this, keepTime);
          return this;
        } else {
          return get$4(this, unit2);
        }
      };
    }
    function get$4(mom, unit2) {
      if (!mom.isValid()) {
        return NaN;
      }
      var d2 = mom._d, isUTC = mom._isUTC;
      switch (unit2) {
        case "Milliseconds":
          return isUTC ? d2.getUTCMilliseconds() : d2.getMilliseconds();
        case "Seconds":
          return isUTC ? d2.getUTCSeconds() : d2.getSeconds();
        case "Minutes":
          return isUTC ? d2.getUTCMinutes() : d2.getMinutes();
        case "Hours":
          return isUTC ? d2.getUTCHours() : d2.getHours();
        case "Date":
          return isUTC ? d2.getUTCDate() : d2.getDate();
        case "Day":
          return isUTC ? d2.getUTCDay() : d2.getDay();
        case "Month":
          return isUTC ? d2.getUTCMonth() : d2.getMonth();
        case "FullYear":
          return isUTC ? d2.getUTCFullYear() : d2.getFullYear();
        default:
          return NaN;
      }
    }
    function set$1$1(mom, unit2, value2) {
      var d2, isUTC, year, month, date2;
      if (!mom.isValid() || isNaN(value2)) {
        return;
      }
      d2 = mom._d;
      isUTC = mom._isUTC;
      switch (unit2) {
        case "Milliseconds":
          return void (isUTC ? d2.setUTCMilliseconds(value2) : d2.setMilliseconds(value2));
        case "Seconds":
          return void (isUTC ? d2.setUTCSeconds(value2) : d2.setSeconds(value2));
        case "Minutes":
          return void (isUTC ? d2.setUTCMinutes(value2) : d2.setMinutes(value2));
        case "Hours":
          return void (isUTC ? d2.setUTCHours(value2) : d2.setHours(value2));
        case "Date":
          return void (isUTC ? d2.setUTCDate(value2) : d2.setDate(value2));
        case "FullYear":
          break;
        default:
          return;
      }
      year = value2;
      month = mom.month();
      date2 = mom.date();
      date2 = date2 === 29 && month === 1 && !isLeapYear(year) ? 28 : date2;
      void (isUTC ? d2.setUTCFullYear(year, month, date2) : d2.setFullYear(year, month, date2));
    }
    function stringGet(units) {
      units = normalizeUnits(units);
      if (isFunction$7(this[units])) {
        return this[units]();
      }
      return this;
    }
    function stringSet(units, value2) {
      if (typeof units === "object") {
        units = normalizeObjectUnits(units);
        var prioritized = getPrioritizedUnits(units), i2, prioritizedLen = prioritized.length;
        for (i2 = 0; i2 < prioritizedLen; i2++) {
          this[prioritized[i2].unit](units[prioritized[i2].unit]);
        }
      } else {
        units = normalizeUnits(units);
        if (isFunction$7(this[units])) {
          return this[units](value2);
        }
      }
      return this;
    }
    function mod(n2, x2) {
      return (n2 % x2 + x2) % x2;
    }
    var indexOf;
    if (Array.prototype.indexOf) {
      indexOf = Array.prototype.indexOf;
    } else {
      indexOf = function(o2) {
        var i2;
        for (i2 = 0; i2 < this.length; ++i2) {
          if (this[i2] === o2) {
            return i2;
          }
        }
        return -1;
      };
    }
    function daysInMonth(year, month) {
      if (isNaN(year) || isNaN(month)) {
        return NaN;
      }
      var modMonth = mod(month, 12);
      year += (month - modMonth) / 12;
      return modMonth === 1 ? isLeapYear(year) ? 29 : 28 : 31 - modMonth % 7 % 2;
    }
    addFormatToken("M", ["MM", 2], "Mo", function() {
      return this.month() + 1;
    });
    addFormatToken("MMM", 0, 0, function(format2) {
      return this.localeData().monthsShort(this, format2);
    });
    addFormatToken("MMMM", 0, 0, function(format2) {
      return this.localeData().months(this, format2);
    });
    addRegexToken("M", match1to2, match1to2NoLeadingZero);
    addRegexToken("MM", match1to2, match2);
    addRegexToken("MMM", function(isStrict, locale2) {
      return locale2.monthsShortRegex(isStrict);
    });
    addRegexToken("MMMM", function(isStrict, locale2) {
      return locale2.monthsRegex(isStrict);
    });
    addParseToken(["M", "MM"], function(input, array2) {
      array2[MONTH] = toInt(input) - 1;
    });
    addParseToken(["MMM", "MMMM"], function(input, array2, config2, token2) {
      var month = config2._locale.monthsParse(input, token2, config2._strict);
      if (month != null) {
        array2[MONTH] = month;
      } else {
        getParsingFlags(config2).invalidMonth = input;
      }
    });
    var defaultLocaleMonths = "January_February_March_April_May_June_July_August_September_October_November_December".split(
      "_"
    ), defaultLocaleMonthsShort = "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"), MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/, defaultMonthsShortRegex = matchWord, defaultMonthsRegex = matchWord;
    function localeMonths(m2, format2) {
      if (!m2) {
        return isArray$h(this._months) ? this._months : this._months["standalone"];
      }
      return isArray$h(this._months) ? this._months[m2.month()] : this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format2) ? "format" : "standalone"][m2.month()];
    }
    function localeMonthsShort(m2, format2) {
      if (!m2) {
        return isArray$h(this._monthsShort) ? this._monthsShort : this._monthsShort["standalone"];
      }
      return isArray$h(this._monthsShort) ? this._monthsShort[m2.month()] : this._monthsShort[MONTHS_IN_FORMAT.test(format2) ? "format" : "standalone"][m2.month()];
    }
    function handleStrictParse(monthName, format2, strict) {
      var i2, ii2, mom, llc = monthName.toLocaleLowerCase();
      if (!this._monthsParse) {
        this._monthsParse = [];
        this._longMonthsParse = [];
        this._shortMonthsParse = [];
        for (i2 = 0; i2 < 12; ++i2) {
          mom = createUTC([2e3, i2]);
          this._shortMonthsParse[i2] = this.monthsShort(
            mom,
            ""
          ).toLocaleLowerCase();
          this._longMonthsParse[i2] = this.months(mom, "").toLocaleLowerCase();
        }
      }
      if (strict) {
        if (format2 === "MMM") {
          ii2 = indexOf.call(this._shortMonthsParse, llc);
          return ii2 !== -1 ? ii2 : null;
        } else {
          ii2 = indexOf.call(this._longMonthsParse, llc);
          return ii2 !== -1 ? ii2 : null;
        }
      } else {
        if (format2 === "MMM") {
          ii2 = indexOf.call(this._shortMonthsParse, llc);
          if (ii2 !== -1) {
            return ii2;
          }
          ii2 = indexOf.call(this._longMonthsParse, llc);
          return ii2 !== -1 ? ii2 : null;
        } else {
          ii2 = indexOf.call(this._longMonthsParse, llc);
          if (ii2 !== -1) {
            return ii2;
          }
          ii2 = indexOf.call(this._shortMonthsParse, llc);
          return ii2 !== -1 ? ii2 : null;
        }
      }
    }
    function localeMonthsParse(monthName, format2, strict) {
      var i2, mom, regex;
      if (this._monthsParseExact) {
        return handleStrictParse.call(this, monthName, format2, strict);
      }
      if (!this._monthsParse) {
        this._monthsParse = [];
        this._longMonthsParse = [];
        this._shortMonthsParse = [];
      }
      for (i2 = 0; i2 < 12; i2++) {
        mom = createUTC([2e3, i2]);
        if (strict && !this._longMonthsParse[i2]) {
          this._longMonthsParse[i2] = new RegExp(
            "^" + this.months(mom, "").replace(".", "") + "$",
            "i"
          );
          this._shortMonthsParse[i2] = new RegExp(
            "^" + this.monthsShort(mom, "").replace(".", "") + "$",
            "i"
          );
        }
        if (!strict && !this._monthsParse[i2]) {
          regex = "^" + this.months(mom, "") + "|^" + this.monthsShort(mom, "");
          this._monthsParse[i2] = new RegExp(regex.replace(".", ""), "i");
        }
        if (strict && format2 === "MMMM" && this._longMonthsParse[i2].test(monthName)) {
          return i2;
        } else if (strict && format2 === "MMM" && this._shortMonthsParse[i2].test(monthName)) {
          return i2;
        } else if (!strict && this._monthsParse[i2].test(monthName)) {
          return i2;
        }
      }
    }
    function setMonth(mom, value2) {
      if (!mom.isValid()) {
        return mom;
      }
      if (typeof value2 === "string") {
        if (/^\d+$/.test(value2)) {
          value2 = toInt(value2);
        } else {
          value2 = mom.localeData().monthsParse(value2);
          if (!isNumber$5(value2)) {
            return mom;
          }
        }
      }
      var month = value2, date2 = mom.date();
      date2 = date2 < 29 ? date2 : Math.min(date2, daysInMonth(mom.year(), month));
      void (mom._isUTC ? mom._d.setUTCMonth(month, date2) : mom._d.setMonth(month, date2));
      return mom;
    }
    function getSetMonth(value2) {
      if (value2 != null) {
        setMonth(this, value2);
        hooks.updateOffset(this, true);
        return this;
      } else {
        return get$4(this, "Month");
      }
    }
    function getDaysInMonth() {
      return daysInMonth(this.year(), this.month());
    }
    function monthsShortRegex(isStrict) {
      if (this._monthsParseExact) {
        if (!hasOwnProp(this, "_monthsRegex")) {
          computeMonthsParse.call(this);
        }
        if (isStrict) {
          return this._monthsShortStrictRegex;
        } else {
          return this._monthsShortRegex;
        }
      } else {
        if (!hasOwnProp(this, "_monthsShortRegex")) {
          this._monthsShortRegex = defaultMonthsShortRegex;
        }
        return this._monthsShortStrictRegex && isStrict ? this._monthsShortStrictRegex : this._monthsShortRegex;
      }
    }
    function monthsRegex(isStrict) {
      if (this._monthsParseExact) {
        if (!hasOwnProp(this, "_monthsRegex")) {
          computeMonthsParse.call(this);
        }
        if (isStrict) {
          return this._monthsStrictRegex;
        } else {
          return this._monthsRegex;
        }
      } else {
        if (!hasOwnProp(this, "_monthsRegex")) {
          this._monthsRegex = defaultMonthsRegex;
        }
        return this._monthsStrictRegex && isStrict ? this._monthsStrictRegex : this._monthsRegex;
      }
    }
    function computeMonthsParse() {
      function cmpLenRev(a2, b2) {
        return b2.length - a2.length;
      }
      var shortPieces = [], longPieces = [], mixedPieces = [], i2, mom, shortP, longP;
      for (i2 = 0; i2 < 12; i2++) {
        mom = createUTC([2e3, i2]);
        shortP = regexEscape(this.monthsShort(mom, ""));
        longP = regexEscape(this.months(mom, ""));
        shortPieces.push(shortP);
        longPieces.push(longP);
        mixedPieces.push(longP);
        mixedPieces.push(shortP);
      }
      shortPieces.sort(cmpLenRev);
      longPieces.sort(cmpLenRev);
      mixedPieces.sort(cmpLenRev);
      this._monthsRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
      this._monthsShortRegex = this._monthsRegex;
      this._monthsStrictRegex = new RegExp(
        "^(" + longPieces.join("|") + ")",
        "i"
      );
      this._monthsShortStrictRegex = new RegExp(
        "^(" + shortPieces.join("|") + ")",
        "i"
      );
    }
    function createDate(y2, m2, d2, h2, M2, s2, ms) {
      var date2;
      if (y2 < 100 && y2 >= 0) {
        date2 = new Date(y2 + 400, m2, d2, h2, M2, s2, ms);
        if (isFinite(date2.getFullYear())) {
          date2.setFullYear(y2);
        }
      } else {
        date2 = new Date(y2, m2, d2, h2, M2, s2, ms);
      }
      return date2;
    }
    function createUTCDate(y2) {
      var date2, args;
      if (y2 < 100 && y2 >= 0) {
        args = Array.prototype.slice.call(arguments);
        args[0] = y2 + 400;
        date2 = new Date(Date.UTC.apply(null, args));
        if (isFinite(date2.getUTCFullYear())) {
          date2.setUTCFullYear(y2);
        }
      } else {
        date2 = new Date(Date.UTC.apply(null, arguments));
      }
      return date2;
    }
    function firstWeekOffset(year, dow, doy) {
      var fwd = 7 + dow - doy, fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;
      return -fwdlw + fwd - 1;
    }
    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
      var localWeekday = (7 + weekday - dow) % 7, weekOffset = firstWeekOffset(year, dow, doy), dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset, resYear, resDayOfYear;
      if (dayOfYear <= 0) {
        resYear = year - 1;
        resDayOfYear = daysInYear(resYear) + dayOfYear;
      } else if (dayOfYear > daysInYear(year)) {
        resYear = year + 1;
        resDayOfYear = dayOfYear - daysInYear(year);
      } else {
        resYear = year;
        resDayOfYear = dayOfYear;
      }
      return {
        year: resYear,
        dayOfYear: resDayOfYear
      };
    }
    function weekOfYear(mom, dow, doy) {
      var weekOffset = firstWeekOffset(mom.year(), dow, doy), week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1, resWeek, resYear;
      if (week < 1) {
        resYear = mom.year() - 1;
        resWeek = week + weeksInYear(resYear, dow, doy);
      } else if (week > weeksInYear(mom.year(), dow, doy)) {
        resWeek = week - weeksInYear(mom.year(), dow, doy);
        resYear = mom.year() + 1;
      } else {
        resYear = mom.year();
        resWeek = week;
      }
      return {
        week: resWeek,
        year: resYear
      };
    }
    function weeksInYear(year, dow, doy) {
      var weekOffset = firstWeekOffset(year, dow, doy), weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
      return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
    }
    addFormatToken("w", ["ww", 2], "wo", "week");
    addFormatToken("W", ["WW", 2], "Wo", "isoWeek");
    addRegexToken("w", match1to2, match1to2NoLeadingZero);
    addRegexToken("ww", match1to2, match2);
    addRegexToken("W", match1to2, match1to2NoLeadingZero);
    addRegexToken("WW", match1to2, match2);
    addWeekParseToken(
      ["w", "ww", "W", "WW"],
      function(input, week, config2, token2) {
        week[token2.substr(0, 1)] = toInt(input);
      }
    );
    function localeWeek(mom) {
      return weekOfYear(mom, this._week.dow, this._week.doy).week;
    }
    var defaultLocaleWeek = {
      dow: 0,
      // Sunday is the first day of the week.
      doy: 6
      // The week that contains Jan 6th is the first week of the year.
    };
    function localeFirstDayOfWeek() {
      return this._week.dow;
    }
    function localeFirstDayOfYear() {
      return this._week.doy;
    }
    function getSetWeek(input) {
      var week = this.localeData().week(this);
      return input == null ? week : this.add((input - week) * 7, "d");
    }
    function getSetISOWeek(input) {
      var week = weekOfYear(this, 1, 4).week;
      return input == null ? week : this.add((input - week) * 7, "d");
    }
    addFormatToken("d", 0, "do", "day");
    addFormatToken("dd", 0, 0, function(format2) {
      return this.localeData().weekdaysMin(this, format2);
    });
    addFormatToken("ddd", 0, 0, function(format2) {
      return this.localeData().weekdaysShort(this, format2);
    });
    addFormatToken("dddd", 0, 0, function(format2) {
      return this.localeData().weekdays(this, format2);
    });
    addFormatToken("e", 0, 0, "weekday");
    addFormatToken("E", 0, 0, "isoWeekday");
    addRegexToken("d", match1to2);
    addRegexToken("e", match1to2);
    addRegexToken("E", match1to2);
    addRegexToken("dd", function(isStrict, locale2) {
      return locale2.weekdaysMinRegex(isStrict);
    });
    addRegexToken("ddd", function(isStrict, locale2) {
      return locale2.weekdaysShortRegex(isStrict);
    });
    addRegexToken("dddd", function(isStrict, locale2) {
      return locale2.weekdaysRegex(isStrict);
    });
    addWeekParseToken(["dd", "ddd", "dddd"], function(input, week, config2, token2) {
      var weekday = config2._locale.weekdaysParse(input, token2, config2._strict);
      if (weekday != null) {
        week.d = weekday;
      } else {
        getParsingFlags(config2).invalidWeekday = input;
      }
    });
    addWeekParseToken(["d", "e", "E"], function(input, week, config2, token2) {
      week[token2] = toInt(input);
    });
    function parseWeekday(input, locale2) {
      if (typeof input !== "string") {
        return input;
      }
      if (!isNaN(input)) {
        return parseInt(input, 10);
      }
      input = locale2.weekdaysParse(input);
      if (typeof input === "number") {
        return input;
      }
      return null;
    }
    function parseIsoWeekday(input, locale2) {
      if (typeof input === "string") {
        return locale2.weekdaysParse(input) % 7 || 7;
      }
      return isNaN(input) ? null : input;
    }
    function shiftWeekdays(ws, n2) {
      return ws.slice(n2, 7).concat(ws.slice(0, n2));
    }
    var defaultLocaleWeekdays = "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), defaultLocaleWeekdaysShort = "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"), defaultLocaleWeekdaysMin = "Su_Mo_Tu_We_Th_Fr_Sa".split("_"), defaultWeekdaysRegex = matchWord, defaultWeekdaysShortRegex = matchWord, defaultWeekdaysMinRegex = matchWord;
    function localeWeekdays(m2, format2) {
      var weekdays = isArray$h(this._weekdays) ? this._weekdays : this._weekdays[m2 && m2 !== true && this._weekdays.isFormat.test(format2) ? "format" : "standalone"];
      return m2 === true ? shiftWeekdays(weekdays, this._week.dow) : m2 ? weekdays[m2.day()] : weekdays;
    }
    function localeWeekdaysShort(m2) {
      return m2 === true ? shiftWeekdays(this._weekdaysShort, this._week.dow) : m2 ? this._weekdaysShort[m2.day()] : this._weekdaysShort;
    }
    function localeWeekdaysMin(m2) {
      return m2 === true ? shiftWeekdays(this._weekdaysMin, this._week.dow) : m2 ? this._weekdaysMin[m2.day()] : this._weekdaysMin;
    }
    function handleStrictParse$1(weekdayName, format2, strict) {
      var i2, ii2, mom, llc = weekdayName.toLocaleLowerCase();
      if (!this._weekdaysParse) {
        this._weekdaysParse = [];
        this._shortWeekdaysParse = [];
        this._minWeekdaysParse = [];
        for (i2 = 0; i2 < 7; ++i2) {
          mom = createUTC([2e3, 1]).day(i2);
          this._minWeekdaysParse[i2] = this.weekdaysMin(
            mom,
            ""
          ).toLocaleLowerCase();
          this._shortWeekdaysParse[i2] = this.weekdaysShort(
            mom,
            ""
          ).toLocaleLowerCase();
          this._weekdaysParse[i2] = this.weekdays(mom, "").toLocaleLowerCase();
        }
      }
      if (strict) {
        if (format2 === "dddd") {
          ii2 = indexOf.call(this._weekdaysParse, llc);
          return ii2 !== -1 ? ii2 : null;
        } else if (format2 === "ddd") {
          ii2 = indexOf.call(this._shortWeekdaysParse, llc);
          return ii2 !== -1 ? ii2 : null;
        } else {
          ii2 = indexOf.call(this._minWeekdaysParse, llc);
          return ii2 !== -1 ? ii2 : null;
        }
      } else {
        if (format2 === "dddd") {
          ii2 = indexOf.call(this._weekdaysParse, llc);
          if (ii2 !== -1) {
            return ii2;
          }
          ii2 = indexOf.call(this._shortWeekdaysParse, llc);
          if (ii2 !== -1) {
            return ii2;
          }
          ii2 = indexOf.call(this._minWeekdaysParse, llc);
          return ii2 !== -1 ? ii2 : null;
        } else if (format2 === "ddd") {
          ii2 = indexOf.call(this._shortWeekdaysParse, llc);
          if (ii2 !== -1) {
            return ii2;
          }
          ii2 = indexOf.call(this._weekdaysParse, llc);
          if (ii2 !== -1) {
            return ii2;
          }
          ii2 = indexOf.call(this._minWeekdaysParse, llc);
          return ii2 !== -1 ? ii2 : null;
        } else {
          ii2 = indexOf.call(this._minWeekdaysParse, llc);
          if (ii2 !== -1) {
            return ii2;
          }
          ii2 = indexOf.call(this._weekdaysParse, llc);
          if (ii2 !== -1) {
            return ii2;
          }
          ii2 = indexOf.call(this._shortWeekdaysParse, llc);
          return ii2 !== -1 ? ii2 : null;
        }
      }
    }
    function localeWeekdaysParse(weekdayName, format2, strict) {
      var i2, mom, regex;
      if (this._weekdaysParseExact) {
        return handleStrictParse$1.call(this, weekdayName, format2, strict);
      }
      if (!this._weekdaysParse) {
        this._weekdaysParse = [];
        this._minWeekdaysParse = [];
        this._shortWeekdaysParse = [];
        this._fullWeekdaysParse = [];
      }
      for (i2 = 0; i2 < 7; i2++) {
        mom = createUTC([2e3, 1]).day(i2);
        if (strict && !this._fullWeekdaysParse[i2]) {
          this._fullWeekdaysParse[i2] = new RegExp(
            "^" + this.weekdays(mom, "").replace(".", "\\.?") + "$",
            "i"
          );
          this._shortWeekdaysParse[i2] = new RegExp(
            "^" + this.weekdaysShort(mom, "").replace(".", "\\.?") + "$",
            "i"
          );
          this._minWeekdaysParse[i2] = new RegExp(
            "^" + this.weekdaysMin(mom, "").replace(".", "\\.?") + "$",
            "i"
          );
        }
        if (!this._weekdaysParse[i2]) {
          regex = "^" + this.weekdays(mom, "") + "|^" + this.weekdaysShort(mom, "") + "|^" + this.weekdaysMin(mom, "");
          this._weekdaysParse[i2] = new RegExp(regex.replace(".", ""), "i");
        }
        if (strict && format2 === "dddd" && this._fullWeekdaysParse[i2].test(weekdayName)) {
          return i2;
        } else if (strict && format2 === "ddd" && this._shortWeekdaysParse[i2].test(weekdayName)) {
          return i2;
        } else if (strict && format2 === "dd" && this._minWeekdaysParse[i2].test(weekdayName)) {
          return i2;
        } else if (!strict && this._weekdaysParse[i2].test(weekdayName)) {
          return i2;
        }
      }
    }
    function getSetDayOfWeek(input) {
      if (!this.isValid()) {
        return input != null ? this : NaN;
      }
      var day = get$4(this, "Day");
      if (input != null) {
        input = parseWeekday(input, this.localeData());
        return this.add(input - day, "d");
      } else {
        return day;
      }
    }
    function getSetLocaleDayOfWeek(input) {
      if (!this.isValid()) {
        return input != null ? this : NaN;
      }
      var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
      return input == null ? weekday : this.add(input - weekday, "d");
    }
    function getSetISODayOfWeek(input) {
      if (!this.isValid()) {
        return input != null ? this : NaN;
      }
      if (input != null) {
        var weekday = parseIsoWeekday(input, this.localeData());
        return this.day(this.day() % 7 ? weekday : weekday - 7);
      } else {
        return this.day() || 7;
      }
    }
    function weekdaysRegex(isStrict) {
      if (this._weekdaysParseExact) {
        if (!hasOwnProp(this, "_weekdaysRegex")) {
          computeWeekdaysParse.call(this);
        }
        if (isStrict) {
          return this._weekdaysStrictRegex;
        } else {
          return this._weekdaysRegex;
        }
      } else {
        if (!hasOwnProp(this, "_weekdaysRegex")) {
          this._weekdaysRegex = defaultWeekdaysRegex;
        }
        return this._weekdaysStrictRegex && isStrict ? this._weekdaysStrictRegex : this._weekdaysRegex;
      }
    }
    function weekdaysShortRegex(isStrict) {
      if (this._weekdaysParseExact) {
        if (!hasOwnProp(this, "_weekdaysRegex")) {
          computeWeekdaysParse.call(this);
        }
        if (isStrict) {
          return this._weekdaysShortStrictRegex;
        } else {
          return this._weekdaysShortRegex;
        }
      } else {
        if (!hasOwnProp(this, "_weekdaysShortRegex")) {
          this._weekdaysShortRegex = defaultWeekdaysShortRegex;
        }
        return this._weekdaysShortStrictRegex && isStrict ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
      }
    }
    function weekdaysMinRegex(isStrict) {
      if (this._weekdaysParseExact) {
        if (!hasOwnProp(this, "_weekdaysRegex")) {
          computeWeekdaysParse.call(this);
        }
        if (isStrict) {
          return this._weekdaysMinStrictRegex;
        } else {
          return this._weekdaysMinRegex;
        }
      } else {
        if (!hasOwnProp(this, "_weekdaysMinRegex")) {
          this._weekdaysMinRegex = defaultWeekdaysMinRegex;
        }
        return this._weekdaysMinStrictRegex && isStrict ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
      }
    }
    function computeWeekdaysParse() {
      function cmpLenRev(a2, b2) {
        return b2.length - a2.length;
      }
      var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [], i2, mom, minp, shortp, longp;
      for (i2 = 0; i2 < 7; i2++) {
        mom = createUTC([2e3, 1]).day(i2);
        minp = regexEscape(this.weekdaysMin(mom, ""));
        shortp = regexEscape(this.weekdaysShort(mom, ""));
        longp = regexEscape(this.weekdays(mom, ""));
        minPieces.push(minp);
        shortPieces.push(shortp);
        longPieces.push(longp);
        mixedPieces.push(minp);
        mixedPieces.push(shortp);
        mixedPieces.push(longp);
      }
      minPieces.sort(cmpLenRev);
      shortPieces.sort(cmpLenRev);
      longPieces.sort(cmpLenRev);
      mixedPieces.sort(cmpLenRev);
      this._weekdaysRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
      this._weekdaysShortRegex = this._weekdaysRegex;
      this._weekdaysMinRegex = this._weekdaysRegex;
      this._weekdaysStrictRegex = new RegExp(
        "^(" + longPieces.join("|") + ")",
        "i"
      );
      this._weekdaysShortStrictRegex = new RegExp(
        "^(" + shortPieces.join("|") + ")",
        "i"
      );
      this._weekdaysMinStrictRegex = new RegExp(
        "^(" + minPieces.join("|") + ")",
        "i"
      );
    }
    function hFormat() {
      return this.hours() % 12 || 12;
    }
    function kFormat() {
      return this.hours() || 24;
    }
    addFormatToken("H", ["HH", 2], 0, "hour");
    addFormatToken("h", ["hh", 2], 0, hFormat);
    addFormatToken("k", ["kk", 2], 0, kFormat);
    addFormatToken("hmm", 0, 0, function() {
      return "" + hFormat.apply(this) + zeroFill(this.minutes(), 2);
    });
    addFormatToken("hmmss", 0, 0, function() {
      return "" + hFormat.apply(this) + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
    });
    addFormatToken("Hmm", 0, 0, function() {
      return "" + this.hours() + zeroFill(this.minutes(), 2);
    });
    addFormatToken("Hmmss", 0, 0, function() {
      return "" + this.hours() + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
    });
    function meridiem(token2, lowercase) {
      addFormatToken(token2, 0, 0, function() {
        return this.localeData().meridiem(
          this.hours(),
          this.minutes(),
          lowercase
        );
      });
    }
    meridiem("a", true);
    meridiem("A", false);
    function matchMeridiem(isStrict, locale2) {
      return locale2._meridiemParse;
    }
    addRegexToken("a", matchMeridiem);
    addRegexToken("A", matchMeridiem);
    addRegexToken("H", match1to2, match1to2HasZero);
    addRegexToken("h", match1to2, match1to2NoLeadingZero);
    addRegexToken("k", match1to2, match1to2NoLeadingZero);
    addRegexToken("HH", match1to2, match2);
    addRegexToken("hh", match1to2, match2);
    addRegexToken("kk", match1to2, match2);
    addRegexToken("hmm", match3to4);
    addRegexToken("hmmss", match5to6);
    addRegexToken("Hmm", match3to4);
    addRegexToken("Hmmss", match5to6);
    addParseToken(["H", "HH"], HOUR);
    addParseToken(["k", "kk"], function(input, array2, config2) {
      var kInput = toInt(input);
      array2[HOUR] = kInput === 24 ? 0 : kInput;
    });
    addParseToken(["a", "A"], function(input, array2, config2) {
      config2._isPm = config2._locale.isPM(input);
      config2._meridiem = input;
    });
    addParseToken(["h", "hh"], function(input, array2, config2) {
      array2[HOUR] = toInt(input);
      getParsingFlags(config2).bigHour = true;
    });
    addParseToken("hmm", function(input, array2, config2) {
      var pos = input.length - 2;
      array2[HOUR] = toInt(input.substr(0, pos));
      array2[MINUTE] = toInt(input.substr(pos));
      getParsingFlags(config2).bigHour = true;
    });
    addParseToken("hmmss", function(input, array2, config2) {
      var pos1 = input.length - 4, pos2 = input.length - 2;
      array2[HOUR] = toInt(input.substr(0, pos1));
      array2[MINUTE] = toInt(input.substr(pos1, 2));
      array2[SECOND] = toInt(input.substr(pos2));
      getParsingFlags(config2).bigHour = true;
    });
    addParseToken("Hmm", function(input, array2, config2) {
      var pos = input.length - 2;
      array2[HOUR] = toInt(input.substr(0, pos));
      array2[MINUTE] = toInt(input.substr(pos));
    });
    addParseToken("Hmmss", function(input, array2, config2) {
      var pos1 = input.length - 4, pos2 = input.length - 2;
      array2[HOUR] = toInt(input.substr(0, pos1));
      array2[MINUTE] = toInt(input.substr(pos1, 2));
      array2[SECOND] = toInt(input.substr(pos2));
    });
    function localeIsPM(input) {
      return (input + "").toLowerCase().charAt(0) === "p";
    }
    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i, getSetHour = makeGetSet("Hours", true);
    function localeMeridiem(hours2, minutes2, isLower) {
      if (hours2 > 11) {
        return isLower ? "pm" : "PM";
      } else {
        return isLower ? "am" : "AM";
      }
    }
    var baseConfig = {
      calendar: defaultCalendar,
      longDateFormat: defaultLongDateFormat,
      invalidDate: defaultInvalidDate,
      ordinal: defaultOrdinal,
      dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
      relativeTime: defaultRelativeTime,
      months: defaultLocaleMonths,
      monthsShort: defaultLocaleMonthsShort,
      week: defaultLocaleWeek,
      weekdays: defaultLocaleWeekdays,
      weekdaysMin: defaultLocaleWeekdaysMin,
      weekdaysShort: defaultLocaleWeekdaysShort,
      meridiemParse: defaultLocaleMeridiemParse
    };
    var locales = {}, localeFamilies = {}, globalLocale;
    function commonPrefix(arr1, arr2) {
      var i2, minl = Math.min(arr1.length, arr2.length);
      for (i2 = 0; i2 < minl; i2 += 1) {
        if (arr1[i2] !== arr2[i2]) {
          return i2;
        }
      }
      return minl;
    }
    function normalizeLocale(key) {
      return key ? key.toLowerCase().replace("_", "-") : key;
    }
    function chooseLocale(names) {
      var i2 = 0, j2, next, locale2, split;
      while (i2 < names.length) {
        split = normalizeLocale(names[i2]).split("-");
        j2 = split.length;
        next = normalizeLocale(names[i2 + 1]);
        next = next ? next.split("-") : null;
        while (j2 > 0) {
          locale2 = loadLocale(split.slice(0, j2).join("-"));
          if (locale2) {
            return locale2;
          }
          if (next && next.length >= j2 && commonPrefix(split, next) >= j2 - 1) {
            break;
          }
          j2--;
        }
        i2++;
      }
      return globalLocale;
    }
    function isLocaleNameSane(name) {
      return !!(name && name.match("^[^/\\\\]*$"));
    }
    function loadLocale(name) {
      var oldLocale = null, aliasedRequire;
      if (locales[name] === void 0 && typeof module !== "undefined" && module && module.exports && isLocaleNameSane(name)) {
        try {
          oldLocale = globalLocale._abbr;
          aliasedRequire = require;
          aliasedRequire("./locale/" + name);
          getSetGlobalLocale(oldLocale);
        } catch (e3) {
          locales[name] = null;
        }
      }
      return locales[name];
    }
    function getSetGlobalLocale(key, values) {
      var data;
      if (key) {
        if (isUndefined$2(values)) {
          data = getLocale(key);
        } else {
          data = defineLocale(key, values);
        }
        if (data) {
          globalLocale = data;
        } else {
          if (typeof console !== "undefined" && console.warn) {
            console.warn(
              "Locale " + key + " not found. Did you forget to load it?"
            );
          }
        }
      }
      return globalLocale._abbr;
    }
    function defineLocale(name, config2) {
      if (config2 !== null) {
        var locale2, parentConfig = baseConfig;
        config2.abbr = name;
        if (locales[name] != null) {
          deprecateSimple(
            "defineLocaleOverride",
            "use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."
          );
          parentConfig = locales[name]._config;
        } else if (config2.parentLocale != null) {
          if (locales[config2.parentLocale] != null) {
            parentConfig = locales[config2.parentLocale]._config;
          } else {
            locale2 = loadLocale(config2.parentLocale);
            if (locale2 != null) {
              parentConfig = locale2._config;
            } else {
              if (!localeFamilies[config2.parentLocale]) {
                localeFamilies[config2.parentLocale] = [];
              }
              localeFamilies[config2.parentLocale].push({
                name,
                config: config2
              });
              return null;
            }
          }
        }
        locales[name] = new Locale(mergeConfigs(parentConfig, config2));
        if (localeFamilies[name]) {
          localeFamilies[name].forEach(function(x2) {
            defineLocale(x2.name, x2.config);
          });
        }
        getSetGlobalLocale(name);
        return locales[name];
      } else {
        delete locales[name];
        return null;
      }
    }
    function updateLocale(name, config2) {
      if (config2 != null) {
        var locale2, tmpLocale, parentConfig = baseConfig;
        if (locales[name] != null && locales[name].parentLocale != null) {
          locales[name].set(mergeConfigs(locales[name]._config, config2));
        } else {
          tmpLocale = loadLocale(name);
          if (tmpLocale != null) {
            parentConfig = tmpLocale._config;
          }
          config2 = mergeConfigs(parentConfig, config2);
          if (tmpLocale == null) {
            config2.abbr = name;
          }
          locale2 = new Locale(config2);
          locale2.parentLocale = locales[name];
          locales[name] = locale2;
        }
        getSetGlobalLocale(name);
      } else {
        if (locales[name] != null) {
          if (locales[name].parentLocale != null) {
            locales[name] = locales[name].parentLocale;
            if (name === getSetGlobalLocale()) {
              getSetGlobalLocale(name);
            }
          } else if (locales[name] != null) {
            delete locales[name];
          }
        }
      }
      return locales[name];
    }
    function getLocale(key) {
      var locale2;
      if (key && key._locale && key._locale._abbr) {
        key = key._locale._abbr;
      }
      if (!key) {
        return globalLocale;
      }
      if (!isArray$h(key)) {
        locale2 = loadLocale(key);
        if (locale2) {
          return locale2;
        }
        key = [key];
      }
      return chooseLocale(key);
    }
    function listLocales() {
      return keys$6(locales);
    }
    function checkOverflow(m2) {
      var overflow, a2 = m2._a;
      if (a2 && getParsingFlags(m2).overflow === -2) {
        overflow = a2[MONTH] < 0 || a2[MONTH] > 11 ? MONTH : a2[DATE] < 1 || a2[DATE] > daysInMonth(a2[YEAR], a2[MONTH]) ? DATE : a2[HOUR] < 0 || a2[HOUR] > 24 || a2[HOUR] === 24 && (a2[MINUTE] !== 0 || a2[SECOND] !== 0 || a2[MILLISECOND] !== 0) ? HOUR : a2[MINUTE] < 0 || a2[MINUTE] > 59 ? MINUTE : a2[SECOND] < 0 || a2[SECOND] > 59 ? SECOND : a2[MILLISECOND] < 0 || a2[MILLISECOND] > 999 ? MILLISECOND : -1;
        if (getParsingFlags(m2)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
          overflow = DATE;
        }
        if (getParsingFlags(m2)._overflowWeeks && overflow === -1) {
          overflow = WEEK;
        }
        if (getParsingFlags(m2)._overflowWeekday && overflow === -1) {
          overflow = WEEKDAY;
        }
        getParsingFlags(m2).overflow = overflow;
      }
      return m2;
    }
    var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/, basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/, tzRegex = /Z|[+-]\d\d(?::?\d\d)?/, isoDates = [
      ["YYYYYY-MM-DD", /[+-]\d{6}-\d\d-\d\d/],
      ["YYYY-MM-DD", /\d{4}-\d\d-\d\d/],
      ["GGGG-[W]WW-E", /\d{4}-W\d\d-\d/],
      ["GGGG-[W]WW", /\d{4}-W\d\d/, false],
      ["YYYY-DDD", /\d{4}-\d{3}/],
      ["YYYY-MM", /\d{4}-\d\d/, false],
      ["YYYYYYMMDD", /[+-]\d{10}/],
      ["YYYYMMDD", /\d{8}/],
      ["GGGG[W]WWE", /\d{4}W\d{3}/],
      ["GGGG[W]WW", /\d{4}W\d{2}/, false],
      ["YYYYDDD", /\d{7}/],
      ["YYYYMM", /\d{6}/, false],
      ["YYYY", /\d{4}/, false]
    ], isoTimes = [
      ["HH:mm:ss.SSSS", /\d\d:\d\d:\d\d\.\d+/],
      ["HH:mm:ss,SSSS", /\d\d:\d\d:\d\d,\d+/],
      ["HH:mm:ss", /\d\d:\d\d:\d\d/],
      ["HH:mm", /\d\d:\d\d/],
      ["HHmmss.SSSS", /\d\d\d\d\d\d\.\d+/],
      ["HHmmss,SSSS", /\d\d\d\d\d\d,\d+/],
      ["HHmmss", /\d\d\d\d\d\d/],
      ["HHmm", /\d\d\d\d/],
      ["HH", /\d\d/]
    ], aspNetJsonRegex = /^\/?Date\((-?\d+)/i, rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/, obsOffsets = {
      UT: 0,
      GMT: 0,
      EDT: -4 * 60,
      EST: -5 * 60,
      CDT: -5 * 60,
      CST: -6 * 60,
      MDT: -6 * 60,
      MST: -7 * 60,
      PDT: -7 * 60,
      PST: -8 * 60
    };
    function configFromISO(config2) {
      var i2, l2, string2 = config2._i, match = extendedIsoRegex.exec(string2) || basicIsoRegex.exec(string2), allowTime, dateFormat, timeFormat2, tzFormat, isoDatesLen = isoDates.length, isoTimesLen = isoTimes.length;
      if (match) {
        getParsingFlags(config2).iso = true;
        for (i2 = 0, l2 = isoDatesLen; i2 < l2; i2++) {
          if (isoDates[i2][1].exec(match[1])) {
            dateFormat = isoDates[i2][0];
            allowTime = isoDates[i2][2] !== false;
            break;
          }
        }
        if (dateFormat == null) {
          config2._isValid = false;
          return;
        }
        if (match[3]) {
          for (i2 = 0, l2 = isoTimesLen; i2 < l2; i2++) {
            if (isoTimes[i2][1].exec(match[3])) {
              timeFormat2 = (match[2] || " ") + isoTimes[i2][0];
              break;
            }
          }
          if (timeFormat2 == null) {
            config2._isValid = false;
            return;
          }
        }
        if (!allowTime && timeFormat2 != null) {
          config2._isValid = false;
          return;
        }
        if (match[4]) {
          if (tzRegex.exec(match[4])) {
            tzFormat = "Z";
          } else {
            config2._isValid = false;
            return;
          }
        }
        config2._f = dateFormat + (timeFormat2 || "") + (tzFormat || "");
        configFromStringAndFormat(config2);
      } else {
        config2._isValid = false;
      }
    }
    function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
      var result = [
        untruncateYear(yearStr),
        defaultLocaleMonthsShort.indexOf(monthStr),
        parseInt(dayStr, 10),
        parseInt(hourStr, 10),
        parseInt(minuteStr, 10)
      ];
      if (secondStr) {
        result.push(parseInt(secondStr, 10));
      }
      return result;
    }
    function untruncateYear(yearStr) {
      var year = parseInt(yearStr, 10);
      if (year <= 49) {
        return 2e3 + year;
      } else if (year <= 999) {
        return 1900 + year;
      }
      return year;
    }
    function preprocessRFC2822(s2) {
      return s2.replace(/\([^()]*\)|[\n\t]/g, " ").replace(/(\s\s+)/g, " ").replace(/^\s\s*/, "").replace(/\s\s*$/, "");
    }
    function checkWeekday(weekdayStr, parsedInput, config2) {
      if (weekdayStr) {
        var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr), weekdayActual = new Date(
          parsedInput[0],
          parsedInput[1],
          parsedInput[2]
        ).getDay();
        if (weekdayProvided !== weekdayActual) {
          getParsingFlags(config2).weekdayMismatch = true;
          config2._isValid = false;
          return false;
        }
      }
      return true;
    }
    function calculateOffset$1(obsOffset, militaryOffset, numOffset) {
      if (obsOffset) {
        return obsOffsets[obsOffset];
      } else if (militaryOffset) {
        return 0;
      } else {
        var hm = parseInt(numOffset, 10), m2 = hm % 100, h2 = (hm - m2) / 100;
        return h2 * 60 + m2;
      }
    }
    function configFromRFC2822(config2) {
      var match = rfc2822.exec(preprocessRFC2822(config2._i)), parsedArray;
      if (match) {
        parsedArray = extractFromRFC2822Strings(
          match[4],
          match[3],
          match[2],
          match[5],
          match[6],
          match[7]
        );
        if (!checkWeekday(match[1], parsedArray, config2)) {
          return;
        }
        config2._a = parsedArray;
        config2._tzm = calculateOffset$1(match[8], match[9], match[10]);
        config2._d = createUTCDate.apply(null, config2._a);
        config2._d.setUTCMinutes(config2._d.getUTCMinutes() - config2._tzm);
        getParsingFlags(config2).rfc2822 = true;
      } else {
        config2._isValid = false;
      }
    }
    function configFromString(config2) {
      var matched = aspNetJsonRegex.exec(config2._i);
      if (matched !== null) {
        config2._d = /* @__PURE__ */ new Date(+matched[1]);
        return;
      }
      configFromISO(config2);
      if (config2._isValid === false) {
        delete config2._isValid;
      } else {
        return;
      }
      configFromRFC2822(config2);
      if (config2._isValid === false) {
        delete config2._isValid;
      } else {
        return;
      }
      if (config2._strict) {
        config2._isValid = false;
      } else {
        hooks.createFromInputFallback(config2);
      }
    }
    hooks.createFromInputFallback = deprecate(
      "value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.",
      function(config2) {
        config2._d = /* @__PURE__ */ new Date(config2._i + (config2._useUTC ? " UTC" : ""));
      }
    );
    function defaults$3(a2, b2, c2) {
      if (a2 != null) {
        return a2;
      }
      if (b2 != null) {
        return b2;
      }
      return c2;
    }
    function currentDateArray(config2) {
      var nowValue = new Date(hooks.now());
      if (config2._useUTC) {
        return [
          nowValue.getUTCFullYear(),
          nowValue.getUTCMonth(),
          nowValue.getUTCDate()
        ];
      }
      return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
    }
    function configFromArray(config2) {
      var i2, date2, input = [], currentDate, expectedWeekday, yearToUse;
      if (config2._d) {
        return;
      }
      currentDate = currentDateArray(config2);
      if (config2._w && config2._a[DATE] == null && config2._a[MONTH] == null) {
        dayOfYearFromWeekInfo(config2);
      }
      if (config2._dayOfYear != null) {
        yearToUse = defaults$3(config2._a[YEAR], currentDate[YEAR]);
        if (config2._dayOfYear > daysInYear(yearToUse) || config2._dayOfYear === 0) {
          getParsingFlags(config2)._overflowDayOfYear = true;
        }
        date2 = createUTCDate(yearToUse, 0, config2._dayOfYear);
        config2._a[MONTH] = date2.getUTCMonth();
        config2._a[DATE] = date2.getUTCDate();
      }
      for (i2 = 0; i2 < 3 && config2._a[i2] == null; ++i2) {
        config2._a[i2] = input[i2] = currentDate[i2];
      }
      for (; i2 < 7; i2++) {
        config2._a[i2] = input[i2] = config2._a[i2] == null ? i2 === 2 ? 1 : 0 : config2._a[i2];
      }
      if (config2._a[HOUR] === 24 && config2._a[MINUTE] === 0 && config2._a[SECOND] === 0 && config2._a[MILLISECOND] === 0) {
        config2._nextDay = true;
        config2._a[HOUR] = 0;
      }
      config2._d = (config2._useUTC ? createUTCDate : createDate).apply(
        null,
        input
      );
      expectedWeekday = config2._useUTC ? config2._d.getUTCDay() : config2._d.getDay();
      if (config2._tzm != null) {
        config2._d.setUTCMinutes(config2._d.getUTCMinutes() - config2._tzm);
      }
      if (config2._nextDay) {
        config2._a[HOUR] = 24;
      }
      if (config2._w && typeof config2._w.d !== "undefined" && config2._w.d !== expectedWeekday) {
        getParsingFlags(config2).weekdayMismatch = true;
      }
    }
    function dayOfYearFromWeekInfo(config2) {
      var w2, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;
      w2 = config2._w;
      if (w2.GG != null || w2.W != null || w2.E != null) {
        dow = 1;
        doy = 4;
        weekYear = defaults$3(
          w2.GG,
          config2._a[YEAR],
          weekOfYear(createLocal(), 1, 4).year
        );
        week = defaults$3(w2.W, 1);
        weekday = defaults$3(w2.E, 1);
        if (weekday < 1 || weekday > 7) {
          weekdayOverflow = true;
        }
      } else {
        dow = config2._locale._week.dow;
        doy = config2._locale._week.doy;
        curWeek = weekOfYear(createLocal(), dow, doy);
        weekYear = defaults$3(w2.gg, config2._a[YEAR], curWeek.year);
        week = defaults$3(w2.w, curWeek.week);
        if (w2.d != null) {
          weekday = w2.d;
          if (weekday < 0 || weekday > 6) {
            weekdayOverflow = true;
          }
        } else if (w2.e != null) {
          weekday = w2.e + dow;
          if (w2.e < 0 || w2.e > 6) {
            weekdayOverflow = true;
          }
        } else {
          weekday = dow;
        }
      }
      if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
        getParsingFlags(config2)._overflowWeeks = true;
      } else if (weekdayOverflow != null) {
        getParsingFlags(config2)._overflowWeekday = true;
      } else {
        temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
        config2._a[YEAR] = temp.year;
        config2._dayOfYear = temp.dayOfYear;
      }
    }
    hooks.ISO_8601 = function() {
    };
    hooks.RFC_2822 = function() {
    };
    function configFromStringAndFormat(config2) {
      if (config2._f === hooks.ISO_8601) {
        configFromISO(config2);
        return;
      }
      if (config2._f === hooks.RFC_2822) {
        configFromRFC2822(config2);
        return;
      }
      config2._a = [];
      getParsingFlags(config2).empty = true;
      var string2 = "" + config2._i, i2, parsedInput, tokens2, token2, skipped, stringLength = string2.length, totalParsedInputLength = 0, era, tokenLen;
      tokens2 = expandFormat(config2._f, config2._locale).match(formattingTokens) || [];
      tokenLen = tokens2.length;
      for (i2 = 0; i2 < tokenLen; i2++) {
        token2 = tokens2[i2];
        parsedInput = (string2.match(getParseRegexForToken(token2, config2)) || [])[0];
        if (parsedInput) {
          skipped = string2.substr(0, string2.indexOf(parsedInput));
          if (skipped.length > 0) {
            getParsingFlags(config2).unusedInput.push(skipped);
          }
          string2 = string2.slice(
            string2.indexOf(parsedInput) + parsedInput.length
          );
          totalParsedInputLength += parsedInput.length;
        }
        if (formatTokenFunctions[token2]) {
          if (parsedInput) {
            getParsingFlags(config2).empty = false;
          } else {
            getParsingFlags(config2).unusedTokens.push(token2);
          }
          addTimeToArrayFromToken(token2, parsedInput, config2);
        } else if (config2._strict && !parsedInput) {
          getParsingFlags(config2).unusedTokens.push(token2);
        }
      }
      getParsingFlags(config2).charsLeftOver = stringLength - totalParsedInputLength;
      if (string2.length > 0) {
        getParsingFlags(config2).unusedInput.push(string2);
      }
      if (config2._a[HOUR] <= 12 && getParsingFlags(config2).bigHour === true && config2._a[HOUR] > 0) {
        getParsingFlags(config2).bigHour = void 0;
      }
      getParsingFlags(config2).parsedDateParts = config2._a.slice(0);
      getParsingFlags(config2).meridiem = config2._meridiem;
      config2._a[HOUR] = meridiemFixWrap(
        config2._locale,
        config2._a[HOUR],
        config2._meridiem
      );
      era = getParsingFlags(config2).era;
      if (era !== null) {
        config2._a[YEAR] = config2._locale.erasConvertYear(era, config2._a[YEAR]);
      }
      configFromArray(config2);
      checkOverflow(config2);
    }
    function meridiemFixWrap(locale2, hour, meridiem2) {
      var isPm;
      if (meridiem2 == null) {
        return hour;
      }
      if (locale2.meridiemHour != null) {
        return locale2.meridiemHour(hour, meridiem2);
      } else if (locale2.isPM != null) {
        isPm = locale2.isPM(meridiem2);
        if (isPm && hour < 12) {
          hour += 12;
        }
        if (!isPm && hour === 12) {
          hour = 0;
        }
        return hour;
      } else {
        return hour;
      }
    }
    function configFromStringAndArray(config2) {
      var tempConfig, bestMoment, scoreToBeat, i2, currentScore, validFormatFound, bestFormatIsValid = false, configfLen = config2._f.length;
      if (configfLen === 0) {
        getParsingFlags(config2).invalidFormat = true;
        config2._d = /* @__PURE__ */ new Date(NaN);
        return;
      }
      for (i2 = 0; i2 < configfLen; i2++) {
        currentScore = 0;
        validFormatFound = false;
        tempConfig = copyConfig({}, config2);
        if (config2._useUTC != null) {
          tempConfig._useUTC = config2._useUTC;
        }
        tempConfig._f = config2._f[i2];
        configFromStringAndFormat(tempConfig);
        if (isValid(tempConfig)) {
          validFormatFound = true;
        }
        currentScore += getParsingFlags(tempConfig).charsLeftOver;
        currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;
        getParsingFlags(tempConfig).score = currentScore;
        if (!bestFormatIsValid) {
          if (scoreToBeat == null || currentScore < scoreToBeat || validFormatFound) {
            scoreToBeat = currentScore;
            bestMoment = tempConfig;
            if (validFormatFound) {
              bestFormatIsValid = true;
            }
          }
        } else {
          if (currentScore < scoreToBeat) {
            scoreToBeat = currentScore;
            bestMoment = tempConfig;
          }
        }
      }
      extend$2(config2, bestMoment || tempConfig);
    }
    function configFromObject(config2) {
      if (config2._d) {
        return;
      }
      var i2 = normalizeObjectUnits(config2._i), dayOrDate = i2.day === void 0 ? i2.date : i2.day;
      config2._a = map$4(
        [i2.year, i2.month, dayOrDate, i2.hour, i2.minute, i2.second, i2.millisecond],
        function(obj) {
          return obj && parseInt(obj, 10);
        }
      );
      configFromArray(config2);
    }
    function createFromConfig(config2) {
      var res = new Moment(checkOverflow(prepareConfig(config2)));
      if (res._nextDay) {
        res.add(1, "d");
        res._nextDay = void 0;
      }
      return res;
    }
    function prepareConfig(config2) {
      var input = config2._i, format2 = config2._f;
      config2._locale = config2._locale || getLocale(config2._l);
      if (input === null || format2 === void 0 && input === "") {
        return createInvalid({ nullInput: true });
      }
      if (typeof input === "string") {
        config2._i = input = config2._locale.preparse(input);
      }
      if (isMoment(input)) {
        return new Moment(checkOverflow(input));
      } else if (isDate$1(input)) {
        config2._d = input;
      } else if (isArray$h(format2)) {
        configFromStringAndArray(config2);
      } else if (format2) {
        configFromStringAndFormat(config2);
      } else {
        configFromInput(config2);
      }
      if (!isValid(config2)) {
        config2._d = null;
      }
      return config2;
    }
    function configFromInput(config2) {
      var input = config2._i;
      if (isUndefined$2(input)) {
        config2._d = new Date(hooks.now());
      } else if (isDate$1(input)) {
        config2._d = new Date(input.valueOf());
      } else if (typeof input === "string") {
        configFromString(config2);
      } else if (isArray$h(input)) {
        config2._a = map$4(input.slice(0), function(obj) {
          return parseInt(obj, 10);
        });
        configFromArray(config2);
      } else if (isObject$c(input)) {
        configFromObject(config2);
      } else if (isNumber$5(input)) {
        config2._d = new Date(input);
      } else {
        hooks.createFromInputFallback(config2);
      }
    }
    function createLocalOrUTC(input, format2, locale2, strict, isUTC) {
      var c2 = {};
      if (format2 === true || format2 === false) {
        strict = format2;
        format2 = void 0;
      }
      if (locale2 === true || locale2 === false) {
        strict = locale2;
        locale2 = void 0;
      }
      if (isObject$c(input) && isObjectEmpty$1(input) || isArray$h(input) && input.length === 0) {
        input = void 0;
      }
      c2._isAMomentObject = true;
      c2._useUTC = c2._isUTC = isUTC;
      c2._l = locale2;
      c2._i = input;
      c2._f = format2;
      c2._strict = strict;
      return createFromConfig(c2);
    }
    function createLocal(input, format2, locale2, strict) {
      return createLocalOrUTC(input, format2, locale2, strict, false);
    }
    var prototypeMin = deprecate(
      "moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",
      function() {
        var other = createLocal.apply(null, arguments);
        if (this.isValid() && other.isValid()) {
          return other < this ? this : other;
        } else {
          return createInvalid();
        }
      }
    ), prototypeMax = deprecate(
      "moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",
      function() {
        var other = createLocal.apply(null, arguments);
        if (this.isValid() && other.isValid()) {
          return other > this ? this : other;
        } else {
          return createInvalid();
        }
      }
    );
    function pickBy(fn, moments) {
      var res, i2;
      if (moments.length === 1 && isArray$h(moments[0])) {
        moments = moments[0];
      }
      if (!moments.length) {
        return createLocal();
      }
      res = moments[0];
      for (i2 = 1; i2 < moments.length; ++i2) {
        if (!moments[i2].isValid() || moments[i2][fn](res)) {
          res = moments[i2];
        }
      }
      return res;
    }
    function min$3() {
      var args = [].slice.call(arguments, 0);
      return pickBy("isBefore", args);
    }
    function max$3() {
      var args = [].slice.call(arguments, 0);
      return pickBy("isAfter", args);
    }
    var now$2 = function() {
      return Date.now ? Date.now() : +/* @__PURE__ */ new Date();
    };
    var ordering = [
      "year",
      "quarter",
      "month",
      "week",
      "day",
      "hour",
      "minute",
      "second",
      "millisecond"
    ];
    function isDurationValid(m2) {
      var key, unitHasDecimal = false, i2, orderLen = ordering.length;
      for (key in m2) {
        if (hasOwnProp(m2, key) && !(indexOf.call(ordering, key) !== -1 && (m2[key] == null || !isNaN(m2[key])))) {
          return false;
        }
      }
      for (i2 = 0; i2 < orderLen; ++i2) {
        if (m2[ordering[i2]]) {
          if (unitHasDecimal) {
            return false;
          }
          if (parseFloat(m2[ordering[i2]]) !== toInt(m2[ordering[i2]])) {
            unitHasDecimal = true;
          }
        }
      }
      return true;
    }
    function isValid$1() {
      return this._isValid;
    }
    function createInvalid$1() {
      return createDuration(NaN);
    }
    function Duration(duration) {
      var normalizedInput = normalizeObjectUnits(duration), years2 = normalizedInput.year || 0, quarters = normalizedInput.quarter || 0, months2 = normalizedInput.month || 0, weeks2 = normalizedInput.week || normalizedInput.isoWeek || 0, days2 = normalizedInput.day || 0, hours2 = normalizedInput.hour || 0, minutes2 = normalizedInput.minute || 0, seconds2 = normalizedInput.second || 0, milliseconds2 = normalizedInput.millisecond || 0;
      this._isValid = isDurationValid(normalizedInput);
      this._milliseconds = +milliseconds2 + seconds2 * 1e3 + // 1000
      minutes2 * 6e4 + // 1000 * 60
      hours2 * 1e3 * 60 * 60;
      this._days = +days2 + weeks2 * 7;
      this._months = +months2 + quarters * 3 + years2 * 12;
      this._data = {};
      this._locale = getLocale();
      this._bubble();
    }
    function isDuration(obj) {
      return obj instanceof Duration;
    }
    function absRound(number2) {
      if (number2 < 0) {
        return Math.round(-1 * number2) * -1;
      } else {
        return Math.round(number2);
      }
    }
    function compareArrays(array1, array2, dontConvert) {
      var len = Math.min(array1.length, array2.length), lengthDiff = Math.abs(array1.length - array2.length), diffs = 0, i2;
      for (i2 = 0; i2 < len; i2++) {
        if (dontConvert && array1[i2] !== array2[i2] || !dontConvert && toInt(array1[i2]) !== toInt(array2[i2])) {
          diffs++;
        }
      }
      return diffs + lengthDiff;
    }
    function offset(token2, separator) {
      addFormatToken(token2, 0, 0, function() {
        var offset2 = this.utcOffset(), sign2 = "+";
        if (offset2 < 0) {
          offset2 = -offset2;
          sign2 = "-";
        }
        return sign2 + zeroFill(~~(offset2 / 60), 2) + separator + zeroFill(~~offset2 % 60, 2);
      });
    }
    offset("Z", ":");
    offset("ZZ", "");
    addRegexToken("Z", matchShortOffset);
    addRegexToken("ZZ", matchShortOffset);
    addParseToken(["Z", "ZZ"], function(input, array2, config2) {
      config2._useUTC = true;
      config2._tzm = offsetFromString(matchShortOffset, input);
    });
    var chunkOffset = /([\+\-]|\d\d)/gi;
    function offsetFromString(matcher, string2) {
      var matches2 = (string2 || "").match(matcher), chunk, parts2, minutes2;
      if (matches2 === null) {
        return null;
      }
      chunk = matches2[matches2.length - 1] || [];
      parts2 = (chunk + "").match(chunkOffset) || ["-", 0, 0];
      minutes2 = +(parts2[1] * 60) + toInt(parts2[2]);
      return minutes2 === 0 ? 0 : parts2[0] === "+" ? minutes2 : -minutes2;
    }
    function cloneWithOffset(input, model) {
      var res, diff2;
      if (model._isUTC) {
        res = model.clone();
        diff2 = (isMoment(input) || isDate$1(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
        res._d.setTime(res._d.valueOf() + diff2);
        hooks.updateOffset(res, false);
        return res;
      } else {
        return createLocal(input).local();
      }
    }
    function getDateOffset(m2) {
      return -Math.round(m2._d.getTimezoneOffset());
    }
    hooks.updateOffset = function() {
    };
    function getSetOffset(input, keepLocalTime, keepMinutes) {
      var offset2 = this._offset || 0, localAdjust;
      if (!this.isValid()) {
        return input != null ? this : NaN;
      }
      if (input != null) {
        if (typeof input === "string") {
          input = offsetFromString(matchShortOffset, input);
          if (input === null) {
            return this;
          }
        } else if (Math.abs(input) < 16 && !keepMinutes) {
          input = input * 60;
        }
        if (!this._isUTC && keepLocalTime) {
          localAdjust = getDateOffset(this);
        }
        this._offset = input;
        this._isUTC = true;
        if (localAdjust != null) {
          this.add(localAdjust, "m");
        }
        if (offset2 !== input) {
          if (!keepLocalTime || this._changeInProgress) {
            addSubtract(
              this,
              createDuration(input - offset2, "m"),
              1,
              false
            );
          } else if (!this._changeInProgress) {
            this._changeInProgress = true;
            hooks.updateOffset(this, true);
            this._changeInProgress = null;
          }
        }
        return this;
      } else {
        return this._isUTC ? offset2 : getDateOffset(this);
      }
    }
    function getSetZone(input, keepLocalTime) {
      if (input != null) {
        if (typeof input !== "string") {
          input = -input;
        }
        this.utcOffset(input, keepLocalTime);
        return this;
      } else {
        return -this.utcOffset();
      }
    }
    function setOffsetToUTC(keepLocalTime) {
      return this.utcOffset(0, keepLocalTime);
    }
    function setOffsetToLocal(keepLocalTime) {
      if (this._isUTC) {
        this.utcOffset(0, keepLocalTime);
        this._isUTC = false;
        if (keepLocalTime) {
          this.subtract(getDateOffset(this), "m");
        }
      }
      return this;
    }
    function setOffsetToParsedOffset() {
      if (this._tzm != null) {
        this.utcOffset(this._tzm, false, true);
      } else if (typeof this._i === "string") {
        var tZone = offsetFromString(matchOffset, this._i);
        if (tZone != null) {
          this.utcOffset(tZone);
        } else {
          this.utcOffset(0, true);
        }
      }
      return this;
    }
    function hasAlignedHourOffset(input) {
      if (!this.isValid()) {
        return false;
      }
      input = input ? createLocal(input).utcOffset() : 0;
      return (this.utcOffset() - input) % 60 === 0;
    }
    function isDaylightSavingTime() {
      return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset();
    }
    function isDaylightSavingTimeShifted() {
      if (!isUndefined$2(this._isDSTShifted)) {
        return this._isDSTShifted;
      }
      var c2 = {}, other;
      copyConfig(c2, this);
      c2 = prepareConfig(c2);
      if (c2._a) {
        other = c2._isUTC ? createUTC(c2._a) : createLocal(c2._a);
        this._isDSTShifted = this.isValid() && compareArrays(c2._a, other.toArray()) > 0;
      } else {
        this._isDSTShifted = false;
      }
      return this._isDSTShifted;
    }
    function isLocal() {
      return this.isValid() ? !this._isUTC : false;
    }
    function isUtcOffset() {
      return this.isValid() ? this._isUTC : false;
    }
    function isUtc() {
      return this.isValid() ? this._isUTC && this._offset === 0 : false;
    }
    var aspNetRegex = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/, isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;
    function createDuration(input, key) {
      var duration = input, match = null, sign2, ret, diffRes;
      if (isDuration(input)) {
        duration = {
          ms: input._milliseconds,
          d: input._days,
          M: input._months
        };
      } else if (isNumber$5(input) || !isNaN(+input)) {
        duration = {};
        if (key) {
          duration[key] = +input;
        } else {
          duration.milliseconds = +input;
        }
      } else if (match = aspNetRegex.exec(input)) {
        sign2 = match[1] === "-" ? -1 : 1;
        duration = {
          y: 0,
          d: toInt(match[DATE]) * sign2,
          h: toInt(match[HOUR]) * sign2,
          m: toInt(match[MINUTE]) * sign2,
          s: toInt(match[SECOND]) * sign2,
          ms: toInt(absRound(match[MILLISECOND] * 1e3)) * sign2
          // the millisecond decimal point is included in the match
        };
      } else if (match = isoRegex.exec(input)) {
        sign2 = match[1] === "-" ? -1 : 1;
        duration = {
          y: parseIso(match[2], sign2),
          M: parseIso(match[3], sign2),
          w: parseIso(match[4], sign2),
          d: parseIso(match[5], sign2),
          h: parseIso(match[6], sign2),
          m: parseIso(match[7], sign2),
          s: parseIso(match[8], sign2)
        };
      } else if (duration == null) {
        duration = {};
      } else if (typeof duration === "object" && ("from" in duration || "to" in duration)) {
        diffRes = momentsDifference(
          createLocal(duration.from),
          createLocal(duration.to)
        );
        duration = {};
        duration.ms = diffRes.milliseconds;
        duration.M = diffRes.months;
      }
      ret = new Duration(duration);
      if (isDuration(input) && hasOwnProp(input, "_locale")) {
        ret._locale = input._locale;
      }
      if (isDuration(input) && hasOwnProp(input, "_isValid")) {
        ret._isValid = input._isValid;
      }
      return ret;
    }
    createDuration.fn = Duration.prototype;
    createDuration.invalid = createInvalid$1;
    function parseIso(inp, sign2) {
      var res = inp && parseFloat(inp.replace(",", "."));
      return (isNaN(res) ? 0 : res) * sign2;
    }
    function positiveMomentsDifference(base, other) {
      var res = {};
      res.months = other.month() - base.month() + (other.year() - base.year()) * 12;
      if (base.clone().add(res.months, "M").isAfter(other)) {
        --res.months;
      }
      res.milliseconds = +other - +base.clone().add(res.months, "M");
      return res;
    }
    function momentsDifference(base, other) {
      var res;
      if (!(base.isValid() && other.isValid())) {
        return { milliseconds: 0, months: 0 };
      }
      other = cloneWithOffset(other, base);
      if (base.isBefore(other)) {
        res = positiveMomentsDifference(base, other);
      } else {
        res = positiveMomentsDifference(other, base);
        res.milliseconds = -res.milliseconds;
        res.months = -res.months;
      }
      return res;
    }
    function createAdder(direction, name) {
      return function(val, period) {
        var dur, tmp;
        if (period !== null && !isNaN(+period)) {
          deprecateSimple(
            name,
            "moment()." + name + "(period, number) is deprecated. Please use moment()." + name + "(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."
          );
          tmp = val;
          val = period;
          period = tmp;
        }
        dur = createDuration(val, period);
        addSubtract(this, dur, direction);
        return this;
      };
    }
    function addSubtract(mom, duration, isAdding, updateOffset) {
      var milliseconds2 = duration._milliseconds, days2 = absRound(duration._days), months2 = absRound(duration._months);
      if (!mom.isValid()) {
        return;
      }
      updateOffset = updateOffset == null ? true : updateOffset;
      if (months2) {
        setMonth(mom, get$4(mom, "Month") + months2 * isAdding);
      }
      if (days2) {
        set$1$1(mom, "Date", get$4(mom, "Date") + days2 * isAdding);
      }
      if (milliseconds2) {
        mom._d.setTime(mom._d.valueOf() + milliseconds2 * isAdding);
      }
      if (updateOffset) {
        hooks.updateOffset(mom, days2 || months2);
      }
    }
    var add$2 = createAdder(1, "add"), subtract$2 = createAdder(-1, "subtract");
    function isString$4(input) {
      return typeof input === "string" || input instanceof String;
    }
    function isMomentInput(input) {
      return isMoment(input) || isDate$1(input) || isString$4(input) || isNumber$5(input) || isNumberOrStringArray(input) || isMomentInputObject(input) || input === null || input === void 0;
    }
    function isMomentInputObject(input) {
      var objectTest = isObject$c(input) && !isObjectEmpty$1(input), propertyTest = false, properties2 = [
        "years",
        "year",
        "y",
        "months",
        "month",
        "M",
        "days",
        "day",
        "d",
        "dates",
        "date",
        "D",
        "hours",
        "hour",
        "h",
        "minutes",
        "minute",
        "m",
        "seconds",
        "second",
        "s",
        "milliseconds",
        "millisecond",
        "ms"
      ], i2, property2, propertyLen = properties2.length;
      for (i2 = 0; i2 < propertyLen; i2 += 1) {
        property2 = properties2[i2];
        propertyTest = propertyTest || hasOwnProp(input, property2);
      }
      return objectTest && propertyTest;
    }
    function isNumberOrStringArray(input) {
      var arrayTest = isArray$h(input), dataTypeTest = false;
      if (arrayTest) {
        dataTypeTest = input.filter(function(item) {
          return !isNumber$5(item) && isString$4(input);
        }).length === 0;
      }
      return arrayTest && dataTypeTest;
    }
    function isCalendarSpec(input) {
      var objectTest = isObject$c(input) && !isObjectEmpty$1(input), propertyTest = false, properties2 = [
        "sameDay",
        "nextDay",
        "lastDay",
        "nextWeek",
        "lastWeek",
        "sameElse"
      ], i2, property2;
      for (i2 = 0; i2 < properties2.length; i2 += 1) {
        property2 = properties2[i2];
        propertyTest = propertyTest || hasOwnProp(input, property2);
      }
      return objectTest && propertyTest;
    }
    function getCalendarFormat(myMoment, now2) {
      var diff2 = myMoment.diff(now2, "days", true);
      return diff2 < -6 ? "sameElse" : diff2 < -1 ? "lastWeek" : diff2 < 0 ? "lastDay" : diff2 < 1 ? "sameDay" : diff2 < 2 ? "nextDay" : diff2 < 7 ? "nextWeek" : "sameElse";
    }
    function calendar$1$1(time2, formats) {
      if (arguments.length === 1) {
        if (!arguments[0]) {
          time2 = void 0;
          formats = void 0;
        } else if (isMomentInput(arguments[0])) {
          time2 = arguments[0];
          formats = void 0;
        } else if (isCalendarSpec(arguments[0])) {
          formats = arguments[0];
          time2 = void 0;
        }
      }
      var now2 = time2 || createLocal(), sod = cloneWithOffset(now2, this).startOf("day"), format2 = hooks.calendarFormat(this, sod) || "sameElse", output = formats && (isFunction$7(formats[format2]) ? formats[format2].call(this, now2) : formats[format2]);
      return this.format(
        output || this.localeData().calendar(format2, this, createLocal(now2))
      );
    }
    function clone$1() {
      return new Moment(this);
    }
    function isAfter(input, units) {
      var localInput = isMoment(input) ? input : createLocal(input);
      if (!(this.isValid() && localInput.isValid())) {
        return false;
      }
      units = normalizeUnits(units) || "millisecond";
      if (units === "millisecond") {
        return this.valueOf() > localInput.valueOf();
      } else {
        return localInput.valueOf() < this.clone().startOf(units).valueOf();
      }
    }
    function isBefore(input, units) {
      var localInput = isMoment(input) ? input : createLocal(input);
      if (!(this.isValid() && localInput.isValid())) {
        return false;
      }
      units = normalizeUnits(units) || "millisecond";
      if (units === "millisecond") {
        return this.valueOf() < localInput.valueOf();
      } else {
        return this.clone().endOf(units).valueOf() < localInput.valueOf();
      }
    }
    function isBetween(from2, to2, units, inclusivity) {
      var localFrom = isMoment(from2) ? from2 : createLocal(from2), localTo = isMoment(to2) ? to2 : createLocal(to2);
      if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
        return false;
      }
      inclusivity = inclusivity || "()";
      return (inclusivity[0] === "(" ? this.isAfter(localFrom, units) : !this.isBefore(localFrom, units)) && (inclusivity[1] === ")" ? this.isBefore(localTo, units) : !this.isAfter(localTo, units));
    }
    function isSame(input, units) {
      var localInput = isMoment(input) ? input : createLocal(input), inputMs;
      if (!(this.isValid() && localInput.isValid())) {
        return false;
      }
      units = normalizeUnits(units) || "millisecond";
      if (units === "millisecond") {
        return this.valueOf() === localInput.valueOf();
      } else {
        inputMs = localInput.valueOf();
        return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
      }
    }
    function isSameOrAfter(input, units) {
      return this.isSame(input, units) || this.isAfter(input, units);
    }
    function isSameOrBefore(input, units) {
      return this.isSame(input, units) || this.isBefore(input, units);
    }
    function diff(input, units, asFloat) {
      var that, zoneDelta, output;
      if (!this.isValid()) {
        return NaN;
      }
      that = cloneWithOffset(input, this);
      if (!that.isValid()) {
        return NaN;
      }
      zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;
      units = normalizeUnits(units);
      switch (units) {
        case "year":
          output = monthDiff(this, that) / 12;
          break;
        case "month":
          output = monthDiff(this, that);
          break;
        case "quarter":
          output = monthDiff(this, that) / 3;
          break;
        case "second":
          output = (this - that) / 1e3;
          break;
        case "minute":
          output = (this - that) / 6e4;
          break;
        case "hour":
          output = (this - that) / 36e5;
          break;
        case "day":
          output = (this - that - zoneDelta) / 864e5;
          break;
        case "week":
          output = (this - that - zoneDelta) / 6048e5;
          break;
        default:
          output = this - that;
      }
      return asFloat ? output : absFloor(output);
    }
    function monthDiff(a2, b2) {
      if (a2.date() < b2.date()) {
        return -monthDiff(b2, a2);
      }
      var wholeMonthDiff = (b2.year() - a2.year()) * 12 + (b2.month() - a2.month()), anchor = a2.clone().add(wholeMonthDiff, "months"), anchor2, adjust;
      if (b2 - anchor < 0) {
        anchor2 = a2.clone().add(wholeMonthDiff - 1, "months");
        adjust = (b2 - anchor) / (anchor - anchor2);
      } else {
        anchor2 = a2.clone().add(wholeMonthDiff + 1, "months");
        adjust = (b2 - anchor) / (anchor2 - anchor);
      }
      return -(wholeMonthDiff + adjust) || 0;
    }
    hooks.defaultFormat = "YYYY-MM-DDTHH:mm:ssZ";
    hooks.defaultFormatUtc = "YYYY-MM-DDTHH:mm:ss[Z]";
    function toString$6() {
      return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ");
    }
    function toISOString(keepOffset) {
      if (!this.isValid()) {
        return null;
      }
      var utc = keepOffset !== true, m2 = utc ? this.clone().utc() : this;
      if (m2.year() < 0 || m2.year() > 9999) {
        return formatMoment(
          m2,
          utc ? "YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYYYY-MM-DD[T]HH:mm:ss.SSSZ"
        );
      }
      if (isFunction$7(Date.prototype.toISOString)) {
        if (utc) {
          return this.toDate().toISOString();
        } else {
          return new Date(this.valueOf() + this.utcOffset() * 60 * 1e3).toISOString().replace("Z", formatMoment(m2, "Z"));
        }
      }
      return formatMoment(
        m2,
        utc ? "YYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYY-MM-DD[T]HH:mm:ss.SSSZ"
      );
    }
    function inspect() {
      if (!this.isValid()) {
        return "moment.invalid(/* " + this._i + " */)";
      }
      var func = "moment", zone = "", prefix2, year, datetime, suffix;
      if (!this.isLocal()) {
        func = this.utcOffset() === 0 ? "moment.utc" : "moment.parseZone";
        zone = "Z";
      }
      prefix2 = "[" + func + '("]';
      year = 0 <= this.year() && this.year() <= 9999 ? "YYYY" : "YYYYYY";
      datetime = "-MM-DD[T]HH:mm:ss.SSS";
      suffix = zone + '[")]';
      return this.format(prefix2 + year + datetime + suffix);
    }
    function format$1(inputString) {
      if (!inputString) {
        inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
      }
      var output = formatMoment(this, inputString);
      return this.localeData().postformat(output);
    }
    function from(time2, withoutSuffix) {
      if (this.isValid() && (isMoment(time2) && time2.isValid() || createLocal(time2).isValid())) {
        return createDuration({ to: this, from: time2 }).locale(this.locale()).humanize(!withoutSuffix);
      } else {
        return this.localeData().invalidDate();
      }
    }
    function fromNow(withoutSuffix) {
      return this.from(createLocal(), withoutSuffix);
    }
    function to(time2, withoutSuffix) {
      if (this.isValid() && (isMoment(time2) && time2.isValid() || createLocal(time2).isValid())) {
        return createDuration({ from: this, to: time2 }).locale(this.locale()).humanize(!withoutSuffix);
      } else {
        return this.localeData().invalidDate();
      }
    }
    function toNow(withoutSuffix) {
      return this.to(createLocal(), withoutSuffix);
    }
    function locale$2(key) {
      var newLocaleData;
      if (key === void 0) {
        return this._locale._abbr;
      } else {
        newLocaleData = getLocale(key);
        if (newLocaleData != null) {
          this._locale = newLocaleData;
        }
        return this;
      }
    }
    var lang = deprecate(
      "moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",
      function(key) {
        if (key === void 0) {
          return this.localeData();
        } else {
          return this.locale(key);
        }
      }
    );
    function localeData() {
      return this._locale;
    }
    var MS_PER_SECOND = 1e3, MS_PER_MINUTE = 60 * MS_PER_SECOND, MS_PER_HOUR = 60 * MS_PER_MINUTE, MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;
    function mod$1(dividend, divisor) {
      return (dividend % divisor + divisor) % divisor;
    }
    function localStartOfDate(y2, m2, d2) {
      if (y2 < 100 && y2 >= 0) {
        return new Date(y2 + 400, m2, d2) - MS_PER_400_YEARS;
      } else {
        return new Date(y2, m2, d2).valueOf();
      }
    }
    function utcStartOfDate(y2, m2, d2) {
      if (y2 < 100 && y2 >= 0) {
        return Date.UTC(y2 + 400, m2, d2) - MS_PER_400_YEARS;
      } else {
        return Date.UTC(y2, m2, d2);
      }
    }
    function startOf(units) {
      var time2, startOfDate;
      units = normalizeUnits(units);
      if (units === void 0 || units === "millisecond" || !this.isValid()) {
        return this;
      }
      startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
      switch (units) {
        case "year":
          time2 = startOfDate(this.year(), 0, 1);
          break;
        case "quarter":
          time2 = startOfDate(
            this.year(),
            this.month() - this.month() % 3,
            1
          );
          break;
        case "month":
          time2 = startOfDate(this.year(), this.month(), 1);
          break;
        case "week":
          time2 = startOfDate(
            this.year(),
            this.month(),
            this.date() - this.weekday()
          );
          break;
        case "isoWeek":
          time2 = startOfDate(
            this.year(),
            this.month(),
            this.date() - (this.isoWeekday() - 1)
          );
          break;
        case "day":
        case "date":
          time2 = startOfDate(this.year(), this.month(), this.date());
          break;
        case "hour":
          time2 = this._d.valueOf();
          time2 -= mod$1(
            time2 + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
            MS_PER_HOUR
          );
          break;
        case "minute":
          time2 = this._d.valueOf();
          time2 -= mod$1(time2, MS_PER_MINUTE);
          break;
        case "second":
          time2 = this._d.valueOf();
          time2 -= mod$1(time2, MS_PER_SECOND);
          break;
      }
      this._d.setTime(time2);
      hooks.updateOffset(this, true);
      return this;
    }
    function endOf(units) {
      var time2, startOfDate;
      units = normalizeUnits(units);
      if (units === void 0 || units === "millisecond" || !this.isValid()) {
        return this;
      }
      startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
      switch (units) {
        case "year":
          time2 = startOfDate(this.year() + 1, 0, 1) - 1;
          break;
        case "quarter":
          time2 = startOfDate(
            this.year(),
            this.month() - this.month() % 3 + 3,
            1
          ) - 1;
          break;
        case "month":
          time2 = startOfDate(this.year(), this.month() + 1, 1) - 1;
          break;
        case "week":
          time2 = startOfDate(
            this.year(),
            this.month(),
            this.date() - this.weekday() + 7
          ) - 1;
          break;
        case "isoWeek":
          time2 = startOfDate(
            this.year(),
            this.month(),
            this.date() - (this.isoWeekday() - 1) + 7
          ) - 1;
          break;
        case "day":
        case "date":
          time2 = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
          break;
        case "hour":
          time2 = this._d.valueOf();
          time2 += MS_PER_HOUR - mod$1(
            time2 + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
            MS_PER_HOUR
          ) - 1;
          break;
        case "minute":
          time2 = this._d.valueOf();
          time2 += MS_PER_MINUTE - mod$1(time2, MS_PER_MINUTE) - 1;
          break;
        case "second":
          time2 = this._d.valueOf();
          time2 += MS_PER_SECOND - mod$1(time2, MS_PER_SECOND) - 1;
          break;
      }
      this._d.setTime(time2);
      hooks.updateOffset(this, true);
      return this;
    }
    function valueOf() {
      return this._d.valueOf() - (this._offset || 0) * 6e4;
    }
    function unix() {
      return Math.floor(this.valueOf() / 1e3);
    }
    function toDate() {
      return new Date(this.valueOf());
    }
    function toArray$3() {
      var m2 = this;
      return [
        m2.year(),
        m2.month(),
        m2.date(),
        m2.hour(),
        m2.minute(),
        m2.second(),
        m2.millisecond()
      ];
    }
    function toObject() {
      var m2 = this;
      return {
        years: m2.year(),
        months: m2.month(),
        date: m2.date(),
        hours: m2.hours(),
        minutes: m2.minutes(),
        seconds: m2.seconds(),
        milliseconds: m2.milliseconds()
      };
    }
    function toJSON() {
      return this.isValid() ? this.toISOString() : null;
    }
    function isValid$2() {
      return isValid(this);
    }
    function parsingFlags() {
      return extend$2({}, getParsingFlags(this));
    }
    function invalidAt() {
      return getParsingFlags(this).overflow;
    }
    function creationData() {
      return {
        input: this._i,
        format: this._f,
        locale: this._locale,
        isUTC: this._isUTC,
        strict: this._strict
      };
    }
    addFormatToken("N", 0, 0, "eraAbbr");
    addFormatToken("NN", 0, 0, "eraAbbr");
    addFormatToken("NNN", 0, 0, "eraAbbr");
    addFormatToken("NNNN", 0, 0, "eraName");
    addFormatToken("NNNNN", 0, 0, "eraNarrow");
    addFormatToken("y", ["y", 1], "yo", "eraYear");
    addFormatToken("y", ["yy", 2], 0, "eraYear");
    addFormatToken("y", ["yyy", 3], 0, "eraYear");
    addFormatToken("y", ["yyyy", 4], 0, "eraYear");
    addRegexToken("N", matchEraAbbr);
    addRegexToken("NN", matchEraAbbr);
    addRegexToken("NNN", matchEraAbbr);
    addRegexToken("NNNN", matchEraName);
    addRegexToken("NNNNN", matchEraNarrow);
    addParseToken(
      ["N", "NN", "NNN", "NNNN", "NNNNN"],
      function(input, array2, config2, token2) {
        var era = config2._locale.erasParse(input, token2, config2._strict);
        if (era) {
          getParsingFlags(config2).era = era;
        } else {
          getParsingFlags(config2).invalidEra = input;
        }
      }
    );
    addRegexToken("y", matchUnsigned);
    addRegexToken("yy", matchUnsigned);
    addRegexToken("yyy", matchUnsigned);
    addRegexToken("yyyy", matchUnsigned);
    addRegexToken("yo", matchEraYearOrdinal);
    addParseToken(["y", "yy", "yyy", "yyyy"], YEAR);
    addParseToken(["yo"], function(input, array2, config2, token2) {
      var match;
      if (config2._locale._eraYearOrdinalRegex) {
        match = input.match(config2._locale._eraYearOrdinalRegex);
      }
      if (config2._locale.eraYearOrdinalParse) {
        array2[YEAR] = config2._locale.eraYearOrdinalParse(input, match);
      } else {
        array2[YEAR] = parseInt(input, 10);
      }
    });
    function localeEras(m2, format2) {
      var i2, l2, date2, eras = this._eras || getLocale("en")._eras;
      for (i2 = 0, l2 = eras.length; i2 < l2; ++i2) {
        switch (typeof eras[i2].since) {
          case "string":
            date2 = hooks(eras[i2].since).startOf("day");
            eras[i2].since = date2.valueOf();
            break;
        }
        switch (typeof eras[i2].until) {
          case "undefined":
            eras[i2].until = Infinity;
            break;
          case "string":
            date2 = hooks(eras[i2].until).startOf("day").valueOf();
            eras[i2].until = date2.valueOf();
            break;
        }
      }
      return eras;
    }
    function localeErasParse(eraName, format2, strict) {
      var i2, l2, eras = this.eras(), name, abbr, narrow;
      eraName = eraName.toUpperCase();
      for (i2 = 0, l2 = eras.length; i2 < l2; ++i2) {
        name = eras[i2].name.toUpperCase();
        abbr = eras[i2].abbr.toUpperCase();
        narrow = eras[i2].narrow.toUpperCase();
        if (strict) {
          switch (format2) {
            case "N":
            case "NN":
            case "NNN":
              if (abbr === eraName) {
                return eras[i2];
              }
              break;
            case "NNNN":
              if (name === eraName) {
                return eras[i2];
              }
              break;
            case "NNNNN":
              if (narrow === eraName) {
                return eras[i2];
              }
              break;
          }
        } else if ([name, abbr, narrow].indexOf(eraName) >= 0) {
          return eras[i2];
        }
      }
    }
    function localeErasConvertYear(era, year) {
      var dir = era.since <= era.until ? 1 : -1;
      if (year === void 0) {
        return hooks(era.since).year();
      } else {
        return hooks(era.since).year() + (year - era.offset) * dir;
      }
    }
    function getEraName() {
      var i2, l2, val, eras = this.localeData().eras();
      for (i2 = 0, l2 = eras.length; i2 < l2; ++i2) {
        val = this.clone().startOf("day").valueOf();
        if (eras[i2].since <= val && val <= eras[i2].until) {
          return eras[i2].name;
        }
        if (eras[i2].until <= val && val <= eras[i2].since) {
          return eras[i2].name;
        }
      }
      return "";
    }
    function getEraNarrow() {
      var i2, l2, val, eras = this.localeData().eras();
      for (i2 = 0, l2 = eras.length; i2 < l2; ++i2) {
        val = this.clone().startOf("day").valueOf();
        if (eras[i2].since <= val && val <= eras[i2].until) {
          return eras[i2].narrow;
        }
        if (eras[i2].until <= val && val <= eras[i2].since) {
          return eras[i2].narrow;
        }
      }
      return "";
    }
    function getEraAbbr() {
      var i2, l2, val, eras = this.localeData().eras();
      for (i2 = 0, l2 = eras.length; i2 < l2; ++i2) {
        val = this.clone().startOf("day").valueOf();
        if (eras[i2].since <= val && val <= eras[i2].until) {
          return eras[i2].abbr;
        }
        if (eras[i2].until <= val && val <= eras[i2].since) {
          return eras[i2].abbr;
        }
      }
      return "";
    }
    function getEraYear() {
      var i2, l2, dir, val, eras = this.localeData().eras();
      for (i2 = 0, l2 = eras.length; i2 < l2; ++i2) {
        dir = eras[i2].since <= eras[i2].until ? 1 : -1;
        val = this.clone().startOf("day").valueOf();
        if (eras[i2].since <= val && val <= eras[i2].until || eras[i2].until <= val && val <= eras[i2].since) {
          return (this.year() - hooks(eras[i2].since).year()) * dir + eras[i2].offset;
        }
      }
      return this.year();
    }
    function erasNameRegex(isStrict) {
      if (!hasOwnProp(this, "_erasNameRegex")) {
        computeErasParse.call(this);
      }
      return isStrict ? this._erasNameRegex : this._erasRegex;
    }
    function erasAbbrRegex(isStrict) {
      if (!hasOwnProp(this, "_erasAbbrRegex")) {
        computeErasParse.call(this);
      }
      return isStrict ? this._erasAbbrRegex : this._erasRegex;
    }
    function erasNarrowRegex(isStrict) {
      if (!hasOwnProp(this, "_erasNarrowRegex")) {
        computeErasParse.call(this);
      }
      return isStrict ? this._erasNarrowRegex : this._erasRegex;
    }
    function matchEraAbbr(isStrict, locale2) {
      return locale2.erasAbbrRegex(isStrict);
    }
    function matchEraName(isStrict, locale2) {
      return locale2.erasNameRegex(isStrict);
    }
    function matchEraNarrow(isStrict, locale2) {
      return locale2.erasNarrowRegex(isStrict);
    }
    function matchEraYearOrdinal(isStrict, locale2) {
      return locale2._eraYearOrdinalRegex || matchUnsigned;
    }
    function computeErasParse() {
      var abbrPieces = [], namePieces = [], narrowPieces = [], mixedPieces = [], i2, l2, erasName, erasAbbr, erasNarrow, eras = this.eras();
      for (i2 = 0, l2 = eras.length; i2 < l2; ++i2) {
        erasName = regexEscape(eras[i2].name);
        erasAbbr = regexEscape(eras[i2].abbr);
        erasNarrow = regexEscape(eras[i2].narrow);
        namePieces.push(erasName);
        abbrPieces.push(erasAbbr);
        narrowPieces.push(erasNarrow);
        mixedPieces.push(erasName);
        mixedPieces.push(erasAbbr);
        mixedPieces.push(erasNarrow);
      }
      this._erasRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
      this._erasNameRegex = new RegExp("^(" + namePieces.join("|") + ")", "i");
      this._erasAbbrRegex = new RegExp("^(" + abbrPieces.join("|") + ")", "i");
      this._erasNarrowRegex = new RegExp(
        "^(" + narrowPieces.join("|") + ")",
        "i"
      );
    }
    addFormatToken(0, ["gg", 2], 0, function() {
      return this.weekYear() % 100;
    });
    addFormatToken(0, ["GG", 2], 0, function() {
      return this.isoWeekYear() % 100;
    });
    function addWeekYearFormatToken(token2, getter) {
      addFormatToken(0, [token2, token2.length], 0, getter);
    }
    addWeekYearFormatToken("gggg", "weekYear");
    addWeekYearFormatToken("ggggg", "weekYear");
    addWeekYearFormatToken("GGGG", "isoWeekYear");
    addWeekYearFormatToken("GGGGG", "isoWeekYear");
    addRegexToken("G", matchSigned);
    addRegexToken("g", matchSigned);
    addRegexToken("GG", match1to2, match2);
    addRegexToken("gg", match1to2, match2);
    addRegexToken("GGGG", match1to4, match4);
    addRegexToken("gggg", match1to4, match4);
    addRegexToken("GGGGG", match1to6, match6);
    addRegexToken("ggggg", match1to6, match6);
    addWeekParseToken(
      ["gggg", "ggggg", "GGGG", "GGGGG"],
      function(input, week, config2, token2) {
        week[token2.substr(0, 2)] = toInt(input);
      }
    );
    addWeekParseToken(["gg", "GG"], function(input, week, config2, token2) {
      week[token2] = hooks.parseTwoDigitYear(input);
    });
    function getSetWeekYear(input) {
      return getSetWeekYearHelper.call(
        this,
        input,
        this.week(),
        this.weekday() + this.localeData()._week.dow,
        this.localeData()._week.dow,
        this.localeData()._week.doy
      );
    }
    function getSetISOWeekYear(input) {
      return getSetWeekYearHelper.call(
        this,
        input,
        this.isoWeek(),
        this.isoWeekday(),
        1,
        4
      );
    }
    function getISOWeeksInYear() {
      return weeksInYear(this.year(), 1, 4);
    }
    function getISOWeeksInISOWeekYear() {
      return weeksInYear(this.isoWeekYear(), 1, 4);
    }
    function getWeeksInYear() {
      var weekInfo = this.localeData()._week;
      return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
    }
    function getWeeksInWeekYear() {
      var weekInfo = this.localeData()._week;
      return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);
    }
    function getSetWeekYearHelper(input, week, weekday, dow, doy) {
      var weeksTarget;
      if (input == null) {
        return weekOfYear(this, dow, doy).year;
      } else {
        weeksTarget = weeksInYear(input, dow, doy);
        if (week > weeksTarget) {
          week = weeksTarget;
        }
        return setWeekAll.call(this, input, week, weekday, dow, doy);
      }
    }
    function setWeekAll(weekYear, week, weekday, dow, doy) {
      var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy), date2 = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);
      this.year(date2.getUTCFullYear());
      this.month(date2.getUTCMonth());
      this.date(date2.getUTCDate());
      return this;
    }
    addFormatToken("Q", 0, "Qo", "quarter");
    addRegexToken("Q", match1);
    addParseToken("Q", function(input, array2) {
      array2[MONTH] = (toInt(input) - 1) * 3;
    });
    function getSetQuarter(input) {
      return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
    }
    addFormatToken("D", ["DD", 2], "Do", "date");
    addRegexToken("D", match1to2, match1to2NoLeadingZero);
    addRegexToken("DD", match1to2, match2);
    addRegexToken("Do", function(isStrict, locale2) {
      return isStrict ? locale2._dayOfMonthOrdinalParse || locale2._ordinalParse : locale2._dayOfMonthOrdinalParseLenient;
    });
    addParseToken(["D", "DD"], DATE);
    addParseToken("Do", function(input, array2) {
      array2[DATE] = toInt(input.match(match1to2)[0]);
    });
    var getSetDayOfMonth = makeGetSet("Date", true);
    addFormatToken("DDD", ["DDDD", 3], "DDDo", "dayOfYear");
    addRegexToken("DDD", match1to3);
    addRegexToken("DDDD", match3);
    addParseToken(["DDD", "DDDD"], function(input, array2, config2) {
      config2._dayOfYear = toInt(input);
    });
    function getSetDayOfYear(input) {
      var dayOfYear = Math.round(
        (this.clone().startOf("day") - this.clone().startOf("year")) / 864e5
      ) + 1;
      return input == null ? dayOfYear : this.add(input - dayOfYear, "d");
    }
    addFormatToken("m", ["mm", 2], 0, "minute");
    addRegexToken("m", match1to2, match1to2HasZero);
    addRegexToken("mm", match1to2, match2);
    addParseToken(["m", "mm"], MINUTE);
    var getSetMinute = makeGetSet("Minutes", false);
    addFormatToken("s", ["ss", 2], 0, "second");
    addRegexToken("s", match1to2, match1to2HasZero);
    addRegexToken("ss", match1to2, match2);
    addParseToken(["s", "ss"], SECOND);
    var getSetSecond = makeGetSet("Seconds", false);
    addFormatToken("S", 0, 0, function() {
      return ~~(this.millisecond() / 100);
    });
    addFormatToken(0, ["SS", 2], 0, function() {
      return ~~(this.millisecond() / 10);
    });
    addFormatToken(0, ["SSS", 3], 0, "millisecond");
    addFormatToken(0, ["SSSS", 4], 0, function() {
      return this.millisecond() * 10;
    });
    addFormatToken(0, ["SSSSS", 5], 0, function() {
      return this.millisecond() * 100;
    });
    addFormatToken(0, ["SSSSSS", 6], 0, function() {
      return this.millisecond() * 1e3;
    });
    addFormatToken(0, ["SSSSSSS", 7], 0, function() {
      return this.millisecond() * 1e4;
    });
    addFormatToken(0, ["SSSSSSSS", 8], 0, function() {
      return this.millisecond() * 1e5;
    });
    addFormatToken(0, ["SSSSSSSSS", 9], 0, function() {
      return this.millisecond() * 1e6;
    });
    addRegexToken("S", match1to3, match1);
    addRegexToken("SS", match1to3, match2);
    addRegexToken("SSS", match1to3, match3);
    var token, getSetMillisecond;
    for (token = "SSSS"; token.length <= 9; token += "S") {
      addRegexToken(token, matchUnsigned);
    }
    function parseMs(input, array2) {
      array2[MILLISECOND] = toInt(("0." + input) * 1e3);
    }
    for (token = "S"; token.length <= 9; token += "S") {
      addParseToken(token, parseMs);
    }
    getSetMillisecond = makeGetSet("Milliseconds", false);
    addFormatToken("z", 0, 0, "zoneAbbr");
    addFormatToken("zz", 0, 0, "zoneName");
    function getZoneAbbr() {
      return this._isUTC ? "UTC" : "";
    }
    function getZoneName() {
      return this._isUTC ? "Coordinated Universal Time" : "";
    }
    var proto = Moment.prototype;
    proto.add = add$2;
    proto.calendar = calendar$1$1;
    proto.clone = clone$1;
    proto.diff = diff;
    proto.endOf = endOf;
    proto.format = format$1;
    proto.from = from;
    proto.fromNow = fromNow;
    proto.to = to;
    proto.toNow = toNow;
    proto.get = stringGet;
    proto.invalidAt = invalidAt;
    proto.isAfter = isAfter;
    proto.isBefore = isBefore;
    proto.isBetween = isBetween;
    proto.isSame = isSame;
    proto.isSameOrAfter = isSameOrAfter;
    proto.isSameOrBefore = isSameOrBefore;
    proto.isValid = isValid$2;
    proto.lang = lang;
    proto.locale = locale$2;
    proto.localeData = localeData;
    proto.max = prototypeMax;
    proto.min = prototypeMin;
    proto.parsingFlags = parsingFlags;
    proto.set = stringSet;
    proto.startOf = startOf;
    proto.subtract = subtract$2;
    proto.toArray = toArray$3;
    proto.toObject = toObject;
    proto.toDate = toDate;
    proto.toISOString = toISOString;
    proto.inspect = inspect;
    if (typeof Symbol !== "undefined" && Symbol.for != null) {
      proto[Symbol.for("nodejs.util.inspect.custom")] = function() {
        return "Moment<" + this.format() + ">";
      };
    }
    proto.toJSON = toJSON;
    proto.toString = toString$6;
    proto.unix = unix;
    proto.valueOf = valueOf;
    proto.creationData = creationData;
    proto.eraName = getEraName;
    proto.eraNarrow = getEraNarrow;
    proto.eraAbbr = getEraAbbr;
    proto.eraYear = getEraYear;
    proto.year = getSetYear;
    proto.isLeapYear = getIsLeapYear;
    proto.weekYear = getSetWeekYear;
    proto.isoWeekYear = getSetISOWeekYear;
    proto.quarter = proto.quarters = getSetQuarter;
    proto.month = getSetMonth;
    proto.daysInMonth = getDaysInMonth;
    proto.week = proto.weeks = getSetWeek;
    proto.isoWeek = proto.isoWeeks = getSetISOWeek;
    proto.weeksInYear = getWeeksInYear;
    proto.weeksInWeekYear = getWeeksInWeekYear;
    proto.isoWeeksInYear = getISOWeeksInYear;
    proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;
    proto.date = getSetDayOfMonth;
    proto.day = proto.days = getSetDayOfWeek;
    proto.weekday = getSetLocaleDayOfWeek;
    proto.isoWeekday = getSetISODayOfWeek;
    proto.dayOfYear = getSetDayOfYear;
    proto.hour = proto.hours = getSetHour;
    proto.minute = proto.minutes = getSetMinute;
    proto.second = proto.seconds = getSetSecond;
    proto.millisecond = proto.milliseconds = getSetMillisecond;
    proto.utcOffset = getSetOffset;
    proto.utc = setOffsetToUTC;
    proto.local = setOffsetToLocal;
    proto.parseZone = setOffsetToParsedOffset;
    proto.hasAlignedHourOffset = hasAlignedHourOffset;
    proto.isDST = isDaylightSavingTime;
    proto.isLocal = isLocal;
    proto.isUtcOffset = isUtcOffset;
    proto.isUtc = isUtc;
    proto.isUTC = isUtc;
    proto.zoneAbbr = getZoneAbbr;
    proto.zoneName = getZoneName;
    proto.dates = deprecate(
      "dates accessor is deprecated. Use date instead.",
      getSetDayOfMonth
    );
    proto.months = deprecate(
      "months accessor is deprecated. Use month instead",
      getSetMonth
    );
    proto.years = deprecate(
      "years accessor is deprecated. Use year instead",
      getSetYear
    );
    proto.zone = deprecate(
      "moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",
      getSetZone
    );
    proto.isDSTShifted = deprecate(
      "isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",
      isDaylightSavingTimeShifted
    );
    function createUnix(input) {
      return createLocal(input * 1e3);
    }
    function createInZone() {
      return createLocal.apply(null, arguments).parseZone();
    }
    function preParsePostFormat(string2) {
      return string2;
    }
    var proto$1 = Locale.prototype;
    proto$1.calendar = calendar$1;
    proto$1.longDateFormat = longDateFormat;
    proto$1.invalidDate = invalidDate;
    proto$1.ordinal = ordinal$1;
    proto$1.preparse = preParsePostFormat;
    proto$1.postformat = preParsePostFormat;
    proto$1.relativeTime = relativeTime;
    proto$1.pastFuture = pastFuture;
    proto$1.set = set$1;
    proto$1.eras = localeEras;
    proto$1.erasParse = localeErasParse;
    proto$1.erasConvertYear = localeErasConvertYear;
    proto$1.erasAbbrRegex = erasAbbrRegex;
    proto$1.erasNameRegex = erasNameRegex;
    proto$1.erasNarrowRegex = erasNarrowRegex;
    proto$1.months = localeMonths;
    proto$1.monthsShort = localeMonthsShort;
    proto$1.monthsParse = localeMonthsParse;
    proto$1.monthsRegex = monthsRegex;
    proto$1.monthsShortRegex = monthsShortRegex;
    proto$1.week = localeWeek;
    proto$1.firstDayOfYear = localeFirstDayOfYear;
    proto$1.firstDayOfWeek = localeFirstDayOfWeek;
    proto$1.weekdays = localeWeekdays;
    proto$1.weekdaysMin = localeWeekdaysMin;
    proto$1.weekdaysShort = localeWeekdaysShort;
    proto$1.weekdaysParse = localeWeekdaysParse;
    proto$1.weekdaysRegex = weekdaysRegex;
    proto$1.weekdaysShortRegex = weekdaysShortRegex;
    proto$1.weekdaysMinRegex = weekdaysMinRegex;
    proto$1.isPM = localeIsPM;
    proto$1.meridiem = localeMeridiem;
    function get$1$1(format2, index, field, setter) {
      var locale2 = getLocale(), utc = createUTC().set(setter, index);
      return locale2[field](utc, format2);
    }
    function listMonthsImpl(format2, index, field) {
      if (isNumber$5(format2)) {
        index = format2;
        format2 = void 0;
      }
      format2 = format2 || "";
      if (index != null) {
        return get$1$1(format2, index, field, "month");
      }
      var i2, out = [];
      for (i2 = 0; i2 < 12; i2++) {
        out[i2] = get$1$1(format2, i2, field, "month");
      }
      return out;
    }
    function listWeekdaysImpl(localeSorted, format2, index, field) {
      if (typeof localeSorted === "boolean") {
        if (isNumber$5(format2)) {
          index = format2;
          format2 = void 0;
        }
        format2 = format2 || "";
      } else {
        format2 = localeSorted;
        index = format2;
        localeSorted = false;
        if (isNumber$5(format2)) {
          index = format2;
          format2 = void 0;
        }
        format2 = format2 || "";
      }
      var locale2 = getLocale(), shift = localeSorted ? locale2._week.dow : 0, i2, out = [];
      if (index != null) {
        return get$1$1(format2, (index + shift) % 7, field, "day");
      }
      for (i2 = 0; i2 < 7; i2++) {
        out[i2] = get$1$1(format2, (i2 + shift) % 7, field, "day");
      }
      return out;
    }
    function listMonths(format2, index) {
      return listMonthsImpl(format2, index, "months");
    }
    function listMonthsShort(format2, index) {
      return listMonthsImpl(format2, index, "monthsShort");
    }
    function listWeekdays(localeSorted, format2, index) {
      return listWeekdaysImpl(localeSorted, format2, index, "weekdays");
    }
    function listWeekdaysShort(localeSorted, format2, index) {
      return listWeekdaysImpl(localeSorted, format2, index, "weekdaysShort");
    }
    function listWeekdaysMin(localeSorted, format2, index) {
      return listWeekdaysImpl(localeSorted, format2, index, "weekdaysMin");
    }
    getSetGlobalLocale("en", {
      eras: [
        {
          since: "0001-01-01",
          until: Infinity,
          offset: 1,
          name: "Anno Domini",
          narrow: "AD",
          abbr: "AD"
        },
        {
          since: "0000-12-31",
          until: -Infinity,
          offset: 1,
          name: "Before Christ",
          narrow: "BC",
          abbr: "BC"
        }
      ],
      dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
      ordinal: function(number2) {
        var b2 = number2 % 10, output = toInt(number2 % 100 / 10) === 1 ? "th" : b2 === 1 ? "st" : b2 === 2 ? "nd" : b2 === 3 ? "rd" : "th";
        return number2 + output;
      }
    });
    hooks.lang = deprecate(
      "moment.lang is deprecated. Use moment.locale instead.",
      getSetGlobalLocale
    );
    hooks.langData = deprecate(
      "moment.langData is deprecated. Use moment.localeData instead.",
      getLocale
    );
    var mathAbs = Math.abs;
    function abs() {
      var data = this._data;
      this._milliseconds = mathAbs(this._milliseconds);
      this._days = mathAbs(this._days);
      this._months = mathAbs(this._months);
      data.milliseconds = mathAbs(data.milliseconds);
      data.seconds = mathAbs(data.seconds);
      data.minutes = mathAbs(data.minutes);
      data.hours = mathAbs(data.hours);
      data.months = mathAbs(data.months);
      data.years = mathAbs(data.years);
      return this;
    }
    function addSubtract$1(duration, input, value2, direction) {
      var other = createDuration(input, value2);
      duration._milliseconds += direction * other._milliseconds;
      duration._days += direction * other._days;
      duration._months += direction * other._months;
      return duration._bubble();
    }
    function add$1$1(input, value2) {
      return addSubtract$1(this, input, value2, 1);
    }
    function subtract$1$1(input, value2) {
      return addSubtract$1(this, input, value2, -1);
    }
    function absCeil(number2) {
      if (number2 < 0) {
        return Math.floor(number2);
      } else {
        return Math.ceil(number2);
      }
    }
    function bubble() {
      var milliseconds2 = this._milliseconds, days2 = this._days, months2 = this._months, data = this._data, seconds2, minutes2, hours2, years2, monthsFromDays;
      if (!(milliseconds2 >= 0 && days2 >= 0 && months2 >= 0 || milliseconds2 <= 0 && days2 <= 0 && months2 <= 0)) {
        milliseconds2 += absCeil(monthsToDays(months2) + days2) * 864e5;
        days2 = 0;
        months2 = 0;
      }
      data.milliseconds = milliseconds2 % 1e3;
      seconds2 = absFloor(milliseconds2 / 1e3);
      data.seconds = seconds2 % 60;
      minutes2 = absFloor(seconds2 / 60);
      data.minutes = minutes2 % 60;
      hours2 = absFloor(minutes2 / 60);
      data.hours = hours2 % 24;
      days2 += absFloor(hours2 / 24);
      monthsFromDays = absFloor(daysToMonths(days2));
      months2 += monthsFromDays;
      days2 -= absCeil(monthsToDays(monthsFromDays));
      years2 = absFloor(months2 / 12);
      months2 %= 12;
      data.days = days2;
      data.months = months2;
      data.years = years2;
      return this;
    }
    function daysToMonths(days2) {
      return days2 * 4800 / 146097;
    }
    function monthsToDays(months2) {
      return months2 * 146097 / 4800;
    }
    function as(units) {
      if (!this.isValid()) {
        return NaN;
      }
      var days2, months2, milliseconds2 = this._milliseconds;
      units = normalizeUnits(units);
      if (units === "month" || units === "quarter" || units === "year") {
        days2 = this._days + milliseconds2 / 864e5;
        months2 = this._months + daysToMonths(days2);
        switch (units) {
          case "month":
            return months2;
          case "quarter":
            return months2 / 3;
          case "year":
            return months2 / 12;
        }
      } else {
        days2 = this._days + Math.round(monthsToDays(this._months));
        switch (units) {
          case "week":
            return days2 / 7 + milliseconds2 / 6048e5;
          case "day":
            return days2 + milliseconds2 / 864e5;
          case "hour":
            return days2 * 24 + milliseconds2 / 36e5;
          case "minute":
            return days2 * 1440 + milliseconds2 / 6e4;
          case "second":
            return days2 * 86400 + milliseconds2 / 1e3;
          case "millisecond":
            return Math.floor(days2 * 864e5) + milliseconds2;
          default:
            throw new Error("Unknown unit " + units);
        }
      }
    }
    function makeAs(alias) {
      return function() {
        return this.as(alias);
      };
    }
    var asMilliseconds = makeAs("ms"), asSeconds = makeAs("s"), asMinutes = makeAs("m"), asHours = makeAs("h"), asDays = makeAs("d"), asWeeks = makeAs("w"), asMonths = makeAs("M"), asQuarters = makeAs("Q"), asYears = makeAs("y"), valueOf$1 = asMilliseconds;
    function clone$1$1() {
      return createDuration(this);
    }
    function get$2$1(units) {
      units = normalizeUnits(units);
      return this.isValid() ? this[units + "s"]() : NaN;
    }
    function makeGetter(name) {
      return function() {
        return this.isValid() ? this._data[name] : NaN;
      };
    }
    var milliseconds = makeGetter("milliseconds"), seconds = makeGetter("seconds"), minutes = makeGetter("minutes"), hours = makeGetter("hours"), days = makeGetter("days"), months = makeGetter("months"), years = makeGetter("years");
    function weeks() {
      return absFloor(this.days() / 7);
    }
    var round$1 = Math.round, thresholds = {
      ss: 44,
      // a few seconds to seconds
      s: 45,
      // seconds to minute
      m: 45,
      // minutes to hour
      h: 22,
      // hours to day
      d: 26,
      // days to month/week
      w: null,
      // weeks to month
      M: 11
      // months to year
    };
    function substituteTimeAgo(string2, number2, withoutSuffix, isFuture, locale2) {
      return locale2.relativeTime(number2 || 1, !!withoutSuffix, string2, isFuture);
    }
    function relativeTime$1(posNegDuration, withoutSuffix, thresholds2, locale2) {
      var duration = createDuration(posNegDuration).abs(), seconds2 = round$1(duration.as("s")), minutes2 = round$1(duration.as("m")), hours2 = round$1(duration.as("h")), days2 = round$1(duration.as("d")), months2 = round$1(duration.as("M")), weeks2 = round$1(duration.as("w")), years2 = round$1(duration.as("y")), a2 = seconds2 <= thresholds2.ss && ["s", seconds2] || seconds2 < thresholds2.s && ["ss", seconds2] || minutes2 <= 1 && ["m"] || minutes2 < thresholds2.m && ["mm", minutes2] || hours2 <= 1 && ["h"] || hours2 < thresholds2.h && ["hh", hours2] || days2 <= 1 && ["d"] || days2 < thresholds2.d && ["dd", days2];
      if (thresholds2.w != null) {
        a2 = a2 || weeks2 <= 1 && ["w"] || weeks2 < thresholds2.w && ["ww", weeks2];
      }
      a2 = a2 || months2 <= 1 && ["M"] || months2 < thresholds2.M && ["MM", months2] || years2 <= 1 && ["y"] || ["yy", years2];
      a2[2] = withoutSuffix;
      a2[3] = +posNegDuration > 0;
      a2[4] = locale2;
      return substituteTimeAgo.apply(null, a2);
    }
    function getSetRelativeTimeRounding(roundingFunction) {
      if (roundingFunction === void 0) {
        return round$1;
      }
      if (typeof roundingFunction === "function") {
        round$1 = roundingFunction;
        return true;
      }
      return false;
    }
    function getSetRelativeTimeThreshold(threshold2, limit) {
      if (thresholds[threshold2] === void 0) {
        return false;
      }
      if (limit === void 0) {
        return thresholds[threshold2];
      }
      thresholds[threshold2] = limit;
      if (threshold2 === "s") {
        thresholds.ss = limit - 1;
      }
      return true;
    }
    function humanize(argWithSuffix, argThresholds) {
      if (!this.isValid()) {
        return this.localeData().invalidDate();
      }
      var withSuffix = false, th2 = thresholds, locale2, output;
      if (typeof argWithSuffix === "object") {
        argThresholds = argWithSuffix;
        argWithSuffix = false;
      }
      if (typeof argWithSuffix === "boolean") {
        withSuffix = argWithSuffix;
      }
      if (typeof argThresholds === "object") {
        th2 = Object.assign({}, thresholds, argThresholds);
        if (argThresholds.s != null && argThresholds.ss == null) {
          th2.ss = argThresholds.s - 1;
        }
      }
      locale2 = this.localeData();
      output = relativeTime$1(this, !withSuffix, th2, locale2);
      if (withSuffix) {
        output = locale2.pastFuture(+this, output);
      }
      return locale2.postformat(output);
    }
    var abs$1 = Math.abs;
    function sign$1(x2) {
      return (x2 > 0) - (x2 < 0) || +x2;
    }
    function toISOString$1() {
      if (!this.isValid()) {
        return this.localeData().invalidDate();
      }
      var seconds2 = abs$1(this._milliseconds) / 1e3, days2 = abs$1(this._days), months2 = abs$1(this._months), minutes2, hours2, years2, s2, total = this.asSeconds(), totalSign, ymSign, daysSign, hmsSign;
      if (!total) {
        return "P0D";
      }
      minutes2 = absFloor(seconds2 / 60);
      hours2 = absFloor(minutes2 / 60);
      seconds2 %= 60;
      minutes2 %= 60;
      years2 = absFloor(months2 / 12);
      months2 %= 12;
      s2 = seconds2 ? seconds2.toFixed(3).replace(/\.?0+$/, "") : "";
      totalSign = total < 0 ? "-" : "";
      ymSign = sign$1(this._months) !== sign$1(total) ? "-" : "";
      daysSign = sign$1(this._days) !== sign$1(total) ? "-" : "";
      hmsSign = sign$1(this._milliseconds) !== sign$1(total) ? "-" : "";
      return totalSign + "P" + (years2 ? ymSign + years2 + "Y" : "") + (months2 ? ymSign + months2 + "M" : "") + (days2 ? daysSign + days2 + "D" : "") + (hours2 || minutes2 || seconds2 ? "T" : "") + (hours2 ? hmsSign + hours2 + "H" : "") + (minutes2 ? hmsSign + minutes2 + "M" : "") + (seconds2 ? hmsSign + s2 + "S" : "");
    }
    var proto$2 = Duration.prototype;
    proto$2.isValid = isValid$1;
    proto$2.abs = abs;
    proto$2.add = add$1$1;
    proto$2.subtract = subtract$1$1;
    proto$2.as = as;
    proto$2.asMilliseconds = asMilliseconds;
    proto$2.asSeconds = asSeconds;
    proto$2.asMinutes = asMinutes;
    proto$2.asHours = asHours;
    proto$2.asDays = asDays;
    proto$2.asWeeks = asWeeks;
    proto$2.asMonths = asMonths;
    proto$2.asQuarters = asQuarters;
    proto$2.asYears = asYears;
    proto$2.valueOf = valueOf$1;
    proto$2._bubble = bubble;
    proto$2.clone = clone$1$1;
    proto$2.get = get$2$1;
    proto$2.milliseconds = milliseconds;
    proto$2.seconds = seconds;
    proto$2.minutes = minutes;
    proto$2.hours = hours;
    proto$2.days = days;
    proto$2.weeks = weeks;
    proto$2.months = months;
    proto$2.years = years;
    proto$2.humanize = humanize;
    proto$2.toISOString = toISOString$1;
    proto$2.toString = toISOString$1;
    proto$2.toJSON = toISOString$1;
    proto$2.locale = locale$2;
    proto$2.localeData = localeData;
    proto$2.toIsoString = deprecate(
      "toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",
      toISOString$1
    );
    proto$2.lang = lang;
    addFormatToken("X", 0, 0, "unix");
    addFormatToken("x", 0, 0, "valueOf");
    addRegexToken("x", matchSigned);
    addRegexToken("X", matchTimestamp);
    addParseToken("X", function(input, array2, config2) {
      config2._d = new Date(parseFloat(input) * 1e3);
    });
    addParseToken("x", function(input, array2, config2) {
      config2._d = new Date(toInt(input));
    });
    //! moment.js
    hooks.version = "2.30.1";
    setHookCallback(createLocal);
    hooks.fn = proto;
    hooks.min = min$3;
    hooks.max = max$3;
    hooks.now = now$2;
    hooks.utc = createUTC;
    hooks.unix = createUnix;
    hooks.months = listMonths;
    hooks.isDate = isDate$1;
    hooks.locale = getSetGlobalLocale;
    hooks.invalid = createInvalid;
    hooks.duration = createDuration;
    hooks.isMoment = isMoment;
    hooks.weekdays = listWeekdays;
    hooks.parseZone = createInZone;
    hooks.localeData = getLocale;
    hooks.isDuration = isDuration;
    hooks.monthsShort = listMonthsShort;
    hooks.weekdaysMin = listWeekdaysMin;
    hooks.defineLocale = defineLocale;
    hooks.updateLocale = updateLocale;
    hooks.locales = listLocales;
    hooks.weekdaysShort = listWeekdaysShort;
    hooks.normalizeUnits = normalizeUnits;
    hooks.relativeTimeRounding = getSetRelativeTimeRounding;
    hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
    hooks.calendarFormat = getCalendarFormat;
    hooks.prototype = proto;
    hooks.HTML5_FMT = {
      DATETIME_LOCAL: "YYYY-MM-DDTHH:mm",
      // <input type="datetime-local" />
      DATETIME_LOCAL_SECONDS: "YYYY-MM-DDTHH:mm:ss",
      // <input type="datetime-local" step="1" />
      DATETIME_LOCAL_MS: "YYYY-MM-DDTHH:mm:ss.SSS",
      // <input type="datetime-local" step="0.001" />
      DATE: "YYYY-MM-DD",
      // <input type="date" />
      TIME: "HH:mm",
      // <input type="time" />
      TIME_SECONDS: "HH:mm:ss",
      // <input type="time" step="1" />
      TIME_MS: "HH:mm:ss.SSS",
      // <input type="time" step="0.001" />
      WEEK: "GGGG-[W]WW",
      // <input type="week" />
      MONTH: "YYYY-MM"
      // <input type="month" />
    };
    function BiSolidMessageRounded(props) {
      return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24" }, "child": [{ "tag": "path", "attr": { "d": "M12 2C6.486 2 2 5.589 2 10c0 2.908 1.898 5.515 5 6.934V22l5.34-4.005C17.697 17.852 22 14.32 22 10c0-4.411-4.486-8-10-8z" }, "child": [] }] })(props);
    }
    function HiBellAlert(props) {
      return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24", "fill": "currentColor", "aria-hidden": "true" }, "child": [{ "tag": "path", "attr": { "d": "M5.85 3.5a.75.75 0 00-1.117-1 9.719 9.719 0 00-2.348 4.876.75.75 0 001.479.248A8.219 8.219 0 015.85 3.5zM19.267 2.5a.75.75 0 10-1.118 1 8.22 8.22 0 011.987 4.124.75.75 0 001.48-.248A9.72 9.72 0 0019.266 2.5z" }, "child": [] }, { "tag": "path", "attr": { "fillRule": "evenodd", "d": "M12 2.25A6.75 6.75 0 005.25 9v.75a8.217 8.217 0 01-2.119 5.52.75.75 0 00.298 1.206c1.544.57 3.16.99 4.831 1.243a3.75 3.75 0 107.48 0 24.583 24.583 0 004.83-1.244.75.75 0 00.298-1.205 8.217 8.217 0 01-2.118-5.52V9A6.75 6.75 0 0012 2.25zM9.75 18c0-.034 0-.067.002-.1a25.05 25.05 0 004.496 0l.002.1a2.25 2.25 0 11-4.5 0z", "clipRule": "evenodd" }, "child": [] }] })(props);
    }
    function IoIosNotificationsOutline(props) {
      return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 512 512" }, "child": [{ "tag": "path", "attr": { "d": "M289.7 403c-6.1 0-11.4 4.2-12.7 10.2-1 4.5-2.7 8.2-5 10.9-1.3 1.5-5.1 5.9-16.1 5.9-11 0-14.8-4.5-16.1-5.9-2.3-2.7-4-6.4-5-10.9-1.3-6-6.6-10.2-12.7-10.2-8.4 0-14.5 7.8-12.7 15.9 5 22.3 21 37.1 46.5 37.1s41.5-14.7 46.5-37.1c1.8-8.1-4.4-15.9-12.7-15.9zM412 352.2c-15.4-20.3-45.7-32.2-45.7-123.1 0-93.3-41.2-130.8-79.6-139.8-3.6-.9-6.2-2.1-6.2-5.9v-2.9c0-13.3-10.8-24.6-24-24.6h-.6c-13.2 0-24 11.3-24 24.6v2.9c0 3.7-2.6 5-6.2 5.9-38.5 9.1-79.6 46.5-79.6 139.8 0 90.9-30.3 102.7-45.7 123.1-9.9 13.1-.5 31.8 15.9 31.8h280.1c16.1 0 25.4-18.8 15.6-31.8zm-39 5.8H139.8c-3.8 0-5.8-4.4-3.3-7.3 7-8 14.7-18.5 21-33.4 9.6-22.6 14.3-51.5 14.3-88.2 0-37.3 7-66.5 20.9-86.8 12.4-18.2 27.9-25.1 38.7-27.6 8.4-2 14.4-5.8 18.6-10.5 3.2-3.6 8.7-3.8 11.9-.2 5.1 5.7 12 9.1 18.8 10.7 10.8 2.5 26.3 9.4 38.7 27.6 13.9 20.3 20.9 49.5 20.9 86.8 0 36.7 4.7 65.6 14.3 88.2 6.5 15.2 14.4 25.9 21.5 33.9 2.2 2.7.4 6.8-3.1 6.8z" }, "child": [] }] })(props);
    }
    function IoMdAdd(props) {
      return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 512 512" }, "child": [{ "tag": "path", "attr": { "d": "M416 277.333H277.333V416h-42.666V277.333H96v-42.666h138.667V96h42.666v138.667H416v42.666z" }, "child": [] }] })(props);
    }
    const PACKET_TYPES = /* @__PURE__ */ Object.create(null);
    PACKET_TYPES["open"] = "0";
    PACKET_TYPES["close"] = "1";
    PACKET_TYPES["ping"] = "2";
    PACKET_TYPES["pong"] = "3";
    PACKET_TYPES["message"] = "4";
    PACKET_TYPES["upgrade"] = "5";
    PACKET_TYPES["noop"] = "6";
    const PACKET_TYPES_REVERSE = /* @__PURE__ */ Object.create(null);
    Object.keys(PACKET_TYPES).forEach((key) => {
      PACKET_TYPES_REVERSE[PACKET_TYPES[key]] = key;
    });
    const ERROR_PACKET = { type: "error", data: "parser error" };
    const withNativeBlob$1 = typeof Blob === "function" || typeof Blob !== "undefined" && Object.prototype.toString.call(Blob) === "[object BlobConstructor]";
    const withNativeArrayBuffer$2 = typeof ArrayBuffer === "function";
    const isView$1 = (obj) => {
      return typeof ArrayBuffer.isView === "function" ? ArrayBuffer.isView(obj) : obj && obj.buffer instanceof ArrayBuffer;
    };
    const encodePacket = ({ type, data }, supportsBinary, callback) => {
      if (withNativeBlob$1 && data instanceof Blob) {
        if (supportsBinary) {
          return callback(data);
        } else {
          return encodeBlobAsBase64(data, callback);
        }
      } else if (withNativeArrayBuffer$2 && (data instanceof ArrayBuffer || isView$1(data))) {
        if (supportsBinary) {
          return callback(data);
        } else {
          return encodeBlobAsBase64(new Blob([data]), callback);
        }
      }
      return callback(PACKET_TYPES[type] + (data || ""));
    };
    const encodeBlobAsBase64 = (data, callback) => {
      const fileReader = new FileReader();
      fileReader.onload = function() {
        const content = fileReader.result.split(",")[1];
        callback("b" + (content || ""));
      };
      return fileReader.readAsDataURL(data);
    };
    function toArray$2(data) {
      if (data instanceof Uint8Array) {
        return data;
      } else if (data instanceof ArrayBuffer) {
        return new Uint8Array(data);
      } else {
        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength);
      }
    }
    let TEXT_ENCODER;
    function encodePacketToBinary(packet, callback) {
      if (withNativeBlob$1 && packet.data instanceof Blob) {
        return packet.data.arrayBuffer().then(toArray$2).then(callback);
      } else if (withNativeArrayBuffer$2 && (packet.data instanceof ArrayBuffer || isView$1(packet.data))) {
        return callback(toArray$2(packet.data));
      }
      encodePacket(packet, false, (encoded) => {
        if (!TEXT_ENCODER) {
          TEXT_ENCODER = new TextEncoder();
        }
        callback(TEXT_ENCODER.encode(encoded));
      });
    }
    const chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    const lookup$1 = typeof Uint8Array === "undefined" ? [] : new Uint8Array(256);
    for (let i2 = 0; i2 < chars.length; i2++) {
      lookup$1[chars.charCodeAt(i2)] = i2;
    }
    const decode$1 = (base64) => {
      let bufferLength = base64.length * 0.75, len = base64.length, i2, p2 = 0, encoded1, encoded2, encoded3, encoded4;
      if (base64[base64.length - 1] === "=") {
        bufferLength--;
        if (base64[base64.length - 2] === "=") {
          bufferLength--;
        }
      }
      const arraybuffer = new ArrayBuffer(bufferLength), bytes = new Uint8Array(arraybuffer);
      for (i2 = 0; i2 < len; i2 += 4) {
        encoded1 = lookup$1[base64.charCodeAt(i2)];
        encoded2 = lookup$1[base64.charCodeAt(i2 + 1)];
        encoded3 = lookup$1[base64.charCodeAt(i2 + 2)];
        encoded4 = lookup$1[base64.charCodeAt(i2 + 3)];
        bytes[p2++] = encoded1 << 2 | encoded2 >> 4;
        bytes[p2++] = (encoded2 & 15) << 4 | encoded3 >> 2;
        bytes[p2++] = (encoded3 & 3) << 6 | encoded4 & 63;
      }
      return arraybuffer;
    };
    const withNativeArrayBuffer$1 = typeof ArrayBuffer === "function";
    const decodePacket = (encodedPacket, binaryType) => {
      if (typeof encodedPacket !== "string") {
        return {
          type: "message",
          data: mapBinary(encodedPacket, binaryType)
        };
      }
      const type = encodedPacket.charAt(0);
      if (type === "b") {
        return {
          type: "message",
          data: decodeBase64Packet(encodedPacket.substring(1), binaryType)
        };
      }
      const packetType = PACKET_TYPES_REVERSE[type];
      if (!packetType) {
        return ERROR_PACKET;
      }
      return encodedPacket.length > 1 ? {
        type: PACKET_TYPES_REVERSE[type],
        data: encodedPacket.substring(1)
      } : {
        type: PACKET_TYPES_REVERSE[type]
      };
    };
    const decodeBase64Packet = (data, binaryType) => {
      if (withNativeArrayBuffer$1) {
        const decoded = decode$1(data);
        return mapBinary(decoded, binaryType);
      } else {
        return { base64: true, data };
      }
    };
    const mapBinary = (data, binaryType) => {
      switch (binaryType) {
        case "blob":
          if (data instanceof Blob) {
            return data;
          } else {
            return new Blob([data]);
          }
        case "arraybuffer":
        default:
          if (data instanceof ArrayBuffer) {
            return data;
          } else {
            return data.buffer;
          }
      }
    };
    const SEPARATOR = String.fromCharCode(30);
    const encodePayload = (packets, callback) => {
      const length = packets.length;
      const encodedPackets = new Array(length);
      let count = 0;
      packets.forEach((packet, i2) => {
        encodePacket(packet, false, (encodedPacket) => {
          encodedPackets[i2] = encodedPacket;
          if (++count === length) {
            callback(encodedPackets.join(SEPARATOR));
          }
        });
      });
    };
    const decodePayload = (encodedPayload, binaryType) => {
      const encodedPackets = encodedPayload.split(SEPARATOR);
      const packets = [];
      for (let i2 = 0; i2 < encodedPackets.length; i2++) {
        const decodedPacket = decodePacket(encodedPackets[i2], binaryType);
        packets.push(decodedPacket);
        if (decodedPacket.type === "error") {
          break;
        }
      }
      return packets;
    };
    function createPacketEncoderStream() {
      return new TransformStream({
        transform(packet, controller) {
          encodePacketToBinary(packet, (encodedPacket) => {
            const payloadLength = encodedPacket.length;
            let header;
            if (payloadLength < 126) {
              header = new Uint8Array(1);
              new DataView(header.buffer).setUint8(0, payloadLength);
            } else if (payloadLength < 65536) {
              header = new Uint8Array(3);
              const view = new DataView(header.buffer);
              view.setUint8(0, 126);
              view.setUint16(1, payloadLength);
            } else {
              header = new Uint8Array(9);
              const view = new DataView(header.buffer);
              view.setUint8(0, 127);
              view.setBigUint64(1, BigInt(payloadLength));
            }
            if (packet.data && typeof packet.data !== "string") {
              header[0] |= 128;
            }
            controller.enqueue(header);
            controller.enqueue(encodedPacket);
          });
        }
      });
    }
    let TEXT_DECODER;
    function totalLength(chunks) {
      return chunks.reduce((acc, chunk) => acc + chunk.length, 0);
    }
    function concatChunks(chunks, size) {
      if (chunks[0].length === size) {
        return chunks.shift();
      }
      const buffer = new Uint8Array(size);
      let j2 = 0;
      for (let i2 = 0; i2 < size; i2++) {
        buffer[i2] = chunks[0][j2++];
        if (j2 === chunks[0].length) {
          chunks.shift();
          j2 = 0;
        }
      }
      if (chunks.length && j2 < chunks[0].length) {
        chunks[0] = chunks[0].slice(j2);
      }
      return buffer;
    }
    function createPacketDecoderStream(maxPayload, binaryType) {
      if (!TEXT_DECODER) {
        TEXT_DECODER = new TextDecoder();
      }
      const chunks = [];
      let state = 0;
      let expectedLength = -1;
      let isBinary2 = false;
      return new TransformStream({
        transform(chunk, controller) {
          chunks.push(chunk);
          while (true) {
            if (state === 0) {
              if (totalLength(chunks) < 1) {
                break;
              }
              const header = concatChunks(chunks, 1);
              isBinary2 = (header[0] & 128) === 128;
              expectedLength = header[0] & 127;
              if (expectedLength < 126) {
                state = 3;
              } else if (expectedLength === 126) {
                state = 1;
              } else {
                state = 2;
              }
            } else if (state === 1) {
              if (totalLength(chunks) < 2) {
                break;
              }
              const headerArray = concatChunks(chunks, 2);
              expectedLength = new DataView(headerArray.buffer, headerArray.byteOffset, headerArray.length).getUint16(0);
              state = 3;
            } else if (state === 2) {
              if (totalLength(chunks) < 8) {
                break;
              }
              const headerArray = concatChunks(chunks, 8);
              const view = new DataView(headerArray.buffer, headerArray.byteOffset, headerArray.length);
              const n2 = view.getUint32(0);
              if (n2 > Math.pow(2, 53 - 32) - 1) {
                controller.enqueue(ERROR_PACKET);
                break;
              }
              expectedLength = n2 * Math.pow(2, 32) + view.getUint32(4);
              state = 3;
            } else {
              if (totalLength(chunks) < expectedLength) {
                break;
              }
              const data = concatChunks(chunks, expectedLength);
              controller.enqueue(decodePacket(isBinary2 ? data : TEXT_DECODER.decode(data), binaryType));
              state = 0;
            }
            if (expectedLength === 0 || expectedLength > maxPayload) {
              controller.enqueue(ERROR_PACKET);
              break;
            }
          }
        }
      });
    }
    const protocol$1 = 4;
    function Emitter(obj) {
      if (obj)
        return mixin(obj);
    }
    function mixin(obj) {
      for (var key in Emitter.prototype) {
        obj[key] = Emitter.prototype[key];
      }
      return obj;
    }
    Emitter.prototype.on = Emitter.prototype.addEventListener = function(event, fn) {
      this._callbacks = this._callbacks || {};
      (this._callbacks["$" + event] = this._callbacks["$" + event] || []).push(fn);
      return this;
    };
    Emitter.prototype.once = function(event, fn) {
      function on2() {
        this.off(event, on2);
        fn.apply(this, arguments);
      }
      on2.fn = fn;
      this.on(event, on2);
      return this;
    };
    Emitter.prototype.off = Emitter.prototype.removeListener = Emitter.prototype.removeAllListeners = Emitter.prototype.removeEventListener = function(event, fn) {
      this._callbacks = this._callbacks || {};
      if (0 == arguments.length) {
        this._callbacks = {};
        return this;
      }
      var callbacks = this._callbacks["$" + event];
      if (!callbacks)
        return this;
      if (1 == arguments.length) {
        delete this._callbacks["$" + event];
        return this;
      }
      var cb2;
      for (var i2 = 0; i2 < callbacks.length; i2++) {
        cb2 = callbacks[i2];
        if (cb2 === fn || cb2.fn === fn) {
          callbacks.splice(i2, 1);
          break;
        }
      }
      if (callbacks.length === 0) {
        delete this._callbacks["$" + event];
      }
      return this;
    };
    Emitter.prototype.emit = function(event) {
      this._callbacks = this._callbacks || {};
      var args = new Array(arguments.length - 1), callbacks = this._callbacks["$" + event];
      for (var i2 = 1; i2 < arguments.length; i2++) {
        args[i2 - 1] = arguments[i2];
      }
      if (callbacks) {
        callbacks = callbacks.slice(0);
        for (var i2 = 0, len = callbacks.length; i2 < len; ++i2) {
          callbacks[i2].apply(this, args);
        }
      }
      return this;
    };
    Emitter.prototype.emitReserved = Emitter.prototype.emit;
    Emitter.prototype.listeners = function(event) {
      this._callbacks = this._callbacks || {};
      return this._callbacks["$" + event] || [];
    };
    Emitter.prototype.hasListeners = function(event) {
      return !!this.listeners(event).length;
    };
    const nextTick = (() => {
      const isPromiseAvailable = typeof Promise === "function" && typeof Promise.resolve === "function";
      if (isPromiseAvailable) {
        return (cb2) => Promise.resolve().then(cb2);
      } else {
        return (cb2, setTimeoutFn) => setTimeoutFn(cb2, 0);
      }
    })();
    const globalThisShim = (() => {
      if (typeof self !== "undefined") {
        return self;
      } else if (typeof window !== "undefined") {
        return window;
      } else {
        return Function("return this")();
      }
    })();
    const defaultBinaryType = "arraybuffer";
    function createCookieJar() {
    }
    function pick(obj, ...attr) {
      return attr.reduce((acc, k2) => {
        if (obj.hasOwnProperty(k2)) {
          acc[k2] = obj[k2];
        }
        return acc;
      }, {});
    }
    const NATIVE_SET_TIMEOUT = globalThisShim.setTimeout;
    const NATIVE_CLEAR_TIMEOUT = globalThisShim.clearTimeout;
    function installTimerFunctions(obj, opts) {
      if (opts.useNativeTimers) {
        obj.setTimeoutFn = NATIVE_SET_TIMEOUT.bind(globalThisShim);
        obj.clearTimeoutFn = NATIVE_CLEAR_TIMEOUT.bind(globalThisShim);
      } else {
        obj.setTimeoutFn = globalThisShim.setTimeout.bind(globalThisShim);
        obj.clearTimeoutFn = globalThisShim.clearTimeout.bind(globalThisShim);
      }
    }
    const BASE64_OVERHEAD = 1.33;
    function byteLength(obj) {
      if (typeof obj === "string") {
        return utf8Length(obj);
      }
      return Math.ceil((obj.byteLength || obj.size) * BASE64_OVERHEAD);
    }
    function utf8Length(str) {
      let c2 = 0, length = 0;
      for (let i2 = 0, l2 = str.length; i2 < l2; i2++) {
        c2 = str.charCodeAt(i2);
        if (c2 < 128) {
          length += 1;
        } else if (c2 < 2048) {
          length += 2;
        } else if (c2 < 55296 || c2 >= 57344) {
          length += 3;
        } else {
          i2++;
          length += 4;
        }
      }
      return length;
    }
    function randomString() {
      return Date.now().toString(36).substring(3) + Math.random().toString(36).substring(2, 5);
    }
    function encode$2(obj) {
      let str = "";
      for (let i2 in obj) {
        if (obj.hasOwnProperty(i2)) {
          if (str.length)
            str += "&";
          str += encodeURIComponent(i2) + "=" + encodeURIComponent(obj[i2]);
        }
      }
      return str;
    }
    function decode(qs) {
      let qry = {};
      let pairs = qs.split("&");
      for (let i2 = 0, l2 = pairs.length; i2 < l2; i2++) {
        let pair = pairs[i2].split("=");
        qry[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);
      }
      return qry;
    }
    class TransportError extends Error {
      constructor(reason, description, context) {
        super(reason);
        this.description = description;
        this.context = context;
        this.type = "TransportError";
      }
    }
    class Transport extends Emitter {
      /**
       * Transport abstract constructor.
       *
       * @param {Object} opts - options
       * @protected
       */
      constructor(opts) {
        super();
        this.writable = false;
        installTimerFunctions(this, opts);
        this.opts = opts;
        this.query = opts.query;
        this.socket = opts.socket;
        this.supportsBinary = !opts.forceBase64;
      }
      /**
       * Emits an error.
       *
       * @param {String} reason
       * @param description
       * @param context - the error context
       * @return {Transport} for chaining
       * @protected
       */
      onError(reason, description, context) {
        super.emitReserved("error", new TransportError(reason, description, context));
        return this;
      }
      /**
       * Opens the transport.
       */
      open() {
        this.readyState = "opening";
        this.doOpen();
        return this;
      }
      /**
       * Closes the transport.
       */
      close() {
        if (this.readyState === "opening" || this.readyState === "open") {
          this.doClose();
          this.onClose();
        }
        return this;
      }
      /**
       * Sends multiple packets.
       *
       * @param {Array} packets
       */
      send(packets) {
        if (this.readyState === "open") {
          this.write(packets);
        }
      }
      /**
       * Called upon open
       *
       * @protected
       */
      onOpen() {
        this.readyState = "open";
        this.writable = true;
        super.emitReserved("open");
      }
      /**
       * Called with data.
       *
       * @param {String} data
       * @protected
       */
      onData(data) {
        const packet = decodePacket(data, this.socket.binaryType);
        this.onPacket(packet);
      }
      /**
       * Called with a decoded packet.
       *
       * @protected
       */
      onPacket(packet) {
        super.emitReserved("packet", packet);
      }
      /**
       * Called upon close.
       *
       * @protected
       */
      onClose(details) {
        this.readyState = "closed";
        super.emitReserved("close", details);
      }
      /**
       * Pauses the transport, in order not to lose packets during an upgrade.
       *
       * @param onPause
       */
      pause(onPause) {
      }
      createUri(schema, query = {}) {
        return schema + "://" + this._hostname() + this._port() + this.opts.path + this._query(query);
      }
      _hostname() {
        const hostname = this.opts.hostname;
        return hostname.indexOf(":") === -1 ? hostname : "[" + hostname + "]";
      }
      _port() {
        if (this.opts.port && (this.opts.secure && Number(this.opts.port !== 443) || !this.opts.secure && Number(this.opts.port) !== 80)) {
          return ":" + this.opts.port;
        } else {
          return "";
        }
      }
      _query(query) {
        const encodedQuery = encode$2(query);
        return encodedQuery.length ? "?" + encodedQuery : "";
      }
    }
    class Polling extends Transport {
      constructor() {
        super(...arguments);
        this._polling = false;
      }
      get name() {
        return "polling";
      }
      /**
       * Opens the socket (triggers polling). We write a PING message to determine
       * when the transport is open.
       *
       * @protected
       */
      doOpen() {
        this._poll();
      }
      /**
       * Pauses polling.
       *
       * @param {Function} onPause - callback upon buffers are flushed and transport is paused
       * @package
       */
      pause(onPause) {
        this.readyState = "pausing";
        const pause = () => {
          this.readyState = "paused";
          onPause();
        };
        if (this._polling || !this.writable) {
          let total = 0;
          if (this._polling) {
            total++;
            this.once("pollComplete", function() {
              --total || pause();
            });
          }
          if (!this.writable) {
            total++;
            this.once("drain", function() {
              --total || pause();
            });
          }
        } else {
          pause();
        }
      }
      /**
       * Starts polling cycle.
       *
       * @private
       */
      _poll() {
        this._polling = true;
        this.doPoll();
        this.emitReserved("poll");
      }
      /**
       * Overloads onData to detect payloads.
       *
       * @protected
       */
      onData(data) {
        const callback = (packet) => {
          if ("opening" === this.readyState && packet.type === "open") {
            this.onOpen();
          }
          if ("close" === packet.type) {
            this.onClose({ description: "transport closed by the server" });
            return false;
          }
          this.onPacket(packet);
        };
        decodePayload(data, this.socket.binaryType).forEach(callback);
        if ("closed" !== this.readyState) {
          this._polling = false;
          this.emitReserved("pollComplete");
          if ("open" === this.readyState) {
            this._poll();
          }
        }
      }
      /**
       * For polling, send a close packet.
       *
       * @protected
       */
      doClose() {
        const close = () => {
          this.write([{ type: "close" }]);
        };
        if ("open" === this.readyState) {
          close();
        } else {
          this.once("open", close);
        }
      }
      /**
       * Writes a packets payload.
       *
       * @param {Array} packets - data packets
       * @protected
       */
      write(packets) {
        this.writable = false;
        encodePayload(packets, (data) => {
          this.doWrite(data, () => {
            this.writable = true;
            this.emitReserved("drain");
          });
        });
      }
      /**
       * Generates uri for connection.
       *
       * @private
       */
      uri() {
        const schema = this.opts.secure ? "https" : "http";
        const query = this.query || {};
        if (false !== this.opts.timestampRequests) {
          query[this.opts.timestampParam] = randomString();
        }
        if (!this.supportsBinary && !query.sid) {
          query.b64 = 1;
        }
        return this.createUri(schema, query);
      }
    }
    let value = false;
    try {
      value = typeof XMLHttpRequest !== "undefined" && "withCredentials" in new XMLHttpRequest();
    } catch (err) {
    }
    const hasCORS = value;
    function empty() {
    }
    class BaseXHR extends Polling {
      /**
       * XHR Polling constructor.
       *
       * @param {Object} opts
       * @package
       */
      constructor(opts) {
        super(opts);
        if (typeof location !== "undefined") {
          const isSSL = "https:" === location.protocol;
          let port = location.port;
          if (!port) {
            port = isSSL ? "443" : "80";
          }
          this.xd = typeof location !== "undefined" && opts.hostname !== location.hostname || port !== opts.port;
        }
      }
      /**
       * Sends data.
       *
       * @param {String} data to send.
       * @param {Function} called upon flush.
       * @private
       */
      doWrite(data, fn) {
        const req = this.request({
          method: "POST",
          data
        });
        req.on("success", fn);
        req.on("error", (xhrStatus, context) => {
          this.onError("xhr post error", xhrStatus, context);
        });
      }
      /**
       * Starts a poll cycle.
       *
       * @private
       */
      doPoll() {
        const req = this.request();
        req.on("data", this.onData.bind(this));
        req.on("error", (xhrStatus, context) => {
          this.onError("xhr poll error", xhrStatus, context);
        });
        this.pollXhr = req;
      }
    }
    let Request$1 = class Request2 extends Emitter {
      /**
       * Request constructor
       *
       * @param {Object} options
       * @package
       */
      constructor(createRequest, uri, opts) {
        super();
        this.createRequest = createRequest;
        installTimerFunctions(this, opts);
        this._opts = opts;
        this._method = opts.method || "GET";
        this._uri = uri;
        this._data = void 0 !== opts.data ? opts.data : null;
        this._create();
      }
      /**
       * Creates the XHR object and sends the request.
       *
       * @private
       */
      _create() {
        var _a2;
        const opts = pick(this._opts, "agent", "pfx", "key", "passphrase", "cert", "ca", "ciphers", "rejectUnauthorized", "autoUnref");
        opts.xdomain = !!this._opts.xd;
        const xhr = this._xhr = this.createRequest(opts);
        try {
          xhr.open(this._method, this._uri, true);
          try {
            if (this._opts.extraHeaders) {
              xhr.setDisableHeaderCheck && xhr.setDisableHeaderCheck(true);
              for (let i2 in this._opts.extraHeaders) {
                if (this._opts.extraHeaders.hasOwnProperty(i2)) {
                  xhr.setRequestHeader(i2, this._opts.extraHeaders[i2]);
                }
              }
            }
          } catch (e3) {
          }
          if ("POST" === this._method) {
            try {
              xhr.setRequestHeader("Content-type", "text/plain;charset=UTF-8");
            } catch (e3) {
            }
          }
          try {
            xhr.setRequestHeader("Accept", "*/*");
          } catch (e3) {
          }
          (_a2 = this._opts.cookieJar) === null || _a2 === void 0 ? void 0 : _a2.addCookies(xhr);
          if ("withCredentials" in xhr) {
            xhr.withCredentials = this._opts.withCredentials;
          }
          if (this._opts.requestTimeout) {
            xhr.timeout = this._opts.requestTimeout;
          }
          xhr.onreadystatechange = () => {
            var _a3;
            if (xhr.readyState === 3) {
              (_a3 = this._opts.cookieJar) === null || _a3 === void 0 ? void 0 : _a3.parseCookies(
                // @ts-ignore
                xhr.getResponseHeader("set-cookie")
              );
            }
            if (4 !== xhr.readyState)
              return;
            if (200 === xhr.status || 1223 === xhr.status) {
              this._onLoad();
            } else {
              this.setTimeoutFn(() => {
                this._onError(typeof xhr.status === "number" ? xhr.status : 0);
              }, 0);
            }
          };
          xhr.send(this._data);
        } catch (e3) {
          this.setTimeoutFn(() => {
            this._onError(e3);
          }, 0);
          return;
        }
        if (typeof document !== "undefined") {
          this._index = Request2.requestsCount++;
          Request2.requests[this._index] = this;
        }
      }
      /**
       * Called upon error.
       *
       * @private
       */
      _onError(err) {
        this.emitReserved("error", err, this._xhr);
        this._cleanup(true);
      }
      /**
       * Cleans up house.
       *
       * @private
       */
      _cleanup(fromError) {
        if ("undefined" === typeof this._xhr || null === this._xhr) {
          return;
        }
        this._xhr.onreadystatechange = empty;
        if (fromError) {
          try {
            this._xhr.abort();
          } catch (e3) {
          }
        }
        if (typeof document !== "undefined") {
          delete Request2.requests[this._index];
        }
        this._xhr = null;
      }
      /**
       * Called upon load.
       *
       * @private
       */
      _onLoad() {
        const data = this._xhr.responseText;
        if (data !== null) {
          this.emitReserved("data", data);
          this.emitReserved("success");
          this._cleanup();
        }
      }
      /**
       * Aborts the request.
       *
       * @package
       */
      abort() {
        this._cleanup();
      }
    };
    Request$1.requestsCount = 0;
    Request$1.requests = {};
    if (typeof document !== "undefined") {
      if (typeof attachEvent === "function") {
        attachEvent("onunload", unloadHandler);
      } else if (typeof addEventListener === "function") {
        const terminationEvent = "onpagehide" in globalThisShim ? "pagehide" : "unload";
        addEventListener(terminationEvent, unloadHandler, false);
      }
    }
    function unloadHandler() {
      for (let i2 in Request$1.requests) {
        if (Request$1.requests.hasOwnProperty(i2)) {
          Request$1.requests[i2].abort();
        }
      }
    }
    const hasXHR2 = function() {
      const xhr = newRequest({
        xdomain: false
      });
      return xhr && xhr.responseType !== null;
    }();
    class XHR extends BaseXHR {
      constructor(opts) {
        super(opts);
        const forceBase64 = opts && opts.forceBase64;
        this.supportsBinary = hasXHR2 && !forceBase64;
      }
      request(opts = {}) {
        Object.assign(opts, { xd: this.xd }, this.opts);
        return new Request$1(newRequest, this.uri(), opts);
      }
    }
    function newRequest(opts) {
      const xdomain = opts.xdomain;
      try {
        if ("undefined" !== typeof XMLHttpRequest && (!xdomain || hasCORS)) {
          return new XMLHttpRequest();
        }
      } catch (e3) {
      }
      if (!xdomain) {
        try {
          return new globalThisShim[["Active"].concat("Object").join("X")]("Microsoft.XMLHTTP");
        } catch (e3) {
        }
      }
    }
    const isReactNative$1 = typeof navigator !== "undefined" && typeof navigator.product === "string" && navigator.product.toLowerCase() === "reactnative";
    class BaseWS extends Transport {
      get name() {
        return "websocket";
      }
      doOpen() {
        const uri = this.uri();
        const protocols = this.opts.protocols;
        const opts = isReactNative$1 ? {} : pick(this.opts, "agent", "perMessageDeflate", "pfx", "key", "passphrase", "cert", "ca", "ciphers", "rejectUnauthorized", "localAddress", "protocolVersion", "origin", "maxPayload", "family", "checkServerIdentity");
        if (this.opts.extraHeaders) {
          opts.headers = this.opts.extraHeaders;
        }
        try {
          this.ws = this.createSocket(uri, protocols, opts);
        } catch (err) {
          return this.emitReserved("error", err);
        }
        this.ws.binaryType = this.socket.binaryType;
        this.addEventListeners();
      }
      /**
       * Adds event listeners to the socket
       *
       * @private
       */
      addEventListeners() {
        this.ws.onopen = () => {
          if (this.opts.autoUnref) {
            this.ws._socket.unref();
          }
          this.onOpen();
        };
        this.ws.onclose = (closeEvent) => this.onClose({
          description: "websocket connection closed",
          context: closeEvent
        });
        this.ws.onmessage = (ev) => this.onData(ev.data);
        this.ws.onerror = (e3) => this.onError("websocket error", e3);
      }
      write(packets) {
        this.writable = false;
        for (let i2 = 0; i2 < packets.length; i2++) {
          const packet = packets[i2];
          const lastPacket = i2 === packets.length - 1;
          encodePacket(packet, this.supportsBinary, (data) => {
            try {
              this.doWrite(packet, data);
            } catch (e3) {
            }
            if (lastPacket) {
              nextTick(() => {
                this.writable = true;
                this.emitReserved("drain");
              }, this.setTimeoutFn);
            }
          });
        }
      }
      doClose() {
        if (typeof this.ws !== "undefined") {
          this.ws.onerror = () => {
          };
          this.ws.close();
          this.ws = null;
        }
      }
      /**
       * Generates uri for connection.
       *
       * @private
       */
      uri() {
        const schema = this.opts.secure ? "wss" : "ws";
        const query = this.query || {};
        if (this.opts.timestampRequests) {
          query[this.opts.timestampParam] = randomString();
        }
        if (!this.supportsBinary) {
          query.b64 = 1;
        }
        return this.createUri(schema, query);
      }
    }
    const WebSocketCtor = globalThisShim.WebSocket || globalThisShim.MozWebSocket;
    class WS extends BaseWS {
      createSocket(uri, protocols, opts) {
        return !isReactNative$1 ? protocols ? new WebSocketCtor(uri, protocols) : new WebSocketCtor(uri) : new WebSocketCtor(uri, protocols, opts);
      }
      doWrite(_packet, data) {
        this.ws.send(data);
      }
    }
    class WT extends Transport {
      get name() {
        return "webtransport";
      }
      doOpen() {
        try {
          this._transport = new WebTransport(this.createUri("https"), this.opts.transportOptions[this.name]);
        } catch (err) {
          return this.emitReserved("error", err);
        }
        this._transport.closed.then(() => {
          this.onClose();
        }).catch((err) => {
          this.onError("webtransport error", err);
        });
        this._transport.ready.then(() => {
          this._transport.createBidirectionalStream().then((stream) => {
            const decoderStream = createPacketDecoderStream(Number.MAX_SAFE_INTEGER, this.socket.binaryType);
            const reader = stream.readable.pipeThrough(decoderStream).getReader();
            const encoderStream = createPacketEncoderStream();
            encoderStream.readable.pipeTo(stream.writable);
            this._writer = encoderStream.writable.getWriter();
            const read = () => {
              reader.read().then(({ done, value: value2 }) => {
                if (done) {
                  return;
                }
                this.onPacket(value2);
                read();
              }).catch((err) => {
              });
            };
            read();
            const packet = { type: "open" };
            if (this.query.sid) {
              packet.data = `{"sid":"${this.query.sid}"}`;
            }
            this._writer.write(packet).then(() => this.onOpen());
          });
        });
      }
      write(packets) {
        this.writable = false;
        for (let i2 = 0; i2 < packets.length; i2++) {
          const packet = packets[i2];
          const lastPacket = i2 === packets.length - 1;
          this._writer.write(packet).then(() => {
            if (lastPacket) {
              nextTick(() => {
                this.writable = true;
                this.emitReserved("drain");
              }, this.setTimeoutFn);
            }
          });
        }
      }
      doClose() {
        var _a2;
        (_a2 = this._transport) === null || _a2 === void 0 ? void 0 : _a2.close();
      }
    }
    const transports = {
      websocket: WS,
      webtransport: WT,
      polling: XHR
    };
    const re$1 = /^(?:(?![^:@\/?#]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@\/?#]*)(?::([^:@\/?#]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/;
    const parts = [
      "source",
      "protocol",
      "authority",
      "userInfo",
      "user",
      "password",
      "host",
      "port",
      "relative",
      "path",
      "directory",
      "file",
      "query",
      "anchor"
    ];
    function parse(str) {
      if (str.length > 8e3) {
        throw "URI too long";
      }
      const src = str, b2 = str.indexOf("["), e3 = str.indexOf("]");
      if (b2 != -1 && e3 != -1) {
        str = str.substring(0, b2) + str.substring(b2, e3).replace(/:/g, ";") + str.substring(e3, str.length);
      }
      let m2 = re$1.exec(str || ""), uri = {}, i2 = 14;
      while (i2--) {
        uri[parts[i2]] = m2[i2] || "";
      }
      if (b2 != -1 && e3 != -1) {
        uri.source = src;
        uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, ":");
        uri.authority = uri.authority.replace("[", "").replace("]", "").replace(/;/g, ":");
        uri.ipv6uri = true;
      }
      uri.pathNames = pathNames(uri, uri["path"]);
      uri.queryKey = queryKey(uri, uri["query"]);
      return uri;
    }
    function pathNames(obj, path) {
      const regx = /\/{2,9}/g, names = path.replace(regx, "/").split("/");
      if (path.slice(0, 1) == "/" || path.length === 0) {
        names.splice(0, 1);
      }
      if (path.slice(-1) == "/") {
        names.splice(names.length - 1, 1);
      }
      return names;
    }
    function queryKey(uri, query) {
      const data = {};
      query.replace(/(?:^|&)([^&=]*)=?([^&]*)/g, function($0, $1, $2) {
        if ($1) {
          data[$1] = $2;
        }
      });
      return data;
    }
    const withEventListeners = typeof addEventListener === "function" && typeof removeEventListener === "function";
    const OFFLINE_EVENT_LISTENERS = [];
    if (withEventListeners) {
      addEventListener("offline", () => {
        OFFLINE_EVENT_LISTENERS.forEach((listener) => listener());
      }, false);
    }
    class SocketWithoutUpgrade extends Emitter {
      /**
       * Socket constructor.
       *
       * @param {String|Object} uri - uri or options
       * @param {Object} opts - options
       */
      constructor(uri, opts) {
        super();
        this.binaryType = defaultBinaryType;
        this.writeBuffer = [];
        this._prevBufferLen = 0;
        this._pingInterval = -1;
        this._pingTimeout = -1;
        this._maxPayload = -1;
        this._pingTimeoutTime = Infinity;
        if (uri && "object" === typeof uri) {
          opts = uri;
          uri = null;
        }
        if (uri) {
          const parsedUri = parse(uri);
          opts.hostname = parsedUri.host;
          opts.secure = parsedUri.protocol === "https" || parsedUri.protocol === "wss";
          opts.port = parsedUri.port;
          if (parsedUri.query)
            opts.query = parsedUri.query;
        } else if (opts.host) {
          opts.hostname = parse(opts.host).host;
        }
        installTimerFunctions(this, opts);
        this.secure = null != opts.secure ? opts.secure : typeof location !== "undefined" && "https:" === location.protocol;
        if (opts.hostname && !opts.port) {
          opts.port = this.secure ? "443" : "80";
        }
        this.hostname = opts.hostname || (typeof location !== "undefined" ? location.hostname : "localhost");
        this.port = opts.port || (typeof location !== "undefined" && location.port ? location.port : this.secure ? "443" : "80");
        this.transports = [];
        this._transportsByName = {};
        opts.transports.forEach((t2) => {
          const transportName = t2.prototype.name;
          this.transports.push(transportName);
          this._transportsByName[transportName] = t2;
        });
        this.opts = Object.assign({
          path: "/engine.io",
          agent: false,
          withCredentials: false,
          upgrade: true,
          timestampParam: "t",
          rememberUpgrade: false,
          addTrailingSlash: true,
          rejectUnauthorized: true,
          perMessageDeflate: {
            threshold: 1024
          },
          transportOptions: {},
          closeOnBeforeunload: false
        }, opts);
        this.opts.path = this.opts.path.replace(/\/$/, "") + (this.opts.addTrailingSlash ? "/" : "");
        if (typeof this.opts.query === "string") {
          this.opts.query = decode(this.opts.query);
        }
        if (withEventListeners) {
          if (this.opts.closeOnBeforeunload) {
            this._beforeunloadEventListener = () => {
              if (this.transport) {
                this.transport.removeAllListeners();
                this.transport.close();
              }
            };
            addEventListener("beforeunload", this._beforeunloadEventListener, false);
          }
          if (this.hostname !== "localhost") {
            this._offlineEventListener = () => {
              this._onClose("transport close", {
                description: "network connection lost"
              });
            };
            OFFLINE_EVENT_LISTENERS.push(this._offlineEventListener);
          }
        }
        if (this.opts.withCredentials) {
          this._cookieJar = createCookieJar();
        }
        this._open();
      }
      /**
       * Creates transport of the given type.
       *
       * @param {String} name - transport name
       * @return {Transport}
       * @private
       */
      createTransport(name) {
        const query = Object.assign({}, this.opts.query);
        query.EIO = protocol$1;
        query.transport = name;
        if (this.id)
          query.sid = this.id;
        const opts = Object.assign({}, this.opts, {
          query,
          socket: this,
          hostname: this.hostname,
          secure: this.secure,
          port: this.port
        }, this.opts.transportOptions[name]);
        return new this._transportsByName[name](opts);
      }
      /**
       * Initializes transport to use and starts probe.
       *
       * @private
       */
      _open() {
        if (this.transports.length === 0) {
          this.setTimeoutFn(() => {
            this.emitReserved("error", "No transports available");
          }, 0);
          return;
        }
        const transportName = this.opts.rememberUpgrade && SocketWithoutUpgrade.priorWebsocketSuccess && this.transports.indexOf("websocket") !== -1 ? "websocket" : this.transports[0];
        this.readyState = "opening";
        const transport = this.createTransport(transportName);
        transport.open();
        this.setTransport(transport);
      }
      /**
       * Sets the current transport. Disables the existing one (if any).
       *
       * @private
       */
      setTransport(transport) {
        if (this.transport) {
          this.transport.removeAllListeners();
        }
        this.transport = transport;
        transport.on("drain", this._onDrain.bind(this)).on("packet", this._onPacket.bind(this)).on("error", this._onError.bind(this)).on("close", (reason) => this._onClose("transport close", reason));
      }
      /**
       * Called when connection is deemed open.
       *
       * @private
       */
      onOpen() {
        this.readyState = "open";
        SocketWithoutUpgrade.priorWebsocketSuccess = "websocket" === this.transport.name;
        this.emitReserved("open");
        this.flush();
      }
      /**
       * Handles a packet.
       *
       * @private
       */
      _onPacket(packet) {
        if ("opening" === this.readyState || "open" === this.readyState || "closing" === this.readyState) {
          this.emitReserved("packet", packet);
          this.emitReserved("heartbeat");
          switch (packet.type) {
            case "open":
              this.onHandshake(JSON.parse(packet.data));
              break;
            case "ping":
              this._sendPacket("pong");
              this.emitReserved("ping");
              this.emitReserved("pong");
              this._resetPingTimeout();
              break;
            case "error":
              const err = new Error("server error");
              err.code = packet.data;
              this._onError(err);
              break;
            case "message":
              this.emitReserved("data", packet.data);
              this.emitReserved("message", packet.data);
              break;
          }
        }
      }
      /**
       * Called upon handshake completion.
       *
       * @param {Object} data - handshake obj
       * @private
       */
      onHandshake(data) {
        this.emitReserved("handshake", data);
        this.id = data.sid;
        this.transport.query.sid = data.sid;
        this._pingInterval = data.pingInterval;
        this._pingTimeout = data.pingTimeout;
        this._maxPayload = data.maxPayload;
        this.onOpen();
        if ("closed" === this.readyState)
          return;
        this._resetPingTimeout();
      }
      /**
       * Sets and resets ping timeout timer based on server pings.
       *
       * @private
       */
      _resetPingTimeout() {
        this.clearTimeoutFn(this._pingTimeoutTimer);
        const delay = this._pingInterval + this._pingTimeout;
        this._pingTimeoutTime = Date.now() + delay;
        this._pingTimeoutTimer = this.setTimeoutFn(() => {
          this._onClose("ping timeout");
        }, delay);
        if (this.opts.autoUnref) {
          this._pingTimeoutTimer.unref();
        }
      }
      /**
       * Called on `drain` event
       *
       * @private
       */
      _onDrain() {
        this.writeBuffer.splice(0, this._prevBufferLen);
        this._prevBufferLen = 0;
        if (0 === this.writeBuffer.length) {
          this.emitReserved("drain");
        } else {
          this.flush();
        }
      }
      /**
       * Flush write buffers.
       *
       * @private
       */
      flush() {
        if ("closed" !== this.readyState && this.transport.writable && !this.upgrading && this.writeBuffer.length) {
          const packets = this._getWritablePackets();
          this.transport.send(packets);
          this._prevBufferLen = packets.length;
          this.emitReserved("flush");
        }
      }
      /**
       * Ensure the encoded size of the writeBuffer is below the maxPayload value sent by the server (only for HTTP
       * long-polling)
       *
       * @private
       */
      _getWritablePackets() {
        const shouldCheckPayloadSize = this._maxPayload && this.transport.name === "polling" && this.writeBuffer.length > 1;
        if (!shouldCheckPayloadSize) {
          return this.writeBuffer;
        }
        let payloadSize = 1;
        for (let i2 = 0; i2 < this.writeBuffer.length; i2++) {
          const data = this.writeBuffer[i2].data;
          if (data) {
            payloadSize += byteLength(data);
          }
          if (i2 > 0 && payloadSize > this._maxPayload) {
            return this.writeBuffer.slice(0, i2);
          }
          payloadSize += 2;
        }
        return this.writeBuffer;
      }
      /**
       * Checks whether the heartbeat timer has expired but the socket has not yet been notified.
       *
       * Note: this method is private for now because it does not really fit the WebSocket API, but if we put it in the
       * `write()` method then the message would not be buffered by the Socket.IO client.
       *
       * @return {boolean}
       * @private
       */
      /* private */
      _hasPingExpired() {
        if (!this._pingTimeoutTime)
          return true;
        const hasExpired = Date.now() > this._pingTimeoutTime;
        if (hasExpired) {
          this._pingTimeoutTime = 0;
          nextTick(() => {
            this._onClose("ping timeout");
          }, this.setTimeoutFn);
        }
        return hasExpired;
      }
      /**
       * Sends a message.
       *
       * @param {String} msg - message.
       * @param {Object} options.
       * @param {Function} fn - callback function.
       * @return {Socket} for chaining.
       */
      write(msg, options, fn) {
        this._sendPacket("message", msg, options, fn);
        return this;
      }
      /**
       * Sends a message. Alias of {@link Socket#write}.
       *
       * @param {String} msg - message.
       * @param {Object} options.
       * @param {Function} fn - callback function.
       * @return {Socket} for chaining.
       */
      send(msg, options, fn) {
        this._sendPacket("message", msg, options, fn);
        return this;
      }
      /**
       * Sends a packet.
       *
       * @param {String} type: packet type.
       * @param {String} data.
       * @param {Object} options.
       * @param {Function} fn - callback function.
       * @private
       */
      _sendPacket(type, data, options, fn) {
        if ("function" === typeof data) {
          fn = data;
          data = void 0;
        }
        if ("function" === typeof options) {
          fn = options;
          options = null;
        }
        if ("closing" === this.readyState || "closed" === this.readyState) {
          return;
        }
        options = options || {};
        options.compress = false !== options.compress;
        const packet = {
          type,
          data,
          options
        };
        this.emitReserved("packetCreate", packet);
        this.writeBuffer.push(packet);
        if (fn)
          this.once("flush", fn);
        this.flush();
      }
      /**
       * Closes the connection.
       */
      close() {
        const close = () => {
          this._onClose("forced close");
          this.transport.close();
        };
        const cleanupAndClose = () => {
          this.off("upgrade", cleanupAndClose);
          this.off("upgradeError", cleanupAndClose);
          close();
        };
        const waitForUpgrade = () => {
          this.once("upgrade", cleanupAndClose);
          this.once("upgradeError", cleanupAndClose);
        };
        if ("opening" === this.readyState || "open" === this.readyState) {
          this.readyState = "closing";
          if (this.writeBuffer.length) {
            this.once("drain", () => {
              if (this.upgrading) {
                waitForUpgrade();
              } else {
                close();
              }
            });
          } else if (this.upgrading) {
            waitForUpgrade();
          } else {
            close();
          }
        }
        return this;
      }
      /**
       * Called upon transport error
       *
       * @private
       */
      _onError(err) {
        SocketWithoutUpgrade.priorWebsocketSuccess = false;
        if (this.opts.tryAllTransports && this.transports.length > 1 && this.readyState === "opening") {
          this.transports.shift();
          return this._open();
        }
        this.emitReserved("error", err);
        this._onClose("transport error", err);
      }
      /**
       * Called upon transport close.
       *
       * @private
       */
      _onClose(reason, description) {
        if ("opening" === this.readyState || "open" === this.readyState || "closing" === this.readyState) {
          this.clearTimeoutFn(this._pingTimeoutTimer);
          this.transport.removeAllListeners("close");
          this.transport.close();
          this.transport.removeAllListeners();
          if (withEventListeners) {
            if (this._beforeunloadEventListener) {
              removeEventListener("beforeunload", this._beforeunloadEventListener, false);
            }
            if (this._offlineEventListener) {
              const i2 = OFFLINE_EVENT_LISTENERS.indexOf(this._offlineEventListener);
              if (i2 !== -1) {
                OFFLINE_EVENT_LISTENERS.splice(i2, 1);
              }
            }
          }
          this.readyState = "closed";
          this.id = null;
          this.emitReserved("close", reason, description);
          this.writeBuffer = [];
          this._prevBufferLen = 0;
        }
      }
    }
    SocketWithoutUpgrade.protocol = protocol$1;
    class SocketWithUpgrade extends SocketWithoutUpgrade {
      constructor() {
        super(...arguments);
        this._upgrades = [];
      }
      onOpen() {
        super.onOpen();
        if ("open" === this.readyState && this.opts.upgrade) {
          for (let i2 = 0; i2 < this._upgrades.length; i2++) {
            this._probe(this._upgrades[i2]);
          }
        }
      }
      /**
       * Probes a transport.
       *
       * @param {String} name - transport name
       * @private
       */
      _probe(name) {
        let transport = this.createTransport(name);
        let failed = false;
        SocketWithoutUpgrade.priorWebsocketSuccess = false;
        const onTransportOpen = () => {
          if (failed)
            return;
          transport.send([{ type: "ping", data: "probe" }]);
          transport.once("packet", (msg) => {
            if (failed)
              return;
            if ("pong" === msg.type && "probe" === msg.data) {
              this.upgrading = true;
              this.emitReserved("upgrading", transport);
              if (!transport)
                return;
              SocketWithoutUpgrade.priorWebsocketSuccess = "websocket" === transport.name;
              this.transport.pause(() => {
                if (failed)
                  return;
                if ("closed" === this.readyState)
                  return;
                cleanup();
                this.setTransport(transport);
                transport.send([{ type: "upgrade" }]);
                this.emitReserved("upgrade", transport);
                transport = null;
                this.upgrading = false;
                this.flush();
              });
            } else {
              const err = new Error("probe error");
              err.transport = transport.name;
              this.emitReserved("upgradeError", err);
            }
          });
        };
        function freezeTransport() {
          if (failed)
            return;
          failed = true;
          cleanup();
          transport.close();
          transport = null;
        }
        const onerror = (err) => {
          const error2 = new Error("probe error: " + err);
          error2.transport = transport.name;
          freezeTransport();
          this.emitReserved("upgradeError", error2);
        };
        function onTransportClose() {
          onerror("transport closed");
        }
        function onclose() {
          onerror("socket closed");
        }
        function onupgrade(to2) {
          if (transport && to2.name !== transport.name) {
            freezeTransport();
          }
        }
        const cleanup = () => {
          transport.removeListener("open", onTransportOpen);
          transport.removeListener("error", onerror);
          transport.removeListener("close", onTransportClose);
          this.off("close", onclose);
          this.off("upgrading", onupgrade);
        };
        transport.once("open", onTransportOpen);
        transport.once("error", onerror);
        transport.once("close", onTransportClose);
        this.once("close", onclose);
        this.once("upgrading", onupgrade);
        if (this._upgrades.indexOf("webtransport") !== -1 && name !== "webtransport") {
          this.setTimeoutFn(() => {
            if (!failed) {
              transport.open();
            }
          }, 200);
        } else {
          transport.open();
        }
      }
      onHandshake(data) {
        this._upgrades = this._filterUpgrades(data.upgrades);
        super.onHandshake(data);
      }
      /**
       * Filters upgrades, returning only those matching client transports.
       *
       * @param {Array} upgrades - server upgrades
       * @private
       */
      _filterUpgrades(upgrades) {
        const filteredUpgrades = [];
        for (let i2 = 0; i2 < upgrades.length; i2++) {
          if (~this.transports.indexOf(upgrades[i2]))
            filteredUpgrades.push(upgrades[i2]);
        }
        return filteredUpgrades;
      }
    }
    let Socket$1 = class Socket extends SocketWithUpgrade {
      constructor(uri, opts = {}) {
        const o2 = typeof uri === "object" ? uri : opts;
        if (!o2.transports || o2.transports && typeof o2.transports[0] === "string") {
          o2.transports = (o2.transports || ["polling", "websocket", "webtransport"]).map((transportName) => transports[transportName]).filter((t2) => !!t2);
        }
        super(uri, o2);
      }
    };
    function url(uri, path = "", loc) {
      let obj = uri;
      loc = loc || typeof location !== "undefined" && location;
      if (null == uri)
        uri = loc.protocol + "//" + loc.host;
      if (typeof uri === "string") {
        if ("/" === uri.charAt(0)) {
          if ("/" === uri.charAt(1)) {
            uri = loc.protocol + uri;
          } else {
            uri = loc.host + uri;
          }
        }
        if (!/^(https?|wss?):\/\//.test(uri)) {
          if ("undefined" !== typeof loc) {
            uri = loc.protocol + "//" + uri;
          } else {
            uri = "https://" + uri;
          }
        }
        obj = parse(uri);
      }
      if (!obj.port) {
        if (/^(http|ws)$/.test(obj.protocol)) {
          obj.port = "80";
        } else if (/^(http|ws)s$/.test(obj.protocol)) {
          obj.port = "443";
        }
      }
      obj.path = obj.path || "/";
      const ipv6 = obj.host.indexOf(":") !== -1;
      const host = ipv6 ? "[" + obj.host + "]" : obj.host;
      obj.id = obj.protocol + "://" + host + ":" + obj.port + path;
      obj.href = obj.protocol + "://" + host + (loc && loc.port === obj.port ? "" : ":" + obj.port);
      return obj;
    }
    const withNativeArrayBuffer = typeof ArrayBuffer === "function";
    const isView = (obj) => {
      return typeof ArrayBuffer.isView === "function" ? ArrayBuffer.isView(obj) : obj.buffer instanceof ArrayBuffer;
    };
    const toString$5 = Object.prototype.toString;
    const withNativeBlob = typeof Blob === "function" || typeof Blob !== "undefined" && toString$5.call(Blob) === "[object BlobConstructor]";
    const withNativeFile = typeof File === "function" || typeof File !== "undefined" && toString$5.call(File) === "[object FileConstructor]";
    function isBinary(obj) {
      return withNativeArrayBuffer && (obj instanceof ArrayBuffer || isView(obj)) || withNativeBlob && obj instanceof Blob || withNativeFile && obj instanceof File;
    }
    function hasBinary(obj, toJSON2) {
      if (!obj || typeof obj !== "object") {
        return false;
      }
      if (Array.isArray(obj)) {
        for (let i2 = 0, l2 = obj.length; i2 < l2; i2++) {
          if (hasBinary(obj[i2])) {
            return true;
          }
        }
        return false;
      }
      if (isBinary(obj)) {
        return true;
      }
      if (obj.toJSON && typeof obj.toJSON === "function" && arguments.length === 1) {
        return hasBinary(obj.toJSON(), true);
      }
      for (const key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key) && hasBinary(obj[key])) {
          return true;
        }
      }
      return false;
    }
    function deconstructPacket(packet) {
      const buffers = [];
      const packetData = packet.data;
      const pack = packet;
      pack.data = _deconstructPacket(packetData, buffers);
      pack.attachments = buffers.length;
      return { packet: pack, buffers };
    }
    function _deconstructPacket(data, buffers) {
      if (!data)
        return data;
      if (isBinary(data)) {
        const placeholder = { _placeholder: true, num: buffers.length };
        buffers.push(data);
        return placeholder;
      } else if (Array.isArray(data)) {
        const newData = new Array(data.length);
        for (let i2 = 0; i2 < data.length; i2++) {
          newData[i2] = _deconstructPacket(data[i2], buffers);
        }
        return newData;
      } else if (typeof data === "object" && !(data instanceof Date)) {
        const newData = {};
        for (const key in data) {
          if (Object.prototype.hasOwnProperty.call(data, key)) {
            newData[key] = _deconstructPacket(data[key], buffers);
          }
        }
        return newData;
      }
      return data;
    }
    function reconstructPacket(packet, buffers) {
      packet.data = _reconstructPacket(packet.data, buffers);
      delete packet.attachments;
      return packet;
    }
    function _reconstructPacket(data, buffers) {
      if (!data)
        return data;
      if (data && data._placeholder === true) {
        const isIndexValid = typeof data.num === "number" && data.num >= 0 && data.num < buffers.length;
        if (isIndexValid) {
          return buffers[data.num];
        } else {
          throw new Error("illegal attachments");
        }
      } else if (Array.isArray(data)) {
        for (let i2 = 0; i2 < data.length; i2++) {
          data[i2] = _reconstructPacket(data[i2], buffers);
        }
      } else if (typeof data === "object") {
        for (const key in data) {
          if (Object.prototype.hasOwnProperty.call(data, key)) {
            data[key] = _reconstructPacket(data[key], buffers);
          }
        }
      }
      return data;
    }
    const RESERVED_EVENTS$1 = [
      "connect",
      "connect_error",
      "disconnect",
      "disconnecting",
      "newListener",
      "removeListener"
      // used by the Node.js EventEmitter
    ];
    const protocol = 5;
    var PacketType;
    (function(PacketType2) {
      PacketType2[PacketType2["CONNECT"] = 0] = "CONNECT";
      PacketType2[PacketType2["DISCONNECT"] = 1] = "DISCONNECT";
      PacketType2[PacketType2["EVENT"] = 2] = "EVENT";
      PacketType2[PacketType2["ACK"] = 3] = "ACK";
      PacketType2[PacketType2["CONNECT_ERROR"] = 4] = "CONNECT_ERROR";
      PacketType2[PacketType2["BINARY_EVENT"] = 5] = "BINARY_EVENT";
      PacketType2[PacketType2["BINARY_ACK"] = 6] = "BINARY_ACK";
    })(PacketType || (PacketType = {}));
    class Encoder {
      /**
       * Encoder constructor
       *
       * @param {function} replacer - custom replacer to pass down to JSON.parse
       */
      constructor(replacer) {
        this.replacer = replacer;
      }
      /**
       * Encode a packet as a single string if non-binary, or as a
       * buffer sequence, depending on packet type.
       *
       * @param {Object} obj - packet object
       */
      encode(obj) {
        if (obj.type === PacketType.EVENT || obj.type === PacketType.ACK) {
          if (hasBinary(obj)) {
            return this.encodeAsBinary({
              type: obj.type === PacketType.EVENT ? PacketType.BINARY_EVENT : PacketType.BINARY_ACK,
              nsp: obj.nsp,
              data: obj.data,
              id: obj.id
            });
          }
        }
        return [this.encodeAsString(obj)];
      }
      /**
       * Encode packet as string.
       */
      encodeAsString(obj) {
        let str = "" + obj.type;
        if (obj.type === PacketType.BINARY_EVENT || obj.type === PacketType.BINARY_ACK) {
          str += obj.attachments + "-";
        }
        if (obj.nsp && "/" !== obj.nsp) {
          str += obj.nsp + ",";
        }
        if (null != obj.id) {
          str += obj.id;
        }
        if (null != obj.data) {
          str += JSON.stringify(obj.data, this.replacer);
        }
        return str;
      }
      /**
       * Encode packet as 'buffer sequence' by removing blobs, and
       * deconstructing packet into object with placeholders and
       * a list of buffers.
       */
      encodeAsBinary(obj) {
        const deconstruction = deconstructPacket(obj);
        const pack = this.encodeAsString(deconstruction.packet);
        const buffers = deconstruction.buffers;
        buffers.unshift(pack);
        return buffers;
      }
    }
    function isObject$b(value2) {
      return Object.prototype.toString.call(value2) === "[object Object]";
    }
    class Decoder extends Emitter {
      /**
       * Decoder constructor
       *
       * @param {function} reviver - custom reviver to pass down to JSON.stringify
       */
      constructor(reviver) {
        super();
        this.reviver = reviver;
      }
      /**
       * Decodes an encoded packet string into packet JSON.
       *
       * @param {String} obj - encoded packet
       */
      add(obj) {
        let packet;
        if (typeof obj === "string") {
          if (this.reconstructor) {
            throw new Error("got plaintext data when reconstructing a packet");
          }
          packet = this.decodeString(obj);
          const isBinaryEvent = packet.type === PacketType.BINARY_EVENT;
          if (isBinaryEvent || packet.type === PacketType.BINARY_ACK) {
            packet.type = isBinaryEvent ? PacketType.EVENT : PacketType.ACK;
            this.reconstructor = new BinaryReconstructor(packet);
            if (packet.attachments === 0) {
              super.emitReserved("decoded", packet);
            }
          } else {
            super.emitReserved("decoded", packet);
          }
        } else if (isBinary(obj) || obj.base64) {
          if (!this.reconstructor) {
            throw new Error("got binary data when not reconstructing a packet");
          } else {
            packet = this.reconstructor.takeBinaryData(obj);
            if (packet) {
              this.reconstructor = null;
              super.emitReserved("decoded", packet);
            }
          }
        } else {
          throw new Error("Unknown type: " + obj);
        }
      }
      /**
       * Decode a packet String (JSON data)
       *
       * @param {String} str
       * @return {Object} packet
       */
      decodeString(str) {
        let i2 = 0;
        const p2 = {
          type: Number(str.charAt(0))
        };
        if (PacketType[p2.type] === void 0) {
          throw new Error("unknown packet type " + p2.type);
        }
        if (p2.type === PacketType.BINARY_EVENT || p2.type === PacketType.BINARY_ACK) {
          const start = i2 + 1;
          while (str.charAt(++i2) !== "-" && i2 != str.length) {
          }
          const buf = str.substring(start, i2);
          if (buf != Number(buf) || str.charAt(i2) !== "-") {
            throw new Error("Illegal attachments");
          }
          p2.attachments = Number(buf);
        }
        if ("/" === str.charAt(i2 + 1)) {
          const start = i2 + 1;
          while (++i2) {
            const c2 = str.charAt(i2);
            if ("," === c2)
              break;
            if (i2 === str.length)
              break;
          }
          p2.nsp = str.substring(start, i2);
        } else {
          p2.nsp = "/";
        }
        const next = str.charAt(i2 + 1);
        if ("" !== next && Number(next) == next) {
          const start = i2 + 1;
          while (++i2) {
            const c2 = str.charAt(i2);
            if (null == c2 || Number(c2) != c2) {
              --i2;
              break;
            }
            if (i2 === str.length)
              break;
          }
          p2.id = Number(str.substring(start, i2 + 1));
        }
        if (str.charAt(++i2)) {
          const payload = this.tryParse(str.substr(i2));
          if (Decoder.isPayloadValid(p2.type, payload)) {
            p2.data = payload;
          } else {
            throw new Error("invalid payload");
          }
        }
        return p2;
      }
      tryParse(str) {
        try {
          return JSON.parse(str, this.reviver);
        } catch (e3) {
          return false;
        }
      }
      static isPayloadValid(type, payload) {
        switch (type) {
          case PacketType.CONNECT:
            return isObject$b(payload);
          case PacketType.DISCONNECT:
            return payload === void 0;
          case PacketType.CONNECT_ERROR:
            return typeof payload === "string" || isObject$b(payload);
          case PacketType.EVENT:
          case PacketType.BINARY_EVENT:
            return Array.isArray(payload) && (typeof payload[0] === "number" || typeof payload[0] === "string" && RESERVED_EVENTS$1.indexOf(payload[0]) === -1);
          case PacketType.ACK:
          case PacketType.BINARY_ACK:
            return Array.isArray(payload);
        }
      }
      /**
       * Deallocates a parser's resources
       */
      destroy() {
        if (this.reconstructor) {
          this.reconstructor.finishedReconstruction();
          this.reconstructor = null;
        }
      }
    }
    class BinaryReconstructor {
      constructor(packet) {
        this.packet = packet;
        this.buffers = [];
        this.reconPack = packet;
      }
      /**
       * Method to be called when binary data received from connection
       * after a BINARY_EVENT packet.
       *
       * @param {Buffer | ArrayBuffer} binData - the raw binary data received
       * @return {null | Object} returns null if more binary data is expected or
       *   a reconstructed packet object if all buffers have been received.
       */
      takeBinaryData(binData) {
        this.buffers.push(binData);
        if (this.buffers.length === this.reconPack.attachments) {
          const packet = reconstructPacket(this.reconPack, this.buffers);
          this.finishedReconstruction();
          return packet;
        }
        return null;
      }
      /**
       * Cleans up binary packet reconstruction variables.
       */
      finishedReconstruction() {
        this.reconPack = null;
        this.buffers = [];
      }
    }
    const parser = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      Decoder,
      Encoder,
      get PacketType() {
        return PacketType;
      },
      protocol
    }, Symbol.toStringTag, { value: "Module" }));
    function on(obj, ev, fn) {
      obj.on(ev, fn);
      return function subDestroy() {
        obj.off(ev, fn);
      };
    }
    const RESERVED_EVENTS = Object.freeze({
      connect: 1,
      connect_error: 1,
      disconnect: 1,
      disconnecting: 1,
      // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener
      newListener: 1,
      removeListener: 1
    });
    class Socket extends Emitter {
      /**
       * `Socket` constructor.
       */
      constructor(io, nsp, opts) {
        super();
        this.connected = false;
        this.recovered = false;
        this.receiveBuffer = [];
        this.sendBuffer = [];
        this._queue = [];
        this._queueSeq = 0;
        this.ids = 0;
        this.acks = {};
        this.flags = {};
        this.io = io;
        this.nsp = nsp;
        if (opts && opts.auth) {
          this.auth = opts.auth;
        }
        this._opts = Object.assign({}, opts);
        if (this.io._autoConnect)
          this.open();
      }
      /**
       * Whether the socket is currently disconnected
       *
       * @example
       * const socket = io();
       *
       * socket.on("connect", () => {
       *   console.log(socket.disconnected); // false
       * });
       *
       * socket.on("disconnect", () => {
       *   console.log(socket.disconnected); // true
       * });
       */
      get disconnected() {
        return !this.connected;
      }
      /**
       * Subscribe to open, close and packet events
       *
       * @private
       */
      subEvents() {
        if (this.subs)
          return;
        const io = this.io;
        this.subs = [
          on(io, "open", this.onopen.bind(this)),
          on(io, "packet", this.onpacket.bind(this)),
          on(io, "error", this.onerror.bind(this)),
          on(io, "close", this.onclose.bind(this))
        ];
      }
      /**
       * Whether the Socket will try to reconnect when its Manager connects or reconnects.
       *
       * @example
       * const socket = io();
       *
       * console.log(socket.active); // true
       *
       * socket.on("disconnect", (reason) => {
       *   if (reason === "io server disconnect") {
       *     // the disconnection was initiated by the server, you need to manually reconnect
       *     console.log(socket.active); // false
       *   }
       *   // else the socket will automatically try to reconnect
       *   console.log(socket.active); // true
       * });
       */
      get active() {
        return !!this.subs;
      }
      /**
       * "Opens" the socket.
       *
       * @example
       * const socket = io({
       *   autoConnect: false
       * });
       *
       * socket.connect();
       */
      connect() {
        if (this.connected)
          return this;
        this.subEvents();
        if (!this.io["_reconnecting"])
          this.io.open();
        if ("open" === this.io._readyState)
          this.onopen();
        return this;
      }
      /**
       * Alias for {@link connect()}.
       */
      open() {
        return this.connect();
      }
      /**
       * Sends a `message` event.
       *
       * This method mimics the WebSocket.send() method.
       *
       * @see https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send
       *
       * @example
       * socket.send("hello");
       *
       * // this is equivalent to
       * socket.emit("message", "hello");
       *
       * @return self
       */
      send(...args) {
        args.unshift("message");
        this.emit.apply(this, args);
        return this;
      }
      /**
       * Override `emit`.
       * If the event is in `events`, it's emitted normally.
       *
       * @example
       * socket.emit("hello", "world");
       *
       * // all serializable datastructures are supported (no need to call JSON.stringify)
       * socket.emit("hello", 1, "2", { 3: ["4"], 5: Uint8Array.from([6]) });
       *
       * // with an acknowledgement from the server
       * socket.emit("hello", "world", (val) => {
       *   // ...
       * });
       *
       * @return self
       */
      emit(ev, ...args) {
        var _a2, _b2, _c2;
        if (RESERVED_EVENTS.hasOwnProperty(ev)) {
          throw new Error('"' + ev.toString() + '" is a reserved event name');
        }
        args.unshift(ev);
        if (this._opts.retries && !this.flags.fromQueue && !this.flags.volatile) {
          this._addToQueue(args);
          return this;
        }
        const packet = {
          type: PacketType.EVENT,
          data: args
        };
        packet.options = {};
        packet.options.compress = this.flags.compress !== false;
        if ("function" === typeof args[args.length - 1]) {
          const id2 = this.ids++;
          const ack = args.pop();
          this._registerAckCallback(id2, ack);
          packet.id = id2;
        }
        const isTransportWritable = (_b2 = (_a2 = this.io.engine) === null || _a2 === void 0 ? void 0 : _a2.transport) === null || _b2 === void 0 ? void 0 : _b2.writable;
        const isConnected = this.connected && !((_c2 = this.io.engine) === null || _c2 === void 0 ? void 0 : _c2._hasPingExpired());
        const discardPacket = this.flags.volatile && !isTransportWritable;
        if (discardPacket)
          ;
        else if (isConnected) {
          this.notifyOutgoingListeners(packet);
          this.packet(packet);
        } else {
          this.sendBuffer.push(packet);
        }
        this.flags = {};
        return this;
      }
      /**
       * @private
       */
      _registerAckCallback(id2, ack) {
        var _a2;
        const timeout = (_a2 = this.flags.timeout) !== null && _a2 !== void 0 ? _a2 : this._opts.ackTimeout;
        if (timeout === void 0) {
          this.acks[id2] = ack;
          return;
        }
        const timer = this.io.setTimeoutFn(() => {
          delete this.acks[id2];
          for (let i2 = 0; i2 < this.sendBuffer.length; i2++) {
            if (this.sendBuffer[i2].id === id2) {
              this.sendBuffer.splice(i2, 1);
            }
          }
          ack.call(this, new Error("operation has timed out"));
        }, timeout);
        const fn = (...args) => {
          this.io.clearTimeoutFn(timer);
          ack.apply(this, args);
        };
        fn.withError = true;
        this.acks[id2] = fn;
      }
      /**
       * Emits an event and waits for an acknowledgement
       *
       * @example
       * // without timeout
       * const response = await socket.emitWithAck("hello", "world");
       *
       * // with a specific timeout
       * try {
       *   const response = await socket.timeout(1000).emitWithAck("hello", "world");
       * } catch (err) {
       *   // the server did not acknowledge the event in the given delay
       * }
       *
       * @return a Promise that will be fulfilled when the server acknowledges the event
       */
      emitWithAck(ev, ...args) {
        return new Promise((resolve, reject) => {
          const fn = (arg1, arg2) => {
            return arg1 ? reject(arg1) : resolve(arg2);
          };
          fn.withError = true;
          args.push(fn);
          this.emit(ev, ...args);
        });
      }
      /**
       * Add the packet to the queue.
       * @param args
       * @private
       */
      _addToQueue(args) {
        let ack;
        if (typeof args[args.length - 1] === "function") {
          ack = args.pop();
        }
        const packet = {
          id: this._queueSeq++,
          tryCount: 0,
          pending: false,
          args,
          flags: Object.assign({ fromQueue: true }, this.flags)
        };
        args.push((err, ...responseArgs) => {
          if (packet !== this._queue[0]) {
            return;
          }
          const hasError = err !== null;
          if (hasError) {
            if (packet.tryCount > this._opts.retries) {
              this._queue.shift();
              if (ack) {
                ack(err);
              }
            }
          } else {
            this._queue.shift();
            if (ack) {
              ack(null, ...responseArgs);
            }
          }
          packet.pending = false;
          return this._drainQueue();
        });
        this._queue.push(packet);
        this._drainQueue();
      }
      /**
       * Send the first packet of the queue, and wait for an acknowledgement from the server.
       * @param force - whether to resend a packet that has not been acknowledged yet
       *
       * @private
       */
      _drainQueue(force = false) {
        if (!this.connected || this._queue.length === 0) {
          return;
        }
        const packet = this._queue[0];
        if (packet.pending && !force) {
          return;
        }
        packet.pending = true;
        packet.tryCount++;
        this.flags = packet.flags;
        this.emit.apply(this, packet.args);
      }
      /**
       * Sends a packet.
       *
       * @param packet
       * @private
       */
      packet(packet) {
        packet.nsp = this.nsp;
        this.io._packet(packet);
      }
      /**
       * Called upon engine `open`.
       *
       * @private
       */
      onopen() {
        if (typeof this.auth == "function") {
          this.auth((data) => {
            this._sendConnectPacket(data);
          });
        } else {
          this._sendConnectPacket(this.auth);
        }
      }
      /**
       * Sends a CONNECT packet to initiate the Socket.IO session.
       *
       * @param data
       * @private
       */
      _sendConnectPacket(data) {
        this.packet({
          type: PacketType.CONNECT,
          data: this._pid ? Object.assign({ pid: this._pid, offset: this._lastOffset }, data) : data
        });
      }
      /**
       * Called upon engine or manager `error`.
       *
       * @param err
       * @private
       */
      onerror(err) {
        if (!this.connected) {
          this.emitReserved("connect_error", err);
        }
      }
      /**
       * Called upon engine `close`.
       *
       * @param reason
       * @param description
       * @private
       */
      onclose(reason, description) {
        this.connected = false;
        delete this.id;
        this.emitReserved("disconnect", reason, description);
        this._clearAcks();
      }
      /**
       * Clears the acknowledgement handlers upon disconnection, since the client will never receive an acknowledgement from
       * the server.
       *
       * @private
       */
      _clearAcks() {
        Object.keys(this.acks).forEach((id2) => {
          const isBuffered = this.sendBuffer.some((packet) => String(packet.id) === id2);
          if (!isBuffered) {
            const ack = this.acks[id2];
            delete this.acks[id2];
            if (ack.withError) {
              ack.call(this, new Error("socket has been disconnected"));
            }
          }
        });
      }
      /**
       * Called with socket packet.
       *
       * @param packet
       * @private
       */
      onpacket(packet) {
        const sameNamespace = packet.nsp === this.nsp;
        if (!sameNamespace)
          return;
        switch (packet.type) {
          case PacketType.CONNECT:
            if (packet.data && packet.data.sid) {
              this.onconnect(packet.data.sid, packet.data.pid);
            } else {
              this.emitReserved("connect_error", new Error("It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)"));
            }
            break;
          case PacketType.EVENT:
          case PacketType.BINARY_EVENT:
            this.onevent(packet);
            break;
          case PacketType.ACK:
          case PacketType.BINARY_ACK:
            this.onack(packet);
            break;
          case PacketType.DISCONNECT:
            this.ondisconnect();
            break;
          case PacketType.CONNECT_ERROR:
            this.destroy();
            const err = new Error(packet.data.message);
            err.data = packet.data.data;
            this.emitReserved("connect_error", err);
            break;
        }
      }
      /**
       * Called upon a server event.
       *
       * @param packet
       * @private
       */
      onevent(packet) {
        const args = packet.data || [];
        if (null != packet.id) {
          args.push(this.ack(packet.id));
        }
        if (this.connected) {
          this.emitEvent(args);
        } else {
          this.receiveBuffer.push(Object.freeze(args));
        }
      }
      emitEvent(args) {
        if (this._anyListeners && this._anyListeners.length) {
          const listeners = this._anyListeners.slice();
          for (const listener of listeners) {
            listener.apply(this, args);
          }
        }
        super.emit.apply(this, args);
        if (this._pid && args.length && typeof args[args.length - 1] === "string") {
          this._lastOffset = args[args.length - 1];
        }
      }
      /**
       * Produces an ack callback to emit with an event.
       *
       * @private
       */
      ack(id2) {
        const self2 = this;
        let sent = false;
        return function(...args) {
          if (sent)
            return;
          sent = true;
          self2.packet({
            type: PacketType.ACK,
            id: id2,
            data: args
          });
        };
      }
      /**
       * Called upon a server acknowledgement.
       *
       * @param packet
       * @private
       */
      onack(packet) {
        const ack = this.acks[packet.id];
        if (typeof ack !== "function") {
          return;
        }
        delete this.acks[packet.id];
        if (ack.withError) {
          packet.data.unshift(null);
        }
        ack.apply(this, packet.data);
      }
      /**
       * Called upon server connect.
       *
       * @private
       */
      onconnect(id2, pid) {
        this.id = id2;
        this.recovered = pid && this._pid === pid;
        this._pid = pid;
        this.connected = true;
        this.emitBuffered();
        this.emitReserved("connect");
        this._drainQueue(true);
      }
      /**
       * Emit buffered events (received and emitted).
       *
       * @private
       */
      emitBuffered() {
        this.receiveBuffer.forEach((args) => this.emitEvent(args));
        this.receiveBuffer = [];
        this.sendBuffer.forEach((packet) => {
          this.notifyOutgoingListeners(packet);
          this.packet(packet);
        });
        this.sendBuffer = [];
      }
      /**
       * Called upon server disconnect.
       *
       * @private
       */
      ondisconnect() {
        this.destroy();
        this.onclose("io server disconnect");
      }
      /**
       * Called upon forced client/server side disconnections,
       * this method ensures the manager stops tracking us and
       * that reconnections don't get triggered for this.
       *
       * @private
       */
      destroy() {
        if (this.subs) {
          this.subs.forEach((subDestroy) => subDestroy());
          this.subs = void 0;
        }
        this.io["_destroy"](this);
      }
      /**
       * Disconnects the socket manually. In that case, the socket will not try to reconnect.
       *
       * If this is the last active Socket instance of the {@link Manager}, the low-level connection will be closed.
       *
       * @example
       * const socket = io();
       *
       * socket.on("disconnect", (reason) => {
       *   // console.log(reason); prints "io client disconnect"
       * });
       *
       * socket.disconnect();
       *
       * @return self
       */
      disconnect() {
        if (this.connected) {
          this.packet({ type: PacketType.DISCONNECT });
        }
        this.destroy();
        if (this.connected) {
          this.onclose("io client disconnect");
        }
        return this;
      }
      /**
       * Alias for {@link disconnect()}.
       *
       * @return self
       */
      close() {
        return this.disconnect();
      }
      /**
       * Sets the compress flag.
       *
       * @example
       * socket.compress(false).emit("hello");
       *
       * @param compress - if `true`, compresses the sending data
       * @return self
       */
      compress(compress) {
        this.flags.compress = compress;
        return this;
      }
      /**
       * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not
       * ready to send messages.
       *
       * @example
       * socket.volatile.emit("hello"); // the server may or may not receive it
       *
       * @returns self
       */
      get volatile() {
        this.flags.volatile = true;
        return this;
      }
      /**
       * Sets a modifier for a subsequent event emission that the callback will be called with an error when the
       * given number of milliseconds have elapsed without an acknowledgement from the server:
       *
       * @example
       * socket.timeout(5000).emit("my-event", (err) => {
       *   if (err) {
       *     // the server did not acknowledge the event in the given delay
       *   }
       * });
       *
       * @returns self
       */
      timeout(timeout) {
        this.flags.timeout = timeout;
        return this;
      }
      /**
       * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the
       * callback.
       *
       * @example
       * socket.onAny((event, ...args) => {
       *   console.log(`got ${event}`);
       * });
       *
       * @param listener
       */
      onAny(listener) {
        this._anyListeners = this._anyListeners || [];
        this._anyListeners.push(listener);
        return this;
      }
      /**
       * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the
       * callback. The listener is added to the beginning of the listeners array.
       *
       * @example
       * socket.prependAny((event, ...args) => {
       *   console.log(`got event ${event}`);
       * });
       *
       * @param listener
       */
      prependAny(listener) {
        this._anyListeners = this._anyListeners || [];
        this._anyListeners.unshift(listener);
        return this;
      }
      /**
       * Removes the listener that will be fired when any event is emitted.
       *
       * @example
       * const catchAllListener = (event, ...args) => {
       *   console.log(`got event ${event}`);
       * }
       *
       * socket.onAny(catchAllListener);
       *
       * // remove a specific listener
       * socket.offAny(catchAllListener);
       *
       * // or remove all listeners
       * socket.offAny();
       *
       * @param listener
       */
      offAny(listener) {
        if (!this._anyListeners) {
          return this;
        }
        if (listener) {
          const listeners = this._anyListeners;
          for (let i2 = 0; i2 < listeners.length; i2++) {
            if (listener === listeners[i2]) {
              listeners.splice(i2, 1);
              return this;
            }
          }
        } else {
          this._anyListeners = [];
        }
        return this;
      }
      /**
       * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,
       * e.g. to remove listeners.
       */
      listenersAny() {
        return this._anyListeners || [];
      }
      /**
       * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the
       * callback.
       *
       * Note: acknowledgements sent to the server are not included.
       *
       * @example
       * socket.onAnyOutgoing((event, ...args) => {
       *   console.log(`sent event ${event}`);
       * });
       *
       * @param listener
       */
      onAnyOutgoing(listener) {
        this._anyOutgoingListeners = this._anyOutgoingListeners || [];
        this._anyOutgoingListeners.push(listener);
        return this;
      }
      /**
       * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the
       * callback. The listener is added to the beginning of the listeners array.
       *
       * Note: acknowledgements sent to the server are not included.
       *
       * @example
       * socket.prependAnyOutgoing((event, ...args) => {
       *   console.log(`sent event ${event}`);
       * });
       *
       * @param listener
       */
      prependAnyOutgoing(listener) {
        this._anyOutgoingListeners = this._anyOutgoingListeners || [];
        this._anyOutgoingListeners.unshift(listener);
        return this;
      }
      /**
       * Removes the listener that will be fired when any event is emitted.
       *
       * @example
       * const catchAllListener = (event, ...args) => {
       *   console.log(`sent event ${event}`);
       * }
       *
       * socket.onAnyOutgoing(catchAllListener);
       *
       * // remove a specific listener
       * socket.offAnyOutgoing(catchAllListener);
       *
       * // or remove all listeners
       * socket.offAnyOutgoing();
       *
       * @param [listener] - the catch-all listener (optional)
       */
      offAnyOutgoing(listener) {
        if (!this._anyOutgoingListeners) {
          return this;
        }
        if (listener) {
          const listeners = this._anyOutgoingListeners;
          for (let i2 = 0; i2 < listeners.length; i2++) {
            if (listener === listeners[i2]) {
              listeners.splice(i2, 1);
              return this;
            }
          }
        } else {
          this._anyOutgoingListeners = [];
        }
        return this;
      }
      /**
       * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,
       * e.g. to remove listeners.
       */
      listenersAnyOutgoing() {
        return this._anyOutgoingListeners || [];
      }
      /**
       * Notify the listeners for each packet sent
       *
       * @param packet
       *
       * @private
       */
      notifyOutgoingListeners(packet) {
        if (this._anyOutgoingListeners && this._anyOutgoingListeners.length) {
          const listeners = this._anyOutgoingListeners.slice();
          for (const listener of listeners) {
            listener.apply(this, packet.data);
          }
        }
      }
    }
    function Backoff(opts) {
      opts = opts || {};
      this.ms = opts.min || 100;
      this.max = opts.max || 1e4;
      this.factor = opts.factor || 2;
      this.jitter = opts.jitter > 0 && opts.jitter <= 1 ? opts.jitter : 0;
      this.attempts = 0;
    }
    Backoff.prototype.duration = function() {
      var ms = this.ms * Math.pow(this.factor, this.attempts++);
      if (this.jitter) {
        var rand = Math.random();
        var deviation = Math.floor(rand * this.jitter * ms);
        ms = (Math.floor(rand * 10) & 1) == 0 ? ms - deviation : ms + deviation;
      }
      return Math.min(ms, this.max) | 0;
    };
    Backoff.prototype.reset = function() {
      this.attempts = 0;
    };
    Backoff.prototype.setMin = function(min2) {
      this.ms = min2;
    };
    Backoff.prototype.setMax = function(max2) {
      this.max = max2;
    };
    Backoff.prototype.setJitter = function(jitter) {
      this.jitter = jitter;
    };
    class Manager extends Emitter {
      constructor(uri, opts) {
        var _a2;
        super();
        this.nsps = {};
        this.subs = [];
        if (uri && "object" === typeof uri) {
          opts = uri;
          uri = void 0;
        }
        opts = opts || {};
        opts.path = opts.path || "/socket.io";
        this.opts = opts;
        installTimerFunctions(this, opts);
        this.reconnection(opts.reconnection !== false);
        this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);
        this.reconnectionDelay(opts.reconnectionDelay || 1e3);
        this.reconnectionDelayMax(opts.reconnectionDelayMax || 5e3);
        this.randomizationFactor((_a2 = opts.randomizationFactor) !== null && _a2 !== void 0 ? _a2 : 0.5);
        this.backoff = new Backoff({
          min: this.reconnectionDelay(),
          max: this.reconnectionDelayMax(),
          jitter: this.randomizationFactor()
        });
        this.timeout(null == opts.timeout ? 2e4 : opts.timeout);
        this._readyState = "closed";
        this.uri = uri;
        const _parser = opts.parser || parser;
        this.encoder = new _parser.Encoder();
        this.decoder = new _parser.Decoder();
        this._autoConnect = opts.autoConnect !== false;
        if (this._autoConnect)
          this.open();
      }
      reconnection(v2) {
        if (!arguments.length)
          return this._reconnection;
        this._reconnection = !!v2;
        if (!v2) {
          this.skipReconnect = true;
        }
        return this;
      }
      reconnectionAttempts(v2) {
        if (v2 === void 0)
          return this._reconnectionAttempts;
        this._reconnectionAttempts = v2;
        return this;
      }
      reconnectionDelay(v2) {
        var _a2;
        if (v2 === void 0)
          return this._reconnectionDelay;
        this._reconnectionDelay = v2;
        (_a2 = this.backoff) === null || _a2 === void 0 ? void 0 : _a2.setMin(v2);
        return this;
      }
      randomizationFactor(v2) {
        var _a2;
        if (v2 === void 0)
          return this._randomizationFactor;
        this._randomizationFactor = v2;
        (_a2 = this.backoff) === null || _a2 === void 0 ? void 0 : _a2.setJitter(v2);
        return this;
      }
      reconnectionDelayMax(v2) {
        var _a2;
        if (v2 === void 0)
          return this._reconnectionDelayMax;
        this._reconnectionDelayMax = v2;
        (_a2 = this.backoff) === null || _a2 === void 0 ? void 0 : _a2.setMax(v2);
        return this;
      }
      timeout(v2) {
        if (!arguments.length)
          return this._timeout;
        this._timeout = v2;
        return this;
      }
      /**
       * Starts trying to reconnect if reconnection is enabled and we have not
       * started reconnecting yet
       *
       * @private
       */
      maybeReconnectOnOpen() {
        if (!this._reconnecting && this._reconnection && this.backoff.attempts === 0) {
          this.reconnect();
        }
      }
      /**
       * Sets the current transport `socket`.
       *
       * @param {Function} fn - optional, callback
       * @return self
       * @public
       */
      open(fn) {
        if (~this._readyState.indexOf("open"))
          return this;
        this.engine = new Socket$1(this.uri, this.opts);
        const socket = this.engine;
        const self2 = this;
        this._readyState = "opening";
        this.skipReconnect = false;
        const openSubDestroy = on(socket, "open", function() {
          self2.onopen();
          fn && fn();
        });
        const onError = (err) => {
          this.cleanup();
          this._readyState = "closed";
          this.emitReserved("error", err);
          if (fn) {
            fn(err);
          } else {
            this.maybeReconnectOnOpen();
          }
        };
        const errorSub = on(socket, "error", onError);
        if (false !== this._timeout) {
          const timeout = this._timeout;
          const timer = this.setTimeoutFn(() => {
            openSubDestroy();
            onError(new Error("timeout"));
            socket.close();
          }, timeout);
          if (this.opts.autoUnref) {
            timer.unref();
          }
          this.subs.push(() => {
            this.clearTimeoutFn(timer);
          });
        }
        this.subs.push(openSubDestroy);
        this.subs.push(errorSub);
        return this;
      }
      /**
       * Alias for open()
       *
       * @return self
       * @public
       */
      connect(fn) {
        return this.open(fn);
      }
      /**
       * Called upon transport open.
       *
       * @private
       */
      onopen() {
        this.cleanup();
        this._readyState = "open";
        this.emitReserved("open");
        const socket = this.engine;
        this.subs.push(
          on(socket, "ping", this.onping.bind(this)),
          on(socket, "data", this.ondata.bind(this)),
          on(socket, "error", this.onerror.bind(this)),
          on(socket, "close", this.onclose.bind(this)),
          // @ts-ignore
          on(this.decoder, "decoded", this.ondecoded.bind(this))
        );
      }
      /**
       * Called upon a ping.
       *
       * @private
       */
      onping() {
        this.emitReserved("ping");
      }
      /**
       * Called with data.
       *
       * @private
       */
      ondata(data) {
        try {
          this.decoder.add(data);
        } catch (e3) {
          this.onclose("parse error", e3);
        }
      }
      /**
       * Called when parser fully decodes a packet.
       *
       * @private
       */
      ondecoded(packet) {
        nextTick(() => {
          this.emitReserved("packet", packet);
        }, this.setTimeoutFn);
      }
      /**
       * Called upon socket error.
       *
       * @private
       */
      onerror(err) {
        this.emitReserved("error", err);
      }
      /**
       * Creates a new socket for the given `nsp`.
       *
       * @return {Socket}
       * @public
       */
      socket(nsp, opts) {
        let socket = this.nsps[nsp];
        if (!socket) {
          socket = new Socket(this, nsp, opts);
          this.nsps[nsp] = socket;
        } else if (this._autoConnect && !socket.active) {
          socket.connect();
        }
        return socket;
      }
      /**
       * Called upon a socket close.
       *
       * @param socket
       * @private
       */
      _destroy(socket) {
        const nsps = Object.keys(this.nsps);
        for (const nsp of nsps) {
          const socket2 = this.nsps[nsp];
          if (socket2.active) {
            return;
          }
        }
        this._close();
      }
      /**
       * Writes a packet.
       *
       * @param packet
       * @private
       */
      _packet(packet) {
        const encodedPackets = this.encoder.encode(packet);
        for (let i2 = 0; i2 < encodedPackets.length; i2++) {
          this.engine.write(encodedPackets[i2], packet.options);
        }
      }
      /**
       * Clean up transport subscriptions and packet buffer.
       *
       * @private
       */
      cleanup() {
        this.subs.forEach((subDestroy) => subDestroy());
        this.subs.length = 0;
        this.decoder.destroy();
      }
      /**
       * Close the current socket.
       *
       * @private
       */
      _close() {
        this.skipReconnect = true;
        this._reconnecting = false;
        this.onclose("forced close");
      }
      /**
       * Alias for close()
       *
       * @private
       */
      disconnect() {
        return this._close();
      }
      /**
       * Called when:
       *
       * - the low-level engine is closed
       * - the parser encountered a badly formatted packet
       * - all sockets are disconnected
       *
       * @private
       */
      onclose(reason, description) {
        var _a2;
        this.cleanup();
        (_a2 = this.engine) === null || _a2 === void 0 ? void 0 : _a2.close();
        this.backoff.reset();
        this._readyState = "closed";
        this.emitReserved("close", reason, description);
        if (this._reconnection && !this.skipReconnect) {
          this.reconnect();
        }
      }
      /**
       * Attempt a reconnection.
       *
       * @private
       */
      reconnect() {
        if (this._reconnecting || this.skipReconnect)
          return this;
        const self2 = this;
        if (this.backoff.attempts >= this._reconnectionAttempts) {
          this.backoff.reset();
          this.emitReserved("reconnect_failed");
          this._reconnecting = false;
        } else {
          const delay = this.backoff.duration();
          this._reconnecting = true;
          const timer = this.setTimeoutFn(() => {
            if (self2.skipReconnect)
              return;
            this.emitReserved("reconnect_attempt", self2.backoff.attempts);
            if (self2.skipReconnect)
              return;
            self2.open((err) => {
              if (err) {
                self2._reconnecting = false;
                self2.reconnect();
                this.emitReserved("reconnect_error", err);
              } else {
                self2.onreconnect();
              }
            });
          }, delay);
          if (this.opts.autoUnref) {
            timer.unref();
          }
          this.subs.push(() => {
            this.clearTimeoutFn(timer);
          });
        }
      }
      /**
       * Called upon successful reconnect.
       *
       * @private
       */
      onreconnect() {
        const attempt = this.backoff.attempts;
        this._reconnecting = false;
        this.backoff.reset();
        this.emitReserved("reconnect", attempt);
      }
    }
    const cache$2 = {};
    function lookup(uri, opts) {
      if (typeof uri === "object") {
        opts = uri;
        uri = void 0;
      }
      opts = opts || {};
      const parsed = url(uri, opts.path || "/socket.io");
      const source = parsed.source;
      const id2 = parsed.id;
      const path = parsed.path;
      const sameNamespace = cache$2[id2] && path in cache$2[id2]["nsps"];
      const newConnection = opts.forceNew || opts["force new connection"] || false === opts.multiplex || sameNamespace;
      let io;
      if (newConnection) {
        io = new Manager(source, opts);
      } else {
        if (!cache$2[id2]) {
          cache$2[id2] = new Manager(source, opts);
        }
        io = cache$2[id2];
      }
      if (parsed.query && !opts.query) {
        opts.query = parsed.queryKey;
      }
      return io.socket(parsed.path, opts);
    }
    Object.assign(lookup, {
      Manager,
      Socket,
      io: lookup,
      connect: lookup
    });
    const ICONS$2 = {
      alert: /* @__PURE__ */ jsxRuntimeExports.jsx(HiBellAlert, { className: "h-5 w-5 text-gray-600 group-hover:text-indigo-600" }),
      message: /* @__PURE__ */ jsxRuntimeExports.jsx(BiSolidMessageRounded, { className: "h-5 w-5 text-gray-600 group-hover:text-indigo-600" })
    };
    const NotificationPanel = () => {
      reactExports.useState(false);
      reactExports.useState(null);
      const [socket, setSocket] = reactExports.useState(null);
      const [data, setData] = reactExports.useState([]);
      const { user } = useSelector((state) => state.auth);
      reactExports.useEffect(() => {
        const newSocket = lookup("http://localhost:4000", {
          transports: ["websocket"]
          // Use WebSocket transport only
        });
        setSocket(newSocket);
        return () => {
          newSocket.disconnect();
        };
      }, []);
      reactExports.useEffect(() => {
        if (socket) {
          socket.on("taskStatusUpdated", (payload) => {
            console.log(payload, "payyy");
            console.log(user._id, "user id");
            if (payload.updatedFields.assignedUsers.includes(user._id) || user.role == "admin") {
              const newNotification = {
                _id: payload.taskId,
                text: `Task status updated: ${payload.updatedFields.status} for task ${payload.updatedFields.title}`,
                notiType: "alert",
                createdAt: (/* @__PURE__ */ new Date()).toISOString()
              };
              const updatedNotifications = [...data, newNotification];
              localStorage.setItem("notifications", JSON.stringify(updatedNotifications));
              setData(updatedNotifications);
            }
          });
        }
      }, [socket, data]);
      reactExports.useEffect(() => {
        const savedNotifications = JSON.parse(localStorage.getItem("notifications")) || [];
        setData(savedNotifications);
      }, []);
      const viewHandler = () => {
      };
      return /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Ct, { className: "relative", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(Ct.Button, { className: "inline-flex items-center outline-none", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "w-8 h-8 flex items-center justify-center text-gray-800 relative", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(IoIosNotificationsOutline, { className: "text-2xl" }),
          (data == null ? void 0 : data.length) > 0 && /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "absolute text-center top-0 right-1 text-sm text-white font-semibold w-4 h-4 rounded-full bg-red-600", children: data == null ? void 0 : data.length })
        ] }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          qe,
          {
            as: reactExports.Fragment,
            enter: "transition ease-out duration-200",
            enterFrom: "opacity-0 translate-y-1",
            enterTo: "opacity-100 translate-y-0",
            leave: "transition ease-in duration-150",
            leaveFrom: "opacity-100 translate-y-0",
            leaveTo: "opacity-0 translate-y-1",
            children: /* @__PURE__ */ jsxRuntimeExports.jsx(Ct.Panel, { className: "absolute -right-16 md:-right-2 z-10 mt-5 flex w-screen max-w-max px-4", children: ({ close }) => (data == null ? void 0 : data.length) > 0 && /* @__PURE__ */ jsxRuntimeExports.jsx("main", { className: "flex flex-col rounded-3xl", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "w-screen max-w-md flex-auto max-h-[400px] overflow-y-auto rounded-3xl bg-white text-sm leading-6 shadow-lg ring-1 ring-gray-900/5", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "p-4", children: data == null ? void 0 : data.map((item, index) => /* @__PURE__ */ jsxRuntimeExports.jsxs(
                "div",
                {
                  className: "group relative flex gap-x-4 rounded-lg p-4 hover:bg-gray-50",
                  children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "mt-1 h-8 w-8 flex items-center justify-center rounded-lg bg-gray-200 group-hover:bg-white", children: ICONS$2[item.notiType] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs(
                      "div",
                      {
                        className: "cursor-pointer",
                        onClick: () => viewHandler(),
                        children: [
                          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-3 font-semibold text-gray-900 capitalize", children: [
                            /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { children: [
                              " ",
                              item.notiType
                            ] }),
                            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-xs font-normal lowercase", children: hooks(item.createdAt).fromNow() })
                          ] }),
                          /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "mt-1 text-gray-600 overflow-y-auto max-h-20", children: item.text })
                        ]
                      }
                    )
                  ]
                },
                item._id + index
              )) }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "p-3 bg-gray-50 flex justify-center", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                "button",
                {
                  onClick: () => close(),
                  className: "px-4 py-2 font-semibold text-blue-600 bg-white rounded-lg shadow-sm hover:bg-gray-100",
                  children: "Cancel"
                }
              ) })
            ] }) }) })
          }
        )
      ] }) });
    };
    const Navbar = () => {
      useSelector((state) => state.auth);
      const dispatch = useDispatch();
      return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex justify-between items-center bg-white px-4 py-3 2xl:py-4 sticky z-10 top-0", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex gap-4", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
          "button",
          {
            onClick: () => dispatch(setOpenSidebar(true)),
            className: "text-2xl text-gray-500 block md:hidden",
            children: "☰"
          }
        ) }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-2 items-center", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(NotificationPanel, {}),
          /* @__PURE__ */ jsxRuntimeExports.jsx(UserAvatar, {})
        ] })
      ] });
    };
    const linkData = [
      {
        label: "Dashboard",
        link: "dashboard",
        icon: /* @__PURE__ */ jsxRuntimeExports.jsx(MdDashboard, {})
      },
      {
        label: "Tasks",
        link: "tasks",
        icon: /* @__PURE__ */ jsxRuntimeExports.jsx(FaTasks, {})
      }
    ];
    const Sidebar = () => {
      const { user } = useSelector((state) => state.auth);
      const dispatch = useDispatch();
      const location2 = useLocation();
      const path = location2.pathname.split("/")[1];
      const sidebarLinks = (user == null ? void 0 : user.isAdmin) ? linkData : linkData.slice(0, 5);
      const closeSidebar = () => {
        dispatch(setOpenSidebar(false));
      };
      const NavLink = ({ el: el2 }) => {
        return /* @__PURE__ */ jsxRuntimeExports.jsxs(
          Link,
          {
            to: el2.link,
            onClick: closeSidebar,
            className: clsx(
              "w-full lg:w-3/4 flex gap-2 px-3 py-2 rounded-full items-center text-gray-800 text-base hover:bg-[#2564ed2d]",
              path === el2.link.split("/")[0] ? "bg-blue-700 text-neutral-100" : ""
            ),
            children: [
              el2.icon,
              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "hover:text-[#2564ed]", children: el2.label })
            ]
          }
        );
      };
      return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "w-full  h-full flex flex-col gap-6 p-5", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "flex gap-1 items-center", children: /* @__PURE__ */ jsxRuntimeExports.jsx("img", { src: "./taj.png", className: "w-40 h-30 rounded-full", alt: "TajAlfahidiImage" }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex-1 flex flex-col gap-y-5 py-8", children: sidebarLinks.map((link) => /* @__PURE__ */ jsxRuntimeExports.jsx(NavLink, { el: link }, link.label)) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("button", { className: "w-full flex gap-2 p-2 items-center text-lg text-gray-800", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(MdSettings, {}),
          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: "Settings" })
        ] }) })
      ] });
    };
    var isCheckBoxInput = (element) => element.type === "checkbox";
    var isDateObject = (value2) => value2 instanceof Date;
    var isNullOrUndefined = (value2) => value2 == null;
    const isObjectType = (value2) => typeof value2 === "object";
    var isObject$a = (value2) => !isNullOrUndefined(value2) && !Array.isArray(value2) && isObjectType(value2) && !isDateObject(value2);
    var getEventValue = (event) => isObject$a(event) && event.target ? isCheckBoxInput(event.target) ? event.target.checked : event.target.value : event;
    var getNodeParentName = (name) => name.substring(0, name.search(/\.\d+(\.|$)/)) || name;
    var isNameInFieldArray = (names, name) => names.has(getNodeParentName(name));
    var isPlainObject$4 = (tempObject) => {
      const prototypeCopy = tempObject.constructor && tempObject.constructor.prototype;
      return isObject$a(prototypeCopy) && prototypeCopy.hasOwnProperty("isPrototypeOf");
    };
    var isWeb = typeof window !== "undefined" && typeof window.HTMLElement !== "undefined" && typeof document !== "undefined";
    function cloneObject(data) {
      let copy2;
      const isArray2 = Array.isArray(data);
      if (data instanceof Date) {
        copy2 = new Date(data);
      } else if (data instanceof Set) {
        copy2 = new Set(data);
      } else if (!(isWeb && (data instanceof Blob || data instanceof FileList)) && (isArray2 || isObject$a(data))) {
        copy2 = isArray2 ? [] : {};
        if (!isArray2 && !isPlainObject$4(data)) {
          copy2 = data;
        } else {
          for (const key in data) {
            if (data.hasOwnProperty(key)) {
              copy2[key] = cloneObject(data[key]);
            }
          }
        }
      } else {
        return data;
      }
      return copy2;
    }
    var compact = (value2) => Array.isArray(value2) ? value2.filter(Boolean) : [];
    var isUndefined$1 = (val) => val === void 0;
    var get$3 = (object2, path, defaultValue2) => {
      if (!path || !isObject$a(object2)) {
        return defaultValue2;
      }
      const result = compact(path.split(/[,[\].]+?/)).reduce((result2, key) => isNullOrUndefined(result2) ? result2 : result2[key], object2);
      return isUndefined$1(result) || result === object2 ? isUndefined$1(object2[path]) ? defaultValue2 : object2[path] : result;
    };
    var isBoolean$3 = (value2) => typeof value2 === "boolean";
    const EVENTS = {
      BLUR: "blur",
      FOCUS_OUT: "focusout",
      CHANGE: "change"
    };
    const VALIDATION_MODE = {
      onBlur: "onBlur",
      onChange: "onChange",
      onSubmit: "onSubmit",
      onTouched: "onTouched",
      all: "all"
    };
    const INPUT_VALIDATION_RULES = {
      max: "max",
      min: "min",
      maxLength: "maxLength",
      minLength: "minLength",
      pattern: "pattern",
      required: "required",
      validate: "validate"
    };
    React$1.createContext(null);
    var getProxyFormState = (formState, control, localProxyFormState, isRoot = true) => {
      const result = {
        defaultValues: control._defaultValues
      };
      for (const key in formState) {
        Object.defineProperty(result, key, {
          get: () => {
            const _key = key;
            if (control._proxyFormState[_key] !== VALIDATION_MODE.all) {
              control._proxyFormState[_key] = !isRoot || VALIDATION_MODE.all;
            }
            localProxyFormState && (localProxyFormState[_key] = true);
            return formState[_key];
          }
        });
      }
      return result;
    };
    var isEmptyObject = (value2) => isObject$a(value2) && !Object.keys(value2).length;
    var shouldRenderFormState = (formStateData, _proxyFormState, updateFormState, isRoot) => {
      updateFormState(formStateData);
      const { name, ...formState } = formStateData;
      return isEmptyObject(formState) || Object.keys(formState).length >= Object.keys(_proxyFormState).length || Object.keys(formState).find((key) => _proxyFormState[key] === (!isRoot || VALIDATION_MODE.all));
    };
    var convertToArrayPayload = (value2) => Array.isArray(value2) ? value2 : [value2];
    function useSubscribe(props) {
      const _props = React$1.useRef(props);
      _props.current = props;
      React$1.useEffect(() => {
        const subscription = !props.disabled && _props.current.subject && _props.current.subject.subscribe({
          next: _props.current.next
        });
        return () => {
          subscription && subscription.unsubscribe();
        };
      }, [props.disabled]);
    }
    var isString$3 = (value2) => typeof value2 === "string";
    var generateWatchOutput = (names, _names, formValues, isGlobal, defaultValue2) => {
      if (isString$3(names)) {
        isGlobal && _names.watch.add(names);
        return get$3(formValues, names, defaultValue2);
      }
      if (Array.isArray(names)) {
        return names.map((fieldName) => (isGlobal && _names.watch.add(fieldName), get$3(formValues, fieldName)));
      }
      isGlobal && (_names.watchAll = true);
      return formValues;
    };
    var isKey$4 = (value2) => /^\w*$/.test(value2);
    var stringToPath$2 = (input) => compact(input.replace(/["|']|\]/g, "").split(/\.|\[/));
    var set = (object2, path, value2) => {
      let index = -1;
      const tempPath = isKey$4(path) ? [path] : stringToPath$2(path);
      const length = tempPath.length;
      const lastIndex = length - 1;
      while (++index < length) {
        const key = tempPath[index];
        let newValue = value2;
        if (index !== lastIndex) {
          const objValue = object2[key];
          newValue = isObject$a(objValue) || Array.isArray(objValue) ? objValue : !isNaN(+tempPath[index + 1]) ? [] : {};
        }
        object2[key] = newValue;
        object2 = object2[key];
      }
      return object2;
    };
    var appendErrors = (name, validateAllFieldCriteria, errors, type, message) => validateAllFieldCriteria ? {
      ...errors[name],
      types: {
        ...errors[name] && errors[name].types ? errors[name].types : {},
        [type]: message || true
      }
    } : {};
    var getValidationModes = (mode) => ({
      isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,
      isOnBlur: mode === VALIDATION_MODE.onBlur,
      isOnChange: mode === VALIDATION_MODE.onChange,
      isOnAll: mode === VALIDATION_MODE.all,
      isOnTouch: mode === VALIDATION_MODE.onTouched
    });
    var isWatched = (name, _names, isBlurEvent) => !isBlurEvent && (_names.watchAll || _names.watch.has(name) || [..._names.watch].some((watchName) => name.startsWith(watchName) && /^\.\w+/.test(name.slice(watchName.length))));
    const iterateFieldsByAction = (fields, action, fieldsNames, abortEarly) => {
      for (const key of fieldsNames || Object.keys(fields)) {
        const field = get$3(fields, key);
        if (field) {
          const { _f: _f2, ...currentField } = field;
          if (_f2) {
            if (_f2.refs && _f2.refs[0] && action(_f2.refs[0], key) && !abortEarly) {
              break;
            } else if (_f2.ref && action(_f2.ref, _f2.name) && !abortEarly) {
              break;
            } else {
              iterateFieldsByAction(currentField, action);
            }
          } else if (isObject$a(currentField)) {
            iterateFieldsByAction(currentField, action);
          }
        }
      }
    };
    var updateFieldArrayRootError = (errors, error2, name) => {
      const fieldArrayErrors = compact(get$3(errors, name));
      set(fieldArrayErrors, "root", error2[name]);
      set(errors, name, fieldArrayErrors);
      return errors;
    };
    var isFileInput = (element) => element.type === "file";
    var isFunction$6 = (value2) => typeof value2 === "function";
    var isHTMLElement$1 = (value2) => {
      if (!isWeb) {
        return false;
      }
      const owner = value2 ? value2.ownerDocument : 0;
      return value2 instanceof (owner && owner.defaultView ? owner.defaultView.HTMLElement : HTMLElement);
    };
    var isMessage = (value2) => isString$3(value2);
    var isRadioInput = (element) => element.type === "radio";
    var isRegex = (value2) => value2 instanceof RegExp;
    const defaultResult = {
      value: false,
      isValid: false
    };
    const validResult = { value: true, isValid: true };
    var getCheckboxValue = (options) => {
      if (Array.isArray(options)) {
        if (options.length > 1) {
          const values = options.filter((option) => option && option.checked && !option.disabled).map((option) => option.value);
          return { value: values, isValid: !!values.length };
        }
        return options[0].checked && !options[0].disabled ? (
          // @ts-expect-error expected to work in the browser
          options[0].attributes && !isUndefined$1(options[0].attributes.value) ? isUndefined$1(options[0].value) || options[0].value === "" ? validResult : { value: options[0].value, isValid: true } : validResult
        ) : defaultResult;
      }
      return defaultResult;
    };
    const defaultReturn = {
      isValid: false,
      value: null
    };
    var getRadioValue = (options) => Array.isArray(options) ? options.reduce((previous, option) => option && option.checked && !option.disabled ? {
      isValid: true,
      value: option.value
    } : previous, defaultReturn) : defaultReturn;
    function getValidateError(result, ref, type = "validate") {
      if (isMessage(result) || Array.isArray(result) && result.every(isMessage) || isBoolean$3(result) && !result) {
        return {
          type,
          message: isMessage(result) ? result : "",
          ref
        };
      }
    }
    var getValueAndMessage = (validationData) => isObject$a(validationData) && !isRegex(validationData) ? validationData : {
      value: validationData,
      message: ""
    };
    var validateField = async (field, formValues, validateAllFieldCriteria, shouldUseNativeValidation, isFieldArray) => {
      const { ref, refs, required, maxLength, minLength, min: min2, max: max2, pattern, validate, name, valueAsNumber, mount, disabled } = field._f;
      const inputValue = get$3(formValues, name);
      if (!mount || disabled) {
        return {};
      }
      const inputRef = refs ? refs[0] : ref;
      const setCustomValidity = (message) => {
        if (shouldUseNativeValidation && inputRef.reportValidity) {
          inputRef.setCustomValidity(isBoolean$3(message) ? "" : message || "");
          inputRef.reportValidity();
        }
      };
      const error2 = {};
      const isRadio = isRadioInput(ref);
      const isCheckBox = isCheckBoxInput(ref);
      const isRadioOrCheckbox2 = isRadio || isCheckBox;
      const isEmpty = (valueAsNumber || isFileInput(ref)) && isUndefined$1(ref.value) && isUndefined$1(inputValue) || isHTMLElement$1(ref) && ref.value === "" || inputValue === "" || Array.isArray(inputValue) && !inputValue.length;
      const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error2);
      const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {
        const message = exceedMax ? maxLengthMessage : minLengthMessage;
        error2[name] = {
          type: exceedMax ? maxType : minType,
          message,
          ref,
          ...appendErrorsCurry(exceedMax ? maxType : minType, message)
        };
      };
      if (isFieldArray ? !Array.isArray(inputValue) || !inputValue.length : required && (!isRadioOrCheckbox2 && (isEmpty || isNullOrUndefined(inputValue)) || isBoolean$3(inputValue) && !inputValue || isCheckBox && !getCheckboxValue(refs).isValid || isRadio && !getRadioValue(refs).isValid)) {
        const { value: value2, message } = isMessage(required) ? { value: !!required, message: required } : getValueAndMessage(required);
        if (value2) {
          error2[name] = {
            type: INPUT_VALIDATION_RULES.required,
            message,
            ref: inputRef,
            ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message)
          };
          if (!validateAllFieldCriteria) {
            setCustomValidity(message);
            return error2;
          }
        }
      }
      if (!isEmpty && (!isNullOrUndefined(min2) || !isNullOrUndefined(max2))) {
        let exceedMax;
        let exceedMin;
        const maxOutput = getValueAndMessage(max2);
        const minOutput = getValueAndMessage(min2);
        if (!isNullOrUndefined(inputValue) && !isNaN(inputValue)) {
          const valueNumber = ref.valueAsNumber || (inputValue ? +inputValue : inputValue);
          if (!isNullOrUndefined(maxOutput.value)) {
            exceedMax = valueNumber > maxOutput.value;
          }
          if (!isNullOrUndefined(minOutput.value)) {
            exceedMin = valueNumber < minOutput.value;
          }
        } else {
          const valueDate = ref.valueAsDate || new Date(inputValue);
          const convertTimeToDate = (time2) => /* @__PURE__ */ new Date((/* @__PURE__ */ new Date()).toDateString() + " " + time2);
          const isTime = ref.type == "time";
          const isWeek = ref.type == "week";
          if (isString$3(maxOutput.value) && inputValue) {
            exceedMax = isTime ? convertTimeToDate(inputValue) > convertTimeToDate(maxOutput.value) : isWeek ? inputValue > maxOutput.value : valueDate > new Date(maxOutput.value);
          }
          if (isString$3(minOutput.value) && inputValue) {
            exceedMin = isTime ? convertTimeToDate(inputValue) < convertTimeToDate(minOutput.value) : isWeek ? inputValue < minOutput.value : valueDate < new Date(minOutput.value);
          }
        }
        if (exceedMax || exceedMin) {
          getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);
          if (!validateAllFieldCriteria) {
            setCustomValidity(error2[name].message);
            return error2;
          }
        }
      }
      if ((maxLength || minLength) && !isEmpty && (isString$3(inputValue) || isFieldArray && Array.isArray(inputValue))) {
        const maxLengthOutput = getValueAndMessage(maxLength);
        const minLengthOutput = getValueAndMessage(minLength);
        const exceedMax = !isNullOrUndefined(maxLengthOutput.value) && inputValue.length > +maxLengthOutput.value;
        const exceedMin = !isNullOrUndefined(minLengthOutput.value) && inputValue.length < +minLengthOutput.value;
        if (exceedMax || exceedMin) {
          getMinMaxMessage(exceedMax, maxLengthOutput.message, minLengthOutput.message);
          if (!validateAllFieldCriteria) {
            setCustomValidity(error2[name].message);
            return error2;
          }
        }
      }
      if (pattern && !isEmpty && isString$3(inputValue)) {
        const { value: patternValue, message } = getValueAndMessage(pattern);
        if (isRegex(patternValue) && !inputValue.match(patternValue)) {
          error2[name] = {
            type: INPUT_VALIDATION_RULES.pattern,
            message,
            ref,
            ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message)
          };
          if (!validateAllFieldCriteria) {
            setCustomValidity(message);
            return error2;
          }
        }
      }
      if (validate) {
        if (isFunction$6(validate)) {
          const result = await validate(inputValue, formValues);
          const validateError = getValidateError(result, inputRef);
          if (validateError) {
            error2[name] = {
              ...validateError,
              ...appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message)
            };
            if (!validateAllFieldCriteria) {
              setCustomValidity(validateError.message);
              return error2;
            }
          }
        } else if (isObject$a(validate)) {
          let validationResult = {};
          for (const key in validate) {
            if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {
              break;
            }
            const validateError = getValidateError(await validate[key](inputValue, formValues), inputRef, key);
            if (validateError) {
              validationResult = {
                ...validateError,
                ...appendErrorsCurry(key, validateError.message)
              };
              setCustomValidity(validateError.message);
              if (validateAllFieldCriteria) {
                error2[name] = validationResult;
              }
            }
          }
          if (!isEmptyObject(validationResult)) {
            error2[name] = {
              ref: inputRef,
              ...validationResult
            };
            if (!validateAllFieldCriteria) {
              return error2;
            }
          }
        }
      }
      setCustomValidity(true);
      return error2;
    };
    function baseGet$4(object2, updatePath) {
      const length = updatePath.slice(0, -1).length;
      let index = 0;
      while (index < length) {
        object2 = isUndefined$1(object2) ? index++ : object2[updatePath[index++]];
      }
      return object2;
    }
    function isEmptyArray(obj) {
      for (const key in obj) {
        if (obj.hasOwnProperty(key) && !isUndefined$1(obj[key])) {
          return false;
        }
      }
      return true;
    }
    function unset(object2, path) {
      const paths = Array.isArray(path) ? path : isKey$4(path) ? [path] : stringToPath$2(path);
      const childObject = paths.length === 1 ? object2 : baseGet$4(object2, paths);
      const index = paths.length - 1;
      const key = paths[index];
      if (childObject) {
        delete childObject[key];
      }
      if (index !== 0 && (isObject$a(childObject) && isEmptyObject(childObject) || Array.isArray(childObject) && isEmptyArray(childObject))) {
        unset(object2, paths.slice(0, -1));
      }
      return object2;
    }
    var createSubject = () => {
      let _observers2 = [];
      const next = (value2) => {
        for (const observer of _observers2) {
          observer.next && observer.next(value2);
        }
      };
      const subscribe = (observer) => {
        _observers2.push(observer);
        return {
          unsubscribe: () => {
            _observers2 = _observers2.filter((o2) => o2 !== observer);
          }
        };
      };
      const unsubscribe = () => {
        _observers2 = [];
      };
      return {
        get observers() {
          return _observers2;
        },
        next,
        subscribe,
        unsubscribe
      };
    };
    var isPrimitive = (value2) => isNullOrUndefined(value2) || !isObjectType(value2);
    function deepEqual$1(object1, object2) {
      if (isPrimitive(object1) || isPrimitive(object2)) {
        return object1 === object2;
      }
      if (isDateObject(object1) && isDateObject(object2)) {
        return object1.getTime() === object2.getTime();
      }
      const keys1 = Object.keys(object1);
      const keys2 = Object.keys(object2);
      if (keys1.length !== keys2.length) {
        return false;
      }
      for (const key of keys1) {
        const val1 = object1[key];
        if (!keys2.includes(key)) {
          return false;
        }
        if (key !== "ref") {
          const val2 = object2[key];
          if (isDateObject(val1) && isDateObject(val2) || isObject$a(val1) && isObject$a(val2) || Array.isArray(val1) && Array.isArray(val2) ? !deepEqual$1(val1, val2) : val1 !== val2) {
            return false;
          }
        }
      }
      return true;
    }
    var isMultipleSelect = (element) => element.type === `select-multiple`;
    var isRadioOrCheckbox = (ref) => isRadioInput(ref) || isCheckBoxInput(ref);
    var live = (ref) => isHTMLElement$1(ref) && ref.isConnected;
    var objectHasFunction = (data) => {
      for (const key in data) {
        if (isFunction$6(data[key])) {
          return true;
        }
      }
      return false;
    };
    function markFieldsDirty(data, fields = {}) {
      const isParentNodeArray = Array.isArray(data);
      if (isObject$a(data) || isParentNodeArray) {
        for (const key in data) {
          if (Array.isArray(data[key]) || isObject$a(data[key]) && !objectHasFunction(data[key])) {
            fields[key] = Array.isArray(data[key]) ? [] : {};
            markFieldsDirty(data[key], fields[key]);
          } else if (!isNullOrUndefined(data[key])) {
            fields[key] = true;
          }
        }
      }
      return fields;
    }
    function getDirtyFieldsFromDefaultValues(data, formValues, dirtyFieldsFromValues) {
      const isParentNodeArray = Array.isArray(data);
      if (isObject$a(data) || isParentNodeArray) {
        for (const key in data) {
          if (Array.isArray(data[key]) || isObject$a(data[key]) && !objectHasFunction(data[key])) {
            if (isUndefined$1(formValues) || isPrimitive(dirtyFieldsFromValues[key])) {
              dirtyFieldsFromValues[key] = Array.isArray(data[key]) ? markFieldsDirty(data[key], []) : { ...markFieldsDirty(data[key]) };
            } else {
              getDirtyFieldsFromDefaultValues(data[key], isNullOrUndefined(formValues) ? {} : formValues[key], dirtyFieldsFromValues[key]);
            }
          } else {
            dirtyFieldsFromValues[key] = !deepEqual$1(data[key], formValues[key]);
          }
        }
      }
      return dirtyFieldsFromValues;
    }
    var getDirtyFields = (defaultValues, formValues) => getDirtyFieldsFromDefaultValues(defaultValues, formValues, markFieldsDirty(formValues));
    var getFieldValueAs = (value2, { valueAsNumber, valueAsDate, setValueAs }) => isUndefined$1(value2) ? value2 : valueAsNumber ? value2 === "" ? NaN : value2 ? +value2 : value2 : valueAsDate && isString$3(value2) ? new Date(value2) : setValueAs ? setValueAs(value2) : value2;
    function getFieldValue(_f2) {
      const ref = _f2.ref;
      if (_f2.refs ? _f2.refs.every((ref2) => ref2.disabled) : ref.disabled) {
        return;
      }
      if (isFileInput(ref)) {
        return ref.files;
      }
      if (isRadioInput(ref)) {
        return getRadioValue(_f2.refs).value;
      }
      if (isMultipleSelect(ref)) {
        return [...ref.selectedOptions].map(({ value: value2 }) => value2);
      }
      if (isCheckBoxInput(ref)) {
        return getCheckboxValue(_f2.refs).value;
      }
      return getFieldValueAs(isUndefined$1(ref.value) ? _f2.ref.value : ref.value, _f2);
    }
    var getResolverOptions = (fieldsNames, _fields, criteriaMode, shouldUseNativeValidation) => {
      const fields = {};
      for (const name of fieldsNames) {
        const field = get$3(_fields, name);
        field && set(fields, name, field._f);
      }
      return {
        criteriaMode,
        names: [...fieldsNames],
        fields,
        shouldUseNativeValidation
      };
    };
    var getRuleValue = (rule) => isUndefined$1(rule) ? rule : isRegex(rule) ? rule.source : isObject$a(rule) ? isRegex(rule.value) ? rule.value.source : rule.value : rule;
    var hasValidation = (options) => options.mount && (options.required || options.min || options.max || options.maxLength || options.minLength || options.pattern || options.validate);
    function schemaErrorLookup(errors, _fields, name) {
      const error2 = get$3(errors, name);
      if (error2 || isKey$4(name)) {
        return {
          error: error2,
          name
        };
      }
      const names = name.split(".");
      while (names.length) {
        const fieldName = names.join(".");
        const field = get$3(_fields, fieldName);
        const foundError = get$3(errors, fieldName);
        if (field && !Array.isArray(field) && name !== fieldName) {
          return { name };
        }
        if (foundError && foundError.type) {
          return {
            name: fieldName,
            error: foundError
          };
        }
        names.pop();
      }
      return {
        name
      };
    }
    var skipValidation = (isBlurEvent, isTouched, isSubmitted, reValidateMode, mode) => {
      if (mode.isOnAll) {
        return false;
      } else if (!isSubmitted && mode.isOnTouch) {
        return !(isTouched || isBlurEvent);
      } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {
        return !isBlurEvent;
      } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {
        return isBlurEvent;
      }
      return true;
    };
    var unsetEmptyArray = (ref, name) => !compact(get$3(ref, name)).length && unset(ref, name);
    const defaultOptions$1 = {
      mode: VALIDATION_MODE.onSubmit,
      reValidateMode: VALIDATION_MODE.onChange,
      shouldFocusError: true
    };
    function createFormControl(props = {}, flushRootRender) {
      let _options = {
        ...defaultOptions$1,
        ...props
      };
      let _formState = {
        submitCount: 0,
        isDirty: false,
        isLoading: isFunction$6(_options.defaultValues),
        isValidating: false,
        isSubmitted: false,
        isSubmitting: false,
        isSubmitSuccessful: false,
        isValid: false,
        touchedFields: {},
        dirtyFields: {},
        errors: _options.errors || {},
        disabled: _options.disabled || false
      };
      let _fields = {};
      let _defaultValues = isObject$a(_options.values) || isObject$a(_options.defaultValues) ? cloneObject(_options.values || _options.defaultValues) || {} : {};
      let _formValues = _options.shouldUnregister ? {} : cloneObject(_defaultValues);
      let _state = {
        action: false,
        mount: false,
        watch: false
      };
      let _names = {
        mount: /* @__PURE__ */ new Set(),
        unMount: /* @__PURE__ */ new Set(),
        array: /* @__PURE__ */ new Set(),
        watch: /* @__PURE__ */ new Set()
      };
      let delayErrorCallback;
      let timer = 0;
      const _proxyFormState = {
        isDirty: false,
        dirtyFields: false,
        touchedFields: false,
        isValidating: false,
        isValid: false,
        errors: false
      };
      const _subjects = {
        values: createSubject(),
        array: createSubject(),
        state: createSubject()
      };
      const validationModeBeforeSubmit = getValidationModes(_options.mode);
      const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);
      const shouldDisplayAllAssociatedErrors = _options.criteriaMode === VALIDATION_MODE.all;
      const debounce2 = (callback) => (wait) => {
        clearTimeout(timer);
        timer = setTimeout(callback, wait);
      };
      const _updateValid = async (shouldUpdateValid) => {
        if (_proxyFormState.isValid || shouldUpdateValid) {
          const isValid2 = _options.resolver ? isEmptyObject((await _executeSchema()).errors) : await executeBuiltInValidation(_fields, true);
          if (isValid2 !== _formState.isValid) {
            _subjects.state.next({
              isValid: isValid2
            });
          }
        }
      };
      const _updateIsValidating = (value2) => _proxyFormState.isValidating && _subjects.state.next({
        isValidating: value2
      });
      const _updateFieldArray = (name, values = [], method, args, shouldSetValues = true, shouldUpdateFieldsAndState = true) => {
        if (args && method) {
          _state.action = true;
          if (shouldUpdateFieldsAndState && Array.isArray(get$3(_fields, name))) {
            const fieldValues = method(get$3(_fields, name), args.argA, args.argB);
            shouldSetValues && set(_fields, name, fieldValues);
          }
          if (shouldUpdateFieldsAndState && Array.isArray(get$3(_formState.errors, name))) {
            const errors = method(get$3(_formState.errors, name), args.argA, args.argB);
            shouldSetValues && set(_formState.errors, name, errors);
            unsetEmptyArray(_formState.errors, name);
          }
          if (_proxyFormState.touchedFields && shouldUpdateFieldsAndState && Array.isArray(get$3(_formState.touchedFields, name))) {
            const touchedFields = method(get$3(_formState.touchedFields, name), args.argA, args.argB);
            shouldSetValues && set(_formState.touchedFields, name, touchedFields);
          }
          if (_proxyFormState.dirtyFields) {
            _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);
          }
          _subjects.state.next({
            name,
            isDirty: _getDirty(name, values),
            dirtyFields: _formState.dirtyFields,
            errors: _formState.errors,
            isValid: _formState.isValid
          });
        } else {
          set(_formValues, name, values);
        }
      };
      const updateErrors = (name, error2) => {
        set(_formState.errors, name, error2);
        _subjects.state.next({
          errors: _formState.errors
        });
      };
      const _setErrors = (errors) => {
        _formState.errors = errors;
        _subjects.state.next({
          errors: _formState.errors,
          isValid: false
        });
      };
      const updateValidAndValue = (name, shouldSkipSetValueAs, value2, ref) => {
        const field = get$3(_fields, name);
        if (field) {
          const defaultValue2 = get$3(_formValues, name, isUndefined$1(value2) ? get$3(_defaultValues, name) : value2);
          isUndefined$1(defaultValue2) || ref && ref.defaultChecked || shouldSkipSetValueAs ? set(_formValues, name, shouldSkipSetValueAs ? defaultValue2 : getFieldValue(field._f)) : setFieldValue(name, defaultValue2);
          _state.mount && _updateValid();
        }
      };
      const updateTouchAndDirty = (name, fieldValue, isBlurEvent, shouldDirty, shouldRender) => {
        let shouldUpdateField = false;
        let isPreviousDirty = false;
        const output = {
          name
        };
        const disabledField = !!(get$3(_fields, name) && get$3(_fields, name)._f.disabled);
        if (!isBlurEvent || shouldDirty) {
          if (_proxyFormState.isDirty) {
            isPreviousDirty = _formState.isDirty;
            _formState.isDirty = output.isDirty = _getDirty();
            shouldUpdateField = isPreviousDirty !== output.isDirty;
          }
          const isCurrentFieldPristine = disabledField || deepEqual$1(get$3(_defaultValues, name), fieldValue);
          isPreviousDirty = !!(!disabledField && get$3(_formState.dirtyFields, name));
          isCurrentFieldPristine || disabledField ? unset(_formState.dirtyFields, name) : set(_formState.dirtyFields, name, true);
          output.dirtyFields = _formState.dirtyFields;
          shouldUpdateField = shouldUpdateField || _proxyFormState.dirtyFields && isPreviousDirty !== !isCurrentFieldPristine;
        }
        if (isBlurEvent) {
          const isPreviousFieldTouched = get$3(_formState.touchedFields, name);
          if (!isPreviousFieldTouched) {
            set(_formState.touchedFields, name, isBlurEvent);
            output.touchedFields = _formState.touchedFields;
            shouldUpdateField = shouldUpdateField || _proxyFormState.touchedFields && isPreviousFieldTouched !== isBlurEvent;
          }
        }
        shouldUpdateField && shouldRender && _subjects.state.next(output);
        return shouldUpdateField ? output : {};
      };
      const shouldRenderByError = (name, isValid2, error2, fieldState) => {
        const previousFieldError = get$3(_formState.errors, name);
        const shouldUpdateValid = _proxyFormState.isValid && isBoolean$3(isValid2) && _formState.isValid !== isValid2;
        if (props.delayError && error2) {
          delayErrorCallback = debounce2(() => updateErrors(name, error2));
          delayErrorCallback(props.delayError);
        } else {
          clearTimeout(timer);
          delayErrorCallback = null;
          error2 ? set(_formState.errors, name, error2) : unset(_formState.errors, name);
        }
        if ((error2 ? !deepEqual$1(previousFieldError, error2) : previousFieldError) || !isEmptyObject(fieldState) || shouldUpdateValid) {
          const updatedFormState = {
            ...fieldState,
            ...shouldUpdateValid && isBoolean$3(isValid2) ? { isValid: isValid2 } : {},
            errors: _formState.errors,
            name
          };
          _formState = {
            ..._formState,
            ...updatedFormState
          };
          _subjects.state.next(updatedFormState);
        }
        _updateIsValidating(false);
      };
      const _executeSchema = async (name) => _options.resolver(_formValues, _options.context, getResolverOptions(name || _names.mount, _fields, _options.criteriaMode, _options.shouldUseNativeValidation));
      const executeSchemaAndUpdateState = async (names) => {
        const { errors } = await _executeSchema(names);
        if (names) {
          for (const name of names) {
            const error2 = get$3(errors, name);
            error2 ? set(_formState.errors, name, error2) : unset(_formState.errors, name);
          }
        } else {
          _formState.errors = errors;
        }
        return errors;
      };
      const executeBuiltInValidation = async (fields, shouldOnlyCheckValid, context = {
        valid: true
      }) => {
        for (const name in fields) {
          const field = fields[name];
          if (field) {
            const { _f: _f2, ...fieldValue } = field;
            if (_f2) {
              const isFieldArrayRoot = _names.array.has(_f2.name);
              const fieldError = await validateField(field, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation && !shouldOnlyCheckValid, isFieldArrayRoot);
              if (fieldError[_f2.name]) {
                context.valid = false;
                if (shouldOnlyCheckValid) {
                  break;
                }
              }
              !shouldOnlyCheckValid && (get$3(fieldError, _f2.name) ? isFieldArrayRoot ? updateFieldArrayRootError(_formState.errors, fieldError, _f2.name) : set(_formState.errors, _f2.name, fieldError[_f2.name]) : unset(_formState.errors, _f2.name));
            }
            fieldValue && await executeBuiltInValidation(fieldValue, shouldOnlyCheckValid, context);
          }
        }
        return context.valid;
      };
      const _removeUnmounted = () => {
        for (const name of _names.unMount) {
          const field = get$3(_fields, name);
          field && (field._f.refs ? field._f.refs.every((ref) => !live(ref)) : !live(field._f.ref)) && unregister(name);
        }
        _names.unMount = /* @__PURE__ */ new Set();
      };
      const _getDirty = (name, data) => (name && data && set(_formValues, name, data), !deepEqual$1(getValues(), _defaultValues));
      const _getWatch = (names, defaultValue2, isGlobal) => generateWatchOutput(names, _names, {
        ..._state.mount ? _formValues : isUndefined$1(defaultValue2) ? _defaultValues : isString$3(names) ? { [names]: defaultValue2 } : defaultValue2
      }, isGlobal, defaultValue2);
      const _getFieldArray = (name) => compact(get$3(_state.mount ? _formValues : _defaultValues, name, props.shouldUnregister ? get$3(_defaultValues, name, []) : []));
      const setFieldValue = (name, value2, options = {}) => {
        const field = get$3(_fields, name);
        let fieldValue = value2;
        if (field) {
          const fieldReference = field._f;
          if (fieldReference) {
            !fieldReference.disabled && set(_formValues, name, getFieldValueAs(value2, fieldReference));
            fieldValue = isHTMLElement$1(fieldReference.ref) && isNullOrUndefined(value2) ? "" : value2;
            if (isMultipleSelect(fieldReference.ref)) {
              [...fieldReference.ref.options].forEach((optionRef) => optionRef.selected = fieldValue.includes(optionRef.value));
            } else if (fieldReference.refs) {
              if (isCheckBoxInput(fieldReference.ref)) {
                fieldReference.refs.length > 1 ? fieldReference.refs.forEach((checkboxRef) => (!checkboxRef.defaultChecked || !checkboxRef.disabled) && (checkboxRef.checked = Array.isArray(fieldValue) ? !!fieldValue.find((data) => data === checkboxRef.value) : fieldValue === checkboxRef.value)) : fieldReference.refs[0] && (fieldReference.refs[0].checked = !!fieldValue);
              } else {
                fieldReference.refs.forEach((radioRef) => radioRef.checked = radioRef.value === fieldValue);
              }
            } else if (isFileInput(fieldReference.ref)) {
              fieldReference.ref.value = "";
            } else {
              fieldReference.ref.value = fieldValue;
              if (!fieldReference.ref.type) {
                _subjects.values.next({
                  name,
                  values: { ..._formValues }
                });
              }
            }
          }
        }
        (options.shouldDirty || options.shouldTouch) && updateTouchAndDirty(name, fieldValue, options.shouldTouch, options.shouldDirty, true);
        options.shouldValidate && trigger(name);
      };
      const setValues = (name, value2, options) => {
        for (const fieldKey in value2) {
          const fieldValue = value2[fieldKey];
          const fieldName = `${name}.${fieldKey}`;
          const field = get$3(_fields, fieldName);
          (_names.array.has(name) || !isPrimitive(fieldValue) || field && !field._f) && !isDateObject(fieldValue) ? setValues(fieldName, fieldValue, options) : setFieldValue(fieldName, fieldValue, options);
        }
      };
      const setValue = (name, value2, options = {}) => {
        const field = get$3(_fields, name);
        const isFieldArray = _names.array.has(name);
        const cloneValue = cloneObject(value2);
        set(_formValues, name, cloneValue);
        if (isFieldArray) {
          _subjects.array.next({
            name,
            values: { ..._formValues }
          });
          if ((_proxyFormState.isDirty || _proxyFormState.dirtyFields) && options.shouldDirty) {
            _subjects.state.next({
              name,
              dirtyFields: getDirtyFields(_defaultValues, _formValues),
              isDirty: _getDirty(name, cloneValue)
            });
          }
        } else {
          field && !field._f && !isNullOrUndefined(cloneValue) ? setValues(name, cloneValue, options) : setFieldValue(name, cloneValue, options);
        }
        isWatched(name, _names) && _subjects.state.next({ ..._formState });
        _subjects.values.next({
          name,
          values: { ..._formValues }
        });
        !_state.mount && flushRootRender();
      };
      const onChange = async (event) => {
        const target = event.target;
        let name = target.name;
        let isFieldValueUpdated = true;
        const field = get$3(_fields, name);
        const getCurrentFieldValue = () => target.type ? getFieldValue(field._f) : getEventValue(event);
        const _updateIsFieldValueUpdated = (fieldValue) => {
          isFieldValueUpdated = Number.isNaN(fieldValue) || fieldValue === get$3(_formValues, name, fieldValue);
        };
        if (field) {
          let error2;
          let isValid2;
          const fieldValue = getCurrentFieldValue();
          const isBlurEvent = event.type === EVENTS.BLUR || event.type === EVENTS.FOCUS_OUT;
          const shouldSkipValidation = !hasValidation(field._f) && !_options.resolver && !get$3(_formState.errors, name) && !field._f.deps || skipValidation(isBlurEvent, get$3(_formState.touchedFields, name), _formState.isSubmitted, validationModeAfterSubmit, validationModeBeforeSubmit);
          const watched = isWatched(name, _names, isBlurEvent);
          set(_formValues, name, fieldValue);
          if (isBlurEvent) {
            field._f.onBlur && field._f.onBlur(event);
            delayErrorCallback && delayErrorCallback(0);
          } else if (field._f.onChange) {
            field._f.onChange(event);
          }
          const fieldState = updateTouchAndDirty(name, fieldValue, isBlurEvent, false);
          const shouldRender = !isEmptyObject(fieldState) || watched;
          !isBlurEvent && _subjects.values.next({
            name,
            type: event.type,
            values: { ..._formValues }
          });
          if (shouldSkipValidation) {
            _proxyFormState.isValid && _updateValid();
            return shouldRender && _subjects.state.next({ name, ...watched ? {} : fieldState });
          }
          !isBlurEvent && watched && _subjects.state.next({ ..._formState });
          _updateIsValidating(true);
          if (_options.resolver) {
            const { errors } = await _executeSchema([name]);
            _updateIsFieldValueUpdated(fieldValue);
            if (isFieldValueUpdated) {
              const previousErrorLookupResult = schemaErrorLookup(_formState.errors, _fields, name);
              const errorLookupResult = schemaErrorLookup(errors, _fields, previousErrorLookupResult.name || name);
              error2 = errorLookupResult.error;
              name = errorLookupResult.name;
              isValid2 = isEmptyObject(errors);
            }
          } else {
            error2 = (await validateField(field, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation))[name];
            _updateIsFieldValueUpdated(fieldValue);
            if (isFieldValueUpdated) {
              if (error2) {
                isValid2 = false;
              } else if (_proxyFormState.isValid) {
                isValid2 = await executeBuiltInValidation(_fields, true);
              }
            }
          }
          if (isFieldValueUpdated) {
            field._f.deps && trigger(field._f.deps);
            shouldRenderByError(name, isValid2, error2, fieldState);
          }
        }
      };
      const _focusInput = (ref, key) => {
        if (get$3(_formState.errors, key) && ref.focus) {
          ref.focus();
          return 1;
        }
        return;
      };
      const trigger = async (name, options = {}) => {
        let isValid2;
        let validationResult;
        const fieldNames = convertToArrayPayload(name);
        _updateIsValidating(true);
        if (_options.resolver) {
          const errors = await executeSchemaAndUpdateState(isUndefined$1(name) ? name : fieldNames);
          isValid2 = isEmptyObject(errors);
          validationResult = name ? !fieldNames.some((name2) => get$3(errors, name2)) : isValid2;
        } else if (name) {
          validationResult = (await Promise.all(fieldNames.map(async (fieldName) => {
            const field = get$3(_fields, fieldName);
            return await executeBuiltInValidation(field && field._f ? { [fieldName]: field } : field);
          }))).every(Boolean);
          !(!validationResult && !_formState.isValid) && _updateValid();
        } else {
          validationResult = isValid2 = await executeBuiltInValidation(_fields);
        }
        _subjects.state.next({
          ...!isString$3(name) || _proxyFormState.isValid && isValid2 !== _formState.isValid ? {} : { name },
          ..._options.resolver || !name ? { isValid: isValid2 } : {},
          errors: _formState.errors,
          isValidating: false
        });
        options.shouldFocus && !validationResult && iterateFieldsByAction(_fields, _focusInput, name ? fieldNames : _names.mount);
        return validationResult;
      };
      const getValues = (fieldNames) => {
        const values = {
          ..._defaultValues,
          ..._state.mount ? _formValues : {}
        };
        return isUndefined$1(fieldNames) ? values : isString$3(fieldNames) ? get$3(values, fieldNames) : fieldNames.map((name) => get$3(values, name));
      };
      const getFieldState = (name, formState) => ({
        invalid: !!get$3((formState || _formState).errors, name),
        isDirty: !!get$3((formState || _formState).dirtyFields, name),
        isTouched: !!get$3((formState || _formState).touchedFields, name),
        error: get$3((formState || _formState).errors, name)
      });
      const clearErrors = (name) => {
        name && convertToArrayPayload(name).forEach((inputName) => unset(_formState.errors, inputName));
        _subjects.state.next({
          errors: name ? _formState.errors : {}
        });
      };
      const setError = (name, error2, options) => {
        const ref = (get$3(_fields, name, { _f: {} })._f || {}).ref;
        set(_formState.errors, name, {
          ...error2,
          ref
        });
        _subjects.state.next({
          name,
          errors: _formState.errors,
          isValid: false
        });
        options && options.shouldFocus && ref && ref.focus && ref.focus();
      };
      const watch = (name, defaultValue2) => isFunction$6(name) ? _subjects.values.subscribe({
        next: (payload) => name(_getWatch(void 0, defaultValue2), payload)
      }) : _getWatch(name, defaultValue2, true);
      const unregister = (name, options = {}) => {
        for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {
          _names.mount.delete(fieldName);
          _names.array.delete(fieldName);
          if (!options.keepValue) {
            unset(_fields, fieldName);
            unset(_formValues, fieldName);
          }
          !options.keepError && unset(_formState.errors, fieldName);
          !options.keepDirty && unset(_formState.dirtyFields, fieldName);
          !options.keepTouched && unset(_formState.touchedFields, fieldName);
          !_options.shouldUnregister && !options.keepDefaultValue && unset(_defaultValues, fieldName);
        }
        _subjects.values.next({
          values: { ..._formValues }
        });
        _subjects.state.next({
          ..._formState,
          ...!options.keepDirty ? {} : { isDirty: _getDirty() }
        });
        !options.keepIsValid && _updateValid();
      };
      const _updateDisabledField = ({ disabled, name, field, fields, value: value2 }) => {
        if (isBoolean$3(disabled)) {
          const inputValue = disabled ? void 0 : isUndefined$1(value2) ? getFieldValue(field ? field._f : get$3(fields, name)._f) : value2;
          set(_formValues, name, inputValue);
          updateTouchAndDirty(name, inputValue, false, false, true);
        }
      };
      const register = (name, options = {}) => {
        let field = get$3(_fields, name);
        const disabledIsDefined = isBoolean$3(options.disabled);
        set(_fields, name, {
          ...field || {},
          _f: {
            ...field && field._f ? field._f : { ref: { name } },
            name,
            mount: true,
            ...options
          }
        });
        _names.mount.add(name);
        if (field) {
          _updateDisabledField({
            field,
            disabled: options.disabled,
            name,
            value: options.value
          });
        } else {
          updateValidAndValue(name, true, options.value);
        }
        return {
          ...disabledIsDefined ? { disabled: options.disabled } : {},
          ..._options.progressive ? {
            required: !!options.required,
            min: getRuleValue(options.min),
            max: getRuleValue(options.max),
            minLength: getRuleValue(options.minLength),
            maxLength: getRuleValue(options.maxLength),
            pattern: getRuleValue(options.pattern)
          } : {},
          name,
          onChange,
          onBlur: onChange,
          ref: (ref) => {
            if (ref) {
              register(name, options);
              field = get$3(_fields, name);
              const fieldRef = isUndefined$1(ref.value) ? ref.querySelectorAll ? ref.querySelectorAll("input,select,textarea")[0] || ref : ref : ref;
              const radioOrCheckbox = isRadioOrCheckbox(fieldRef);
              const refs = field._f.refs || [];
              if (radioOrCheckbox ? refs.find((option) => option === fieldRef) : fieldRef === field._f.ref) {
                return;
              }
              set(_fields, name, {
                _f: {
                  ...field._f,
                  ...radioOrCheckbox ? {
                    refs: [
                      ...refs.filter(live),
                      fieldRef,
                      ...Array.isArray(get$3(_defaultValues, name)) ? [{}] : []
                    ],
                    ref: { type: fieldRef.type, name }
                  } : { ref: fieldRef }
                }
              });
              updateValidAndValue(name, false, void 0, fieldRef);
            } else {
              field = get$3(_fields, name, {});
              if (field._f) {
                field._f.mount = false;
              }
              (_options.shouldUnregister || options.shouldUnregister) && !(isNameInFieldArray(_names.array, name) && _state.action) && _names.unMount.add(name);
            }
          }
        };
      };
      const _focusError = () => _options.shouldFocusError && iterateFieldsByAction(_fields, _focusInput, _names.mount);
      const _disableForm = (disabled) => {
        if (isBoolean$3(disabled)) {
          _subjects.state.next({ disabled });
          iterateFieldsByAction(_fields, (ref, name) => {
            let requiredDisabledState = disabled;
            const currentField = get$3(_fields, name);
            if (currentField && isBoolean$3(currentField._f.disabled)) {
              requiredDisabledState || (requiredDisabledState = currentField._f.disabled);
            }
            ref.disabled = requiredDisabledState;
          }, 0, false);
        }
      };
      const handleSubmit = (onValid, onInvalid) => async (e3) => {
        let onValidError = void 0;
        if (e3) {
          e3.preventDefault && e3.preventDefault();
          e3.persist && e3.persist();
        }
        let fieldValues = cloneObject(_formValues);
        _subjects.state.next({
          isSubmitting: true
        });
        if (_options.resolver) {
          const { errors, values } = await _executeSchema();
          _formState.errors = errors;
          fieldValues = values;
        } else {
          await executeBuiltInValidation(_fields);
        }
        unset(_formState.errors, "root");
        if (isEmptyObject(_formState.errors)) {
          _subjects.state.next({
            errors: {}
          });
          try {
            await onValid(fieldValues, e3);
          } catch (error2) {
            onValidError = error2;
          }
        } else {
          if (onInvalid) {
            await onInvalid({ ..._formState.errors }, e3);
          }
          _focusError();
          setTimeout(_focusError);
        }
        _subjects.state.next({
          isSubmitted: true,
          isSubmitting: false,
          isSubmitSuccessful: isEmptyObject(_formState.errors) && !onValidError,
          submitCount: _formState.submitCount + 1,
          errors: _formState.errors
        });
        if (onValidError) {
          throw onValidError;
        }
      };
      const resetField = (name, options = {}) => {
        if (get$3(_fields, name)) {
          if (isUndefined$1(options.defaultValue)) {
            setValue(name, cloneObject(get$3(_defaultValues, name)));
          } else {
            setValue(name, options.defaultValue);
            set(_defaultValues, name, cloneObject(options.defaultValue));
          }
          if (!options.keepTouched) {
            unset(_formState.touchedFields, name);
          }
          if (!options.keepDirty) {
            unset(_formState.dirtyFields, name);
            _formState.isDirty = options.defaultValue ? _getDirty(name, cloneObject(get$3(_defaultValues, name))) : _getDirty();
          }
          if (!options.keepError) {
            unset(_formState.errors, name);
            _proxyFormState.isValid && _updateValid();
          }
          _subjects.state.next({ ..._formState });
        }
      };
      const _reset = (formValues, keepStateOptions = {}) => {
        const updatedValues = formValues ? cloneObject(formValues) : _defaultValues;
        const cloneUpdatedValues = cloneObject(updatedValues);
        const values = formValues && !isEmptyObject(formValues) ? cloneUpdatedValues : _defaultValues;
        if (!keepStateOptions.keepDefaultValues) {
          _defaultValues = updatedValues;
        }
        if (!keepStateOptions.keepValues) {
          if (keepStateOptions.keepDirtyValues) {
            for (const fieldName of _names.mount) {
              get$3(_formState.dirtyFields, fieldName) ? set(values, fieldName, get$3(_formValues, fieldName)) : setValue(fieldName, get$3(values, fieldName));
            }
          } else {
            if (isWeb && isUndefined$1(formValues)) {
              for (const name of _names.mount) {
                const field = get$3(_fields, name);
                if (field && field._f) {
                  const fieldReference = Array.isArray(field._f.refs) ? field._f.refs[0] : field._f.ref;
                  if (isHTMLElement$1(fieldReference)) {
                    const form = fieldReference.closest("form");
                    if (form) {
                      form.reset();
                      break;
                    }
                  }
                }
              }
            }
            _fields = {};
          }
          _formValues = props.shouldUnregister ? keepStateOptions.keepDefaultValues ? cloneObject(_defaultValues) : {} : cloneObject(values);
          _subjects.array.next({
            values: { ...values }
          });
          _subjects.values.next({
            values: { ...values }
          });
        }
        _names = {
          mount: /* @__PURE__ */ new Set(),
          unMount: /* @__PURE__ */ new Set(),
          array: /* @__PURE__ */ new Set(),
          watch: /* @__PURE__ */ new Set(),
          watchAll: false,
          focus: ""
        };
        !_state.mount && flushRootRender();
        _state.mount = !_proxyFormState.isValid || !!keepStateOptions.keepIsValid || !!keepStateOptions.keepDirtyValues;
        _state.watch = !!props.shouldUnregister;
        _subjects.state.next({
          submitCount: keepStateOptions.keepSubmitCount ? _formState.submitCount : 0,
          isDirty: keepStateOptions.keepDirty ? _formState.isDirty : !!(keepStateOptions.keepDefaultValues && !deepEqual$1(formValues, _defaultValues)),
          isSubmitted: keepStateOptions.keepIsSubmitted ? _formState.isSubmitted : false,
          dirtyFields: keepStateOptions.keepDirtyValues ? keepStateOptions.keepDefaultValues && _formValues ? getDirtyFields(_defaultValues, _formValues) : _formState.dirtyFields : keepStateOptions.keepDefaultValues && formValues ? getDirtyFields(_defaultValues, formValues) : {},
          touchedFields: keepStateOptions.keepTouched ? _formState.touchedFields : {},
          errors: keepStateOptions.keepErrors ? _formState.errors : {},
          isSubmitSuccessful: keepStateOptions.keepIsSubmitSuccessful ? _formState.isSubmitSuccessful : false,
          isSubmitting: false
        });
      };
      const reset = (formValues, keepStateOptions) => _reset(isFunction$6(formValues) ? formValues(_formValues) : formValues, keepStateOptions);
      const setFocus = (name, options = {}) => {
        const field = get$3(_fields, name);
        const fieldReference = field && field._f;
        if (fieldReference) {
          const fieldRef = fieldReference.refs ? fieldReference.refs[0] : fieldReference.ref;
          if (fieldRef.focus) {
            fieldRef.focus();
            options.shouldSelect && fieldRef.select();
          }
        }
      };
      const _updateFormState = (updatedFormState) => {
        _formState = {
          ..._formState,
          ...updatedFormState
        };
      };
      const _resetDefaultValues = () => isFunction$6(_options.defaultValues) && _options.defaultValues().then((values) => {
        reset(values, _options.resetOptions);
        _subjects.state.next({
          isLoading: false
        });
      });
      return {
        control: {
          register,
          unregister,
          getFieldState,
          handleSubmit,
          setError,
          _executeSchema,
          _getWatch,
          _getDirty,
          _updateValid,
          _removeUnmounted,
          _updateFieldArray,
          _updateDisabledField,
          _getFieldArray,
          _reset,
          _resetDefaultValues,
          _updateFormState,
          _disableForm,
          _subjects,
          _proxyFormState,
          _setErrors,
          get _fields() {
            return _fields;
          },
          get _formValues() {
            return _formValues;
          },
          get _state() {
            return _state;
          },
          set _state(value2) {
            _state = value2;
          },
          get _defaultValues() {
            return _defaultValues;
          },
          get _names() {
            return _names;
          },
          set _names(value2) {
            _names = value2;
          },
          get _formState() {
            return _formState;
          },
          set _formState(value2) {
            _formState = value2;
          },
          get _options() {
            return _options;
          },
          set _options(value2) {
            _options = {
              ..._options,
              ...value2
            };
          }
        },
        trigger,
        register,
        handleSubmit,
        watch,
        setValue,
        getValues,
        reset,
        resetField,
        clearErrors,
        unregister,
        setError,
        setFocus,
        getFieldState
      };
    }
    function useForm(props = {}) {
      const _formControl = React$1.useRef();
      const _values = React$1.useRef();
      const [formState, updateFormState] = React$1.useState({
        isDirty: false,
        isValidating: false,
        isLoading: isFunction$6(props.defaultValues),
        isSubmitted: false,
        isSubmitting: false,
        isSubmitSuccessful: false,
        isValid: false,
        submitCount: 0,
        dirtyFields: {},
        touchedFields: {},
        errors: props.errors || {},
        disabled: props.disabled || false,
        defaultValues: isFunction$6(props.defaultValues) ? void 0 : props.defaultValues
      });
      if (!_formControl.current) {
        _formControl.current = {
          ...createFormControl(props, () => updateFormState((formState2) => ({ ...formState2 }))),
          formState
        };
      }
      const control = _formControl.current.control;
      control._options = props;
      useSubscribe({
        subject: control._subjects.state,
        next: (value2) => {
          if (shouldRenderFormState(value2, control._proxyFormState, control._updateFormState, true)) {
            updateFormState({ ...control._formState });
          }
        }
      });
      React$1.useEffect(() => control._disableForm(props.disabled), [control, props.disabled]);
      React$1.useEffect(() => {
        if (control._proxyFormState.isDirty) {
          const isDirty = control._getDirty();
          if (isDirty !== formState.isDirty) {
            control._subjects.state.next({
              isDirty
            });
          }
        }
      }, [control, formState.isDirty]);
      React$1.useEffect(() => {
        if (props.values && !deepEqual$1(props.values, _values.current)) {
          control._reset(props.values, control._options.resetOptions);
          _values.current = props.values;
          updateFormState((state) => ({ ...state }));
        } else {
          control._resetDefaultValues();
        }
      }, [props.values, control]);
      React$1.useEffect(() => {
        if (props.errors) {
          control._setErrors(props.errors);
        }
      }, [props.errors, control]);
      React$1.useEffect(() => {
        if (!control._state.mount) {
          control._updateValid();
          control._state.mount = true;
        }
        if (control._state.watch) {
          control._state.watch = false;
          control._subjects.state.next({ ...control._formState });
        }
        control._removeUnmounted();
      });
      React$1.useEffect(() => {
        props.shouldUnregister && control._subjects.values.next({
          values: control._getWatch()
        });
      }, [props.shouldUnregister, control]);
      _formControl.current.formState = getProxyFormState(formState, control);
      return _formControl.current;
    }
    const Textbox = React$1.forwardRef(
      ({ type, placeholder, label, className, register, name, error: error2 }, ref) => {
        return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "w-full flex flex-col gap-1", children: [
          label && /* @__PURE__ */ jsxRuntimeExports.jsx("label", { htmlFor: name, className: "text-slate-800", children: label }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { children: /* @__PURE__ */ jsxRuntimeExports.jsx(
            "input",
            {
              type,
              name,
              placeholder,
              ref,
              ...register,
              "aria-invalid": error2 ? "true" : "false",
              className: clsx(
                "bg-transparent px-3 py-2.5 2xl:py-3 border border-gray-300 placeholder-gray-400 text-gray-900 outline-none text-base focus:ring-2 ring-blue-300",
                className
              )
            }
          ) }),
          error2 && /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-xs text-[#f64949fe] mt-0.5 ", children: error2 })
        ] });
      }
    );
    const Button = ({ icon, className, label, type, onClick = () => {
    } }) => {
      return /* @__PURE__ */ jsxRuntimeExports.jsxs(
        "button",
        {
          type: type || "button",
          className: clsx("px-3 py-2 outline-none", className),
          onClick,
          children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: label }),
            icon && icon
          ]
        }
      );
    };
    var Subscribable = class {
      constructor() {
        this.listeners = /* @__PURE__ */ new Set();
        this.subscribe = this.subscribe.bind(this);
      }
      subscribe(listener) {
        this.listeners.add(listener);
        this.onSubscribe();
        return () => {
          this.listeners.delete(listener);
          this.onUnsubscribe();
        };
      }
      hasListeners() {
        return this.listeners.size > 0;
      }
      onSubscribe() {
      }
      onUnsubscribe() {
      }
    };
    var isServer = typeof window === "undefined" || "Deno" in globalThis;
    function noop$6() {
    }
    function functionalUpdate(updater, input) {
      return typeof updater === "function" ? updater(input) : updater;
    }
    function isValidTimeout(value2) {
      return typeof value2 === "number" && value2 >= 0 && value2 !== Infinity;
    }
    function timeUntilStale(updatedAt, staleTime) {
      return Math.max(updatedAt + (staleTime || 0) - Date.now(), 0);
    }
    function resolveStaleTime(staleTime, query) {
      return typeof staleTime === "function" ? staleTime(query) : staleTime;
    }
    function resolveEnabled(enabled, query) {
      return typeof enabled === "function" ? enabled(query) : enabled;
    }
    function matchQuery(filters, query) {
      const {
        type = "all",
        exact,
        fetchStatus,
        predicate,
        queryKey: queryKey2,
        stale
      } = filters;
      if (queryKey2) {
        if (exact) {
          if (query.queryHash !== hashQueryKeyByOptions(queryKey2, query.options)) {
            return false;
          }
        } else if (!partialMatchKey(query.queryKey, queryKey2)) {
          return false;
        }
      }
      if (type !== "all") {
        const isActive = query.isActive();
        if (type === "active" && !isActive) {
          return false;
        }
        if (type === "inactive" && isActive) {
          return false;
        }
      }
      if (typeof stale === "boolean" && query.isStale() !== stale) {
        return false;
      }
      if (fetchStatus && fetchStatus !== query.state.fetchStatus) {
        return false;
      }
      if (predicate && !predicate(query)) {
        return false;
      }
      return true;
    }
    function matchMutation(filters, mutation) {
      const { exact, status, predicate, mutationKey } = filters;
      if (mutationKey) {
        if (!mutation.options.mutationKey) {
          return false;
        }
        if (exact) {
          if (hashKey(mutation.options.mutationKey) !== hashKey(mutationKey)) {
            return false;
          }
        } else if (!partialMatchKey(mutation.options.mutationKey, mutationKey)) {
          return false;
        }
      }
      if (status && mutation.state.status !== status) {
        return false;
      }
      if (predicate && !predicate(mutation)) {
        return false;
      }
      return true;
    }
    function hashQueryKeyByOptions(queryKey2, options) {
      const hashFn = (options == null ? void 0 : options.queryKeyHashFn) || hashKey;
      return hashFn(queryKey2);
    }
    function hashKey(queryKey2) {
      return JSON.stringify(
        queryKey2,
        (_2, val) => isPlainObject$3(val) ? Object.keys(val).sort().reduce((result, key) => {
          result[key] = val[key];
          return result;
        }, {}) : val
      );
    }
    function partialMatchKey(a2, b2) {
      if (a2 === b2) {
        return true;
      }
      if (typeof a2 !== typeof b2) {
        return false;
      }
      if (a2 && b2 && typeof a2 === "object" && typeof b2 === "object") {
        return !Object.keys(b2).some((key) => !partialMatchKey(a2[key], b2[key]));
      }
      return false;
    }
    function replaceEqualDeep(a2, b2) {
      if (a2 === b2) {
        return a2;
      }
      const array2 = isPlainArray(a2) && isPlainArray(b2);
      if (array2 || isPlainObject$3(a2) && isPlainObject$3(b2)) {
        const aItems = array2 ? a2 : Object.keys(a2);
        const aSize = aItems.length;
        const bItems = array2 ? b2 : Object.keys(b2);
        const bSize = bItems.length;
        const copy2 = array2 ? [] : {};
        let equalItems = 0;
        for (let i2 = 0; i2 < bSize; i2++) {
          const key = array2 ? i2 : bItems[i2];
          if ((!array2 && aItems.includes(key) || array2) && a2[key] === void 0 && b2[key] === void 0) {
            copy2[key] = void 0;
            equalItems++;
          } else {
            copy2[key] = replaceEqualDeep(a2[key], b2[key]);
            if (copy2[key] === a2[key] && a2[key] !== void 0) {
              equalItems++;
            }
          }
        }
        return aSize === bSize && equalItems === aSize ? a2 : copy2;
      }
      return b2;
    }
    function shallowEqualObjects(a2, b2) {
      if (!b2 || Object.keys(a2).length !== Object.keys(b2).length) {
        return false;
      }
      for (const key in a2) {
        if (a2[key] !== b2[key]) {
          return false;
        }
      }
      return true;
    }
    function isPlainArray(value2) {
      return Array.isArray(value2) && value2.length === Object.keys(value2).length;
    }
    function isPlainObject$3(o2) {
      if (!hasObjectPrototype(o2)) {
        return false;
      }
      const ctor = o2.constructor;
      if (ctor === void 0) {
        return true;
      }
      const prot = ctor.prototype;
      if (!hasObjectPrototype(prot)) {
        return false;
      }
      if (!prot.hasOwnProperty("isPrototypeOf")) {
        return false;
      }
      if (Object.getPrototypeOf(o2) !== Object.prototype) {
        return false;
      }
      return true;
    }
    function hasObjectPrototype(o2) {
      return Object.prototype.toString.call(o2) === "[object Object]";
    }
    function sleep(timeout) {
      return new Promise((resolve) => {
        setTimeout(resolve, timeout);
      });
    }
    function replaceData(prevData, data, options) {
      if (typeof options.structuralSharing === "function") {
        return options.structuralSharing(prevData, data);
      } else if (options.structuralSharing !== false) {
        return replaceEqualDeep(prevData, data);
      }
      return data;
    }
    function addToEnd(items, item, max2 = 0) {
      const newItems = [...items, item];
      return max2 && newItems.length > max2 ? newItems.slice(1) : newItems;
    }
    function addToStart(items, item, max2 = 0) {
      const newItems = [item, ...items];
      return max2 && newItems.length > max2 ? newItems.slice(0, -1) : newItems;
    }
    var skipToken$1 = Symbol();
    function ensureQueryFn(options, fetchOptions) {
      if (!options.queryFn && (fetchOptions == null ? void 0 : fetchOptions.initialPromise)) {
        return () => fetchOptions.initialPromise;
      }
      if (!options.queryFn || options.queryFn === skipToken$1) {
        return () => Promise.reject(new Error(`Missing queryFn: '${options.queryHash}'`));
      }
      return options.queryFn;
    }
    var FocusManager = (_a = class extends Subscribable {
      constructor() {
        super();
        __privateAdd(this, _focused, void 0);
        __privateAdd(this, _cleanup, void 0);
        __privateAdd(this, _setup, void 0);
        __privateSet(this, _setup, (onFocus2) => {
          if (!isServer && window.addEventListener) {
            const listener = () => onFocus2();
            window.addEventListener("visibilitychange", listener, false);
            return () => {
              window.removeEventListener("visibilitychange", listener);
            };
          }
          return;
        });
      }
      onSubscribe() {
        if (!__privateGet(this, _cleanup)) {
          this.setEventListener(__privateGet(this, _setup));
        }
      }
      onUnsubscribe() {
        var _a2;
        if (!this.hasListeners()) {
          (_a2 = __privateGet(this, _cleanup)) == null ? void 0 : _a2.call(this);
          __privateSet(this, _cleanup, void 0);
        }
      }
      setEventListener(setup) {
        var _a2;
        __privateSet(this, _setup, setup);
        (_a2 = __privateGet(this, _cleanup)) == null ? void 0 : _a2.call(this);
        __privateSet(this, _cleanup, setup((focused) => {
          if (typeof focused === "boolean") {
            this.setFocused(focused);
          } else {
            this.onFocus();
          }
        }));
      }
      setFocused(focused) {
        const changed = __privateGet(this, _focused) !== focused;
        if (changed) {
          __privateSet(this, _focused, focused);
          this.onFocus();
        }
      }
      onFocus() {
        const isFocused = this.isFocused();
        this.listeners.forEach((listener) => {
          listener(isFocused);
        });
      }
      isFocused() {
        var _a2;
        if (typeof __privateGet(this, _focused) === "boolean") {
          return __privateGet(this, _focused);
        }
        return ((_a2 = globalThis.document) == null ? void 0 : _a2.visibilityState) !== "hidden";
      }
    }, _focused = new WeakMap(), _cleanup = new WeakMap(), _setup = new WeakMap(), _a);
    var focusManager = new FocusManager();
    var OnlineManager = (_b = class extends Subscribable {
      constructor() {
        super();
        __privateAdd(this, _online, true);
        __privateAdd(this, _cleanup2, void 0);
        __privateAdd(this, _setup2, void 0);
        __privateSet(this, _setup2, (onOnline2) => {
          if (!isServer && window.addEventListener) {
            const onlineListener = () => onOnline2(true);
            const offlineListener = () => onOnline2(false);
            window.addEventListener("online", onlineListener, false);
            window.addEventListener("offline", offlineListener, false);
            return () => {
              window.removeEventListener("online", onlineListener);
              window.removeEventListener("offline", offlineListener);
            };
          }
          return;
        });
      }
      onSubscribe() {
        if (!__privateGet(this, _cleanup2)) {
          this.setEventListener(__privateGet(this, _setup2));
        }
      }
      onUnsubscribe() {
        var _a2;
        if (!this.hasListeners()) {
          (_a2 = __privateGet(this, _cleanup2)) == null ? void 0 : _a2.call(this);
          __privateSet(this, _cleanup2, void 0);
        }
      }
      setEventListener(setup) {
        var _a2;
        __privateSet(this, _setup2, setup);
        (_a2 = __privateGet(this, _cleanup2)) == null ? void 0 : _a2.call(this);
        __privateSet(this, _cleanup2, setup(this.setOnline.bind(this)));
      }
      setOnline(online) {
        const changed = __privateGet(this, _online) !== online;
        if (changed) {
          __privateSet(this, _online, online);
          this.listeners.forEach((listener) => {
            listener(online);
          });
        }
      }
      isOnline() {
        return __privateGet(this, _online);
      }
    }, _online = new WeakMap(), _cleanup2 = new WeakMap(), _setup2 = new WeakMap(), _b);
    var onlineManager = new OnlineManager();
    function pendingThenable() {
      let resolve;
      let reject;
      const thenable = new Promise((_resolve, _reject) => {
        resolve = _resolve;
        reject = _reject;
      });
      thenable.status = "pending";
      thenable.catch(() => {
      });
      function finalize2(data) {
        Object.assign(thenable, data);
        delete thenable.resolve;
        delete thenable.reject;
      }
      thenable.resolve = (value2) => {
        finalize2({
          status: "fulfilled",
          value: value2
        });
        resolve(value2);
      };
      thenable.reject = (reason) => {
        finalize2({
          status: "rejected",
          reason
        });
        reject(reason);
      };
      return thenable;
    }
    function defaultRetryDelay(failureCount) {
      return Math.min(1e3 * 2 ** failureCount, 3e4);
    }
    function canFetch(networkMode) {
      return (networkMode ?? "online") === "online" ? onlineManager.isOnline() : true;
    }
    var CancelledError = class extends Error {
      constructor(options) {
        super("CancelledError");
        this.revert = options == null ? void 0 : options.revert;
        this.silent = options == null ? void 0 : options.silent;
      }
    };
    function isCancelledError(value2) {
      return value2 instanceof CancelledError;
    }
    function createRetryer(config2) {
      let isRetryCancelled = false;
      let failureCount = 0;
      let isResolved = false;
      let continueFn;
      const thenable = pendingThenable();
      const cancel = (cancelOptions) => {
        var _a2;
        if (!isResolved) {
          reject(new CancelledError(cancelOptions));
          (_a2 = config2.abort) == null ? void 0 : _a2.call(config2);
        }
      };
      const cancelRetry = () => {
        isRetryCancelled = true;
      };
      const continueRetry = () => {
        isRetryCancelled = false;
      };
      const canContinue = () => focusManager.isFocused() && (config2.networkMode === "always" || onlineManager.isOnline()) && config2.canRun();
      const canStart = () => canFetch(config2.networkMode) && config2.canRun();
      const resolve = (value2) => {
        var _a2;
        if (!isResolved) {
          isResolved = true;
          (_a2 = config2.onSuccess) == null ? void 0 : _a2.call(config2, value2);
          continueFn == null ? void 0 : continueFn();
          thenable.resolve(value2);
        }
      };
      const reject = (value2) => {
        var _a2;
        if (!isResolved) {
          isResolved = true;
          (_a2 = config2.onError) == null ? void 0 : _a2.call(config2, value2);
          continueFn == null ? void 0 : continueFn();
          thenable.reject(value2);
        }
      };
      const pause = () => {
        return new Promise((continueResolve) => {
          var _a2;
          continueFn = (value2) => {
            if (isResolved || canContinue()) {
              continueResolve(value2);
            }
          };
          (_a2 = config2.onPause) == null ? void 0 : _a2.call(config2);
        }).then(() => {
          var _a2;
          continueFn = void 0;
          if (!isResolved) {
            (_a2 = config2.onContinue) == null ? void 0 : _a2.call(config2);
          }
        });
      };
      const run = () => {
        if (isResolved) {
          return;
        }
        let promiseOrValue;
        const initialPromise = failureCount === 0 ? config2.initialPromise : void 0;
        try {
          promiseOrValue = initialPromise ?? config2.fn();
        } catch (error2) {
          promiseOrValue = Promise.reject(error2);
        }
        Promise.resolve(promiseOrValue).then(resolve).catch((error2) => {
          var _a2;
          if (isResolved) {
            return;
          }
          const retry = config2.retry ?? (isServer ? 0 : 3);
          const retryDelay = config2.retryDelay ?? defaultRetryDelay;
          const delay = typeof retryDelay === "function" ? retryDelay(failureCount, error2) : retryDelay;
          const shouldRetry = retry === true || typeof retry === "number" && failureCount < retry || typeof retry === "function" && retry(failureCount, error2);
          if (isRetryCancelled || !shouldRetry) {
            reject(error2);
            return;
          }
          failureCount++;
          (_a2 = config2.onFail) == null ? void 0 : _a2.call(config2, failureCount, error2);
          sleep(delay).then(() => {
            return canContinue() ? void 0 : pause();
          }).then(() => {
            if (isRetryCancelled) {
              reject(error2);
            } else {
              run();
            }
          });
        });
      };
      return {
        promise: thenable,
        cancel,
        continue: () => {
          continueFn == null ? void 0 : continueFn();
          return thenable;
        },
        cancelRetry,
        continueRetry,
        canStart,
        start: () => {
          if (canStart()) {
            run();
          } else {
            pause().then(run);
          }
          return thenable;
        }
      };
    }
    function createNotifyManager() {
      let queue = [];
      let transactions = 0;
      let notifyFn = (callback) => {
        callback();
      };
      let batchNotifyFn = (callback) => {
        callback();
      };
      let scheduleFn = (cb2) => setTimeout(cb2, 0);
      const schedule = (callback) => {
        if (transactions) {
          queue.push(callback);
        } else {
          scheduleFn(() => {
            notifyFn(callback);
          });
        }
      };
      const flush = () => {
        const originalQueue = queue;
        queue = [];
        if (originalQueue.length) {
          scheduleFn(() => {
            batchNotifyFn(() => {
              originalQueue.forEach((callback) => {
                notifyFn(callback);
              });
            });
          });
        }
      };
      return {
        batch: (callback) => {
          let result;
          transactions++;
          try {
            result = callback();
          } finally {
            transactions--;
            if (!transactions) {
              flush();
            }
          }
          return result;
        },
        /**
         * All calls to the wrapped function will be batched.
         */
        batchCalls: (callback) => {
          return (...args) => {
            schedule(() => {
              callback(...args);
            });
          };
        },
        schedule,
        /**
         * Use this method to set a custom notify function.
         * This can be used to for example wrap notifications with `React.act` while running tests.
         */
        setNotifyFunction: (fn) => {
          notifyFn = fn;
        },
        /**
         * Use this method to set a custom function to batch notifications together into a single tick.
         * By default React Query will use the batch function provided by ReactDOM or React Native.
         */
        setBatchNotifyFunction: (fn) => {
          batchNotifyFn = fn;
        },
        setScheduler: (fn) => {
          scheduleFn = fn;
        }
      };
    }
    var notifyManager = createNotifyManager();
    var Removable = (_c = class {
      constructor() {
        __privateAdd(this, _gcTimeout, void 0);
      }
      destroy() {
        this.clearGcTimeout();
      }
      scheduleGc() {
        this.clearGcTimeout();
        if (isValidTimeout(this.gcTime)) {
          __privateSet(this, _gcTimeout, setTimeout(() => {
            this.optionalRemove();
          }, this.gcTime));
        }
      }
      updateGcTime(newGcTime) {
        this.gcTime = Math.max(
          this.gcTime || 0,
          newGcTime ?? (isServer ? Infinity : 5 * 60 * 1e3)
        );
      }
      clearGcTimeout() {
        if (__privateGet(this, _gcTimeout)) {
          clearTimeout(__privateGet(this, _gcTimeout));
          __privateSet(this, _gcTimeout, void 0);
        }
      }
    }, _gcTimeout = new WeakMap(), _c);
    var Query = (_d = class extends Removable {
      constructor(config2) {
        super();
        __privateAdd(this, _dispatch);
        __privateAdd(this, _initialState, void 0);
        __privateAdd(this, _revertState, void 0);
        __privateAdd(this, _cache, void 0);
        __privateAdd(this, _retryer, void 0);
        __privateAdd(this, _defaultOptions, void 0);
        __privateAdd(this, _abortSignalConsumed, void 0);
        __privateSet(this, _abortSignalConsumed, false);
        __privateSet(this, _defaultOptions, config2.defaultOptions);
        this.setOptions(config2.options);
        this.observers = [];
        __privateSet(this, _cache, config2.cache);
        this.queryKey = config2.queryKey;
        this.queryHash = config2.queryHash;
        __privateSet(this, _initialState, getDefaultState$1(this.options));
        this.state = config2.state ?? __privateGet(this, _initialState);
        this.scheduleGc();
      }
      get meta() {
        return this.options.meta;
      }
      get promise() {
        var _a2;
        return (_a2 = __privateGet(this, _retryer)) == null ? void 0 : _a2.promise;
      }
      setOptions(options) {
        this.options = { ...__privateGet(this, _defaultOptions), ...options };
        this.updateGcTime(this.options.gcTime);
      }
      optionalRemove() {
        if (!this.observers.length && this.state.fetchStatus === "idle") {
          __privateGet(this, _cache).remove(this);
        }
      }
      setData(newData, options) {
        const data = replaceData(this.state.data, newData, this.options);
        __privateMethod(this, _dispatch, dispatch_fn).call(this, {
          data,
          type: "success",
          dataUpdatedAt: options == null ? void 0 : options.updatedAt,
          manual: options == null ? void 0 : options.manual
        });
        return data;
      }
      setState(state, setStateOptions) {
        __privateMethod(this, _dispatch, dispatch_fn).call(this, { type: "setState", state, setStateOptions });
      }
      cancel(options) {
        var _a2, _b2;
        const promise = (_a2 = __privateGet(this, _retryer)) == null ? void 0 : _a2.promise;
        (_b2 = __privateGet(this, _retryer)) == null ? void 0 : _b2.cancel(options);
        return promise ? promise.then(noop$6).catch(noop$6) : Promise.resolve();
      }
      destroy() {
        super.destroy();
        this.cancel({ silent: true });
      }
      reset() {
        this.destroy();
        this.setState(__privateGet(this, _initialState));
      }
      isActive() {
        return this.observers.some(
          (observer) => resolveEnabled(observer.options.enabled, this) !== false
        );
      }
      isDisabled() {
        if (this.getObserversCount() > 0) {
          return !this.isActive();
        }
        return this.options.queryFn === skipToken$1 || this.state.dataUpdateCount + this.state.errorUpdateCount === 0;
      }
      isStale() {
        if (this.state.isInvalidated) {
          return true;
        }
        if (this.getObserversCount() > 0) {
          return this.observers.some(
            (observer) => observer.getCurrentResult().isStale
          );
        }
        return this.state.data === void 0;
      }
      isStaleByTime(staleTime = 0) {
        return this.state.isInvalidated || this.state.data === void 0 || !timeUntilStale(this.state.dataUpdatedAt, staleTime);
      }
      onFocus() {
        var _a2;
        const observer = this.observers.find((x2) => x2.shouldFetchOnWindowFocus());
        observer == null ? void 0 : observer.refetch({ cancelRefetch: false });
        (_a2 = __privateGet(this, _retryer)) == null ? void 0 : _a2.continue();
      }
      onOnline() {
        var _a2;
        const observer = this.observers.find((x2) => x2.shouldFetchOnReconnect());
        observer == null ? void 0 : observer.refetch({ cancelRefetch: false });
        (_a2 = __privateGet(this, _retryer)) == null ? void 0 : _a2.continue();
      }
      addObserver(observer) {
        if (!this.observers.includes(observer)) {
          this.observers.push(observer);
          this.clearGcTimeout();
          __privateGet(this, _cache).notify({ type: "observerAdded", query: this, observer });
        }
      }
      removeObserver(observer) {
        if (this.observers.includes(observer)) {
          this.observers = this.observers.filter((x2) => x2 !== observer);
          if (!this.observers.length) {
            if (__privateGet(this, _retryer)) {
              if (__privateGet(this, _abortSignalConsumed)) {
                __privateGet(this, _retryer).cancel({ revert: true });
              } else {
                __privateGet(this, _retryer).cancelRetry();
              }
            }
            this.scheduleGc();
          }
          __privateGet(this, _cache).notify({ type: "observerRemoved", query: this, observer });
        }
      }
      getObserversCount() {
        return this.observers.length;
      }
      invalidate() {
        if (!this.state.isInvalidated) {
          __privateMethod(this, _dispatch, dispatch_fn).call(this, { type: "invalidate" });
        }
      }
      fetch(options, fetchOptions) {
        var _a2, _b2, _c2;
        if (this.state.fetchStatus !== "idle") {
          if (this.state.data !== void 0 && (fetchOptions == null ? void 0 : fetchOptions.cancelRefetch)) {
            this.cancel({ silent: true });
          } else if (__privateGet(this, _retryer)) {
            __privateGet(this, _retryer).continueRetry();
            return __privateGet(this, _retryer).promise;
          }
        }
        if (options) {
          this.setOptions(options);
        }
        if (!this.options.queryFn) {
          const observer = this.observers.find((x2) => x2.options.queryFn);
          if (observer) {
            this.setOptions(observer.options);
          }
        }
        const abortController = new AbortController();
        const addSignalProperty = (object2) => {
          Object.defineProperty(object2, "signal", {
            enumerable: true,
            get: () => {
              __privateSet(this, _abortSignalConsumed, true);
              return abortController.signal;
            }
          });
        };
        const fetchFn = () => {
          const queryFn = ensureQueryFn(this.options, fetchOptions);
          const queryFnContext = {
            queryKey: this.queryKey,
            meta: this.meta
          };
          addSignalProperty(queryFnContext);
          __privateSet(this, _abortSignalConsumed, false);
          if (this.options.persister) {
            return this.options.persister(
              queryFn,
              queryFnContext,
              this
            );
          }
          return queryFn(queryFnContext);
        };
        const context = {
          fetchOptions,
          options: this.options,
          queryKey: this.queryKey,
          state: this.state,
          fetchFn
        };
        addSignalProperty(context);
        (_a2 = this.options.behavior) == null ? void 0 : _a2.onFetch(
          context,
          this
        );
        __privateSet(this, _revertState, this.state);
        if (this.state.fetchStatus === "idle" || this.state.fetchMeta !== ((_b2 = context.fetchOptions) == null ? void 0 : _b2.meta)) {
          __privateMethod(this, _dispatch, dispatch_fn).call(this, { type: "fetch", meta: (_c2 = context.fetchOptions) == null ? void 0 : _c2.meta });
        }
        const onError = (error2) => {
          var _a3, _b3, _c3, _d2;
          if (!(isCancelledError(error2) && error2.silent)) {
            __privateMethod(this, _dispatch, dispatch_fn).call(this, {
              type: "error",
              error: error2
            });
          }
          if (!isCancelledError(error2)) {
            (_b3 = (_a3 = __privateGet(this, _cache).config).onError) == null ? void 0 : _b3.call(
              _a3,
              error2,
              this
            );
            (_d2 = (_c3 = __privateGet(this, _cache).config).onSettled) == null ? void 0 : _d2.call(
              _c3,
              this.state.data,
              error2,
              this
            );
          }
          this.scheduleGc();
        };
        __privateSet(this, _retryer, createRetryer({
          initialPromise: fetchOptions == null ? void 0 : fetchOptions.initialPromise,
          fn: context.fetchFn,
          abort: abortController.abort.bind(abortController),
          onSuccess: (data) => {
            var _a3, _b3, _c3, _d2;
            if (data === void 0) {
              onError(new Error(`${this.queryHash} data is undefined`));
              return;
            }
            try {
              this.setData(data);
            } catch (error2) {
              onError(error2);
              return;
            }
            (_b3 = (_a3 = __privateGet(this, _cache).config).onSuccess) == null ? void 0 : _b3.call(_a3, data, this);
            (_d2 = (_c3 = __privateGet(this, _cache).config).onSettled) == null ? void 0 : _d2.call(
              _c3,
              data,
              this.state.error,
              this
            );
            this.scheduleGc();
          },
          onError,
          onFail: (failureCount, error2) => {
            __privateMethod(this, _dispatch, dispatch_fn).call(this, { type: "failed", failureCount, error: error2 });
          },
          onPause: () => {
            __privateMethod(this, _dispatch, dispatch_fn).call(this, { type: "pause" });
          },
          onContinue: () => {
            __privateMethod(this, _dispatch, dispatch_fn).call(this, { type: "continue" });
          },
          retry: context.options.retry,
          retryDelay: context.options.retryDelay,
          networkMode: context.options.networkMode,
          canRun: () => true
        }));
        return __privateGet(this, _retryer).start();
      }
    }, _initialState = new WeakMap(), _revertState = new WeakMap(), _cache = new WeakMap(), _retryer = new WeakMap(), _defaultOptions = new WeakMap(), _abortSignalConsumed = new WeakMap(), _dispatch = new WeakSet(), dispatch_fn = function(action) {
      const reducer2 = (state) => {
        switch (action.type) {
          case "failed":
            return {
              ...state,
              fetchFailureCount: action.failureCount,
              fetchFailureReason: action.error
            };
          case "pause":
            return {
              ...state,
              fetchStatus: "paused"
            };
          case "continue":
            return {
              ...state,
              fetchStatus: "fetching"
            };
          case "fetch":
            return {
              ...state,
              ...fetchState(state.data, this.options),
              fetchMeta: action.meta ?? null
            };
          case "success":
            return {
              ...state,
              data: action.data,
              dataUpdateCount: state.dataUpdateCount + 1,
              dataUpdatedAt: action.dataUpdatedAt ?? Date.now(),
              error: null,
              isInvalidated: false,
              status: "success",
              ...!action.manual && {
                fetchStatus: "idle",
                fetchFailureCount: 0,
                fetchFailureReason: null
              }
            };
          case "error":
            const error2 = action.error;
            if (isCancelledError(error2) && error2.revert && __privateGet(this, _revertState)) {
              return { ...__privateGet(this, _revertState), fetchStatus: "idle" };
            }
            return {
              ...state,
              error: error2,
              errorUpdateCount: state.errorUpdateCount + 1,
              errorUpdatedAt: Date.now(),
              fetchFailureCount: state.fetchFailureCount + 1,
              fetchFailureReason: error2,
              fetchStatus: "idle",
              status: "error"
            };
          case "invalidate":
            return {
              ...state,
              isInvalidated: true
            };
          case "setState":
            return {
              ...state,
              ...action.state
            };
        }
      };
      this.state = reducer2(this.state);
      notifyManager.batch(() => {
        this.observers.forEach((observer) => {
          observer.onQueryUpdate();
        });
        __privateGet(this, _cache).notify({ query: this, type: "updated", action });
      });
    }, _d);
    function fetchState(data, options) {
      return {
        fetchFailureCount: 0,
        fetchFailureReason: null,
        fetchStatus: canFetch(options.networkMode) ? "fetching" : "paused",
        ...data === void 0 && {
          error: null,
          status: "pending"
        }
      };
    }
    function getDefaultState$1(options) {
      const data = typeof options.initialData === "function" ? options.initialData() : options.initialData;
      const hasData = data !== void 0;
      const initialDataUpdatedAt = hasData ? typeof options.initialDataUpdatedAt === "function" ? options.initialDataUpdatedAt() : options.initialDataUpdatedAt : 0;
      return {
        data,
        dataUpdateCount: 0,
        dataUpdatedAt: hasData ? initialDataUpdatedAt ?? Date.now() : 0,
        error: null,
        errorUpdateCount: 0,
        errorUpdatedAt: 0,
        fetchFailureCount: 0,
        fetchFailureReason: null,
        fetchMeta: null,
        isInvalidated: false,
        status: hasData ? "success" : "pending",
        fetchStatus: "idle"
      };
    }
    var QueryCache = (_e2 = class extends Subscribable {
      constructor(config2 = {}) {
        super();
        __privateAdd(this, _queries, void 0);
        this.config = config2;
        __privateSet(this, _queries, /* @__PURE__ */ new Map());
      }
      build(client2, options, state) {
        const queryKey2 = options.queryKey;
        const queryHash = options.queryHash ?? hashQueryKeyByOptions(queryKey2, options);
        let query = this.get(queryHash);
        if (!query) {
          query = new Query({
            cache: this,
            queryKey: queryKey2,
            queryHash,
            options: client2.defaultQueryOptions(options),
            state,
            defaultOptions: client2.getQueryDefaults(queryKey2)
          });
          this.add(query);
        }
        return query;
      }
      add(query) {
        if (!__privateGet(this, _queries).has(query.queryHash)) {
          __privateGet(this, _queries).set(query.queryHash, query);
          this.notify({
            type: "added",
            query
          });
        }
      }
      remove(query) {
        const queryInMap = __privateGet(this, _queries).get(query.queryHash);
        if (queryInMap) {
          query.destroy();
          if (queryInMap === query) {
            __privateGet(this, _queries).delete(query.queryHash);
          }
          this.notify({ type: "removed", query });
        }
      }
      clear() {
        notifyManager.batch(() => {
          this.getAll().forEach((query) => {
            this.remove(query);
          });
        });
      }
      get(queryHash) {
        return __privateGet(this, _queries).get(queryHash);
      }
      getAll() {
        return [...__privateGet(this, _queries).values()];
      }
      find(filters) {
        const defaultedFilters = { exact: true, ...filters };
        return this.getAll().find(
          (query) => matchQuery(defaultedFilters, query)
        );
      }
      findAll(filters = {}) {
        const queries = this.getAll();
        return Object.keys(filters).length > 0 ? queries.filter((query) => matchQuery(filters, query)) : queries;
      }
      notify(event) {
        notifyManager.batch(() => {
          this.listeners.forEach((listener) => {
            listener(event);
          });
        });
      }
      onFocus() {
        notifyManager.batch(() => {
          this.getAll().forEach((query) => {
            query.onFocus();
          });
        });
      }
      onOnline() {
        notifyManager.batch(() => {
          this.getAll().forEach((query) => {
            query.onOnline();
          });
        });
      }
    }, _queries = new WeakMap(), _e2);
    var Mutation = (_f = class extends Removable {
      constructor(config2) {
        super();
        __privateAdd(this, _dispatch2);
        __privateAdd(this, _observers, void 0);
        __privateAdd(this, _mutationCache, void 0);
        __privateAdd(this, _retryer2, void 0);
        this.mutationId = config2.mutationId;
        __privateSet(this, _mutationCache, config2.mutationCache);
        __privateSet(this, _observers, []);
        this.state = config2.state || getDefaultState();
        this.setOptions(config2.options);
        this.scheduleGc();
      }
      setOptions(options) {
        this.options = options;
        this.updateGcTime(this.options.gcTime);
      }
      get meta() {
        return this.options.meta;
      }
      addObserver(observer) {
        if (!__privateGet(this, _observers).includes(observer)) {
          __privateGet(this, _observers).push(observer);
          this.clearGcTimeout();
          __privateGet(this, _mutationCache).notify({
            type: "observerAdded",
            mutation: this,
            observer
          });
        }
      }
      removeObserver(observer) {
        __privateSet(this, _observers, __privateGet(this, _observers).filter((x2) => x2 !== observer));
        this.scheduleGc();
        __privateGet(this, _mutationCache).notify({
          type: "observerRemoved",
          mutation: this,
          observer
        });
      }
      optionalRemove() {
        if (!__privateGet(this, _observers).length) {
          if (this.state.status === "pending") {
            this.scheduleGc();
          } else {
            __privateGet(this, _mutationCache).remove(this);
          }
        }
      }
      continue() {
        var _a2;
        return ((_a2 = __privateGet(this, _retryer2)) == null ? void 0 : _a2.continue()) ?? // continuing a mutation assumes that variables are set, mutation must have been dehydrated before
        this.execute(this.state.variables);
      }
      async execute(variables) {
        var _a2, _b2, _c2, _d2, _e3, _f2, _g2, _h2, _i2, _j2, _k, _l, _m, _n, _o, _p, _q, _r, _s, _t2;
        __privateSet(this, _retryer2, createRetryer({
          fn: () => {
            if (!this.options.mutationFn) {
              return Promise.reject(new Error("No mutationFn found"));
            }
            return this.options.mutationFn(variables);
          },
          onFail: (failureCount, error2) => {
            __privateMethod(this, _dispatch2, dispatch_fn2).call(this, { type: "failed", failureCount, error: error2 });
          },
          onPause: () => {
            __privateMethod(this, _dispatch2, dispatch_fn2).call(this, { type: "pause" });
          },
          onContinue: () => {
            __privateMethod(this, _dispatch2, dispatch_fn2).call(this, { type: "continue" });
          },
          retry: this.options.retry ?? 0,
          retryDelay: this.options.retryDelay,
          networkMode: this.options.networkMode,
          canRun: () => __privateGet(this, _mutationCache).canRun(this)
        }));
        const restored = this.state.status === "pending";
        const isPaused = !__privateGet(this, _retryer2).canStart();
        try {
          if (!restored) {
            __privateMethod(this, _dispatch2, dispatch_fn2).call(this, { type: "pending", variables, isPaused });
            await ((_b2 = (_a2 = __privateGet(this, _mutationCache).config).onMutate) == null ? void 0 : _b2.call(
              _a2,
              variables,
              this
            ));
            const context = await ((_d2 = (_c2 = this.options).onMutate) == null ? void 0 : _d2.call(_c2, variables));
            if (context !== this.state.context) {
              __privateMethod(this, _dispatch2, dispatch_fn2).call(this, {
                type: "pending",
                context,
                variables,
                isPaused
              });
            }
          }
          const data = await __privateGet(this, _retryer2).start();
          await ((_f2 = (_e3 = __privateGet(this, _mutationCache).config).onSuccess) == null ? void 0 : _f2.call(
            _e3,
            data,
            variables,
            this.state.context,
            this
          ));
          await ((_h2 = (_g2 = this.options).onSuccess) == null ? void 0 : _h2.call(_g2, data, variables, this.state.context));
          await ((_j2 = (_i2 = __privateGet(this, _mutationCache).config).onSettled) == null ? void 0 : _j2.call(
            _i2,
            data,
            null,
            this.state.variables,
            this.state.context,
            this
          ));
          await ((_l = (_k = this.options).onSettled) == null ? void 0 : _l.call(_k, data, null, variables, this.state.context));
          __privateMethod(this, _dispatch2, dispatch_fn2).call(this, { type: "success", data });
          return data;
        } catch (error2) {
          try {
            await ((_n = (_m = __privateGet(this, _mutationCache).config).onError) == null ? void 0 : _n.call(
              _m,
              error2,
              variables,
              this.state.context,
              this
            ));
            await ((_p = (_o = this.options).onError) == null ? void 0 : _p.call(
              _o,
              error2,
              variables,
              this.state.context
            ));
            await ((_r = (_q = __privateGet(this, _mutationCache).config).onSettled) == null ? void 0 : _r.call(
              _q,
              void 0,
              error2,
              this.state.variables,
              this.state.context,
              this
            ));
            await ((_t2 = (_s = this.options).onSettled) == null ? void 0 : _t2.call(
              _s,
              void 0,
              error2,
              variables,
              this.state.context
            ));
            throw error2;
          } finally {
            __privateMethod(this, _dispatch2, dispatch_fn2).call(this, { type: "error", error: error2 });
          }
        } finally {
          __privateGet(this, _mutationCache).runNext(this);
        }
      }
    }, _observers = new WeakMap(), _mutationCache = new WeakMap(), _retryer2 = new WeakMap(), _dispatch2 = new WeakSet(), dispatch_fn2 = function(action) {
      const reducer2 = (state) => {
        switch (action.type) {
          case "failed":
            return {
              ...state,
              failureCount: action.failureCount,
              failureReason: action.error
            };
          case "pause":
            return {
              ...state,
              isPaused: true
            };
          case "continue":
            return {
              ...state,
              isPaused: false
            };
          case "pending":
            return {
              ...state,
              context: action.context,
              data: void 0,
              failureCount: 0,
              failureReason: null,
              error: null,
              isPaused: action.isPaused,
              status: "pending",
              variables: action.variables,
              submittedAt: Date.now()
            };
          case "success":
            return {
              ...state,
              data: action.data,
              failureCount: 0,
              failureReason: null,
              error: null,
              status: "success",
              isPaused: false
            };
          case "error":
            return {
              ...state,
              data: void 0,
              error: action.error,
              failureCount: state.failureCount + 1,
              failureReason: action.error,
              isPaused: false,
              status: "error"
            };
        }
      };
      this.state = reducer2(this.state);
      notifyManager.batch(() => {
        __privateGet(this, _observers).forEach((observer) => {
          observer.onMutationUpdate(action);
        });
        __privateGet(this, _mutationCache).notify({
          mutation: this,
          type: "updated",
          action
        });
      });
    }, _f);
    function getDefaultState() {
      return {
        context: void 0,
        data: void 0,
        error: null,
        failureCount: 0,
        failureReason: null,
        isPaused: false,
        status: "idle",
        variables: void 0,
        submittedAt: 0
      };
    }
    var MutationCache = (_g = class extends Subscribable {
      constructor(config2 = {}) {
        super();
        __privateAdd(this, _mutations, void 0);
        __privateAdd(this, _scopes, void 0);
        __privateAdd(this, _mutationId, void 0);
        this.config = config2;
        __privateSet(this, _mutations, /* @__PURE__ */ new Set());
        __privateSet(this, _scopes, /* @__PURE__ */ new Map());
        __privateSet(this, _mutationId, 0);
      }
      build(client2, options, state) {
        const mutation = new Mutation({
          mutationCache: this,
          mutationId: ++__privateWrapper(this, _mutationId)._,
          options: client2.defaultMutationOptions(options),
          state
        });
        this.add(mutation);
        return mutation;
      }
      add(mutation) {
        __privateGet(this, _mutations).add(mutation);
        const scope = scopeFor(mutation);
        if (typeof scope === "string") {
          const scopedMutations = __privateGet(this, _scopes).get(scope);
          if (scopedMutations) {
            scopedMutations.push(mutation);
          } else {
            __privateGet(this, _scopes).set(scope, [mutation]);
          }
        }
        this.notify({ type: "added", mutation });
      }
      remove(mutation) {
        if (__privateGet(this, _mutations).delete(mutation)) {
          const scope = scopeFor(mutation);
          if (typeof scope === "string") {
            const scopedMutations = __privateGet(this, _scopes).get(scope);
            if (scopedMutations) {
              if (scopedMutations.length > 1) {
                const index = scopedMutations.indexOf(mutation);
                if (index !== -1) {
                  scopedMutations.splice(index, 1);
                }
              } else if (scopedMutations[0] === mutation) {
                __privateGet(this, _scopes).delete(scope);
              }
            }
          }
        }
        this.notify({ type: "removed", mutation });
      }
      canRun(mutation) {
        const scope = scopeFor(mutation);
        if (typeof scope === "string") {
          const mutationsWithSameScope = __privateGet(this, _scopes).get(scope);
          const firstPendingMutation = mutationsWithSameScope == null ? void 0 : mutationsWithSameScope.find(
            (m2) => m2.state.status === "pending"
          );
          return !firstPendingMutation || firstPendingMutation === mutation;
        } else {
          return true;
        }
      }
      runNext(mutation) {
        var _a2;
        const scope = scopeFor(mutation);
        if (typeof scope === "string") {
          const foundMutation = (_a2 = __privateGet(this, _scopes).get(scope)) == null ? void 0 : _a2.find((m2) => m2 !== mutation && m2.state.isPaused);
          return (foundMutation == null ? void 0 : foundMutation.continue()) ?? Promise.resolve();
        } else {
          return Promise.resolve();
        }
      }
      clear() {
        notifyManager.batch(() => {
          __privateGet(this, _mutations).forEach((mutation) => {
            this.notify({ type: "removed", mutation });
          });
          __privateGet(this, _mutations).clear();
          __privateGet(this, _scopes).clear();
        });
      }
      getAll() {
        return Array.from(__privateGet(this, _mutations));
      }
      find(filters) {
        const defaultedFilters = { exact: true, ...filters };
        return this.getAll().find(
          (mutation) => matchMutation(defaultedFilters, mutation)
        );
      }
      findAll(filters = {}) {
        return this.getAll().filter((mutation) => matchMutation(filters, mutation));
      }
      notify(event) {
        notifyManager.batch(() => {
          this.listeners.forEach((listener) => {
            listener(event);
          });
        });
      }
      resumePausedMutations() {
        const pausedMutations = this.getAll().filter((x2) => x2.state.isPaused);
        return notifyManager.batch(
          () => Promise.all(
            pausedMutations.map((mutation) => mutation.continue().catch(noop$6))
          )
        );
      }
    }, _mutations = new WeakMap(), _scopes = new WeakMap(), _mutationId = new WeakMap(), _g);
    function scopeFor(mutation) {
      var _a2;
      return (_a2 = mutation.options.scope) == null ? void 0 : _a2.id;
    }
    function infiniteQueryBehavior(pages) {
      return {
        onFetch: (context, query) => {
          var _a2, _b2, _c2, _d2, _e3;
          const options = context.options;
          const direction = (_c2 = (_b2 = (_a2 = context.fetchOptions) == null ? void 0 : _a2.meta) == null ? void 0 : _b2.fetchMore) == null ? void 0 : _c2.direction;
          const oldPages = ((_d2 = context.state.data) == null ? void 0 : _d2.pages) || [];
          const oldPageParams = ((_e3 = context.state.data) == null ? void 0 : _e3.pageParams) || [];
          let result = { pages: [], pageParams: [] };
          let currentPage = 0;
          const fetchFn = async () => {
            let cancelled = false;
            const addSignalProperty = (object2) => {
              Object.defineProperty(object2, "signal", {
                enumerable: true,
                get: () => {
                  if (context.signal.aborted) {
                    cancelled = true;
                  } else {
                    context.signal.addEventListener("abort", () => {
                      cancelled = true;
                    });
                  }
                  return context.signal;
                }
              });
            };
            const queryFn = ensureQueryFn(context.options, context.fetchOptions);
            const fetchPage = async (data, param, previous) => {
              if (cancelled) {
                return Promise.reject();
              }
              if (param == null && data.pages.length) {
                return Promise.resolve(data);
              }
              const queryFnContext = {
                queryKey: context.queryKey,
                pageParam: param,
                direction: previous ? "backward" : "forward",
                meta: context.options.meta
              };
              addSignalProperty(queryFnContext);
              const page = await queryFn(
                queryFnContext
              );
              const { maxPages } = context.options;
              const addTo = previous ? addToStart : addToEnd;
              return {
                pages: addTo(data.pages, page, maxPages),
                pageParams: addTo(data.pageParams, param, maxPages)
              };
            };
            if (direction && oldPages.length) {
              const previous = direction === "backward";
              const pageParamFn = previous ? getPreviousPageParam : getNextPageParam;
              const oldData = {
                pages: oldPages,
                pageParams: oldPageParams
              };
              const param = pageParamFn(options, oldData);
              result = await fetchPage(oldData, param, previous);
            } else {
              const remainingPages = pages ?? oldPages.length;
              do {
                const param = currentPage === 0 ? oldPageParams[0] ?? options.initialPageParam : getNextPageParam(options, result);
                if (currentPage > 0 && param == null) {
                  break;
                }
                result = await fetchPage(result, param);
                currentPage++;
              } while (currentPage < remainingPages);
            }
            return result;
          };
          if (context.options.persister) {
            context.fetchFn = () => {
              var _a3, _b3;
              return (_b3 = (_a3 = context.options).persister) == null ? void 0 : _b3.call(
                _a3,
                fetchFn,
                {
                  queryKey: context.queryKey,
                  meta: context.options.meta,
                  signal: context.signal
                },
                query
              );
            };
          } else {
            context.fetchFn = fetchFn;
          }
        }
      };
    }
    function getNextPageParam(options, { pages, pageParams }) {
      const lastIndex = pages.length - 1;
      return pages.length > 0 ? options.getNextPageParam(
        pages[lastIndex],
        pages,
        pageParams[lastIndex],
        pageParams
      ) : void 0;
    }
    function getPreviousPageParam(options, { pages, pageParams }) {
      var _a2;
      return pages.length > 0 ? (_a2 = options.getPreviousPageParam) == null ? void 0 : _a2.call(options, pages[0], pages, pageParams[0], pageParams) : void 0;
    }
    var QueryClient = (_h = class {
      constructor(config2 = {}) {
        __privateAdd(this, _queryCache, void 0);
        __privateAdd(this, _mutationCache2, void 0);
        __privateAdd(this, _defaultOptions2, void 0);
        __privateAdd(this, _queryDefaults, void 0);
        __privateAdd(this, _mutationDefaults, void 0);
        __privateAdd(this, _mountCount, void 0);
        __privateAdd(this, _unsubscribeFocus, void 0);
        __privateAdd(this, _unsubscribeOnline, void 0);
        __privateSet(this, _queryCache, config2.queryCache || new QueryCache());
        __privateSet(this, _mutationCache2, config2.mutationCache || new MutationCache());
        __privateSet(this, _defaultOptions2, config2.defaultOptions || {});
        __privateSet(this, _queryDefaults, /* @__PURE__ */ new Map());
        __privateSet(this, _mutationDefaults, /* @__PURE__ */ new Map());
        __privateSet(this, _mountCount, 0);
      }
      mount() {
        __privateWrapper(this, _mountCount)._++;
        if (__privateGet(this, _mountCount) !== 1)
          return;
        __privateSet(this, _unsubscribeFocus, focusManager.subscribe(async (focused) => {
          if (focused) {
            await this.resumePausedMutations();
            __privateGet(this, _queryCache).onFocus();
          }
        }));
        __privateSet(this, _unsubscribeOnline, onlineManager.subscribe(async (online) => {
          if (online) {
            await this.resumePausedMutations();
            __privateGet(this, _queryCache).onOnline();
          }
        }));
      }
      unmount() {
        var _a2, _b2;
        __privateWrapper(this, _mountCount)._--;
        if (__privateGet(this, _mountCount) !== 0)
          return;
        (_a2 = __privateGet(this, _unsubscribeFocus)) == null ? void 0 : _a2.call(this);
        __privateSet(this, _unsubscribeFocus, void 0);
        (_b2 = __privateGet(this, _unsubscribeOnline)) == null ? void 0 : _b2.call(this);
        __privateSet(this, _unsubscribeOnline, void 0);
      }
      isFetching(filters) {
        return __privateGet(this, _queryCache).findAll({ ...filters, fetchStatus: "fetching" }).length;
      }
      isMutating(filters) {
        return __privateGet(this, _mutationCache2).findAll({ ...filters, status: "pending" }).length;
      }
      getQueryData(queryKey2) {
        var _a2;
        const options = this.defaultQueryOptions({ queryKey: queryKey2 });
        return (_a2 = __privateGet(this, _queryCache).get(options.queryHash)) == null ? void 0 : _a2.state.data;
      }
      ensureQueryData(options) {
        const defaultedOptions = this.defaultQueryOptions(options);
        const query = __privateGet(this, _queryCache).build(this, defaultedOptions);
        const cachedData = query.state.data;
        if (cachedData === void 0) {
          return this.fetchQuery(options);
        }
        if (options.revalidateIfStale && query.isStaleByTime(resolveStaleTime(defaultedOptions.staleTime, query))) {
          void this.prefetchQuery(defaultedOptions);
        }
        return Promise.resolve(cachedData);
      }
      getQueriesData(filters) {
        return __privateGet(this, _queryCache).findAll(filters).map(({ queryKey: queryKey2, state }) => {
          const data = state.data;
          return [queryKey2, data];
        });
      }
      setQueryData(queryKey2, updater, options) {
        const defaultedOptions = this.defaultQueryOptions({ queryKey: queryKey2 });
        const query = __privateGet(this, _queryCache).get(
          defaultedOptions.queryHash
        );
        const prevData = query == null ? void 0 : query.state.data;
        const data = functionalUpdate(updater, prevData);
        if (data === void 0) {
          return void 0;
        }
        return __privateGet(this, _queryCache).build(this, defaultedOptions).setData(data, { ...options, manual: true });
      }
      setQueriesData(filters, updater, options) {
        return notifyManager.batch(
          () => __privateGet(this, _queryCache).findAll(filters).map(({ queryKey: queryKey2 }) => [
            queryKey2,
            this.setQueryData(queryKey2, updater, options)
          ])
        );
      }
      getQueryState(queryKey2) {
        var _a2;
        const options = this.defaultQueryOptions({ queryKey: queryKey2 });
        return (_a2 = __privateGet(this, _queryCache).get(
          options.queryHash
        )) == null ? void 0 : _a2.state;
      }
      removeQueries(filters) {
        const queryCache = __privateGet(this, _queryCache);
        notifyManager.batch(() => {
          queryCache.findAll(filters).forEach((query) => {
            queryCache.remove(query);
          });
        });
      }
      resetQueries(filters, options) {
        const queryCache = __privateGet(this, _queryCache);
        const refetchFilters = {
          type: "active",
          ...filters
        };
        return notifyManager.batch(() => {
          queryCache.findAll(filters).forEach((query) => {
            query.reset();
          });
          return this.refetchQueries(refetchFilters, options);
        });
      }
      cancelQueries(filters, cancelOptions = {}) {
        const defaultedCancelOptions = { revert: true, ...cancelOptions };
        const promises = notifyManager.batch(
          () => __privateGet(this, _queryCache).findAll(filters).map((query) => query.cancel(defaultedCancelOptions))
        );
        return Promise.all(promises).then(noop$6).catch(noop$6);
      }
      invalidateQueries(filters, options = {}) {
        return notifyManager.batch(() => {
          __privateGet(this, _queryCache).findAll(filters).forEach((query) => {
            query.invalidate();
          });
          if ((filters == null ? void 0 : filters.refetchType) === "none") {
            return Promise.resolve();
          }
          const refetchFilters = {
            ...filters,
            type: (filters == null ? void 0 : filters.refetchType) ?? (filters == null ? void 0 : filters.type) ?? "active"
          };
          return this.refetchQueries(refetchFilters, options);
        });
      }
      refetchQueries(filters, options = {}) {
        const fetchOptions = {
          ...options,
          cancelRefetch: options.cancelRefetch ?? true
        };
        const promises = notifyManager.batch(
          () => __privateGet(this, _queryCache).findAll(filters).filter((query) => !query.isDisabled()).map((query) => {
            let promise = query.fetch(void 0, fetchOptions);
            if (!fetchOptions.throwOnError) {
              promise = promise.catch(noop$6);
            }
            return query.state.fetchStatus === "paused" ? Promise.resolve() : promise;
          })
        );
        return Promise.all(promises).then(noop$6);
      }
      fetchQuery(options) {
        const defaultedOptions = this.defaultQueryOptions(options);
        if (defaultedOptions.retry === void 0) {
          defaultedOptions.retry = false;
        }
        const query = __privateGet(this, _queryCache).build(this, defaultedOptions);
        return query.isStaleByTime(
          resolveStaleTime(defaultedOptions.staleTime, query)
        ) ? query.fetch(defaultedOptions) : Promise.resolve(query.state.data);
      }
      prefetchQuery(options) {
        return this.fetchQuery(options).then(noop$6).catch(noop$6);
      }
      fetchInfiniteQuery(options) {
        options.behavior = infiniteQueryBehavior(options.pages);
        return this.fetchQuery(options);
      }
      prefetchInfiniteQuery(options) {
        return this.fetchInfiniteQuery(options).then(noop$6).catch(noop$6);
      }
      ensureInfiniteQueryData(options) {
        options.behavior = infiniteQueryBehavior(options.pages);
        return this.ensureQueryData(options);
      }
      resumePausedMutations() {
        if (onlineManager.isOnline()) {
          return __privateGet(this, _mutationCache2).resumePausedMutations();
        }
        return Promise.resolve();
      }
      getQueryCache() {
        return __privateGet(this, _queryCache);
      }
      getMutationCache() {
        return __privateGet(this, _mutationCache2);
      }
      getDefaultOptions() {
        return __privateGet(this, _defaultOptions2);
      }
      setDefaultOptions(options) {
        __privateSet(this, _defaultOptions2, options);
      }
      setQueryDefaults(queryKey2, options) {
        __privateGet(this, _queryDefaults).set(hashKey(queryKey2), {
          queryKey: queryKey2,
          defaultOptions: options
        });
      }
      getQueryDefaults(queryKey2) {
        const defaults2 = [...__privateGet(this, _queryDefaults).values()];
        const result = {};
        defaults2.forEach((queryDefault) => {
          if (partialMatchKey(queryKey2, queryDefault.queryKey)) {
            Object.assign(result, queryDefault.defaultOptions);
          }
        });
        return result;
      }
      setMutationDefaults(mutationKey, options) {
        __privateGet(this, _mutationDefaults).set(hashKey(mutationKey), {
          mutationKey,
          defaultOptions: options
        });
      }
      getMutationDefaults(mutationKey) {
        const defaults2 = [...__privateGet(this, _mutationDefaults).values()];
        let result = {};
        defaults2.forEach((queryDefault) => {
          if (partialMatchKey(mutationKey, queryDefault.mutationKey)) {
            result = { ...result, ...queryDefault.defaultOptions };
          }
        });
        return result;
      }
      defaultQueryOptions(options) {
        if (options._defaulted) {
          return options;
        }
        const defaultedOptions = {
          ...__privateGet(this, _defaultOptions2).queries,
          ...this.getQueryDefaults(options.queryKey),
          ...options,
          _defaulted: true
        };
        if (!defaultedOptions.queryHash) {
          defaultedOptions.queryHash = hashQueryKeyByOptions(
            defaultedOptions.queryKey,
            defaultedOptions
          );
        }
        if (defaultedOptions.refetchOnReconnect === void 0) {
          defaultedOptions.refetchOnReconnect = defaultedOptions.networkMode !== "always";
        }
        if (defaultedOptions.throwOnError === void 0) {
          defaultedOptions.throwOnError = !!defaultedOptions.suspense;
        }
        if (!defaultedOptions.networkMode && defaultedOptions.persister) {
          defaultedOptions.networkMode = "offlineFirst";
        }
        if (defaultedOptions.queryFn === skipToken$1) {
          defaultedOptions.enabled = false;
        }
        return defaultedOptions;
      }
      defaultMutationOptions(options) {
        if (options == null ? void 0 : options._defaulted) {
          return options;
        }
        return {
          ...__privateGet(this, _defaultOptions2).mutations,
          ...(options == null ? void 0 : options.mutationKey) && this.getMutationDefaults(options.mutationKey),
          ...options,
          _defaulted: true
        };
      }
      clear() {
        __privateGet(this, _queryCache).clear();
        __privateGet(this, _mutationCache2).clear();
      }
    }, _queryCache = new WeakMap(), _mutationCache2 = new WeakMap(), _defaultOptions2 = new WeakMap(), _queryDefaults = new WeakMap(), _mutationDefaults = new WeakMap(), _mountCount = new WeakMap(), _unsubscribeFocus = new WeakMap(), _unsubscribeOnline = new WeakMap(), _h);
    var QueryObserver = (_i = class extends Subscribable {
      constructor(client2, options) {
        super();
        __privateAdd(this, _executeFetch);
        __privateAdd(this, _updateStaleTimeout);
        __privateAdd(this, _computeRefetchInterval);
        __privateAdd(this, _updateRefetchInterval);
        __privateAdd(this, _updateTimers);
        __privateAdd(this, _clearStaleTimeout);
        __privateAdd(this, _clearRefetchInterval);
        __privateAdd(this, _updateQuery);
        __privateAdd(this, _notify);
        __privateAdd(this, _client, void 0);
        __privateAdd(this, _currentQuery, void 0);
        __privateAdd(this, _currentQueryInitialState, void 0);
        __privateAdd(this, _currentResult, void 0);
        __privateAdd(this, _currentResultState, void 0);
        __privateAdd(this, _currentResultOptions, void 0);
        __privateAdd(this, _currentThenable, void 0);
        __privateAdd(this, _selectError, void 0);
        __privateAdd(this, _selectFn, void 0);
        __privateAdd(this, _selectResult, void 0);
        // This property keeps track of the last query with defined data.
        // It will be used to pass the previous data and query to the placeholder function between renders.
        __privateAdd(this, _lastQueryWithDefinedData, void 0);
        __privateAdd(this, _staleTimeoutId, void 0);
        __privateAdd(this, _refetchIntervalId, void 0);
        __privateAdd(this, _currentRefetchInterval, void 0);
        __privateAdd(this, _trackedProps, /* @__PURE__ */ new Set());
        this.options = options;
        __privateSet(this, _client, client2);
        __privateSet(this, _selectError, null);
        __privateSet(this, _currentThenable, pendingThenable());
        if (!this.options.experimental_prefetchInRender) {
          __privateGet(this, _currentThenable).reject(
            new Error("experimental_prefetchInRender feature flag is not enabled")
          );
        }
        this.bindMethods();
        this.setOptions(options);
      }
      bindMethods() {
        this.refetch = this.refetch.bind(this);
      }
      onSubscribe() {
        if (this.listeners.size === 1) {
          __privateGet(this, _currentQuery).addObserver(this);
          if (shouldFetchOnMount(__privateGet(this, _currentQuery), this.options)) {
            __privateMethod(this, _executeFetch, executeFetch_fn).call(this);
          } else {
            this.updateResult();
          }
          __privateMethod(this, _updateTimers, updateTimers_fn).call(this);
        }
      }
      onUnsubscribe() {
        if (!this.hasListeners()) {
          this.destroy();
        }
      }
      shouldFetchOnReconnect() {
        return shouldFetchOn(
          __privateGet(this, _currentQuery),
          this.options,
          this.options.refetchOnReconnect
        );
      }
      shouldFetchOnWindowFocus() {
        return shouldFetchOn(
          __privateGet(this, _currentQuery),
          this.options,
          this.options.refetchOnWindowFocus
        );
      }
      destroy() {
        this.listeners = /* @__PURE__ */ new Set();
        __privateMethod(this, _clearStaleTimeout, clearStaleTimeout_fn).call(this);
        __privateMethod(this, _clearRefetchInterval, clearRefetchInterval_fn).call(this);
        __privateGet(this, _currentQuery).removeObserver(this);
      }
      setOptions(options, notifyOptions) {
        const prevOptions = this.options;
        const prevQuery = __privateGet(this, _currentQuery);
        this.options = __privateGet(this, _client).defaultQueryOptions(options);
        if (this.options.enabled !== void 0 && typeof this.options.enabled !== "boolean" && typeof this.options.enabled !== "function" && typeof resolveEnabled(this.options.enabled, __privateGet(this, _currentQuery)) !== "boolean") {
          throw new Error(
            "Expected enabled to be a boolean or a callback that returns a boolean"
          );
        }
        __privateMethod(this, _updateQuery, updateQuery_fn).call(this);
        __privateGet(this, _currentQuery).setOptions(this.options);
        if (prevOptions._defaulted && !shallowEqualObjects(this.options, prevOptions)) {
          __privateGet(this, _client).getQueryCache().notify({
            type: "observerOptionsUpdated",
            query: __privateGet(this, _currentQuery),
            observer: this
          });
        }
        const mounted = this.hasListeners();
        if (mounted && shouldFetchOptionally(
          __privateGet(this, _currentQuery),
          prevQuery,
          this.options,
          prevOptions
        )) {
          __privateMethod(this, _executeFetch, executeFetch_fn).call(this);
        }
        this.updateResult(notifyOptions);
        if (mounted && (__privateGet(this, _currentQuery) !== prevQuery || resolveEnabled(this.options.enabled, __privateGet(this, _currentQuery)) !== resolveEnabled(prevOptions.enabled, __privateGet(this, _currentQuery)) || resolveStaleTime(this.options.staleTime, __privateGet(this, _currentQuery)) !== resolveStaleTime(prevOptions.staleTime, __privateGet(this, _currentQuery)))) {
          __privateMethod(this, _updateStaleTimeout, updateStaleTimeout_fn).call(this);
        }
        const nextRefetchInterval = __privateMethod(this, _computeRefetchInterval, computeRefetchInterval_fn).call(this);
        if (mounted && (__privateGet(this, _currentQuery) !== prevQuery || resolveEnabled(this.options.enabled, __privateGet(this, _currentQuery)) !== resolveEnabled(prevOptions.enabled, __privateGet(this, _currentQuery)) || nextRefetchInterval !== __privateGet(this, _currentRefetchInterval))) {
          __privateMethod(this, _updateRefetchInterval, updateRefetchInterval_fn).call(this, nextRefetchInterval);
        }
      }
      getOptimisticResult(options) {
        const query = __privateGet(this, _client).getQueryCache().build(__privateGet(this, _client), options);
        const result = this.createResult(query, options);
        if (shouldAssignObserverCurrentProperties(this, result)) {
          __privateSet(this, _currentResult, result);
          __privateSet(this, _currentResultOptions, this.options);
          __privateSet(this, _currentResultState, __privateGet(this, _currentQuery).state);
        }
        return result;
      }
      getCurrentResult() {
        return __privateGet(this, _currentResult);
      }
      trackResult(result, onPropTracked) {
        const trackedResult = {};
        Object.keys(result).forEach((key) => {
          Object.defineProperty(trackedResult, key, {
            configurable: false,
            enumerable: true,
            get: () => {
              this.trackProp(key);
              onPropTracked == null ? void 0 : onPropTracked(key);
              return result[key];
            }
          });
        });
        return trackedResult;
      }
      trackProp(key) {
        __privateGet(this, _trackedProps).add(key);
      }
      getCurrentQuery() {
        return __privateGet(this, _currentQuery);
      }
      refetch({ ...options } = {}) {
        return this.fetch({
          ...options
        });
      }
      fetchOptimistic(options) {
        const defaultedOptions = __privateGet(this, _client).defaultQueryOptions(options);
        const query = __privateGet(this, _client).getQueryCache().build(__privateGet(this, _client), defaultedOptions);
        return query.fetch().then(() => this.createResult(query, defaultedOptions));
      }
      fetch(fetchOptions) {
        return __privateMethod(this, _executeFetch, executeFetch_fn).call(this, {
          ...fetchOptions,
          cancelRefetch: fetchOptions.cancelRefetch ?? true
        }).then(() => {
          this.updateResult();
          return __privateGet(this, _currentResult);
        });
      }
      createResult(query, options) {
        var _a2;
        const prevQuery = __privateGet(this, _currentQuery);
        const prevOptions = this.options;
        const prevResult = __privateGet(this, _currentResult);
        const prevResultState = __privateGet(this, _currentResultState);
        const prevResultOptions = __privateGet(this, _currentResultOptions);
        const queryChange = query !== prevQuery;
        const queryInitialState = queryChange ? query.state : __privateGet(this, _currentQueryInitialState);
        const { state } = query;
        let newState = { ...state };
        let isPlaceholderData = false;
        let data;
        if (options._optimisticResults) {
          const mounted = this.hasListeners();
          const fetchOnMount = !mounted && shouldFetchOnMount(query, options);
          const fetchOptionally = mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions);
          if (fetchOnMount || fetchOptionally) {
            newState = {
              ...newState,
              ...fetchState(state.data, query.options)
            };
          }
          if (options._optimisticResults === "isRestoring") {
            newState.fetchStatus = "idle";
          }
        }
        let { error: error2, errorUpdatedAt, status } = newState;
        if (options.select && newState.data !== void 0) {
          if (prevResult && newState.data === (prevResultState == null ? void 0 : prevResultState.data) && options.select === __privateGet(this, _selectFn)) {
            data = __privateGet(this, _selectResult);
          } else {
            try {
              __privateSet(this, _selectFn, options.select);
              data = options.select(newState.data);
              data = replaceData(prevResult == null ? void 0 : prevResult.data, data, options);
              __privateSet(this, _selectResult, data);
              __privateSet(this, _selectError, null);
            } catch (selectError) {
              __privateSet(this, _selectError, selectError);
            }
          }
        } else {
          data = newState.data;
        }
        if (options.placeholderData !== void 0 && data === void 0 && status === "pending") {
          let placeholderData;
          if ((prevResult == null ? void 0 : prevResult.isPlaceholderData) && options.placeholderData === (prevResultOptions == null ? void 0 : prevResultOptions.placeholderData)) {
            placeholderData = prevResult.data;
          } else {
            placeholderData = typeof options.placeholderData === "function" ? options.placeholderData(
              (_a2 = __privateGet(this, _lastQueryWithDefinedData)) == null ? void 0 : _a2.state.data,
              __privateGet(this, _lastQueryWithDefinedData)
            ) : options.placeholderData;
            if (options.select && placeholderData !== void 0) {
              try {
                placeholderData = options.select(placeholderData);
                __privateSet(this, _selectError, null);
              } catch (selectError) {
                __privateSet(this, _selectError, selectError);
              }
            }
          }
          if (placeholderData !== void 0) {
            status = "success";
            data = replaceData(
              prevResult == null ? void 0 : prevResult.data,
              placeholderData,
              options
            );
            isPlaceholderData = true;
          }
        }
        if (__privateGet(this, _selectError)) {
          error2 = __privateGet(this, _selectError);
          data = __privateGet(this, _selectResult);
          errorUpdatedAt = Date.now();
          status = "error";
        }
        const isFetching = newState.fetchStatus === "fetching";
        const isPending2 = status === "pending";
        const isError = status === "error";
        const isLoading = isPending2 && isFetching;
        const hasData = data !== void 0;
        const result = {
          status,
          fetchStatus: newState.fetchStatus,
          isPending: isPending2,
          isSuccess: status === "success",
          isError,
          isInitialLoading: isLoading,
          isLoading,
          data,
          dataUpdatedAt: newState.dataUpdatedAt,
          error: error2,
          errorUpdatedAt,
          failureCount: newState.fetchFailureCount,
          failureReason: newState.fetchFailureReason,
          errorUpdateCount: newState.errorUpdateCount,
          isFetched: newState.dataUpdateCount > 0 || newState.errorUpdateCount > 0,
          isFetchedAfterMount: newState.dataUpdateCount > queryInitialState.dataUpdateCount || newState.errorUpdateCount > queryInitialState.errorUpdateCount,
          isFetching,
          isRefetching: isFetching && !isPending2,
          isLoadingError: isError && !hasData,
          isPaused: newState.fetchStatus === "paused",
          isPlaceholderData,
          isRefetchError: isError && hasData,
          isStale: isStale(query, options),
          refetch: this.refetch,
          promise: __privateGet(this, _currentThenable)
        };
        const nextResult = result;
        if (this.options.experimental_prefetchInRender) {
          const finalizeThenableIfPossible = (thenable) => {
            if (nextResult.status === "error") {
              thenable.reject(nextResult.error);
            } else if (nextResult.data !== void 0) {
              thenable.resolve(nextResult.data);
            }
          };
          const recreateThenable = () => {
            const pending = __privateSet(this, _currentThenable, nextResult.promise = pendingThenable());
            finalizeThenableIfPossible(pending);
          };
          const prevThenable = __privateGet(this, _currentThenable);
          switch (prevThenable.status) {
            case "pending":
              if (query.queryHash === prevQuery.queryHash) {
                finalizeThenableIfPossible(prevThenable);
              }
              break;
            case "fulfilled":
              if (nextResult.status === "error" || nextResult.data !== prevThenable.value) {
                recreateThenable();
              }
              break;
            case "rejected":
              if (nextResult.status !== "error" || nextResult.error !== prevThenable.reason) {
                recreateThenable();
              }
              break;
          }
        }
        return nextResult;
      }
      updateResult(notifyOptions) {
        const prevResult = __privateGet(this, _currentResult);
        const nextResult = this.createResult(__privateGet(this, _currentQuery), this.options);
        __privateSet(this, _currentResultState, __privateGet(this, _currentQuery).state);
        __privateSet(this, _currentResultOptions, this.options);
        if (__privateGet(this, _currentResultState).data !== void 0) {
          __privateSet(this, _lastQueryWithDefinedData, __privateGet(this, _currentQuery));
        }
        if (shallowEqualObjects(nextResult, prevResult)) {
          return;
        }
        __privateSet(this, _currentResult, nextResult);
        const defaultNotifyOptions = {};
        const shouldNotifyListeners = () => {
          if (!prevResult) {
            return true;
          }
          const { notifyOnChangeProps } = this.options;
          const notifyOnChangePropsValue = typeof notifyOnChangeProps === "function" ? notifyOnChangeProps() : notifyOnChangeProps;
          if (notifyOnChangePropsValue === "all" || !notifyOnChangePropsValue && !__privateGet(this, _trackedProps).size) {
            return true;
          }
          const includedProps = new Set(
            notifyOnChangePropsValue ?? __privateGet(this, _trackedProps)
          );
          if (this.options.throwOnError) {
            includedProps.add("error");
          }
          return Object.keys(__privateGet(this, _currentResult)).some((key) => {
            const typedKey = key;
            const changed = __privateGet(this, _currentResult)[typedKey] !== prevResult[typedKey];
            return changed && includedProps.has(typedKey);
          });
        };
        if ((notifyOptions == null ? void 0 : notifyOptions.listeners) !== false && shouldNotifyListeners()) {
          defaultNotifyOptions.listeners = true;
        }
        __privateMethod(this, _notify, notify_fn).call(this, { ...defaultNotifyOptions, ...notifyOptions });
      }
      onQueryUpdate() {
        this.updateResult();
        if (this.hasListeners()) {
          __privateMethod(this, _updateTimers, updateTimers_fn).call(this);
        }
      }
    }, _client = new WeakMap(), _currentQuery = new WeakMap(), _currentQueryInitialState = new WeakMap(), _currentResult = new WeakMap(), _currentResultState = new WeakMap(), _currentResultOptions = new WeakMap(), _currentThenable = new WeakMap(), _selectError = new WeakMap(), _selectFn = new WeakMap(), _selectResult = new WeakMap(), _lastQueryWithDefinedData = new WeakMap(), _staleTimeoutId = new WeakMap(), _refetchIntervalId = new WeakMap(), _currentRefetchInterval = new WeakMap(), _trackedProps = new WeakMap(), _executeFetch = new WeakSet(), executeFetch_fn = function(fetchOptions) {
      __privateMethod(this, _updateQuery, updateQuery_fn).call(this);
      let promise = __privateGet(this, _currentQuery).fetch(
        this.options,
        fetchOptions
      );
      if (!(fetchOptions == null ? void 0 : fetchOptions.throwOnError)) {
        promise = promise.catch(noop$6);
      }
      return promise;
    }, _updateStaleTimeout = new WeakSet(), updateStaleTimeout_fn = function() {
      __privateMethod(this, _clearStaleTimeout, clearStaleTimeout_fn).call(this);
      const staleTime = resolveStaleTime(
        this.options.staleTime,
        __privateGet(this, _currentQuery)
      );
      if (isServer || __privateGet(this, _currentResult).isStale || !isValidTimeout(staleTime)) {
        return;
      }
      const time2 = timeUntilStale(__privateGet(this, _currentResult).dataUpdatedAt, staleTime);
      const timeout = time2 + 1;
      __privateSet(this, _staleTimeoutId, setTimeout(() => {
        if (!__privateGet(this, _currentResult).isStale) {
          this.updateResult();
        }
      }, timeout));
    }, _computeRefetchInterval = new WeakSet(), computeRefetchInterval_fn = function() {
      return (typeof this.options.refetchInterval === "function" ? this.options.refetchInterval(__privateGet(this, _currentQuery)) : this.options.refetchInterval) ?? false;
    }, _updateRefetchInterval = new WeakSet(), updateRefetchInterval_fn = function(nextInterval) {
      __privateMethod(this, _clearRefetchInterval, clearRefetchInterval_fn).call(this);
      __privateSet(this, _currentRefetchInterval, nextInterval);
      if (isServer || resolveEnabled(this.options.enabled, __privateGet(this, _currentQuery)) === false || !isValidTimeout(__privateGet(this, _currentRefetchInterval)) || __privateGet(this, _currentRefetchInterval) === 0) {
        return;
      }
      __privateSet(this, _refetchIntervalId, setInterval(() => {
        if (this.options.refetchIntervalInBackground || focusManager.isFocused()) {
          __privateMethod(this, _executeFetch, executeFetch_fn).call(this);
        }
      }, __privateGet(this, _currentRefetchInterval)));
    }, _updateTimers = new WeakSet(), updateTimers_fn = function() {
      __privateMethod(this, _updateStaleTimeout, updateStaleTimeout_fn).call(this);
      __privateMethod(this, _updateRefetchInterval, updateRefetchInterval_fn).call(this, __privateMethod(this, _computeRefetchInterval, computeRefetchInterval_fn).call(this));
    }, _clearStaleTimeout = new WeakSet(), clearStaleTimeout_fn = function() {
      if (__privateGet(this, _staleTimeoutId)) {
        clearTimeout(__privateGet(this, _staleTimeoutId));
        __privateSet(this, _staleTimeoutId, void 0);
      }
    }, _clearRefetchInterval = new WeakSet(), clearRefetchInterval_fn = function() {
      if (__privateGet(this, _refetchIntervalId)) {
        clearInterval(__privateGet(this, _refetchIntervalId));
        __privateSet(this, _refetchIntervalId, void 0);
      }
    }, _updateQuery = new WeakSet(), updateQuery_fn = function() {
      const query = __privateGet(this, _client).getQueryCache().build(__privateGet(this, _client), this.options);
      if (query === __privateGet(this, _currentQuery)) {
        return;
      }
      const prevQuery = __privateGet(this, _currentQuery);
      __privateSet(this, _currentQuery, query);
      __privateSet(this, _currentQueryInitialState, query.state);
      if (this.hasListeners()) {
        prevQuery == null ? void 0 : prevQuery.removeObserver(this);
        query.addObserver(this);
      }
    }, _notify = new WeakSet(), notify_fn = function(notifyOptions) {
      notifyManager.batch(() => {
        if (notifyOptions.listeners) {
          this.listeners.forEach((listener) => {
            listener(__privateGet(this, _currentResult));
          });
        }
        __privateGet(this, _client).getQueryCache().notify({
          query: __privateGet(this, _currentQuery),
          type: "observerResultsUpdated"
        });
      });
    }, _i);
    function shouldLoadOnMount(query, options) {
      return resolveEnabled(options.enabled, query) !== false && query.state.data === void 0 && !(query.state.status === "error" && options.retryOnMount === false);
    }
    function shouldFetchOnMount(query, options) {
      return shouldLoadOnMount(query, options) || query.state.data !== void 0 && shouldFetchOn(query, options, options.refetchOnMount);
    }
    function shouldFetchOn(query, options, field) {
      if (resolveEnabled(options.enabled, query) !== false) {
        const value2 = typeof field === "function" ? field(query) : field;
        return value2 === "always" || value2 !== false && isStale(query, options);
      }
      return false;
    }
    function shouldFetchOptionally(query, prevQuery, options, prevOptions) {
      return (query !== prevQuery || resolveEnabled(prevOptions.enabled, query) === false) && (!options.suspense || query.state.status !== "error") && isStale(query, options);
    }
    function isStale(query, options) {
      return resolveEnabled(options.enabled, query) !== false && query.isStaleByTime(resolveStaleTime(options.staleTime, query));
    }
    function shouldAssignObserverCurrentProperties(observer, optimisticResult) {
      if (!shallowEqualObjects(observer.getCurrentResult(), optimisticResult)) {
        return true;
      }
      return false;
    }
    var MutationObserver$1 = (_j = class extends Subscribable {
      constructor(client2, options) {
        super();
        __privateAdd(this, _updateResult);
        __privateAdd(this, _notify2);
        __privateAdd(this, _client2, void 0);
        __privateAdd(this, _currentResult2, void 0);
        __privateAdd(this, _currentMutation, void 0);
        __privateAdd(this, _mutateOptions, void 0);
        __privateSet(this, _client2, client2);
        this.setOptions(options);
        this.bindMethods();
        __privateMethod(this, _updateResult, updateResult_fn).call(this);
      }
      bindMethods() {
        this.mutate = this.mutate.bind(this);
        this.reset = this.reset.bind(this);
      }
      setOptions(options) {
        var _a2;
        const prevOptions = this.options;
        this.options = __privateGet(this, _client2).defaultMutationOptions(options);
        if (!shallowEqualObjects(this.options, prevOptions)) {
          __privateGet(this, _client2).getMutationCache().notify({
            type: "observerOptionsUpdated",
            mutation: __privateGet(this, _currentMutation),
            observer: this
          });
        }
        if ((prevOptions == null ? void 0 : prevOptions.mutationKey) && this.options.mutationKey && hashKey(prevOptions.mutationKey) !== hashKey(this.options.mutationKey)) {
          this.reset();
        } else if (((_a2 = __privateGet(this, _currentMutation)) == null ? void 0 : _a2.state.status) === "pending") {
          __privateGet(this, _currentMutation).setOptions(this.options);
        }
      }
      onUnsubscribe() {
        var _a2;
        if (!this.hasListeners()) {
          (_a2 = __privateGet(this, _currentMutation)) == null ? void 0 : _a2.removeObserver(this);
        }
      }
      onMutationUpdate(action) {
        __privateMethod(this, _updateResult, updateResult_fn).call(this);
        __privateMethod(this, _notify2, notify_fn2).call(this, action);
      }
      getCurrentResult() {
        return __privateGet(this, _currentResult2);
      }
      reset() {
        var _a2;
        (_a2 = __privateGet(this, _currentMutation)) == null ? void 0 : _a2.removeObserver(this);
        __privateSet(this, _currentMutation, void 0);
        __privateMethod(this, _updateResult, updateResult_fn).call(this);
        __privateMethod(this, _notify2, notify_fn2).call(this);
      }
      mutate(variables, options) {
        var _a2;
        __privateSet(this, _mutateOptions, options);
        (_a2 = __privateGet(this, _currentMutation)) == null ? void 0 : _a2.removeObserver(this);
        __privateSet(this, _currentMutation, __privateGet(this, _client2).getMutationCache().build(__privateGet(this, _client2), this.options));
        __privateGet(this, _currentMutation).addObserver(this);
        return __privateGet(this, _currentMutation).execute(variables);
      }
    }, _client2 = new WeakMap(), _currentResult2 = new WeakMap(), _currentMutation = new WeakMap(), _mutateOptions = new WeakMap(), _updateResult = new WeakSet(), updateResult_fn = function() {
      var _a2;
      const state = ((_a2 = __privateGet(this, _currentMutation)) == null ? void 0 : _a2.state) ?? getDefaultState();
      __privateSet(this, _currentResult2, {
        ...state,
        isPending: state.status === "pending",
        isSuccess: state.status === "success",
        isError: state.status === "error",
        isIdle: state.status === "idle",
        mutate: this.mutate,
        reset: this.reset
      });
    }, _notify2 = new WeakSet(), notify_fn2 = function(action) {
      notifyManager.batch(() => {
        var _a2, _b2, _c2, _d2, _e3, _f2, _g2, _h2;
        if (__privateGet(this, _mutateOptions) && this.hasListeners()) {
          const variables = __privateGet(this, _currentResult2).variables;
          const context = __privateGet(this, _currentResult2).context;
          if ((action == null ? void 0 : action.type) === "success") {
            (_b2 = (_a2 = __privateGet(this, _mutateOptions)).onSuccess) == null ? void 0 : _b2.call(_a2, action.data, variables, context);
            (_d2 = (_c2 = __privateGet(this, _mutateOptions)).onSettled) == null ? void 0 : _d2.call(_c2, action.data, null, variables, context);
          } else if ((action == null ? void 0 : action.type) === "error") {
            (_f2 = (_e3 = __privateGet(this, _mutateOptions)).onError) == null ? void 0 : _f2.call(_e3, action.error, variables, context);
            (_h2 = (_g2 = __privateGet(this, _mutateOptions)).onSettled) == null ? void 0 : _h2.call(
              _g2,
              void 0,
              action.error,
              variables,
              context
            );
          }
        }
        this.listeners.forEach((listener) => {
          listener(__privateGet(this, _currentResult2));
        });
      });
    }, _j);
    var QueryClientContext = reactExports.createContext(
      void 0
    );
    var useQueryClient = (queryClient2) => {
      const client2 = reactExports.useContext(QueryClientContext);
      if (queryClient2) {
        return queryClient2;
      }
      if (!client2) {
        throw new Error("No QueryClient set, use QueryClientProvider to set one");
      }
      return client2;
    };
    var QueryClientProvider = ({
      client: client2,
      children
    }) => {
      reactExports.useEffect(() => {
        client2.mount();
        return () => {
          client2.unmount();
        };
      }, [client2]);
      return /* @__PURE__ */ jsxRuntimeExports.jsx(QueryClientContext.Provider, { value: client2, children });
    };
    var IsRestoringContext = reactExports.createContext(false);
    var useIsRestoring = () => reactExports.useContext(IsRestoringContext);
    IsRestoringContext.Provider;
    function createValue() {
      let isReset = false;
      return {
        clearReset: () => {
          isReset = false;
        },
        reset: () => {
          isReset = true;
        },
        isReset: () => {
          return isReset;
        }
      };
    }
    var QueryErrorResetBoundaryContext = reactExports.createContext(createValue());
    var useQueryErrorResetBoundary = () => reactExports.useContext(QueryErrorResetBoundaryContext);
    function shouldThrowError(throwError, params) {
      if (typeof throwError === "function") {
        return throwError(...params);
      }
      return !!throwError;
    }
    function noop$5() {
    }
    var ensurePreventErrorBoundaryRetry = (options, errorResetBoundary) => {
      if (options.suspense || options.throwOnError || options.experimental_prefetchInRender) {
        if (!errorResetBoundary.isReset()) {
          options.retryOnMount = false;
        }
      }
    };
    var useClearResetErrorBoundary = (errorResetBoundary) => {
      reactExports.useEffect(() => {
        errorResetBoundary.clearReset();
      }, [errorResetBoundary]);
    };
    var getHasError = ({
      result,
      errorResetBoundary,
      throwOnError,
      query
    }) => {
      return result.isError && !errorResetBoundary.isReset() && !result.isFetching && query && shouldThrowError(throwOnError, [result.error, query]);
    };
    var ensureSuspenseTimers = (defaultedOptions) => {
      const originalStaleTime = defaultedOptions.staleTime;
      if (defaultedOptions.suspense) {
        defaultedOptions.staleTime = typeof originalStaleTime === "function" ? (...args) => Math.max(originalStaleTime(...args), 1e3) : Math.max(originalStaleTime ?? 1e3, 1e3);
        if (typeof defaultedOptions.gcTime === "number") {
          defaultedOptions.gcTime = Math.max(defaultedOptions.gcTime, 1e3);
        }
      }
    };
    var willFetch = (result, isRestoring) => result.isLoading && result.isFetching && !isRestoring;
    var shouldSuspend = (defaultedOptions, result) => (defaultedOptions == null ? void 0 : defaultedOptions.suspense) && result.isPending;
    var fetchOptimistic = (defaultedOptions, observer, errorResetBoundary) => observer.fetchOptimistic(defaultedOptions).catch(() => {
      errorResetBoundary.clearReset();
    });
    function useBaseQuery(options, Observer, queryClient2) {
      var _a2, _b2, _c2, _d2, _e3;
      const client2 = useQueryClient(queryClient2);
      const isRestoring = useIsRestoring();
      const errorResetBoundary = useQueryErrorResetBoundary();
      const defaultedOptions = client2.defaultQueryOptions(options);
      (_b2 = (_a2 = client2.getDefaultOptions().queries) == null ? void 0 : _a2._experimental_beforeQuery) == null ? void 0 : _b2.call(
        _a2,
        defaultedOptions
      );
      defaultedOptions._optimisticResults = isRestoring ? "isRestoring" : "optimistic";
      ensureSuspenseTimers(defaultedOptions);
      ensurePreventErrorBoundaryRetry(defaultedOptions, errorResetBoundary);
      useClearResetErrorBoundary(errorResetBoundary);
      const isNewCacheEntry = !client2.getQueryCache().get(defaultedOptions.queryHash);
      const [observer] = reactExports.useState(
        () => new Observer(
          client2,
          defaultedOptions
        )
      );
      const result = observer.getOptimisticResult(defaultedOptions);
      const shouldSubscribe = !isRestoring && options.subscribed !== false;
      reactExports.useSyncExternalStore(
        reactExports.useCallback(
          (onStoreChange) => {
            const unsubscribe = shouldSubscribe ? observer.subscribe(notifyManager.batchCalls(onStoreChange)) : noop$5;
            observer.updateResult();
            return unsubscribe;
          },
          [observer, shouldSubscribe]
        ),
        () => observer.getCurrentResult(),
        () => observer.getCurrentResult()
      );
      reactExports.useEffect(() => {
        observer.setOptions(defaultedOptions, { listeners: false });
      }, [defaultedOptions, observer]);
      if (shouldSuspend(defaultedOptions, result)) {
        throw fetchOptimistic(defaultedOptions, observer, errorResetBoundary);
      }
      if (getHasError({
        result,
        errorResetBoundary,
        throwOnError: defaultedOptions.throwOnError,
        query: client2.getQueryCache().get(defaultedOptions.queryHash)
      })) {
        throw result.error;
      }
      (_d2 = (_c2 = client2.getDefaultOptions().queries) == null ? void 0 : _c2._experimental_afterQuery) == null ? void 0 : _d2.call(
        _c2,
        defaultedOptions,
        result
      );
      if (defaultedOptions.experimental_prefetchInRender && !isServer && willFetch(result, isRestoring)) {
        const promise = isNewCacheEntry ? (
          // Fetch immediately on render in order to ensure `.promise` is resolved even if the component is unmounted
          fetchOptimistic(defaultedOptions, observer, errorResetBoundary)
        ) : (
          // subscribe to the "cache promise" so that we can finalize the currentThenable once data comes in
          (_e3 = client2.getQueryCache().get(defaultedOptions.queryHash)) == null ? void 0 : _e3.promise
        );
        promise == null ? void 0 : promise.catch(noop$5).finally(() => {
          observer.updateResult();
        });
      }
      return !defaultedOptions.notifyOnChangeProps ? observer.trackResult(result) : result;
    }
    function useQuery(options, queryClient2) {
      return useBaseQuery(options, QueryObserver, queryClient2);
    }
    function useMutation(options, queryClient2) {
      const client2 = useQueryClient(queryClient2);
      const [observer] = reactExports.useState(
        () => new MutationObserver$1(
          client2,
          options
        )
      );
      reactExports.useEffect(() => {
        observer.setOptions(options);
      }, [observer, options]);
      const result = reactExports.useSyncExternalStore(
        reactExports.useCallback(
          (onStoreChange) => observer.subscribe(notifyManager.batchCalls(onStoreChange)),
          [observer]
        ),
        () => observer.getCurrentResult(),
        () => observer.getCurrentResult()
      );
      const mutate = reactExports.useCallback(
        (variables, mutateOptions) => {
          observer.mutate(variables, mutateOptions).catch(noop$5);
        },
        [observer]
      );
      if (result.error && shouldThrowError(observer.options.throwOnError, [result.error])) {
        throw result.error;
      }
      return { ...result, mutate, mutateAsync: result.mutate };
    }
    function bind(fn, thisArg) {
      return function wrap() {
        return fn.apply(thisArg, arguments);
      };
    }
    const { toString: toString$4 } = Object.prototype;
    const { getPrototypeOf } = Object;
    const kindOf = /* @__PURE__ */ ((cache2) => (thing) => {
      const str = toString$4.call(thing);
      return cache2[str] || (cache2[str] = str.slice(8, -1).toLowerCase());
    })(/* @__PURE__ */ Object.create(null));
    const kindOfTest = (type) => {
      type = type.toLowerCase();
      return (thing) => kindOf(thing) === type;
    };
    const typeOfTest = (type) => (thing) => typeof thing === type;
    const { isArray: isArray$g } = Array;
    const isUndefined = typeOfTest("undefined");
    function isBuffer$3(val) {
      return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && isFunction$5(val.constructor.isBuffer) && val.constructor.isBuffer(val);
    }
    const isArrayBuffer = kindOfTest("ArrayBuffer");
    function isArrayBufferView(val) {
      let result;
      if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
        result = ArrayBuffer.isView(val);
      } else {
        result = val && val.buffer && isArrayBuffer(val.buffer);
      }
      return result;
    }
    const isString$2 = typeOfTest("string");
    const isFunction$5 = typeOfTest("function");
    const isNumber$4 = typeOfTest("number");
    const isObject$9 = (thing) => thing !== null && typeof thing === "object";
    const isBoolean$2 = (thing) => thing === true || thing === false;
    const isPlainObject$2 = (val) => {
      if (kindOf(val) !== "object") {
        return false;
      }
      const prototype2 = getPrototypeOf(val);
      return (prototype2 === null || prototype2 === Object.prototype || Object.getPrototypeOf(prototype2) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);
    };
    const isDate = kindOfTest("Date");
    const isFile = kindOfTest("File");
    const isBlob = kindOfTest("Blob");
    const isFileList = kindOfTest("FileList");
    const isStream = (val) => isObject$9(val) && isFunction$5(val.pipe);
    const isFormData = (thing) => {
      let kind;
      return thing && (typeof FormData === "function" && thing instanceof FormData || isFunction$5(thing.append) && ((kind = kindOf(thing)) === "formdata" || // detect form-data instance
      kind === "object" && isFunction$5(thing.toString) && thing.toString() === "[object FormData]"));
    };
    const isURLSearchParams = kindOfTest("URLSearchParams");
    const [isReadableStream, isRequest, isResponse, isHeaders] = ["ReadableStream", "Request", "Response", "Headers"].map(kindOfTest);
    const trim = (str) => str.trim ? str.trim() : str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
    function forEach(obj, fn, { allOwnKeys = false } = {}) {
      if (obj === null || typeof obj === "undefined") {
        return;
      }
      let i2;
      let l2;
      if (typeof obj !== "object") {
        obj = [obj];
      }
      if (isArray$g(obj)) {
        for (i2 = 0, l2 = obj.length; i2 < l2; i2++) {
          fn.call(null, obj[i2], i2, obj);
        }
      } else {
        const keys2 = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
        const len = keys2.length;
        let key;
        for (i2 = 0; i2 < len; i2++) {
          key = keys2[i2];
          fn.call(null, obj[key], key, obj);
        }
      }
    }
    function findKey(obj, key) {
      key = key.toLowerCase();
      const keys2 = Object.keys(obj);
      let i2 = keys2.length;
      let _key;
      while (i2-- > 0) {
        _key = keys2[i2];
        if (key === _key.toLowerCase()) {
          return _key;
        }
      }
      return null;
    }
    const _global = (() => {
      if (typeof globalThis !== "undefined")
        return globalThis;
      return typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : global;
    })();
    const isContextDefined = (context) => !isUndefined(context) && context !== _global;
    function merge() {
      const { caseless } = isContextDefined(this) && this || {};
      const result = {};
      const assignValue = (val, key) => {
        const targetKey = caseless && findKey(result, key) || key;
        if (isPlainObject$2(result[targetKey]) && isPlainObject$2(val)) {
          result[targetKey] = merge(result[targetKey], val);
        } else if (isPlainObject$2(val)) {
          result[targetKey] = merge({}, val);
        } else if (isArray$g(val)) {
          result[targetKey] = val.slice();
        } else {
          result[targetKey] = val;
        }
      };
      for (let i2 = 0, l2 = arguments.length; i2 < l2; i2++) {
        arguments[i2] && forEach(arguments[i2], assignValue);
      }
      return result;
    }
    const extend$1 = (a2, b2, thisArg, { allOwnKeys } = {}) => {
      forEach(b2, (val, key) => {
        if (thisArg && isFunction$5(val)) {
          a2[key] = bind(val, thisArg);
        } else {
          a2[key] = val;
        }
      }, { allOwnKeys });
      return a2;
    };
    const stripBOM = (content) => {
      if (content.charCodeAt(0) === 65279) {
        content = content.slice(1);
      }
      return content;
    };
    const inherits = (constructor, superConstructor, props, descriptors2) => {
      constructor.prototype = Object.create(superConstructor.prototype, descriptors2);
      constructor.prototype.constructor = constructor;
      Object.defineProperty(constructor, "super", {
        value: superConstructor.prototype
      });
      props && Object.assign(constructor.prototype, props);
    };
    const toFlatObject = (sourceObj, destObj, filter, propFilter) => {
      let props;
      let i2;
      let prop;
      const merged = {};
      destObj = destObj || {};
      if (sourceObj == null)
        return destObj;
      do {
        props = Object.getOwnPropertyNames(sourceObj);
        i2 = props.length;
        while (i2-- > 0) {
          prop = props[i2];
          if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
            destObj[prop] = sourceObj[prop];
            merged[prop] = true;
          }
        }
        sourceObj = filter !== false && getPrototypeOf(sourceObj);
      } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);
      return destObj;
    };
    const endsWith = (str, searchString, position) => {
      str = String(str);
      if (position === void 0 || position > str.length) {
        position = str.length;
      }
      position -= searchString.length;
      const lastIndex = str.indexOf(searchString, position);
      return lastIndex !== -1 && lastIndex === position;
    };
    const toArray$1 = (thing) => {
      if (!thing)
        return null;
      if (isArray$g(thing))
        return thing;
      let i2 = thing.length;
      if (!isNumber$4(i2))
        return null;
      const arr = new Array(i2);
      while (i2-- > 0) {
        arr[i2] = thing[i2];
      }
      return arr;
    };
    const isTypedArray$4 = /* @__PURE__ */ ((TypedArray) => {
      return (thing) => {
        return TypedArray && thing instanceof TypedArray;
      };
    })(typeof Uint8Array !== "undefined" && getPrototypeOf(Uint8Array));
    const forEachEntry = (obj, fn) => {
      const generator = obj && obj[Symbol.iterator];
      const iterator = generator.call(obj);
      let result;
      while ((result = iterator.next()) && !result.done) {
        const pair = result.value;
        fn.call(obj, pair[0], pair[1]);
      }
    };
    const matchAll = (regExp, str) => {
      let matches2;
      const arr = [];
      while ((matches2 = regExp.exec(str)) !== null) {
        arr.push(matches2);
      }
      return arr;
    };
    const isHTMLForm = kindOfTest("HTMLFormElement");
    const toCamelCase = (str) => {
      return str.toLowerCase().replace(
        /[-_\s]([a-z\d])(\w*)/g,
        function replacer(m2, p1, p2) {
          return p1.toUpperCase() + p2;
        }
      );
    };
    const hasOwnProperty$b = (({ hasOwnProperty: hasOwnProperty2 }) => (obj, prop) => hasOwnProperty2.call(obj, prop))(Object.prototype);
    const isRegExp = kindOfTest("RegExp");
    const reduceDescriptors = (obj, reducer2) => {
      const descriptors2 = Object.getOwnPropertyDescriptors(obj);
      const reducedDescriptors = {};
      forEach(descriptors2, (descriptor, name) => {
        let ret;
        if ((ret = reducer2(descriptor, name, obj)) !== false) {
          reducedDescriptors[name] = ret || descriptor;
        }
      });
      Object.defineProperties(obj, reducedDescriptors);
    };
    const freezeMethods = (obj) => {
      reduceDescriptors(obj, (descriptor, name) => {
        if (isFunction$5(obj) && ["arguments", "caller", "callee"].indexOf(name) !== -1) {
          return false;
        }
        const value2 = obj[name];
        if (!isFunction$5(value2))
          return;
        descriptor.enumerable = false;
        if ("writable" in descriptor) {
          descriptor.writable = false;
          return;
        }
        if (!descriptor.set) {
          descriptor.set = () => {
            throw Error("Can not rewrite read-only method '" + name + "'");
          };
        }
      });
    };
    const toObjectSet = (arrayOrString, delimiter) => {
      const obj = {};
      const define2 = (arr) => {
        arr.forEach((value2) => {
          obj[value2] = true;
        });
      };
      isArray$g(arrayOrString) ? define2(arrayOrString) : define2(String(arrayOrString).split(delimiter));
      return obj;
    };
    const noop$4 = () => {
    };
    const toFiniteNumber = (value2, defaultValue2) => {
      return value2 != null && Number.isFinite(value2 = +value2) ? value2 : defaultValue2;
    };
    const ALPHA = "abcdefghijklmnopqrstuvwxyz";
    const DIGIT = "0123456789";
    const ALPHABET = {
      DIGIT,
      ALPHA,
      ALPHA_DIGIT: ALPHA + ALPHA.toUpperCase() + DIGIT
    };
    const generateString = (size = 16, alphabet = ALPHABET.ALPHA_DIGIT) => {
      let str = "";
      const { length } = alphabet;
      while (size--) {
        str += alphabet[Math.random() * length | 0];
      }
      return str;
    };
    function isSpecCompliantForm(thing) {
      return !!(thing && isFunction$5(thing.append) && thing[Symbol.toStringTag] === "FormData" && thing[Symbol.iterator]);
    }
    const toJSONObject = (obj) => {
      const stack = new Array(10);
      const visit = (source, i2) => {
        if (isObject$9(source)) {
          if (stack.indexOf(source) >= 0) {
            return;
          }
          if (!("toJSON" in source)) {
            stack[i2] = source;
            const target = isArray$g(source) ? [] : {};
            forEach(source, (value2, key) => {
              const reducedValue = visit(value2, i2 + 1);
              !isUndefined(reducedValue) && (target[key] = reducedValue);
            });
            stack[i2] = void 0;
            return target;
          }
        }
        return source;
      };
      return visit(obj, 0);
    };
    const isAsyncFn = kindOfTest("AsyncFunction");
    const isThenable = (thing) => thing && (isObject$9(thing) || isFunction$5(thing)) && isFunction$5(thing.then) && isFunction$5(thing.catch);
    const _setImmediate = ((setImmediateSupported, postMessageSupported) => {
      if (setImmediateSupported) {
        return setImmediate;
      }
      return postMessageSupported ? ((token2, callbacks) => {
        _global.addEventListener("message", ({ source, data }) => {
          if (source === _global && data === token2) {
            callbacks.length && callbacks.shift()();
          }
        }, false);
        return (cb2) => {
          callbacks.push(cb2);
          _global.postMessage(token2, "*");
        };
      })(`axios@${Math.random()}`, []) : (cb2) => setTimeout(cb2);
    })(
      typeof setImmediate === "function",
      isFunction$5(_global.postMessage)
    );
    const asap = typeof queueMicrotask !== "undefined" ? queueMicrotask.bind(_global) : typeof process !== "undefined" && process.nextTick || _setImmediate;
    const utils$1 = {
      isArray: isArray$g,
      isArrayBuffer,
      isBuffer: isBuffer$3,
      isFormData,
      isArrayBufferView,
      isString: isString$2,
      isNumber: isNumber$4,
      isBoolean: isBoolean$2,
      isObject: isObject$9,
      isPlainObject: isPlainObject$2,
      isReadableStream,
      isRequest,
      isResponse,
      isHeaders,
      isUndefined,
      isDate,
      isFile,
      isBlob,
      isRegExp,
      isFunction: isFunction$5,
      isStream,
      isURLSearchParams,
      isTypedArray: isTypedArray$4,
      isFileList,
      forEach,
      merge,
      extend: extend$1,
      trim,
      stripBOM,
      inherits,
      toFlatObject,
      kindOf,
      kindOfTest,
      endsWith,
      toArray: toArray$1,
      forEachEntry,
      matchAll,
      isHTMLForm,
      hasOwnProperty: hasOwnProperty$b,
      hasOwnProp: hasOwnProperty$b,
      // an alias to avoid ESLint no-prototype-builtins detection
      reduceDescriptors,
      freezeMethods,
      toObjectSet,
      toCamelCase,
      noop: noop$4,
      toFiniteNumber,
      findKey,
      global: _global,
      isContextDefined,
      ALPHABET,
      generateString,
      isSpecCompliantForm,
      toJSONObject,
      isAsyncFn,
      isThenable,
      setImmediate: _setImmediate,
      asap
    };
    function AxiosError(message, code, config2, request, response) {
      Error.call(this);
      if (Error.captureStackTrace) {
        Error.captureStackTrace(this, this.constructor);
      } else {
        this.stack = new Error().stack;
      }
      this.message = message;
      this.name = "AxiosError";
      code && (this.code = code);
      config2 && (this.config = config2);
      request && (this.request = request);
      if (response) {
        this.response = response;
        this.status = response.status ? response.status : null;
      }
    }
    utils$1.inherits(AxiosError, Error, {
      toJSON: function toJSON2() {
        return {
          // Standard
          message: this.message,
          name: this.name,
          // Microsoft
          description: this.description,
          number: this.number,
          // Mozilla
          fileName: this.fileName,
          lineNumber: this.lineNumber,
          columnNumber: this.columnNumber,
          stack: this.stack,
          // Axios
          config: utils$1.toJSONObject(this.config),
          code: this.code,
          status: this.status
        };
      }
    });
    const prototype$1 = AxiosError.prototype;
    const descriptors = {};
    [
      "ERR_BAD_OPTION_VALUE",
      "ERR_BAD_OPTION",
      "ECONNABORTED",
      "ETIMEDOUT",
      "ERR_NETWORK",
      "ERR_FR_TOO_MANY_REDIRECTS",
      "ERR_DEPRECATED",
      "ERR_BAD_RESPONSE",
      "ERR_BAD_REQUEST",
      "ERR_CANCELED",
      "ERR_NOT_SUPPORT",
      "ERR_INVALID_URL"
      // eslint-disable-next-line func-names
    ].forEach((code) => {
      descriptors[code] = { value: code };
    });
    Object.defineProperties(AxiosError, descriptors);
    Object.defineProperty(prototype$1, "isAxiosError", { value: true });
    AxiosError.from = (error2, code, config2, request, response, customProps) => {
      const axiosError = Object.create(prototype$1);
      utils$1.toFlatObject(error2, axiosError, function filter(obj) {
        return obj !== Error.prototype;
      }, (prop) => {
        return prop !== "isAxiosError";
      });
      AxiosError.call(axiosError, error2.message, code, config2, request, response);
      axiosError.cause = error2;
      axiosError.name = error2.name;
      customProps && Object.assign(axiosError, customProps);
      return axiosError;
    };
    const httpAdapter = null;
    function isVisitable(thing) {
      return utils$1.isPlainObject(thing) || utils$1.isArray(thing);
    }
    function removeBrackets(key) {
      return utils$1.endsWith(key, "[]") ? key.slice(0, -2) : key;
    }
    function renderKey(path, key, dots) {
      if (!path)
        return key;
      return path.concat(key).map(function each2(token2, i2) {
        token2 = removeBrackets(token2);
        return !dots && i2 ? "[" + token2 + "]" : token2;
      }).join(dots ? "." : "");
    }
    function isFlatArray(arr) {
      return utils$1.isArray(arr) && !arr.some(isVisitable);
    }
    const predicates = utils$1.toFlatObject(utils$1, {}, null, function filter(prop) {
      return /^is[A-Z]/.test(prop);
    });
    function toFormData(obj, formData, options) {
      if (!utils$1.isObject(obj)) {
        throw new TypeError("target must be an object");
      }
      formData = formData || new FormData();
      options = utils$1.toFlatObject(options, {
        metaTokens: true,
        dots: false,
        indexes: false
      }, false, function defined2(option, source) {
        return !utils$1.isUndefined(source[option]);
      });
      const metaTokens = options.metaTokens;
      const visitor = options.visitor || defaultVisitor;
      const dots = options.dots;
      const indexes = options.indexes;
      const _Blob = options.Blob || typeof Blob !== "undefined" && Blob;
      const useBlob = _Blob && utils$1.isSpecCompliantForm(formData);
      if (!utils$1.isFunction(visitor)) {
        throw new TypeError("visitor must be a function");
      }
      function convertValue(value2) {
        if (value2 === null)
          return "";
        if (utils$1.isDate(value2)) {
          return value2.toISOString();
        }
        if (!useBlob && utils$1.isBlob(value2)) {
          throw new AxiosError("Blob is not supported. Use a Buffer instead.");
        }
        if (utils$1.isArrayBuffer(value2) || utils$1.isTypedArray(value2)) {
          return useBlob && typeof Blob === "function" ? new Blob([value2]) : Buffer.from(value2);
        }
        return value2;
      }
      function defaultVisitor(value2, key, path) {
        let arr = value2;
        if (value2 && !path && typeof value2 === "object") {
          if (utils$1.endsWith(key, "{}")) {
            key = metaTokens ? key : key.slice(0, -2);
            value2 = JSON.stringify(value2);
          } else if (utils$1.isArray(value2) && isFlatArray(value2) || (utils$1.isFileList(value2) || utils$1.endsWith(key, "[]")) && (arr = utils$1.toArray(value2))) {
            key = removeBrackets(key);
            arr.forEach(function each2(el2, index) {
              !(utils$1.isUndefined(el2) || el2 === null) && formData.append(
                // eslint-disable-next-line no-nested-ternary
                indexes === true ? renderKey([key], index, dots) : indexes === null ? key : key + "[]",
                convertValue(el2)
              );
            });
            return false;
          }
        }
        if (isVisitable(value2)) {
          return true;
        }
        formData.append(renderKey(path, key, dots), convertValue(value2));
        return false;
      }
      const stack = [];
      const exposedHelpers = Object.assign(predicates, {
        defaultVisitor,
        convertValue,
        isVisitable
      });
      function build(value2, path) {
        if (utils$1.isUndefined(value2))
          return;
        if (stack.indexOf(value2) !== -1) {
          throw Error("Circular reference detected in " + path.join("."));
        }
        stack.push(value2);
        utils$1.forEach(value2, function each2(el2, key) {
          const result = !(utils$1.isUndefined(el2) || el2 === null) && visitor.call(
            formData,
            el2,
            utils$1.isString(key) ? key.trim() : key,
            path,
            exposedHelpers
          );
          if (result === true) {
            build(el2, path ? path.concat(key) : [key]);
          }
        });
        stack.pop();
      }
      if (!utils$1.isObject(obj)) {
        throw new TypeError("data must be an object");
      }
      build(obj);
      return formData;
    }
    function encode$1(str) {
      const charMap = {
        "!": "%21",
        "'": "%27",
        "(": "%28",
        ")": "%29",
        "~": "%7E",
        "%20": "+",
        "%00": "\0"
      };
      return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {
        return charMap[match];
      });
    }
    function AxiosURLSearchParams(params, options) {
      this._pairs = [];
      params && toFormData(params, this, options);
    }
    const prototype = AxiosURLSearchParams.prototype;
    prototype.append = function append2(name, value2) {
      this._pairs.push([name, value2]);
    };
    prototype.toString = function toString2(encoder) {
      const _encode = encoder ? function(value2) {
        return encoder.call(this, value2, encode$1);
      } : encode$1;
      return this._pairs.map(function each2(pair) {
        return _encode(pair[0]) + "=" + _encode(pair[1]);
      }, "").join("&");
    };
    function encode(val) {
      return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
    }
    function buildURL(url2, params, options) {
      if (!params) {
        return url2;
      }
      const _encode = options && options.encode || encode;
      if (utils$1.isFunction(options)) {
        options = {
          serialize: options
        };
      }
      const serializeFn = options && options.serialize;
      let serializedParams;
      if (serializeFn) {
        serializedParams = serializeFn(params, options);
      } else {
        serializedParams = utils$1.isURLSearchParams(params) ? params.toString() : new AxiosURLSearchParams(params, options).toString(_encode);
      }
      if (serializedParams) {
        const hashmarkIndex = url2.indexOf("#");
        if (hashmarkIndex !== -1) {
          url2 = url2.slice(0, hashmarkIndex);
        }
        url2 += (url2.indexOf("?") === -1 ? "?" : "&") + serializedParams;
      }
      return url2;
    }
    class InterceptorManager {
      constructor() {
        this.handlers = [];
      }
      /**
       * Add a new interceptor to the stack
       *
       * @param {Function} fulfilled The function to handle `then` for a `Promise`
       * @param {Function} rejected The function to handle `reject` for a `Promise`
       *
       * @return {Number} An ID used to remove interceptor later
       */
      use(fulfilled, rejected, options) {
        this.handlers.push({
          fulfilled,
          rejected,
          synchronous: options ? options.synchronous : false,
          runWhen: options ? options.runWhen : null
        });
        return this.handlers.length - 1;
      }
      /**
       * Remove an interceptor from the stack
       *
       * @param {Number} id The ID that was returned by `use`
       *
       * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
       */
      eject(id2) {
        if (this.handlers[id2]) {
          this.handlers[id2] = null;
        }
      }
      /**
       * Clear all interceptors from the stack
       *
       * @returns {void}
       */
      clear() {
        if (this.handlers) {
          this.handlers = [];
        }
      }
      /**
       * Iterate over all the registered interceptors
       *
       * This method is particularly useful for skipping over any
       * interceptors that may have become `null` calling `eject`.
       *
       * @param {Function} fn The function to call for each interceptor
       *
       * @returns {void}
       */
      forEach(fn) {
        utils$1.forEach(this.handlers, function forEachHandler(h2) {
          if (h2 !== null) {
            fn(h2);
          }
        });
      }
    }
    const transitionalDefaults = {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    };
    const URLSearchParams$1 = typeof URLSearchParams !== "undefined" ? URLSearchParams : AxiosURLSearchParams;
    const FormData$1 = typeof FormData !== "undefined" ? FormData : null;
    const Blob$1 = typeof Blob !== "undefined" ? Blob : null;
    const platform$1 = {
      isBrowser: true,
      classes: {
        URLSearchParams: URLSearchParams$1,
        FormData: FormData$1,
        Blob: Blob$1
      },
      protocols: ["http", "https", "file", "blob", "url", "data"]
    };
    const hasBrowserEnv = typeof window !== "undefined" && typeof document !== "undefined";
    const _navigator = typeof navigator === "object" && navigator || void 0;
    const hasStandardBrowserEnv = hasBrowserEnv && (!_navigator || ["ReactNative", "NativeScript", "NS"].indexOf(_navigator.product) < 0);
    const hasStandardBrowserWebWorkerEnv = (() => {
      return typeof WorkerGlobalScope !== "undefined" && // eslint-disable-next-line no-undef
      self instanceof WorkerGlobalScope && typeof self.importScripts === "function";
    })();
    const origin = hasBrowserEnv && window.location.href || "http://localhost";
    const utils = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      hasBrowserEnv,
      hasStandardBrowserEnv,
      hasStandardBrowserWebWorkerEnv,
      navigator: _navigator,
      origin
    }, Symbol.toStringTag, { value: "Module" }));
    const platform = {
      ...utils,
      ...platform$1
    };
    function toURLEncodedForm(data, options) {
      return toFormData(data, new platform.classes.URLSearchParams(), Object.assign({
        visitor: function(value2, key, path, helpers) {
          if (platform.isNode && utils$1.isBuffer(value2)) {
            this.append(key, value2.toString("base64"));
            return false;
          }
          return helpers.defaultVisitor.apply(this, arguments);
        }
      }, options));
    }
    function parsePropPath(name) {
      return utils$1.matchAll(/\w+|\[(\w*)]/g, name).map((match) => {
        return match[0] === "[]" ? "" : match[1] || match[0];
      });
    }
    function arrayToObject(arr) {
      const obj = {};
      const keys2 = Object.keys(arr);
      let i2;
      const len = keys2.length;
      let key;
      for (i2 = 0; i2 < len; i2++) {
        key = keys2[i2];
        obj[key] = arr[key];
      }
      return obj;
    }
    function formDataToJSON(formData) {
      function buildPath(path, value2, target, index) {
        let name = path[index++];
        if (name === "__proto__")
          return true;
        const isNumericKey = Number.isFinite(+name);
        const isLast = index >= path.length;
        name = !name && utils$1.isArray(target) ? target.length : name;
        if (isLast) {
          if (utils$1.hasOwnProp(target, name)) {
            target[name] = [target[name], value2];
          } else {
            target[name] = value2;
          }
          return !isNumericKey;
        }
        if (!target[name] || !utils$1.isObject(target[name])) {
          target[name] = [];
        }
        const result = buildPath(path, value2, target[name], index);
        if (result && utils$1.isArray(target[name])) {
          target[name] = arrayToObject(target[name]);
        }
        return !isNumericKey;
      }
      if (utils$1.isFormData(formData) && utils$1.isFunction(formData.entries)) {
        const obj = {};
        utils$1.forEachEntry(formData, (name, value2) => {
          buildPath(parsePropPath(name), value2, obj, 0);
        });
        return obj;
      }
      return null;
    }
    function stringifySafely(rawValue, parser2, encoder) {
      if (utils$1.isString(rawValue)) {
        try {
          (parser2 || JSON.parse)(rawValue);
          return utils$1.trim(rawValue);
        } catch (e3) {
          if (e3.name !== "SyntaxError") {
            throw e3;
          }
        }
      }
      return (encoder || JSON.stringify)(rawValue);
    }
    const defaults$1 = {
      transitional: transitionalDefaults,
      adapter: ["xhr", "http", "fetch"],
      transformRequest: [function transformRequest(data, headers) {
        const contentType = headers.getContentType() || "";
        const hasJSONContentType = contentType.indexOf("application/json") > -1;
        const isObjectPayload = utils$1.isObject(data);
        if (isObjectPayload && utils$1.isHTMLForm(data)) {
          data = new FormData(data);
        }
        const isFormData2 = utils$1.isFormData(data);
        if (isFormData2) {
          return hasJSONContentType ? JSON.stringify(formDataToJSON(data)) : data;
        }
        if (utils$1.isArrayBuffer(data) || utils$1.isBuffer(data) || utils$1.isStream(data) || utils$1.isFile(data) || utils$1.isBlob(data) || utils$1.isReadableStream(data)) {
          return data;
        }
        if (utils$1.isArrayBufferView(data)) {
          return data.buffer;
        }
        if (utils$1.isURLSearchParams(data)) {
          headers.setContentType("application/x-www-form-urlencoded;charset=utf-8", false);
          return data.toString();
        }
        let isFileList2;
        if (isObjectPayload) {
          if (contentType.indexOf("application/x-www-form-urlencoded") > -1) {
            return toURLEncodedForm(data, this.formSerializer).toString();
          }
          if ((isFileList2 = utils$1.isFileList(data)) || contentType.indexOf("multipart/form-data") > -1) {
            const _FormData = this.env && this.env.FormData;
            return toFormData(
              isFileList2 ? { "files[]": data } : data,
              _FormData && new _FormData(),
              this.formSerializer
            );
          }
        }
        if (isObjectPayload || hasJSONContentType) {
          headers.setContentType("application/json", false);
          return stringifySafely(data);
        }
        return data;
      }],
      transformResponse: [function transformResponse(data) {
        const transitional = this.transitional || defaults$1.transitional;
        const forcedJSONParsing = transitional && transitional.forcedJSONParsing;
        const JSONRequested = this.responseType === "json";
        if (utils$1.isResponse(data) || utils$1.isReadableStream(data)) {
          return data;
        }
        if (data && utils$1.isString(data) && (forcedJSONParsing && !this.responseType || JSONRequested)) {
          const silentJSONParsing = transitional && transitional.silentJSONParsing;
          const strictJSONParsing = !silentJSONParsing && JSONRequested;
          try {
            return JSON.parse(data);
          } catch (e3) {
            if (strictJSONParsing) {
              if (e3.name === "SyntaxError") {
                throw AxiosError.from(e3, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);
              }
              throw e3;
            }
          }
        }
        return data;
      }],
      /**
       * A timeout in milliseconds to abort a request. If set to 0 (default) a
       * timeout is not created.
       */
      timeout: 0,
      xsrfCookieName: "XSRF-TOKEN",
      xsrfHeaderName: "X-XSRF-TOKEN",
      maxContentLength: -1,
      maxBodyLength: -1,
      env: {
        FormData: platform.classes.FormData,
        Blob: platform.classes.Blob
      },
      validateStatus: function validateStatus(status) {
        return status >= 200 && status < 300;
      },
      headers: {
        common: {
          "Accept": "application/json, text/plain, */*",
          "Content-Type": void 0
        }
      }
    };
    utils$1.forEach(["delete", "get", "head", "post", "put", "patch"], (method) => {
      defaults$1.headers[method] = {};
    });
    const defaults$2 = defaults$1;
    const ignoreDuplicateOf = utils$1.toObjectSet([
      "age",
      "authorization",
      "content-length",
      "content-type",
      "etag",
      "expires",
      "from",
      "host",
      "if-modified-since",
      "if-unmodified-since",
      "last-modified",
      "location",
      "max-forwards",
      "proxy-authorization",
      "referer",
      "retry-after",
      "user-agent"
    ]);
    const parseHeaders = (rawHeaders) => {
      const parsed = {};
      let key;
      let val;
      let i2;
      rawHeaders && rawHeaders.split("\n").forEach(function parser2(line) {
        i2 = line.indexOf(":");
        key = line.substring(0, i2).trim().toLowerCase();
        val = line.substring(i2 + 1).trim();
        if (!key || parsed[key] && ignoreDuplicateOf[key]) {
          return;
        }
        if (key === "set-cookie") {
          if (parsed[key]) {
            parsed[key].push(val);
          } else {
            parsed[key] = [val];
          }
        } else {
          parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
        }
      });
      return parsed;
    };
    const $internals = Symbol("internals");
    function normalizeHeader(header) {
      return header && String(header).trim().toLowerCase();
    }
    function normalizeValue(value2) {
      if (value2 === false || value2 == null) {
        return value2;
      }
      return utils$1.isArray(value2) ? value2.map(normalizeValue) : String(value2);
    }
    function parseTokens(str) {
      const tokens2 = /* @__PURE__ */ Object.create(null);
      const tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
      let match;
      while (match = tokensRE.exec(str)) {
        tokens2[match[1]] = match[2];
      }
      return tokens2;
    }
    const isValidHeaderName = (str) => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());
    function matchHeaderValue(context, value2, header, filter, isHeaderNameFilter) {
      if (utils$1.isFunction(filter)) {
        return filter.call(this, value2, header);
      }
      if (isHeaderNameFilter) {
        value2 = header;
      }
      if (!utils$1.isString(value2))
        return;
      if (utils$1.isString(filter)) {
        return value2.indexOf(filter) !== -1;
      }
      if (utils$1.isRegExp(filter)) {
        return filter.test(value2);
      }
    }
    function formatHeader(header) {
      return header.trim().toLowerCase().replace(/([a-z\d])(\w*)/g, (w2, char, str) => {
        return char.toUpperCase() + str;
      });
    }
    function buildAccessors(obj, header) {
      const accessorName = utils$1.toCamelCase(" " + header);
      ["get", "set", "has"].forEach((methodName) => {
        Object.defineProperty(obj, methodName + accessorName, {
          value: function(arg1, arg2, arg3) {
            return this[methodName].call(this, header, arg1, arg2, arg3);
          },
          configurable: true
        });
      });
    }
    class AxiosHeaders {
      constructor(headers) {
        headers && this.set(headers);
      }
      set(header, valueOrRewrite, rewrite) {
        const self2 = this;
        function setHeader(_value, _header, _rewrite) {
          const lHeader = normalizeHeader(_header);
          if (!lHeader) {
            throw new Error("header name must be a non-empty string");
          }
          const key = utils$1.findKey(self2, lHeader);
          if (!key || self2[key] === void 0 || _rewrite === true || _rewrite === void 0 && self2[key] !== false) {
            self2[key || _header] = normalizeValue(_value);
          }
        }
        const setHeaders = (headers, _rewrite) => utils$1.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));
        if (utils$1.isPlainObject(header) || header instanceof this.constructor) {
          setHeaders(header, valueOrRewrite);
        } else if (utils$1.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {
          setHeaders(parseHeaders(header), valueOrRewrite);
        } else if (utils$1.isHeaders(header)) {
          for (const [key, value2] of header.entries()) {
            setHeader(value2, key, rewrite);
          }
        } else {
          header != null && setHeader(valueOrRewrite, header, rewrite);
        }
        return this;
      }
      get(header, parser2) {
        header = normalizeHeader(header);
        if (header) {
          const key = utils$1.findKey(this, header);
          if (key) {
            const value2 = this[key];
            if (!parser2) {
              return value2;
            }
            if (parser2 === true) {
              return parseTokens(value2);
            }
            if (utils$1.isFunction(parser2)) {
              return parser2.call(this, value2, key);
            }
            if (utils$1.isRegExp(parser2)) {
              return parser2.exec(value2);
            }
            throw new TypeError("parser must be boolean|regexp|function");
          }
        }
      }
      has(header, matcher) {
        header = normalizeHeader(header);
        if (header) {
          const key = utils$1.findKey(this, header);
          return !!(key && this[key] !== void 0 && (!matcher || matchHeaderValue(this, this[key], key, matcher)));
        }
        return false;
      }
      delete(header, matcher) {
        const self2 = this;
        let deleted = false;
        function deleteHeader(_header) {
          _header = normalizeHeader(_header);
          if (_header) {
            const key = utils$1.findKey(self2, _header);
            if (key && (!matcher || matchHeaderValue(self2, self2[key], key, matcher))) {
              delete self2[key];
              deleted = true;
            }
          }
        }
        if (utils$1.isArray(header)) {
          header.forEach(deleteHeader);
        } else {
          deleteHeader(header);
        }
        return deleted;
      }
      clear(matcher) {
        const keys2 = Object.keys(this);
        let i2 = keys2.length;
        let deleted = false;
        while (i2--) {
          const key = keys2[i2];
          if (!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {
            delete this[key];
            deleted = true;
          }
        }
        return deleted;
      }
      normalize(format2) {
        const self2 = this;
        const headers = {};
        utils$1.forEach(this, (value2, header) => {
          const key = utils$1.findKey(headers, header);
          if (key) {
            self2[key] = normalizeValue(value2);
            delete self2[header];
            return;
          }
          const normalized = format2 ? formatHeader(header) : String(header).trim();
          if (normalized !== header) {
            delete self2[header];
          }
          self2[normalized] = normalizeValue(value2);
          headers[normalized] = true;
        });
        return this;
      }
      concat(...targets) {
        return this.constructor.concat(this, ...targets);
      }
      toJSON(asStrings) {
        const obj = /* @__PURE__ */ Object.create(null);
        utils$1.forEach(this, (value2, header) => {
          value2 != null && value2 !== false && (obj[header] = asStrings && utils$1.isArray(value2) ? value2.join(", ") : value2);
        });
        return obj;
      }
      [Symbol.iterator]() {
        return Object.entries(this.toJSON())[Symbol.iterator]();
      }
      toString() {
        return Object.entries(this.toJSON()).map(([header, value2]) => header + ": " + value2).join("\n");
      }
      get [Symbol.toStringTag]() {
        return "AxiosHeaders";
      }
      static from(thing) {
        return thing instanceof this ? thing : new this(thing);
      }
      static concat(first, ...targets) {
        const computed = new this(first);
        targets.forEach((target) => computed.set(target));
        return computed;
      }
      static accessor(header) {
        const internals = this[$internals] = this[$internals] = {
          accessors: {}
        };
        const accessors = internals.accessors;
        const prototype2 = this.prototype;
        function defineAccessor(_header) {
          const lHeader = normalizeHeader(_header);
          if (!accessors[lHeader]) {
            buildAccessors(prototype2, _header);
            accessors[lHeader] = true;
          }
        }
        utils$1.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);
        return this;
      }
    }
    AxiosHeaders.accessor(["Content-Type", "Content-Length", "Accept", "Accept-Encoding", "User-Agent", "Authorization"]);
    utils$1.reduceDescriptors(AxiosHeaders.prototype, ({ value: value2 }, key) => {
      let mapped = key[0].toUpperCase() + key.slice(1);
      return {
        get: () => value2,
        set(headerValue) {
          this[mapped] = headerValue;
        }
      };
    });
    utils$1.freezeMethods(AxiosHeaders);
    const AxiosHeaders$1 = AxiosHeaders;
    function transformData(fns, response) {
      const config2 = this || defaults$2;
      const context = response || config2;
      const headers = AxiosHeaders$1.from(context.headers);
      let data = context.data;
      utils$1.forEach(fns, function transform(fn) {
        data = fn.call(config2, data, headers.normalize(), response ? response.status : void 0);
      });
      headers.normalize();
      return data;
    }
    function isCancel(value2) {
      return !!(value2 && value2.__CANCEL__);
    }
    function CanceledError(message, config2, request) {
      AxiosError.call(this, message == null ? "canceled" : message, AxiosError.ERR_CANCELED, config2, request);
      this.name = "CanceledError";
    }
    utils$1.inherits(CanceledError, AxiosError, {
      __CANCEL__: true
    });
    function settle(resolve, reject, response) {
      const validateStatus = response.config.validateStatus;
      if (!response.status || !validateStatus || validateStatus(response.status)) {
        resolve(response);
      } else {
        reject(new AxiosError(
          "Request failed with status code " + response.status,
          [AxiosError.ERR_BAD_REQUEST, AxiosError.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
          response.config,
          response.request,
          response
        ));
      }
    }
    function parseProtocol(url2) {
      const match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url2);
      return match && match[1] || "";
    }
    function speedometer(samplesCount, min2) {
      samplesCount = samplesCount || 10;
      const bytes = new Array(samplesCount);
      const timestamps = new Array(samplesCount);
      let head = 0;
      let tail = 0;
      let firstSampleTS;
      min2 = min2 !== void 0 ? min2 : 1e3;
      return function push(chunkLength) {
        const now2 = Date.now();
        const startedAt = timestamps[tail];
        if (!firstSampleTS) {
          firstSampleTS = now2;
        }
        bytes[head] = chunkLength;
        timestamps[head] = now2;
        let i2 = tail;
        let bytesCount = 0;
        while (i2 !== head) {
          bytesCount += bytes[i2++];
          i2 = i2 % samplesCount;
        }
        head = (head + 1) % samplesCount;
        if (head === tail) {
          tail = (tail + 1) % samplesCount;
        }
        if (now2 - firstSampleTS < min2) {
          return;
        }
        const passed = startedAt && now2 - startedAt;
        return passed ? Math.round(bytesCount * 1e3 / passed) : void 0;
      };
    }
    function throttle$2(fn, freq) {
      let timestamp = 0;
      let threshold2 = 1e3 / freq;
      let lastArgs;
      let timer;
      const invoke = (args, now2 = Date.now()) => {
        timestamp = now2;
        lastArgs = null;
        if (timer) {
          clearTimeout(timer);
          timer = null;
        }
        fn.apply(null, args);
      };
      const throttled = (...args) => {
        const now2 = Date.now();
        const passed = now2 - timestamp;
        if (passed >= threshold2) {
          invoke(args, now2);
        } else {
          lastArgs = args;
          if (!timer) {
            timer = setTimeout(() => {
              timer = null;
              invoke(lastArgs);
            }, threshold2 - passed);
          }
        }
      };
      const flush = () => lastArgs && invoke(lastArgs);
      return [throttled, flush];
    }
    const progressEventReducer = (listener, isDownloadStream, freq = 3) => {
      let bytesNotified = 0;
      const _speedometer = speedometer(50, 250);
      return throttle$2((e3) => {
        const loaded = e3.loaded;
        const total = e3.lengthComputable ? e3.total : void 0;
        const progressBytes = loaded - bytesNotified;
        const rate = _speedometer(progressBytes);
        const inRange = loaded <= total;
        bytesNotified = loaded;
        const data = {
          loaded,
          total,
          progress: total ? loaded / total : void 0,
          bytes: progressBytes,
          rate: rate ? rate : void 0,
          estimated: rate && total && inRange ? (total - loaded) / rate : void 0,
          event: e3,
          lengthComputable: total != null,
          [isDownloadStream ? "download" : "upload"]: true
        };
        listener(data);
      }, freq);
    };
    const progressEventDecorator = (total, throttled) => {
      const lengthComputable = total != null;
      return [(loaded) => throttled[0]({
        lengthComputable,
        total,
        loaded
      }), throttled[1]];
    };
    const asyncDecorator = (fn) => (...args) => utils$1.asap(() => fn(...args));
    const isURLSameOrigin = platform.hasStandardBrowserEnv ? /* @__PURE__ */ ((origin2, isMSIE) => (url2) => {
      url2 = new URL(url2, platform.origin);
      return origin2.protocol === url2.protocol && origin2.host === url2.host && (isMSIE || origin2.port === url2.port);
    })(
      new URL(platform.origin),
      platform.navigator && /(msie|trident)/i.test(platform.navigator.userAgent)
    ) : () => true;
    const cookies = platform.hasStandardBrowserEnv ? (
      // Standard browser envs support document.cookie
      {
        write(name, value2, expires, path, domain, secure) {
          const cookie = [name + "=" + encodeURIComponent(value2)];
          utils$1.isNumber(expires) && cookie.push("expires=" + new Date(expires).toGMTString());
          utils$1.isString(path) && cookie.push("path=" + path);
          utils$1.isString(domain) && cookie.push("domain=" + domain);
          secure === true && cookie.push("secure");
          document.cookie = cookie.join("; ");
        },
        read(name) {
          const match = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
          return match ? decodeURIComponent(match[3]) : null;
        },
        remove(name) {
          this.write(name, "", Date.now() - 864e5);
        }
      }
    ) : (
      // Non-standard browser env (web workers, react-native) lack needed support.
      {
        write() {
        },
        read() {
          return null;
        },
        remove() {
        }
      }
    );
    function isAbsoluteURL(url2) {
      return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url2);
    }
    function combineURLs(baseURL, relativeURL) {
      return relativeURL ? baseURL.replace(/\/?\/$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
    }
    function buildFullPath(baseURL, requestedURL) {
      if (baseURL && !isAbsoluteURL(requestedURL)) {
        return combineURLs(baseURL, requestedURL);
      }
      return requestedURL;
    }
    const headersToObject = (thing) => thing instanceof AxiosHeaders$1 ? { ...thing } : thing;
    function mergeConfig(config1, config2) {
      config2 = config2 || {};
      const config3 = {};
      function getMergedValue(target, source, prop, caseless) {
        if (utils$1.isPlainObject(target) && utils$1.isPlainObject(source)) {
          return utils$1.merge.call({ caseless }, target, source);
        } else if (utils$1.isPlainObject(source)) {
          return utils$1.merge({}, source);
        } else if (utils$1.isArray(source)) {
          return source.slice();
        }
        return source;
      }
      function mergeDeepProperties(a2, b2, prop, caseless) {
        if (!utils$1.isUndefined(b2)) {
          return getMergedValue(a2, b2, prop, caseless);
        } else if (!utils$1.isUndefined(a2)) {
          return getMergedValue(void 0, a2, prop, caseless);
        }
      }
      function valueFromConfig2(a2, b2) {
        if (!utils$1.isUndefined(b2)) {
          return getMergedValue(void 0, b2);
        }
      }
      function defaultToConfig2(a2, b2) {
        if (!utils$1.isUndefined(b2)) {
          return getMergedValue(void 0, b2);
        } else if (!utils$1.isUndefined(a2)) {
          return getMergedValue(void 0, a2);
        }
      }
      function mergeDirectKeys(a2, b2, prop) {
        if (prop in config2) {
          return getMergedValue(a2, b2);
        } else if (prop in config1) {
          return getMergedValue(void 0, a2);
        }
      }
      const mergeMap = {
        url: valueFromConfig2,
        method: valueFromConfig2,
        data: valueFromConfig2,
        baseURL: defaultToConfig2,
        transformRequest: defaultToConfig2,
        transformResponse: defaultToConfig2,
        paramsSerializer: defaultToConfig2,
        timeout: defaultToConfig2,
        timeoutMessage: defaultToConfig2,
        withCredentials: defaultToConfig2,
        withXSRFToken: defaultToConfig2,
        adapter: defaultToConfig2,
        responseType: defaultToConfig2,
        xsrfCookieName: defaultToConfig2,
        xsrfHeaderName: defaultToConfig2,
        onUploadProgress: defaultToConfig2,
        onDownloadProgress: defaultToConfig2,
        decompress: defaultToConfig2,
        maxContentLength: defaultToConfig2,
        maxBodyLength: defaultToConfig2,
        beforeRedirect: defaultToConfig2,
        transport: defaultToConfig2,
        httpAgent: defaultToConfig2,
        httpsAgent: defaultToConfig2,
        cancelToken: defaultToConfig2,
        socketPath: defaultToConfig2,
        responseEncoding: defaultToConfig2,
        validateStatus: mergeDirectKeys,
        headers: (a2, b2, prop) => mergeDeepProperties(headersToObject(a2), headersToObject(b2), prop, true)
      };
      utils$1.forEach(Object.keys(Object.assign({}, config1, config2)), function computeConfigValue(prop) {
        const merge2 = mergeMap[prop] || mergeDeepProperties;
        const configValue = merge2(config1[prop], config2[prop], prop);
        utils$1.isUndefined(configValue) && merge2 !== mergeDirectKeys || (config3[prop] = configValue);
      });
      return config3;
    }
    const resolveConfig = (config2) => {
      const newConfig = mergeConfig({}, config2);
      let { data, withXSRFToken, xsrfHeaderName, xsrfCookieName, headers, auth } = newConfig;
      newConfig.headers = headers = AxiosHeaders$1.from(headers);
      newConfig.url = buildURL(buildFullPath(newConfig.baseURL, newConfig.url), config2.params, config2.paramsSerializer);
      if (auth) {
        headers.set(
          "Authorization",
          "Basic " + btoa((auth.username || "") + ":" + (auth.password ? unescape(encodeURIComponent(auth.password)) : ""))
        );
      }
      let contentType;
      if (utils$1.isFormData(data)) {
        if (platform.hasStandardBrowserEnv || platform.hasStandardBrowserWebWorkerEnv) {
          headers.setContentType(void 0);
        } else if ((contentType = headers.getContentType()) !== false) {
          const [type, ...tokens2] = contentType ? contentType.split(";").map((token2) => token2.trim()).filter(Boolean) : [];
          headers.setContentType([type || "multipart/form-data", ...tokens2].join("; "));
        }
      }
      if (platform.hasStandardBrowserEnv) {
        withXSRFToken && utils$1.isFunction(withXSRFToken) && (withXSRFToken = withXSRFToken(newConfig));
        if (withXSRFToken || withXSRFToken !== false && isURLSameOrigin(newConfig.url)) {
          const xsrfValue = xsrfHeaderName && xsrfCookieName && cookies.read(xsrfCookieName);
          if (xsrfValue) {
            headers.set(xsrfHeaderName, xsrfValue);
          }
        }
      }
      return newConfig;
    };
    const isXHRAdapterSupported = typeof XMLHttpRequest !== "undefined";
    const xhrAdapter = isXHRAdapterSupported && function(config2) {
      return new Promise(function dispatchXhrRequest(resolve, reject) {
        const _config = resolveConfig(config2);
        let requestData = _config.data;
        const requestHeaders = AxiosHeaders$1.from(_config.headers).normalize();
        let { responseType, onUploadProgress, onDownloadProgress } = _config;
        let onCanceled;
        let uploadThrottled, downloadThrottled;
        let flushUpload, flushDownload;
        function done() {
          flushUpload && flushUpload();
          flushDownload && flushDownload();
          _config.cancelToken && _config.cancelToken.unsubscribe(onCanceled);
          _config.signal && _config.signal.removeEventListener("abort", onCanceled);
        }
        let request = new XMLHttpRequest();
        request.open(_config.method.toUpperCase(), _config.url, true);
        request.timeout = _config.timeout;
        function onloadend() {
          if (!request) {
            return;
          }
          const responseHeaders = AxiosHeaders$1.from(
            "getAllResponseHeaders" in request && request.getAllResponseHeaders()
          );
          const responseData = !responseType || responseType === "text" || responseType === "json" ? request.responseText : request.response;
          const response = {
            data: responseData,
            status: request.status,
            statusText: request.statusText,
            headers: responseHeaders,
            config: config2,
            request
          };
          settle(function _resolve(value2) {
            resolve(value2);
            done();
          }, function _reject(err) {
            reject(err);
            done();
          }, response);
          request = null;
        }
        if ("onloadend" in request) {
          request.onloadend = onloadend;
        } else {
          request.onreadystatechange = function handleLoad() {
            if (!request || request.readyState !== 4) {
              return;
            }
            if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) {
              return;
            }
            setTimeout(onloadend);
          };
        }
        request.onabort = function handleAbort() {
          if (!request) {
            return;
          }
          reject(new AxiosError("Request aborted", AxiosError.ECONNABORTED, config2, request));
          request = null;
        };
        request.onerror = function handleError() {
          reject(new AxiosError("Network Error", AxiosError.ERR_NETWORK, config2, request));
          request = null;
        };
        request.ontimeout = function handleTimeout() {
          let timeoutErrorMessage = _config.timeout ? "timeout of " + _config.timeout + "ms exceeded" : "timeout exceeded";
          const transitional = _config.transitional || transitionalDefaults;
          if (_config.timeoutErrorMessage) {
            timeoutErrorMessage = _config.timeoutErrorMessage;
          }
          reject(new AxiosError(
            timeoutErrorMessage,
            transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED,
            config2,
            request
          ));
          request = null;
        };
        requestData === void 0 && requestHeaders.setContentType(null);
        if ("setRequestHeader" in request) {
          utils$1.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {
            request.setRequestHeader(key, val);
          });
        }
        if (!utils$1.isUndefined(_config.withCredentials)) {
          request.withCredentials = !!_config.withCredentials;
        }
        if (responseType && responseType !== "json") {
          request.responseType = _config.responseType;
        }
        if (onDownloadProgress) {
          [downloadThrottled, flushDownload] = progressEventReducer(onDownloadProgress, true);
          request.addEventListener("progress", downloadThrottled);
        }
        if (onUploadProgress && request.upload) {
          [uploadThrottled, flushUpload] = progressEventReducer(onUploadProgress);
          request.upload.addEventListener("progress", uploadThrottled);
          request.upload.addEventListener("loadend", flushUpload);
        }
        if (_config.cancelToken || _config.signal) {
          onCanceled = (cancel) => {
            if (!request) {
              return;
            }
            reject(!cancel || cancel.type ? new CanceledError(null, config2, request) : cancel);
            request.abort();
            request = null;
          };
          _config.cancelToken && _config.cancelToken.subscribe(onCanceled);
          if (_config.signal) {
            _config.signal.aborted ? onCanceled() : _config.signal.addEventListener("abort", onCanceled);
          }
        }
        const protocol2 = parseProtocol(_config.url);
        if (protocol2 && platform.protocols.indexOf(protocol2) === -1) {
          reject(new AxiosError("Unsupported protocol " + protocol2 + ":", AxiosError.ERR_BAD_REQUEST, config2));
          return;
        }
        request.send(requestData || null);
      });
    };
    const composeSignals = (signals, timeout) => {
      const { length } = signals = signals ? signals.filter(Boolean) : [];
      if (timeout || length) {
        let controller = new AbortController();
        let aborted;
        const onabort = function(reason) {
          if (!aborted) {
            aborted = true;
            unsubscribe();
            const err = reason instanceof Error ? reason : this.reason;
            controller.abort(err instanceof AxiosError ? err : new CanceledError(err instanceof Error ? err.message : err));
          }
        };
        let timer = timeout && setTimeout(() => {
          timer = null;
          onabort(new AxiosError(`timeout ${timeout} of ms exceeded`, AxiosError.ETIMEDOUT));
        }, timeout);
        const unsubscribe = () => {
          if (signals) {
            timer && clearTimeout(timer);
            timer = null;
            signals.forEach((signal2) => {
              signal2.unsubscribe ? signal2.unsubscribe(onabort) : signal2.removeEventListener("abort", onabort);
            });
            signals = null;
          }
        };
        signals.forEach((signal2) => signal2.addEventListener("abort", onabort));
        const { signal } = controller;
        signal.unsubscribe = () => utils$1.asap(unsubscribe);
        return signal;
      }
    };
    const composeSignals$1 = composeSignals;
    const streamChunk = function* (chunk, chunkSize) {
      let len = chunk.byteLength;
      if (!chunkSize || len < chunkSize) {
        yield chunk;
        return;
      }
      let pos = 0;
      let end;
      while (pos < len) {
        end = pos + chunkSize;
        yield chunk.slice(pos, end);
        pos = end;
      }
    };
    const readBytes = async function* (iterable, chunkSize) {
      for await (const chunk of readStream(iterable)) {
        yield* streamChunk(chunk, chunkSize);
      }
    };
    const readStream = async function* (stream) {
      if (stream[Symbol.asyncIterator]) {
        yield* stream;
        return;
      }
      const reader = stream.getReader();
      try {
        for (; ; ) {
          const { done, value: value2 } = await reader.read();
          if (done) {
            break;
          }
          yield value2;
        }
      } finally {
        await reader.cancel();
      }
    };
    const trackStream = (stream, chunkSize, onProgress, onFinish) => {
      const iterator = readBytes(stream, chunkSize);
      let bytes = 0;
      let done;
      let _onFinish = (e3) => {
        if (!done) {
          done = true;
          onFinish && onFinish(e3);
        }
      };
      return new ReadableStream({
        async pull(controller) {
          try {
            const { done: done2, value: value2 } = await iterator.next();
            if (done2) {
              _onFinish();
              controller.close();
              return;
            }
            let len = value2.byteLength;
            if (onProgress) {
              let loadedBytes = bytes += len;
              onProgress(loadedBytes);
            }
            controller.enqueue(new Uint8Array(value2));
          } catch (err) {
            _onFinish(err);
            throw err;
          }
        },
        cancel(reason) {
          _onFinish(reason);
          return iterator.return();
        }
      }, {
        highWaterMark: 2
      });
    };
    const isFetchSupported = typeof fetch === "function" && typeof Request === "function" && typeof Response === "function";
    const isReadableStreamSupported = isFetchSupported && typeof ReadableStream === "function";
    const encodeText = isFetchSupported && (typeof TextEncoder === "function" ? /* @__PURE__ */ ((encoder) => (str) => encoder.encode(str))(new TextEncoder()) : async (str) => new Uint8Array(await new Response(str).arrayBuffer()));
    const test = (fn, ...args) => {
      try {
        return !!fn(...args);
      } catch (e3) {
        return false;
      }
    };
    const supportsRequestStream = isReadableStreamSupported && test(() => {
      let duplexAccessed = false;
      const hasContentType = new Request(platform.origin, {
        body: new ReadableStream(),
        method: "POST",
        get duplex() {
          duplexAccessed = true;
          return "half";
        }
      }).headers.has("Content-Type");
      return duplexAccessed && !hasContentType;
    });
    const DEFAULT_CHUNK_SIZE = 64 * 1024;
    const supportsResponseStream = isReadableStreamSupported && test(() => utils$1.isReadableStream(new Response("").body));
    const resolvers = {
      stream: supportsResponseStream && ((res) => res.body)
    };
    isFetchSupported && ((res) => {
      ["text", "arrayBuffer", "blob", "formData", "stream"].forEach((type) => {
        !resolvers[type] && (resolvers[type] = utils$1.isFunction(res[type]) ? (res2) => res2[type]() : (_2, config2) => {
          throw new AxiosError(`Response type '${type}' is not supported`, AxiosError.ERR_NOT_SUPPORT, config2);
        });
      });
    })(new Response());
    const getBodyLength = async (body) => {
      if (body == null) {
        return 0;
      }
      if (utils$1.isBlob(body)) {
        return body.size;
      }
      if (utils$1.isSpecCompliantForm(body)) {
        const _request = new Request(platform.origin, {
          method: "POST",
          body
        });
        return (await _request.arrayBuffer()).byteLength;
      }
      if (utils$1.isArrayBufferView(body) || utils$1.isArrayBuffer(body)) {
        return body.byteLength;
      }
      if (utils$1.isURLSearchParams(body)) {
        body = body + "";
      }
      if (utils$1.isString(body)) {
        return (await encodeText(body)).byteLength;
      }
    };
    const resolveBodyLength = async (headers, body) => {
      const length = utils$1.toFiniteNumber(headers.getContentLength());
      return length == null ? getBodyLength(body) : length;
    };
    const fetchAdapter = isFetchSupported && (async (config2) => {
      let {
        url: url2,
        method,
        data,
        signal,
        cancelToken,
        timeout,
        onDownloadProgress,
        onUploadProgress,
        responseType,
        headers,
        withCredentials = "same-origin",
        fetchOptions
      } = resolveConfig(config2);
      responseType = responseType ? (responseType + "").toLowerCase() : "text";
      let composedSignal = composeSignals$1([signal, cancelToken && cancelToken.toAbortSignal()], timeout);
      let request;
      const unsubscribe = composedSignal && composedSignal.unsubscribe && (() => {
        composedSignal.unsubscribe();
      });
      let requestContentLength;
      try {
        if (onUploadProgress && supportsRequestStream && method !== "get" && method !== "head" && (requestContentLength = await resolveBodyLength(headers, data)) !== 0) {
          let _request = new Request(url2, {
            method: "POST",
            body: data,
            duplex: "half"
          });
          let contentTypeHeader;
          if (utils$1.isFormData(data) && (contentTypeHeader = _request.headers.get("content-type"))) {
            headers.setContentType(contentTypeHeader);
          }
          if (_request.body) {
            const [onProgress, flush] = progressEventDecorator(
              requestContentLength,
              progressEventReducer(asyncDecorator(onUploadProgress))
            );
            data = trackStream(_request.body, DEFAULT_CHUNK_SIZE, onProgress, flush);
          }
        }
        if (!utils$1.isString(withCredentials)) {
          withCredentials = withCredentials ? "include" : "omit";
        }
        const isCredentialsSupported = "credentials" in Request.prototype;
        request = new Request(url2, {
          ...fetchOptions,
          signal: composedSignal,
          method: method.toUpperCase(),
          headers: headers.normalize().toJSON(),
          body: data,
          duplex: "half",
          credentials: isCredentialsSupported ? withCredentials : void 0
        });
        let response = await fetch(request);
        const isStreamResponse = supportsResponseStream && (responseType === "stream" || responseType === "response");
        if (supportsResponseStream && (onDownloadProgress || isStreamResponse && unsubscribe)) {
          const options = {};
          ["status", "statusText", "headers"].forEach((prop) => {
            options[prop] = response[prop];
          });
          const responseContentLength = utils$1.toFiniteNumber(response.headers.get("content-length"));
          const [onProgress, flush] = onDownloadProgress && progressEventDecorator(
            responseContentLength,
            progressEventReducer(asyncDecorator(onDownloadProgress), true)
          ) || [];
          response = new Response(
            trackStream(response.body, DEFAULT_CHUNK_SIZE, onProgress, () => {
              flush && flush();
              unsubscribe && unsubscribe();
            }),
            options
          );
        }
        responseType = responseType || "text";
        let responseData = await resolvers[utils$1.findKey(resolvers, responseType) || "text"](response, config2);
        !isStreamResponse && unsubscribe && unsubscribe();
        return await new Promise((resolve, reject) => {
          settle(resolve, reject, {
            data: responseData,
            headers: AxiosHeaders$1.from(response.headers),
            status: response.status,
            statusText: response.statusText,
            config: config2,
            request
          });
        });
      } catch (err) {
        unsubscribe && unsubscribe();
        if (err && err.name === "TypeError" && /fetch/i.test(err.message)) {
          throw Object.assign(
            new AxiosError("Network Error", AxiosError.ERR_NETWORK, config2, request),
            {
              cause: err.cause || err
            }
          );
        }
        throw AxiosError.from(err, err && err.code, config2, request);
      }
    });
    const knownAdapters = {
      http: httpAdapter,
      xhr: xhrAdapter,
      fetch: fetchAdapter
    };
    utils$1.forEach(knownAdapters, (fn, value2) => {
      if (fn) {
        try {
          Object.defineProperty(fn, "name", { value: value2 });
        } catch (e3) {
        }
        Object.defineProperty(fn, "adapterName", { value: value2 });
      }
    });
    const renderReason = (reason) => `- ${reason}`;
    const isResolvedHandle = (adapter) => utils$1.isFunction(adapter) || adapter === null || adapter === false;
    const adapters = {
      getAdapter: (adapters2) => {
        adapters2 = utils$1.isArray(adapters2) ? adapters2 : [adapters2];
        const { length } = adapters2;
        let nameOrAdapter;
        let adapter;
        const rejectedReasons = {};
        for (let i2 = 0; i2 < length; i2++) {
          nameOrAdapter = adapters2[i2];
          let id2;
          adapter = nameOrAdapter;
          if (!isResolvedHandle(nameOrAdapter)) {
            adapter = knownAdapters[(id2 = String(nameOrAdapter)).toLowerCase()];
            if (adapter === void 0) {
              throw new AxiosError(`Unknown adapter '${id2}'`);
            }
          }
          if (adapter) {
            break;
          }
          rejectedReasons[id2 || "#" + i2] = adapter;
        }
        if (!adapter) {
          const reasons = Object.entries(rejectedReasons).map(
            ([id2, state]) => `adapter ${id2} ` + (state === false ? "is not supported by the environment" : "is not available in the build")
          );
          let s2 = length ? reasons.length > 1 ? "since :\n" + reasons.map(renderReason).join("\n") : " " + renderReason(reasons[0]) : "as no adapter specified";
          throw new AxiosError(
            `There is no suitable adapter to dispatch the request ` + s2,
            "ERR_NOT_SUPPORT"
          );
        }
        return adapter;
      },
      adapters: knownAdapters
    };
    function throwIfCancellationRequested(config2) {
      if (config2.cancelToken) {
        config2.cancelToken.throwIfRequested();
      }
      if (config2.signal && config2.signal.aborted) {
        throw new CanceledError(null, config2);
      }
    }
    function dispatchRequest(config2) {
      throwIfCancellationRequested(config2);
      config2.headers = AxiosHeaders$1.from(config2.headers);
      config2.data = transformData.call(
        config2,
        config2.transformRequest
      );
      if (["post", "put", "patch"].indexOf(config2.method) !== -1) {
        config2.headers.setContentType("application/x-www-form-urlencoded", false);
      }
      const adapter = adapters.getAdapter(config2.adapter || defaults$2.adapter);
      return adapter(config2).then(function onAdapterResolution(response) {
        throwIfCancellationRequested(config2);
        response.data = transformData.call(
          config2,
          config2.transformResponse,
          response
        );
        response.headers = AxiosHeaders$1.from(response.headers);
        return response;
      }, function onAdapterRejection(reason) {
        if (!isCancel(reason)) {
          throwIfCancellationRequested(config2);
          if (reason && reason.response) {
            reason.response.data = transformData.call(
              config2,
              config2.transformResponse,
              reason.response
            );
            reason.response.headers = AxiosHeaders$1.from(reason.response.headers);
          }
        }
        return Promise.reject(reason);
      });
    }
    const VERSION = "1.7.9";
    const validators$1 = {};
    ["object", "boolean", "number", "function", "string", "symbol"].forEach((type, i2) => {
      validators$1[type] = function validator2(thing) {
        return typeof thing === type || "a" + (i2 < 1 ? "n " : " ") + type;
      };
    });
    const deprecatedWarnings = {};
    validators$1.transitional = function transitional(validator2, version, message) {
      function formatMessage(opt, desc) {
        return "[Axios v" + VERSION + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
      }
      return (value2, opt, opts) => {
        if (validator2 === false) {
          throw new AxiosError(
            formatMessage(opt, " has been removed" + (version ? " in " + version : "")),
            AxiosError.ERR_DEPRECATED
          );
        }
        if (version && !deprecatedWarnings[opt]) {
          deprecatedWarnings[opt] = true;
          console.warn(
            formatMessage(
              opt,
              " has been deprecated since v" + version + " and will be removed in the near future"
            )
          );
        }
        return validator2 ? validator2(value2, opt, opts) : true;
      };
    };
    validators$1.spelling = function spelling(correctSpelling) {
      return (value2, opt) => {
        console.warn(`${opt} is likely a misspelling of ${correctSpelling}`);
        return true;
      };
    };
    function assertOptions(options, schema, allowUnknown) {
      if (typeof options !== "object") {
        throw new AxiosError("options must be an object", AxiosError.ERR_BAD_OPTION_VALUE);
      }
      const keys2 = Object.keys(options);
      let i2 = keys2.length;
      while (i2-- > 0) {
        const opt = keys2[i2];
        const validator2 = schema[opt];
        if (validator2) {
          const value2 = options[opt];
          const result = value2 === void 0 || validator2(value2, opt, options);
          if (result !== true) {
            throw new AxiosError("option " + opt + " must be " + result, AxiosError.ERR_BAD_OPTION_VALUE);
          }
          continue;
        }
        if (allowUnknown !== true) {
          throw new AxiosError("Unknown option " + opt, AxiosError.ERR_BAD_OPTION);
        }
      }
    }
    const validator = {
      assertOptions,
      validators: validators$1
    };
    const validators = validator.validators;
    class Axios {
      constructor(instanceConfig) {
        this.defaults = instanceConfig;
        this.interceptors = {
          request: new InterceptorManager(),
          response: new InterceptorManager()
        };
      }
      /**
       * Dispatch a request
       *
       * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
       * @param {?Object} config
       *
       * @returns {Promise} The Promise to be fulfilled
       */
      async request(configOrUrl, config2) {
        try {
          return await this._request(configOrUrl, config2);
        } catch (err) {
          if (err instanceof Error) {
            let dummy = {};
            Error.captureStackTrace ? Error.captureStackTrace(dummy) : dummy = new Error();
            const stack = dummy.stack ? dummy.stack.replace(/^.+\n/, "") : "";
            try {
              if (!err.stack) {
                err.stack = stack;
              } else if (stack && !String(err.stack).endsWith(stack.replace(/^.+\n.+\n/, ""))) {
                err.stack += "\n" + stack;
              }
            } catch (e3) {
            }
          }
          throw err;
        }
      }
      _request(configOrUrl, config2) {
        if (typeof configOrUrl === "string") {
          config2 = config2 || {};
          config2.url = configOrUrl;
        } else {
          config2 = configOrUrl || {};
        }
        config2 = mergeConfig(this.defaults, config2);
        const { transitional, paramsSerializer, headers } = config2;
        if (transitional !== void 0) {
          validator.assertOptions(transitional, {
            silentJSONParsing: validators.transitional(validators.boolean),
            forcedJSONParsing: validators.transitional(validators.boolean),
            clarifyTimeoutError: validators.transitional(validators.boolean)
          }, false);
        }
        if (paramsSerializer != null) {
          if (utils$1.isFunction(paramsSerializer)) {
            config2.paramsSerializer = {
              serialize: paramsSerializer
            };
          } else {
            validator.assertOptions(paramsSerializer, {
              encode: validators.function,
              serialize: validators.function
            }, true);
          }
        }
        validator.assertOptions(config2, {
          baseUrl: validators.spelling("baseURL"),
          withXsrfToken: validators.spelling("withXSRFToken")
        }, true);
        config2.method = (config2.method || this.defaults.method || "get").toLowerCase();
        let contextHeaders = headers && utils$1.merge(
          headers.common,
          headers[config2.method]
        );
        headers && utils$1.forEach(
          ["delete", "get", "head", "post", "put", "patch", "common"],
          (method) => {
            delete headers[method];
          }
        );
        config2.headers = AxiosHeaders$1.concat(contextHeaders, headers);
        const requestInterceptorChain = [];
        let synchronousRequestInterceptors = true;
        this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
          if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config2) === false) {
            return;
          }
          synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
          requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
        });
        const responseInterceptorChain = [];
        this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
          responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
        });
        let promise;
        let i2 = 0;
        let len;
        if (!synchronousRequestInterceptors) {
          const chain = [dispatchRequest.bind(this), void 0];
          chain.unshift.apply(chain, requestInterceptorChain);
          chain.push.apply(chain, responseInterceptorChain);
          len = chain.length;
          promise = Promise.resolve(config2);
          while (i2 < len) {
            promise = promise.then(chain[i2++], chain[i2++]);
          }
          return promise;
        }
        len = requestInterceptorChain.length;
        let newConfig = config2;
        i2 = 0;
        while (i2 < len) {
          const onFulfilled = requestInterceptorChain[i2++];
          const onRejected = requestInterceptorChain[i2++];
          try {
            newConfig = onFulfilled(newConfig);
          } catch (error2) {
            onRejected.call(this, error2);
            break;
          }
        }
        try {
          promise = dispatchRequest.call(this, newConfig);
        } catch (error2) {
          return Promise.reject(error2);
        }
        i2 = 0;
        len = responseInterceptorChain.length;
        while (i2 < len) {
          promise = promise.then(responseInterceptorChain[i2++], responseInterceptorChain[i2++]);
        }
        return promise;
      }
      getUri(config2) {
        config2 = mergeConfig(this.defaults, config2);
        const fullPath = buildFullPath(config2.baseURL, config2.url);
        return buildURL(fullPath, config2.params, config2.paramsSerializer);
      }
    }
    utils$1.forEach(["delete", "get", "head", "options"], function forEachMethodNoData(method) {
      Axios.prototype[method] = function(url2, config2) {
        return this.request(mergeConfig(config2 || {}, {
          method,
          url: url2,
          data: (config2 || {}).data
        }));
      };
    });
    utils$1.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
      function generateHTTPMethod(isForm) {
        return function httpMethod(url2, data, config2) {
          return this.request(mergeConfig(config2 || {}, {
            method,
            headers: isForm ? {
              "Content-Type": "multipart/form-data"
            } : {},
            url: url2,
            data
          }));
        };
      }
      Axios.prototype[method] = generateHTTPMethod();
      Axios.prototype[method + "Form"] = generateHTTPMethod(true);
    });
    const Axios$1 = Axios;
    class CancelToken {
      constructor(executor) {
        if (typeof executor !== "function") {
          throw new TypeError("executor must be a function.");
        }
        let resolvePromise;
        this.promise = new Promise(function promiseExecutor(resolve) {
          resolvePromise = resolve;
        });
        const token2 = this;
        this.promise.then((cancel) => {
          if (!token2._listeners)
            return;
          let i2 = token2._listeners.length;
          while (i2-- > 0) {
            token2._listeners[i2](cancel);
          }
          token2._listeners = null;
        });
        this.promise.then = (onfulfilled) => {
          let _resolve;
          const promise = new Promise((resolve) => {
            token2.subscribe(resolve);
            _resolve = resolve;
          }).then(onfulfilled);
          promise.cancel = function reject() {
            token2.unsubscribe(_resolve);
          };
          return promise;
        };
        executor(function cancel(message, config2, request) {
          if (token2.reason) {
            return;
          }
          token2.reason = new CanceledError(message, config2, request);
          resolvePromise(token2.reason);
        });
      }
      /**
       * Throws a `CanceledError` if cancellation has been requested.
       */
      throwIfRequested() {
        if (this.reason) {
          throw this.reason;
        }
      }
      /**
       * Subscribe to the cancel signal
       */
      subscribe(listener) {
        if (this.reason) {
          listener(this.reason);
          return;
        }
        if (this._listeners) {
          this._listeners.push(listener);
        } else {
          this._listeners = [listener];
        }
      }
      /**
       * Unsubscribe from the cancel signal
       */
      unsubscribe(listener) {
        if (!this._listeners) {
          return;
        }
        const index = this._listeners.indexOf(listener);
        if (index !== -1) {
          this._listeners.splice(index, 1);
        }
      }
      toAbortSignal() {
        const controller = new AbortController();
        const abort = (err) => {
          controller.abort(err);
        };
        this.subscribe(abort);
        controller.signal.unsubscribe = () => this.unsubscribe(abort);
        return controller.signal;
      }
      /**
       * Returns an object that contains a new `CancelToken` and a function that, when called,
       * cancels the `CancelToken`.
       */
      static source() {
        let cancel;
        const token2 = new CancelToken(function executor(c2) {
          cancel = c2;
        });
        return {
          token: token2,
          cancel
        };
      }
    }
    const CancelToken$1 = CancelToken;
    function spread(callback) {
      return function wrap(arr) {
        return callback.apply(null, arr);
      };
    }
    function isAxiosError(payload) {
      return utils$1.isObject(payload) && payload.isAxiosError === true;
    }
    const HttpStatusCode = {
      Continue: 100,
      SwitchingProtocols: 101,
      Processing: 102,
      EarlyHints: 103,
      Ok: 200,
      Created: 201,
      Accepted: 202,
      NonAuthoritativeInformation: 203,
      NoContent: 204,
      ResetContent: 205,
      PartialContent: 206,
      MultiStatus: 207,
      AlreadyReported: 208,
      ImUsed: 226,
      MultipleChoices: 300,
      MovedPermanently: 301,
      Found: 302,
      SeeOther: 303,
      NotModified: 304,
      UseProxy: 305,
      Unused: 306,
      TemporaryRedirect: 307,
      PermanentRedirect: 308,
      BadRequest: 400,
      Unauthorized: 401,
      PaymentRequired: 402,
      Forbidden: 403,
      NotFound: 404,
      MethodNotAllowed: 405,
      NotAcceptable: 406,
      ProxyAuthenticationRequired: 407,
      RequestTimeout: 408,
      Conflict: 409,
      Gone: 410,
      LengthRequired: 411,
      PreconditionFailed: 412,
      PayloadTooLarge: 413,
      UriTooLong: 414,
      UnsupportedMediaType: 415,
      RangeNotSatisfiable: 416,
      ExpectationFailed: 417,
      ImATeapot: 418,
      MisdirectedRequest: 421,
      UnprocessableEntity: 422,
      Locked: 423,
      FailedDependency: 424,
      TooEarly: 425,
      UpgradeRequired: 426,
      PreconditionRequired: 428,
      TooManyRequests: 429,
      RequestHeaderFieldsTooLarge: 431,
      UnavailableForLegalReasons: 451,
      InternalServerError: 500,
      NotImplemented: 501,
      BadGateway: 502,
      ServiceUnavailable: 503,
      GatewayTimeout: 504,
      HttpVersionNotSupported: 505,
      VariantAlsoNegotiates: 506,
      InsufficientStorage: 507,
      LoopDetected: 508,
      NotExtended: 510,
      NetworkAuthenticationRequired: 511
    };
    Object.entries(HttpStatusCode).forEach(([key, value2]) => {
      HttpStatusCode[value2] = key;
    });
    const HttpStatusCode$1 = HttpStatusCode;
    function createInstance(defaultConfig) {
      const context = new Axios$1(defaultConfig);
      const instance = bind(Axios$1.prototype.request, context);
      utils$1.extend(instance, Axios$1.prototype, context, { allOwnKeys: true });
      utils$1.extend(instance, context, null, { allOwnKeys: true });
      instance.create = function create(instanceConfig) {
        return createInstance(mergeConfig(defaultConfig, instanceConfig));
      };
      return instance;
    }
    const axios = createInstance(defaults$2);
    axios.Axios = Axios$1;
    axios.CanceledError = CanceledError;
    axios.CancelToken = CancelToken$1;
    axios.isCancel = isCancel;
    axios.VERSION = VERSION;
    axios.toFormData = toFormData;
    axios.AxiosError = AxiosError;
    axios.Cancel = axios.CanceledError;
    axios.all = function all(promises) {
      return Promise.all(promises);
    };
    axios.spread = spread;
    axios.isAxiosError = isAxiosError;
    axios.mergeConfig = mergeConfig;
    axios.AxiosHeaders = AxiosHeaders$1;
    axios.formToJSON = (thing) => formDataToJSON(utils$1.isHTMLForm(thing) ? new FormData(thing) : thing);
    axios.getAdapter = adapters.getAdapter;
    axios.HttpStatusCode = HttpStatusCode$1;
    axios.default = axios;
    const axiosInstance = axios.create({
      baseURL: "http://13.61.15.231/api",
      timeout: 1e4
    });
    axiosInstance.interceptors.request.use(
      (config2) => {
        const token2 = localStorage.getItem("token");
        if (token2) {
          config2.headers.Authorization = `Bearer ${token2}`;
        }
        return config2;
      },
      (error2) => {
        return Promise.reject(error2);
      }
    );
    const Loading = () => {
      return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "dots-container", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "dot" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "dot" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "dot" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "dot" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "dot" })
      ] });
    };
    const Login = () => {
      const { user } = useSelector((state) => state.auth);
      const {
        register,
        handleSubmit,
        formState: { errors }
      } = useForm();
      const navigate = useNavigate();
      const dispatch = useDispatch();
      const loginMutation = useMutation(
        {
          mutationFn: (data) => axiosInstance.post("auth/log-in", data),
          onSuccess: (response) => {
            var _a2, _b2, _c2, _d2, _e3;
            if ((response == null ? void 0 : response.data) && ((_a2 = response == null ? void 0 : response.data) == null ? void 0 : _a2.status) == "success") {
              dispatch(setCredentials({
                user: (_c2 = (_b2 = response.data) == null ? void 0 : _b2.data) == null ? void 0 : _c2.user,
                token: (_e3 = (_d2 = response.data) == null ? void 0 : _d2.data) == null ? void 0 : _e3.token
              }));
              Ut.success(response.data.message, {
                position: "top-center",
                duration: 2e3
              });
              navigate("/");
            }
          },
          onError: (error2) => {
            Ut.error(error2.response.data.error, {
              position: "top-center",
              duration: 2e3
            });
          }
        }
      );
      const submitHandler = async (data) => {
        loginMutation.mutate(data);
      };
      reactExports.useEffect(() => {
        user && navigate("/dashboard");
      }, [user]);
      return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-full min-h-screen flex items-center justify-center flex-col lg:flex-row bg-[#f3f4f6]", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "w-full md:w-auto flex gap-0 md:gap-40 flex-col md:flex-row items-center justify-center", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-full w-full lg:w-2/3 flex flex-col items-center justify-center", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "w-full md:max-w-lg 2xl:max-w-3xl flex flex-col items-center justify-center gap-5 md:gap-y-10 2xl:-mt-20", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "flex gap-1 py-1 px-3 border rounded-full text-sm md:text-base bordergray-300 text-gray-600", children: "Manage all your task in one place!" }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "flex flex-col gap-0 md:gap-4 text-4xl md:text-6xl 2xl:text-7xl font-black text-center text-blue-700", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: "Cloud-Based" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: "Task Manager" })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "cell", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "circle rotate-in-up-left" }) })
        ] }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-full md:w-1/3 p-4 md:p-1 flex flex-col justify-center items-center", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
          "form",
          {
            onSubmit: handleSubmit(submitHandler),
            className: "form-container w-full md:w-[400px] flex flex-col gap-y-8 bg-white px-10 pt-14 pb-14",
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-blue-600 text-3xl font-bold text-center", children: "Welcome back!" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-center text-base text-gray-700 ", children: "Keep all your credential safe." })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col gap-y-5", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  Textbox,
                  {
                    placeholder: "email@example.com",
                    type: "email",
                    name: "email",
                    label: "Email Address",
                    className: "w-full rounded-full",
                    register: register("email", {
                      required: "Email Address is required!"
                    }),
                    error: errors.email ? errors.email.message : ""
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  Textbox,
                  {
                    placeholder: "your password",
                    type: "password",
                    name: "password",
                    label: "Password",
                    className: "w-full rounded-full",
                    register: register("password", {
                      required: "Password is required!"
                    }),
                    error: errors.password ? errors.password.message : ""
                  }
                ),
                loginMutation.isPending ? /* @__PURE__ */ jsxRuntimeExports.jsx(Loading, {}) : /* @__PURE__ */ jsxRuntimeExports.jsx(
                  Button,
                  {
                    type: "submit",
                    label: "Submit",
                    className: "w-full h-10 bg-blue-700 text-white rounded-full"
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "span",
                  {
                    className: "text-sm text-gray-500 hover:text-blue-600 hover:underline cursor-pointer text-center",
                    onClick: () => navigate("/sign-up"),
                    children: "Don't have an account? SignUp"
                  }
                )
              ] })
            ]
          }
        ) })
      ] }) });
    };
    function GrInProgress(props) {
      return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24" }, "child": [{ "tag": "path", "attr": { "fill": "none", "strokeWidth": "2", "d": "M1,1 L23,1 M10,4.5 L14,4.5 C14,4.5 14,6 14,6 C14,7 12,8 12,8 C12,8 10,7 10,6 C10,6 10,4.5 10,4.5 Z M5,1 C5,1 5,3 5,6 C5,9 10,9.23530084 10,12 C10,14.7646992 5.00000001,15 5,18 C4.99999999,21 5,23 5,23 M19,1 C19,1 19,3 19,6 C19,9 14,9.23530084 14,12 C14,14.7646992 19,15 19,18 C19,21 19,23 19,23 M1,23 L23,23 M8,21 C8,19 12,17 12,17 C12,17 16,19 16,21 C16,21 16,23 16,23 L8,23 L8,21 Z" }, "child": [] }] })(props);
    }
    function RxActivityLog(props) {
      return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 15 15", "fill": "none" }, "child": [{ "tag": "path", "attr": { "fillRule": "evenodd", "clipRule": "evenodd", "d": "M0 1.5C0 1.22386 0.223858 1 0.5 1H2.5C2.77614 1 3 1.22386 3 1.5C3 1.77614 2.77614 2 2.5 2H0.5C0.223858 2 0 1.77614 0 1.5ZM4 1.5C4 1.22386 4.22386 1 4.5 1H14.5C14.7761 1 15 1.22386 15 1.5C15 1.77614 14.7761 2 14.5 2H4.5C4.22386 2 4 1.77614 4 1.5ZM4 4.5C4 4.22386 4.22386 4 4.5 4H11.5C11.7761 4 12 4.22386 12 4.5C12 4.77614 11.7761 5 11.5 5H4.5C4.22386 5 4 4.77614 4 4.5ZM0 7.5C0 7.22386 0.223858 7 0.5 7H2.5C2.77614 7 3 7.22386 3 7.5C3 7.77614 2.77614 8 2.5 8H0.5C0.223858 8 0 7.77614 0 7.5ZM4 7.5C4 7.22386 4.22386 7 4.5 7H14.5C14.7761 7 15 7.22386 15 7.5C15 7.77614 14.7761 8 14.5 8H4.5C4.22386 8 4 7.77614 4 7.5ZM4 10.5C4 10.2239 4.22386 10 4.5 10H11.5C11.7761 10 12 10.2239 12 10.5C12 10.7761 11.7761 11 11.5 11H4.5C4.22386 11 4 10.7761 4 10.5ZM0 13.5C0 13.2239 0.223858 13 0.5 13H2.5C2.77614 13 3 13.2239 3 13.5C3 13.7761 2.77614 14 2.5 14H0.5C0.223858 14 0 13.7761 0 13.5ZM4 13.5C4 13.2239 4.22386 13 4.5 13H14.5C14.7761 13 15 13.2239 15 13.5C15 13.7761 14.7761 14 14.5 14H4.5C4.22386 14 4 13.7761 4 13.5Z", "fill": "currentColor" }, "child": [] }] })(props);
    }
    function classNames(...classes) {
      return classes.filter(Boolean).join(" ");
    }
    function Tabs({ tabs, setSelected, children }) {
      return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-full px-1 sm:px-0", children: /* @__PURE__ */ jsxRuntimeExports.jsxs($e.Group, { children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx($e.List, { className: "flex space-x-6 rounded-xl p-1", children: tabs.map((tab, index) => /* @__PURE__ */ jsxRuntimeExports.jsxs(
          $e,
          {
            onClick: () => setSelected(index),
            className: ({ selected }) => classNames(
              "w-fit flex items-center outline-none gap-2 px-3 py-2.5 text-base font-medium leading-5 bg-white",
              selected ? "text-blue-700  border-b-2 border-blue-600" : "text-gray-800  hover:text-blue-800"
            ),
            children: [
              tab.icon,
              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: tab.title })
            ]
          },
          tab.title
        )) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx($e.Panels, { className: "w-full mt-2", children })
      ] }) });
    }
    const ICONS$1 = {
      high: /* @__PURE__ */ jsxRuntimeExports.jsx(MdKeyboardDoubleArrowUp, {}),
      medium: /* @__PURE__ */ jsxRuntimeExports.jsx(MdKeyboardArrowUp, {}),
      low: /* @__PURE__ */ jsxRuntimeExports.jsx(MdKeyboardArrowDown, {})
    };
    const bgColor = {
      high: "bg-red-200",
      medium: "bg-yellow-200",
      low: "bg-blue-200"
    };
    const TABS = [
      { title: "Task Detail", icon: /* @__PURE__ */ jsxRuntimeExports.jsx(FaTasks, {}) },
      { title: "Activities/Timeline", icon: /* @__PURE__ */ jsxRuntimeExports.jsx(RxActivityLog, {}) }
    ];
    const TASKTYPEICON = {
      commented: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "w-10 h-10 rounded-full bg-gray-500 flex items-center justify-center text-white", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(MdOutlineMessage, {}),
        ","
      ] }),
      started: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-10 h-10 rounded-full bg-blue-600 flex items-center justify-center text-white", children: /* @__PURE__ */ jsxRuntimeExports.jsx(FaThumbsUp, { size: 20 }) }),
      assigned: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-6 h-6 flex items-center justify-center rounded-full bg-gray-500 text-white", children: /* @__PURE__ */ jsxRuntimeExports.jsx(FaUser, { size: 14 }) }),
      bug: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-red-600", children: /* @__PURE__ */ jsxRuntimeExports.jsx(FaBug, { size: 24 }) }),
      completed: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-10 h-10 rounded-full bg-green-600 flex items-center justify-center text-white", children: /* @__PURE__ */ jsxRuntimeExports.jsx(MdOutlineDoneAll, { size: 24 }) }),
      "in progress": /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-8 h-8 flex items-center justify-center rounded-full bg-violet-600 text-white", children: /* @__PURE__ */ jsxRuntimeExports.jsx(GrInProgress, { size: 16 }) })
    };
    const act_types = [
      "Started",
      "Completed",
      "In Progress",
      "Commented",
      "Bug",
      "Assigned"
    ];
    const TaskDetails = () => {
      var _a2, _b2, _c2, _d2, _e3;
      const { id: id2 } = useParams();
      const [selected, setSelected] = reactExports.useState(0);
      const task = tasks[3];
      return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "w-full flex flex-col gap-3 mb-4 overflow-y-hidden", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-2xl text-gray-600 font-bold", children: task == null ? void 0 : task.title }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Tabs, { tabs: TABS, setSelected, children: selected === 0 ? /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "w-full flex flex-col md:flex-row gap-5 2xl:gap-8 bg-white shadow-md p-8 overflow-y-auto", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "w-full md:w-1/2 space-y-8", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-5", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs(
                "div",
                {
                  className: clsx(
                    "flex gap-1 items-center text-base font-semibold px-3 py-1 rounded-full",
                    PRIOTITYSTYELS[task == null ? void 0 : task.priority],
                    bgColor[task == null ? void 0 : task.priority]
                  ),
                  children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-lg", children: ICONS$1[task == null ? void 0 : task.priority] }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "uppercase", children: [
                      task == null ? void 0 : task.priority,
                      " Priority"
                    ] })
                  ]
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: clsx("flex items-center gap-2"), children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "div",
                  {
                    className: clsx(
                      "w-4 h-4 rounded-full",
                      TASK_TYPE$1[task.stage]
                    )
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-black uppercase", children: task == null ? void 0 : task.stage })
              ] })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-gray-500", children: [
              "Created At: ",
              new Date(task == null ? void 0 : task.date).toDateString()
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-8 p-4 border-y border-gray-200", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-x-2", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "font-semibold", children: "Assets :" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: (_a2 = task == null ? void 0 : task.assets) == null ? void 0 : _a2.length })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-gray-400", children: "|" }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-x-2", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "font-semibold", children: "Sub-Task :" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: (_b2 = task == null ? void 0 : task.subTasks) == null ? void 0 : _b2.length })
              ] })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-4 py-6", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-600 font-semibold test-sm", children: "TASK TEAM" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "space-y-3", children: (_c2 = task == null ? void 0 : task.team) == null ? void 0 : _c2.map((m2, index) => /* @__PURE__ */ jsxRuntimeExports.jsxs(
                "div",
                {
                  className: "flex gap-4 py-2 items-center border-t border-gray-200",
                  children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "div",
                      {
                        className: "w-10 h-10 rounded-full text-white flex items-center justify-center text-sm -mr-1 bg-blue-600",
                        children: /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-center", children: getInitials(m2 == null ? void 0 : m2.name) })
                      }
                    ),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-lg font-semibold", children: m2 == null ? void 0 : m2.name }),
                      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-gray-500", children: m2 == null ? void 0 : m2.title })
                    ] })
                  ]
                },
                index
              )) })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-4 py-6", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-500 font-semibold text-sm", children: "SUB-TASKS" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "space-y-8", children: (_d2 = task == null ? void 0 : task.subTasks) == null ? void 0 : _d2.map((el2, index) => /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-3", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-10 h-10 flex items-center justify-center rounded-full bg-violet-50-200", children: /* @__PURE__ */ jsxRuntimeExports.jsx(MdTaskAlt, { className: "text-violet-600", size: 26 }) }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "space-y-1", children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-2 items-center", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-sm text-gray-500", children: new Date(el2 == null ? void 0 : el2.date).toDateString() }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "px-2 py-0.5 text-center text-sm rounded-full bg-violet-100 text-violet-700 font-semibold", children: el2 == null ? void 0 : el2.tag })
                  ] }),
                  /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-700", children: el2 == null ? void 0 : el2.title })
                ] })
              ] }, index)) })
            ] })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "w-full md:w-1/2 space-y-8", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-lg font-semibold", children: "ASSETS" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-full grid grid-cols-2 gap-4", children: (_e3 = task == null ? void 0 : task.assets) == null ? void 0 : _e3.map((el2, index) => /* @__PURE__ */ jsxRuntimeExports.jsx(
              "img",
              {
                src: el2,
                alt: task == null ? void 0 : task.title,
                className: "w-full rounded h-28 md:h-36 2xl:h-52 cursor-pointer transition-all duration-700 hover:scale-125 hover:z-50"
              },
              index
            )) })
          ] })
        ] }) }) : /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(Activities, { activity: task == null ? void 0 : task.activities, id: id2 }) }) })
      ] });
    };
    const Activities = ({ activity, id: id2 }) => {
      const [selected, setSelected] = reactExports.useState(act_types[0]);
      const [text, setText] = reactExports.useState("");
      const handleSubmit = async () => {
      };
      const Card = ({ item }) => {
        var _a2;
        return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex space-x-4", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col items-center flex-shrink-0", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-10 h-10 flex items-center justify-center", children: TASKTYPEICON[item == null ? void 0 : item.type] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-full flex items-center", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-0.5 bg-gray-300 h-full" }) })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col gap-y-1 mb-8", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "font-semibold", children: (_a2 = item == null ? void 0 : item.by) == null ? void 0 : _a2.name }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-gray-500 space-y-2", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "capitalize", children: item == null ? void 0 : item.type }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-sm", children: hooks(item == null ? void 0 : item.date).fromNow() })
            ] }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "text-gray-700", children: item == null ? void 0 : item.activity })
          ] })
        ] });
      };
      return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "w-full flex gap-10 2xl:gap-20 min-h-screen px-10 py-8 bg-white shadow rounded-md justify-between overflow-y-auto", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "w-full md:w-1/2", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "text-gray-600 font-semibold text-lg mb-5", children: "Activities" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-full", children: activity == null ? void 0 : activity.map((el2, index) => /* @__PURE__ */ jsxRuntimeExports.jsx(
            Card,
            {
              item: el2,
              isConnected: index < activity.length - 1
            },
            index
          )) })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "w-full md:w-1/3", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "text-gray-600 font-semibold text-lg mb-5", children: "Add Activity" }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "w-full flex flex-wrap gap-5", children: [
            act_types.map((item, index) => /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-2 items-center", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                "input",
                {
                  type: "checkbox",
                  className: "w-4 h-4",
                  checked: selected === item ? true : false,
                  onChange: (e3) => setSelected(item)
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx("p", { children: item })
            ] }, item)),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "textarea",
              {
                rows: 10,
                value: text,
                onChange: (e3) => setText(e3.target.value),
                placeholder: "Type ......",
                className: "bg-white w-full mt-10 border border-gray-300 outline-none p-4 rounded-md focus:ring-2 ring-blue-500"
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              Button,
              {
                type: "button",
                label: "Submit",
                onClick: handleSubmit,
                className: "bg-blue-600 text-white rounded"
              }
            )
          ] })
        ] })
      ] });
    };
    const Title = ({ title, className }) => {
      return /* @__PURE__ */ jsxRuntimeExports.jsx("h2", { className: clsx("text-2xl font-semibold capitalize", className), children: title });
    };
    const TaskTitle = ({ label, className }) => {
      return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-full h-10 md:h-12 px-2 md:px-4 rounded bg-white flex items-center justify-between", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-2 items-center", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: clsx("w-4 h-4 rounded-full ", className) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-sm md:text-base text-gray-600", children: label })
      ] }) });
    };
    const ModalWrapper = ({ open, setOpen, children }) => {
      const cancelButtonRef = reactExports.useRef(null);
      return /* @__PURE__ */ jsxRuntimeExports.jsx(qe.Root, { show: open, as: reactExports.Fragment, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
        _t$1,
        {
          as: "div",
          className: "relative z-10 w-full",
          initialFocus: cancelButtonRef,
          onClose: () => setOpen(false),
          children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              qe.Child,
              {
                as: reactExports.Fragment,
                enter: "ease-out duration-300",
                enterFrom: "opacity-0",
                enterTo: "opacity-100",
                leave: "ease-in duration-200",
                leaveFrom: "opacity-100",
                leaveTo: "opacity-0",
                children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "fixed inset-0 bg-black bg-opacity-60 transition-opacity" })
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "fixed inset-0 z-10 w-screen overflow-y-auto", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex h-full items-center justify-center p-4 text-center sm:p-0", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
              qe.Child,
              {
                as: reactExports.Fragment,
                enter: "ease-out duration-300",
                enterFrom: "opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95",
                enterTo: "opacity-100 translate-y-0 sm:scale-100",
                leave: "ease-in duration-200",
                leaveFrom: "opacity-100 translate-y-0 sm:scale-100",
                leaveTo: "opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95",
                children: /* @__PURE__ */ jsxRuntimeExports.jsx(_t$1.Panel, { className: "w-full relative transform overflow-hidden rounded-lg bg-white text-left shadow-xl transition-all pb-0 sm:my-8 sm:w-full sm:max-w-lg", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "bg-white px-4 pb-4 pt-5 sm:p-6 sm:pb-4", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "sm:flex sm:items-start", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-full mt-3  sm:ml-4 sm:mt-0 sm:text-left", children }) }) }) })
              }
            ) }) })
          ]
        }
      ) });
    };
    function BsChevronExpand(props) {
      return GenIcon({ "tag": "svg", "attr": { "fill": "currentColor", "viewBox": "0 0 16 16" }, "child": [{ "tag": "path", "attr": { "fillRule": "evenodd", "d": "M3.646 9.146a.5.5 0 0 1 .708 0L8 12.793l3.646-3.647a.5.5 0 0 1 .708.708l-4 4a.5.5 0 0 1-.708 0l-4-4a.5.5 0 0 1 0-.708zm0-2.292a.5.5 0 0 0 .708 0L8 3.207l3.646 3.647a.5.5 0 0 0 .708-.708l-4-4a.5.5 0 0 0-.708 0l-4 4a.5.5 0 0 0 0 .708z" }, "child": [] }] })(props);
    }
    function BsThreeDots(props) {
      return GenIcon({ "tag": "svg", "attr": { "fill": "currentColor", "viewBox": "0 0 16 16" }, "child": [{ "tag": "path", "attr": { "d": "M3 9.5a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3zm5 0a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3zm5 0a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3z" }, "child": [] }] })(props);
    }
    const UserList = ({ isPending: isPending2, isError, setAssignedUser, assignedUser }) => {
      const [selectedUsers, setSelectedUsers] = reactExports.useState([]);
      const handleChange = (users = []) => {
        setSelectedUsers(users);
        const userIds = users.map((user) => user.id);
        setAssignedUser(userIds);
      };
      return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-gray-700", children: "Assign Task To: " }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          It,
          {
            value: selectedUsers,
            onChange: (el2) => handleChange(el2),
            multiple: true,
            children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "relative mt-1", children: [
              isPending2 && /* @__PURE__ */ jsxRuntimeExports.jsx(Loading, {}),
              isError && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-center text-red-500", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("p", { children: "Failed to load chart data." }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("p", { children: error.message || "An unexpected error occurred." })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(It.Button, { className: "relative w-full cursor-default rounded bg-white pl-3 pr-10 text-left px-3 py-2.5 2xl:py-3 border border-gray-300 sm:text-sm", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "block truncate", children: (selectedUsers == null ? void 0 : selectedUsers.map((user) => user.name).join(", ")) || "Select users" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "pointer-events-none absolute inset-y-0 right-0 flex items-center pr-2", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                  BsChevronExpand,
                  {
                    className: "h-5 w-5 text-gray-400",
                    "aria-hidden": "true"
                  }
                ) })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                qe,
                {
                  as: reactExports.Fragment,
                  leave: "transition ease-in duration-100",
                  leaveFrom: "opacity-100",
                  leaveTo: "opacity-0",
                  children: /* @__PURE__ */ jsxRuntimeExports.jsx(It.Options, { className: "z-50 absolute mt-1 max-h-60 w-full overflow-auto rounded-md bg-white py-1 text-base shadow-lg ring-1 ring-black/5 focus:outline-none sm:text-sm", children: assignedUser == null ? void 0 : assignedUser.map((user, index) => /* @__PURE__ */ jsxRuntimeExports.jsx(
                    It.Option,
                    {
                      className: ({ active }) => clsx(
                        "relative cursor-default select-none py-2 pl-10 pr-4",
                        active ? "bg-amber-100 text-amber-900" : "text-gray-900"
                      ),
                      value: user,
                      children: ({ selected }) => /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
                        /* @__PURE__ */ jsxRuntimeExports.jsxs(
                          "div",
                          {
                            className: clsx(
                              "flex items-center gap-2 truncate",
                              selected ? "font-medium" : "font-normal"
                            ),
                            children: [
                              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-6 h-6 rounded-full text-white flex items-center justify-center bg-violet-600", children: /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-center text-[10px]", children: getInitials(user.name) }) }),
                              /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: user.name })
                            ]
                          }
                        ),
                        selected ? /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "absolute inset-y-0 left-0 flex items-center pl-3 text-amber-600", children: /* @__PURE__ */ jsxRuntimeExports.jsx(MdCheck, { className: "h-5 w-5", "aria-hidden": "true" }) }) : null
                      ] })
                    },
                    index
                  )) })
                }
              )
            ] })
          }
        )
      ] });
    };
    const SelectList = ({ lists, selected, setSelected, label }) => {
      return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "w-full", children: [
        label && /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-slate-900 dark:text-gray-500", children: label }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(It, { value: selected, onChange: setSelected, children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "relative mt-1", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs(It.Button, { className: "relative w-full cursor-default rounded bg-white pl-3 pr-10 text-left px-3 py-2.5 2xl:py-3 border border-gray-300 sm:text-sm", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "block truncate", children: selected }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "pointer-events-none absolute inset-y-0 right-0 flex items-center pr-2", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
              BsChevronExpand,
              {
                className: "h-5 w-5 text-gray-400",
                "aria-hidden": "true"
              }
            ) })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            qe,
            {
              as: reactExports.Fragment,
              leave: "transition ease-in duration-100",
              leaveFrom: "opacity-100",
              leaveTo: "opacity-0",
              children: /* @__PURE__ */ jsxRuntimeExports.jsx(It.Options, { className: "z-50 absolute mt-1 max-h-60 w-full overflow-auto rounded-md bg-white py-1 text-base shadow-lg ring-1 ring-black/5 focus:outline-none sm:text-sm", children: lists.map((list, index) => /* @__PURE__ */ jsxRuntimeExports.jsx(
                It.Option,
                {
                  className: ({ active }) => `relative cursor-default select-none py-2 pl-10 pr-4 ${active ? "bg-amber-100 text-amber-900" : "text-gray-900"}`,
                  value: list,
                  children: ({ selected: selected2 }) => /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "span",
                      {
                        className: `block truncate ${selected2 ? "font-medium" : "font-normal"}`,
                        children: list
                      }
                    ),
                    selected2 ? /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "absolute inset-y-0 left-0 flex items-center pl-3 text-amber-600", children: /* @__PURE__ */ jsxRuntimeExports.jsx(MdCheck, { className: "h-5 w-5", "aria-hidden": "true" }) }) : null
                  ] })
                },
                index
              )) })
            }
          )
        ] }) })
      ] });
    };
    const TYPES = {
      STATUS_CHANGED: "task-status-changed",
      TASK_CREATED: "task-created"
    };
    const LISTS = ["PENDING", "IN PROGRESS", "COMPLETED"];
    const PRIORITY = ["HIGH", "MEDIUM", "LOW"];
    const AddTask = ({ open, setOpen }) => {
      const {
        register,
        handleSubmit,
        formState: { errors },
        reset
      } = useForm();
      const { user } = useSelector((state) => state.auth);
      const [assignedUser, setAssignedUser] = reactExports.useState([]);
      const [status, setStatus] = reactExports.useState(LISTS[0]);
      const [priority, setPriority] = reactExports.useState(
        PRIORITY[2]
      );
      const { isPending: isPending2, isError, data, error: error2 } = useQuery({
        queryKey: ["users"],
        queryFn: async () => {
          const response = await axiosInstance.get(`users`);
          return response.data;
        },
        enabled: user.role == "admin"
      });
      const addTaskMutation = useMutation({
        mutationFn: (payload) => axiosInstance.post(`/tasks`, payload),
        onSuccess: async (response) => {
          var _a2, _b2;
          console.log(response, "ssss");
          if (response.data.status === "success") {
            Ut.success("Task added successfully!", {
              duration: 2e3,
              position: "top-center"
            });
            try {
              const notificationPayload = {
                type: TYPES["TASK_CREATED"],
                message: `A new task titled "${response.data.data.title}" has been created.`,
                task: response.data.data._id,
                assignedUser: response.data.data.assigned_users,
                status: (_b2 = (_a2 = response == null ? void 0 : response.data) == null ? void 0 : _a2.data) == null ? void 0 : _b2.status
              };
              await axiosInstance.post(`notifications`, notificationPayload);
              Ut.success("Notification created successfully!", {
                duration: 2e3,
                position: "top-center"
              });
            } catch (error22) {
              Ut.error("Failed to create notification");
            }
            reset();
            setAssignedUser([]);
            setStatus("PENDING");
            setPriority("LOW");
            setOpen(false);
          }
        },
        onError: (error22) => {
          var _a2, _b2;
          Ut.error(((_b2 = (_a2 = error22.response) == null ? void 0 : _a2.data) == null ? void 0 : _b2.message) || "Failed to add task");
        }
      });
      const submitHandler = async (formData) => {
        const payload = {
          ...formData,
          assignedUser,
          status: status.toLowerCase(),
          priority: priority.toLowerCase()
        };
        addTaskMutation.mutate(payload);
      };
      return /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(ModalWrapper, { open, setOpen, children: /* @__PURE__ */ jsxRuntimeExports.jsxs("form", { onSubmit: handleSubmit(submitHandler), children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          _t$1.Title,
          {
            as: "h2",
            className: "text-base font-bold leading-6 text-gray-900 mb-4",
            children: "ADD TASK"
          }
        ),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mt-2 flex flex-col gap-6", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            Textbox,
            {
              placeholder: "Task Title",
              type: "text",
              name: "title",
              label: "Task Title",
              className: "w-full rounded",
              register: register("title", { required: "Title is required" }),
              error: errors.title ? errors.title.message : ""
            }
          ),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            Textbox,
            {
              placeholder: "Task Description",
              type: "text",
              name: "description",
              label: "Description",
              className: "w-full rounded",
              register: register("description", {
                required: "Description is required"
              }),
              error: errors.description ? errors.description.message : ""
            }
          ),
          /* @__PURE__ */ jsxRuntimeExports.jsx(UserList, { isPending: isPending2, isError, setAssignedUser, assignedUser: data && (data == null ? void 0 : data.data) }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-4", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              SelectList,
              {
                label: "Task Status",
                lists: LISTS,
                selected: status,
                setSelected: setStatus
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-full", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
              Textbox,
              {
                placeholder: "Date",
                type: "date",
                name: "dueDate",
                label: "Task Date",
                className: "w-full rounded",
                register: register("dueDate", {
                  required: "Date is required!"
                }),
                error: errors.dueDate ? errors.dueDate.message : ""
              }
            ) })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex gap-4", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
            SelectList,
            {
              label: "Priority Level",
              lists: PRIORITY,
              selected: priority,
              setSelected: setPriority
            }
          ) }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-gray-50 py-6 sm:flex sm:flex-row-reverse gap-4", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              Button,
              {
                label: "Submit",
                type: "submit",
                className: "bg-blue-600 px-8 text-sm font-semibold text-white hover:bg-blue-700  sm:w-auto"
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              Button,
              {
                type: "button",
                className: "bg-white px-5 text-sm font-semibold text-gray-900 sm:w-auto",
                onClick: () => setOpen(false),
                label: "Cancel"
              }
            )
          ] })
        ] })
      ] }) }) });
    };
    function AiTwotoneFolderOpen(props) {
      return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 1024 1024" }, "child": [{ "tag": "path", "attr": { "fill": "#D9D9D9", "d": "M159 768h612.3l103.4-256H262.3z" }, "child": [] }, { "tag": "path", "attr": { "d": "M928 444H820V330.4c0-17.7-14.3-32-32-32H473L355.7 186.2a8.15 8.15 0 0 0-5.5-2.2H96c-17.7 0-32 14.3-32 32v592c0 17.7 14.3 32 32 32h698c13 0 24.8-7.9 29.7-20l134-332c1.5-3.8 2.3-7.9 2.3-12 0-17.7-14.3-32-32-32zM136 256h188.5l119.6 114.4H748V444H238c-13 0-24.8 7.9-29.7 20L136 643.2V256zm635.3 512H159l103.3-256h612.4L771.3 768z" }, "child": [] }] })(props);
    }
    function HiDuplicate(props) {
      return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 20 20", "fill": "currentColor", "aria-hidden": "true" }, "child": [{ "tag": "path", "attr": { "d": "M7 9a2 2 0 012-2h6a2 2 0 012 2v6a2 2 0 01-2 2H9a2 2 0 01-2-2V9z" }, "child": [] }, { "tag": "path", "attr": { "d": "M5 3a2 2 0 00-2 2v6a2 2 0 002 2V5h8a2 2 0 00-2-2H5z" }, "child": [] }] })(props);
    }
    function RiDeleteBin6Line(props) {
      return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24" }, "child": [{ "tag": "path", "attr": { "d": "M7 4V2H17V4H22V6H20V21C20 21.5523 19.5523 22 19 22H5C4.44772 22 4 21.5523 4 21V6H2V4H7ZM6 6V20H18V6H6ZM9 9H11V17H9V9ZM13 9H15V17H13V9Z" }, "child": [] }] })(props);
    }
    function ConfirmatioDialog({
      open,
      setOpen,
      msg,
      setMsg = () => {
      },
      onClick = () => {
      },
      type = "delete",
      setType = () => {
      }
    }) {
      const closeDialog = () => {
        setType("delete");
        setMsg(null);
        setOpen(false);
      };
      return /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(ModalWrapper, { open, setOpen: closeDialog, children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "py-4 w-full flex flex-col gap-4 items-center justify-center", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(_t$1.Title, { as: "h3", className: "", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
          "p",
          {
            className: clsx(
              "p-3 rounded-full ",
              type === "restore" || type === "restoreAll" ? "text-yellow-600 bg-yellow-100" : "text-red-600 bg-red-200"
            ),
            children: /* @__PURE__ */ jsxRuntimeExports.jsx(FaQuestion, { size: 60 })
          }
        ) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-center text-gray-500", children: msg ?? "Are you sure you want to delete the selected record?" }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-gray-50 py-3 sm:flex sm:flex-row-reverse gap-4", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            Button,
            {
              type: "button",
              className: clsx(
                " px-8 text-sm font-semibold text-white sm:w-auto",
                type === "restore" || type === "restoreAll" ? "bg-yellow-600" : "bg-red-600 hover:bg-red-500"
              ),
              onClick,
              label: type === "restore" ? "Restore" : "Delete"
            }
          ),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            Button,
            {
              type: "button",
              className: "bg-white px-8 text-sm font-semibold text-gray-900 sm:w-auto border",
              onClick: () => closeDialog(),
              label: "Cancel"
            }
          )
        ] })
      ] }) }) });
    }
    const TaskDialog = ({ task }) => {
      const [open, setOpen] = reactExports.useState(false);
      const [openEdit, setOpenEdit] = reactExports.useState(false);
      const [openDialog, setOpenDialog] = reactExports.useState(false);
      const navigate = useNavigate();
      const deleteClicks = () => {
      };
      const deleteHandler = () => {
      };
      const items = [
        {
          label: "Open Task",
          icon: /* @__PURE__ */ jsxRuntimeExports.jsx(AiTwotoneFolderOpen, { className: "mr-2 h-5 w-5", "aria-hidden": "true" }),
          onClick: () => navigate(`/task/${task._id}`)
        },
        {
          label: "Edit",
          icon: /* @__PURE__ */ jsxRuntimeExports.jsx(MdOutlineEdit, { className: "mr-2 h-5 w-5", "aria-hidden": "true" }),
          onClick: () => setOpenEdit(true)
        },
        {
          label: "Add Sub-Task",
          icon: /* @__PURE__ */ jsxRuntimeExports.jsx(MdAdd, { className: "mr-2 h-5 w-5", "aria-hidden": "true" }),
          onClick: () => setOpen(true)
        },
        {
          label: "Duplicate",
          icon: /* @__PURE__ */ jsxRuntimeExports.jsx(HiDuplicate, { className: "mr-2 h-5 w-5", "aria-hidden": "true" }),
          onClick: () => duplicateHanlder()
        }
      ];
      return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { children: /* @__PURE__ */ jsxRuntimeExports.jsxs(qe$2, { as: "div", className: "relative inline-block text-left", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(qe$2.Button, { className: "inline-flex w-full justify-center rounded-md px-4 py-2 text-sm font-medium text-gray-600 ", children: /* @__PURE__ */ jsxRuntimeExports.jsx(BsThreeDots, {}) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            qe,
            {
              as: reactExports.Fragment,
              enter: "transition ease-out duration-100",
              enterFrom: "transform opacity-0 scale-95",
              enterTo: "transform opacity-100 scale-100",
              leave: "transition ease-in duration-75",
              leaveFrom: "transform opacity-100 scale-100",
              leaveTo: "transform opacity-0 scale-95",
              children: /* @__PURE__ */ jsxRuntimeExports.jsxs(qe$2.Items, { className: "absolute p-4 right-0 mt-2 w-56 origin-top-right divide-y divide-gray-100 rounded-md bg-white shadow-lg ring-1 ring-black/5 focus:outline-none", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "px-1 py-1 space-y-2", children: items.map((el2) => /* @__PURE__ */ jsxRuntimeExports.jsx(qe$2.Item, { children: ({ active }) => /* @__PURE__ */ jsxRuntimeExports.jsxs(
                  "button",
                  {
                    onClick: el2 == null ? void 0 : el2.onClick,
                    className: `${active ? "bg-blue-500 text-white" : "text-gray-900"} group flex w-full items-center rounded-md px-2 py-2 text-sm`,
                    children: [
                      el2.icon,
                      el2.label
                    ]
                  }
                ) }, el2.label)) }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "px-1 py-1", children: /* @__PURE__ */ jsxRuntimeExports.jsx(qe$2.Item, { children: ({ active }) => /* @__PURE__ */ jsxRuntimeExports.jsxs(
                  "button",
                  {
                    onClick: () => deleteClicks(),
                    className: `${active ? "bg-blue-500 text-white" : "text-red-900"} group flex w-full items-center rounded-md px-2 py-2 text-sm`,
                    children: [
                      /* @__PURE__ */ jsxRuntimeExports.jsx(
                        RiDeleteBin6Line,
                        {
                          className: "mr-2 h-5 w-5 text-red-400",
                          "aria-hidden": "true"
                        }
                      ),
                      "Delete"
                    ]
                  }
                ) }) })
              ] })
            }
          )
        ] }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          AddTask,
          {
            open: openEdit,
            setOpen: setOpenEdit,
            task
          },
          (/* @__PURE__ */ new Date()).getTime()
        ),
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          ConfirmatioDialog,
          {
            open: openDialog,
            setOpen: setOpenDialog,
            onClick: deleteHandler
          }
        )
      ] });
    };
    const UserInfo = ({ user }) => {
      return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "px-4", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Ct, { className: "relative", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(Ct.Button, { className: "group inline-flex items-center outline-none", children: /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: getInitials(user == null ? void 0 : user.name) }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          qe,
          {
            as: reactExports.Fragment,
            enter: "transition ease-out duration-200",
            enterFrom: "opacity-0 translate-y-1",
            enterTo: "opacity-100 translate-y-0",
            leave: "transition ease-in duration-150",
            leaveFrom: "opacity-100 translate-y-0",
            leaveTo: "opacity-0 translate-y-1",
            children: /* @__PURE__ */ jsxRuntimeExports.jsx(Ct.Panel, { className: "absolute left-1/2 z-10 mt-3 w-80 max-w-sm -translate-x-1/2 transform px-4 sm:px-0 ", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-4 rounded-lg shadow-lg bg-white p-8", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-16 h-16 bg-blue-600 rounded-full text-white flex items-center justify-center text-2xl ", children: /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-center font-bold", children: getInitials(user == null ? void 0 : user.name) }) }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col gap-y-1", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-black text-xl font-bold", children: user == null ? void 0 : user.name }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-base text-gray-500", children: user == null ? void 0 : user.title }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-blue-500", children: (user == null ? void 0 : user.email) ?? "email@example.com" })
              ] })
            ] }) })
          }
        )
      ] }) }) });
    };
    const canUseDOM$1 = typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined";
    function isWindow(element) {
      const elementString = Object.prototype.toString.call(element);
      return elementString === "[object Window]" || // In Electron context the Window object serializes to [object global]
      elementString === "[object global]";
    }
    function isNode(node) {
      return "nodeType" in node;
    }
    function getWindow(target) {
      var _target$ownerDocument, _target$ownerDocument2;
      if (!target) {
        return window;
      }
      if (isWindow(target)) {
        return target;
      }
      if (!isNode(target)) {
        return window;
      }
      return (_target$ownerDocument = (_target$ownerDocument2 = target.ownerDocument) == null ? void 0 : _target$ownerDocument2.defaultView) != null ? _target$ownerDocument : window;
    }
    function isDocument(node) {
      const {
        Document
      } = getWindow(node);
      return node instanceof Document;
    }
    function isHTMLElement(node) {
      if (isWindow(node)) {
        return false;
      }
      return node instanceof getWindow(node).HTMLElement;
    }
    function isSVGElement(node) {
      return node instanceof getWindow(node).SVGElement;
    }
    function getOwnerDocument(target) {
      if (!target) {
        return document;
      }
      if (isWindow(target)) {
        return target.document;
      }
      if (!isNode(target)) {
        return document;
      }
      if (isDocument(target)) {
        return target;
      }
      if (isHTMLElement(target) || isSVGElement(target)) {
        return target.ownerDocument;
      }
      return document;
    }
    const useIsomorphicLayoutEffect$1 = canUseDOM$1 ? reactExports.useLayoutEffect : reactExports.useEffect;
    function useEvent(handler) {
      const handlerRef = reactExports.useRef(handler);
      useIsomorphicLayoutEffect$1(() => {
        handlerRef.current = handler;
      });
      return reactExports.useCallback(function() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        return handlerRef.current == null ? void 0 : handlerRef.current(...args);
      }, []);
    }
    function useInterval() {
      const intervalRef = reactExports.useRef(null);
      const set2 = reactExports.useCallback((listener, duration) => {
        intervalRef.current = setInterval(listener, duration);
      }, []);
      const clear = reactExports.useCallback(() => {
        if (intervalRef.current !== null) {
          clearInterval(intervalRef.current);
          intervalRef.current = null;
        }
      }, []);
      return [set2, clear];
    }
    function useLatestValue(value2, dependencies) {
      if (dependencies === void 0) {
        dependencies = [value2];
      }
      const valueRef = reactExports.useRef(value2);
      useIsomorphicLayoutEffect$1(() => {
        if (valueRef.current !== value2) {
          valueRef.current = value2;
        }
      }, dependencies);
      return valueRef;
    }
    function useLazyMemo(callback, dependencies) {
      const valueRef = reactExports.useRef();
      return reactExports.useMemo(
        () => {
          const newValue = callback(valueRef.current);
          valueRef.current = newValue;
          return newValue;
        },
        // eslint-disable-next-line react-hooks/exhaustive-deps
        [...dependencies]
      );
    }
    function useNodeRef(onChange) {
      const onChangeHandler = useEvent(onChange);
      const node = reactExports.useRef(null);
      const setNodeRef = reactExports.useCallback(
        (element) => {
          if (element !== node.current) {
            onChangeHandler == null ? void 0 : onChangeHandler(element, node.current);
          }
          node.current = element;
        },
        //eslint-disable-next-line
        []
      );
      return [node, setNodeRef];
    }
    function usePrevious(value2) {
      const ref = reactExports.useRef();
      reactExports.useEffect(() => {
        ref.current = value2;
      }, [value2]);
      return ref.current;
    }
    let ids = {};
    function useUniqueId(prefix2, value2) {
      return reactExports.useMemo(() => {
        if (value2) {
          return value2;
        }
        const id2 = ids[prefix2] == null ? 0 : ids[prefix2] + 1;
        ids[prefix2] = id2;
        return prefix2 + "-" + id2;
      }, [prefix2, value2]);
    }
    function createAdjustmentFn(modifier) {
      return function(object2) {
        for (var _len = arguments.length, adjustments = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          adjustments[_key - 1] = arguments[_key];
        }
        return adjustments.reduce((accumulator, adjustment) => {
          const entries = Object.entries(adjustment);
          for (const [key, valueAdjustment] of entries) {
            const value2 = accumulator[key];
            if (value2 != null) {
              accumulator[key] = value2 + modifier * valueAdjustment;
            }
          }
          return accumulator;
        }, {
          ...object2
        });
      };
    }
    const add$1 = /* @__PURE__ */ createAdjustmentFn(1);
    const subtract$1 = /* @__PURE__ */ createAdjustmentFn(-1);
    function hasViewportRelativeCoordinates(event) {
      return "clientX" in event && "clientY" in event;
    }
    function isKeyboardEvent(event) {
      if (!event) {
        return false;
      }
      const {
        KeyboardEvent
      } = getWindow(event.target);
      return KeyboardEvent && event instanceof KeyboardEvent;
    }
    function isTouchEvent(event) {
      if (!event) {
        return false;
      }
      const {
        TouchEvent
      } = getWindow(event.target);
      return TouchEvent && event instanceof TouchEvent;
    }
    function getEventCoordinates(event) {
      if (isTouchEvent(event)) {
        if (event.touches && event.touches.length) {
          const {
            clientX: x2,
            clientY: y2
          } = event.touches[0];
          return {
            x: x2,
            y: y2
          };
        } else if (event.changedTouches && event.changedTouches.length) {
          const {
            clientX: x2,
            clientY: y2
          } = event.changedTouches[0];
          return {
            x: x2,
            y: y2
          };
        }
      }
      if (hasViewportRelativeCoordinates(event)) {
        return {
          x: event.clientX,
          y: event.clientY
        };
      }
      return null;
    }
    const SELECTOR = "a,frame,iframe,input:not([type=hidden]):not(:disabled),select:not(:disabled),textarea:not(:disabled),button:not(:disabled),*[tabindex]";
    function findFirstFocusableNode(element) {
      if (element.matches(SELECTOR)) {
        return element;
      }
      return element.querySelector(SELECTOR);
    }
    const hiddenStyles = {
      display: "none"
    };
    function HiddenText(_ref) {
      let {
        id: id2,
        value: value2
      } = _ref;
      return React$1.createElement("div", {
        id: id2,
        style: hiddenStyles
      }, value2);
    }
    function LiveRegion(_ref) {
      let {
        id: id2,
        announcement,
        ariaLiveType = "assertive"
      } = _ref;
      const visuallyHidden = {
        position: "fixed",
        top: 0,
        left: 0,
        width: 1,
        height: 1,
        margin: -1,
        border: 0,
        padding: 0,
        overflow: "hidden",
        clip: "rect(0 0 0 0)",
        clipPath: "inset(100%)",
        whiteSpace: "nowrap"
      };
      return React$1.createElement("div", {
        id: id2,
        style: visuallyHidden,
        role: "status",
        "aria-live": ariaLiveType,
        "aria-atomic": true
      }, announcement);
    }
    function useAnnouncement() {
      const [announcement, setAnnouncement] = reactExports.useState("");
      const announce = reactExports.useCallback((value2) => {
        if (value2 != null) {
          setAnnouncement(value2);
        }
      }, []);
      return {
        announce,
        announcement
      };
    }
    const DndMonitorContext = /* @__PURE__ */ reactExports.createContext(null);
    function useDndMonitor(listener) {
      const registerListener = reactExports.useContext(DndMonitorContext);
      reactExports.useEffect(() => {
        if (!registerListener) {
          throw new Error("useDndMonitor must be used within a children of <DndContext>");
        }
        const unsubscribe = registerListener(listener);
        return unsubscribe;
      }, [listener, registerListener]);
    }
    function useDndMonitorProvider() {
      const [listeners] = reactExports.useState(() => /* @__PURE__ */ new Set());
      const registerListener = reactExports.useCallback((listener) => {
        listeners.add(listener);
        return () => listeners.delete(listener);
      }, [listeners]);
      const dispatch = reactExports.useCallback((_ref) => {
        let {
          type,
          event
        } = _ref;
        listeners.forEach((listener) => {
          var _listener$type;
          return (_listener$type = listener[type]) == null ? void 0 : _listener$type.call(listener, event);
        });
      }, [listeners]);
      return [dispatch, registerListener];
    }
    const defaultScreenReaderInstructions = {
      draggable: "\n    To pick up a draggable item, press the space bar.\n    While dragging, use the arrow keys to move the item.\n    Press space again to drop the item in its new position, or press escape to cancel.\n  "
    };
    const defaultAnnouncements = {
      onDragStart(_ref) {
        let {
          active
        } = _ref;
        return "Picked up draggable item " + active.id + ".";
      },
      onDragOver(_ref2) {
        let {
          active,
          over
        } = _ref2;
        if (over) {
          return "Draggable item " + active.id + " was moved over droppable area " + over.id + ".";
        }
        return "Draggable item " + active.id + " is no longer over a droppable area.";
      },
      onDragEnd(_ref3) {
        let {
          active,
          over
        } = _ref3;
        if (over) {
          return "Draggable item " + active.id + " was dropped over droppable area " + over.id;
        }
        return "Draggable item " + active.id + " was dropped.";
      },
      onDragCancel(_ref4) {
        let {
          active
        } = _ref4;
        return "Dragging was cancelled. Draggable item " + active.id + " was dropped.";
      }
    };
    function Accessibility(_ref) {
      let {
        announcements = defaultAnnouncements,
        container,
        hiddenTextDescribedById,
        screenReaderInstructions = defaultScreenReaderInstructions
      } = _ref;
      const {
        announce,
        announcement
      } = useAnnouncement();
      const liveRegionId = useUniqueId("DndLiveRegion");
      const [mounted, setMounted] = reactExports.useState(false);
      reactExports.useEffect(() => {
        setMounted(true);
      }, []);
      useDndMonitor(reactExports.useMemo(() => ({
        onDragStart(_ref2) {
          let {
            active
          } = _ref2;
          announce(announcements.onDragStart({
            active
          }));
        },
        onDragMove(_ref3) {
          let {
            active,
            over
          } = _ref3;
          if (announcements.onDragMove) {
            announce(announcements.onDragMove({
              active,
              over
            }));
          }
        },
        onDragOver(_ref4) {
          let {
            active,
            over
          } = _ref4;
          announce(announcements.onDragOver({
            active,
            over
          }));
        },
        onDragEnd(_ref5) {
          let {
            active,
            over
          } = _ref5;
          announce(announcements.onDragEnd({
            active,
            over
          }));
        },
        onDragCancel(_ref6) {
          let {
            active,
            over
          } = _ref6;
          announce(announcements.onDragCancel({
            active,
            over
          }));
        }
      }), [announce, announcements]));
      if (!mounted) {
        return null;
      }
      const markup = React$1.createElement(React$1.Fragment, null, React$1.createElement(HiddenText, {
        id: hiddenTextDescribedById,
        value: screenReaderInstructions.draggable
      }), React$1.createElement(LiveRegion, {
        id: liveRegionId,
        announcement
      }));
      return container ? reactDomExports.createPortal(markup, container) : markup;
    }
    var Action;
    (function(Action2) {
      Action2["DragStart"] = "dragStart";
      Action2["DragMove"] = "dragMove";
      Action2["DragEnd"] = "dragEnd";
      Action2["DragCancel"] = "dragCancel";
      Action2["DragOver"] = "dragOver";
      Action2["RegisterDroppable"] = "registerDroppable";
      Action2["SetDroppableDisabled"] = "setDroppableDisabled";
      Action2["UnregisterDroppable"] = "unregisterDroppable";
    })(Action || (Action = {}));
    function noop$3() {
    }
    const defaultCoordinates = /* @__PURE__ */ Object.freeze({
      x: 0,
      y: 0
    });
    function sortCollisionsDesc(_ref3, _ref4) {
      let {
        data: {
          value: a2
        }
      } = _ref3;
      let {
        data: {
          value: b2
        }
      } = _ref4;
      return b2 - a2;
    }
    function getFirstCollision(collisions, property2) {
      if (!collisions || collisions.length === 0) {
        return null;
      }
      const [firstCollision] = collisions;
      return property2 ? firstCollision[property2] : firstCollision;
    }
    function getIntersectionRatio(entry, target) {
      const top = Math.max(target.top, entry.top);
      const left = Math.max(target.left, entry.left);
      const right = Math.min(target.left + target.width, entry.left + entry.width);
      const bottom = Math.min(target.top + target.height, entry.top + entry.height);
      const width = right - left;
      const height = bottom - top;
      if (left < right && top < bottom) {
        const targetArea = target.width * target.height;
        const entryArea = entry.width * entry.height;
        const intersectionArea = width * height;
        const intersectionRatio = intersectionArea / (targetArea + entryArea - intersectionArea);
        return Number(intersectionRatio.toFixed(4));
      }
      return 0;
    }
    const rectIntersection = (_ref) => {
      let {
        collisionRect,
        droppableRects,
        droppableContainers
      } = _ref;
      const collisions = [];
      for (const droppableContainer of droppableContainers) {
        const {
          id: id2
        } = droppableContainer;
        const rect = droppableRects.get(id2);
        if (rect) {
          const intersectionRatio = getIntersectionRatio(rect, collisionRect);
          if (intersectionRatio > 0) {
            collisions.push({
              id: id2,
              data: {
                droppableContainer,
                value: intersectionRatio
              }
            });
          }
        }
      }
      return collisions.sort(sortCollisionsDesc);
    };
    function adjustScale(transform, rect1, rect2) {
      return {
        ...transform,
        scaleX: rect1 && rect2 ? rect1.width / rect2.width : 1,
        scaleY: rect1 && rect2 ? rect1.height / rect2.height : 1
      };
    }
    function getRectDelta(rect1, rect2) {
      return rect1 && rect2 ? {
        x: rect1.left - rect2.left,
        y: rect1.top - rect2.top
      } : defaultCoordinates;
    }
    function createRectAdjustmentFn(modifier) {
      return function adjustClientRect(rect) {
        for (var _len = arguments.length, adjustments = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          adjustments[_key - 1] = arguments[_key];
        }
        return adjustments.reduce((acc, adjustment) => ({
          ...acc,
          top: acc.top + modifier * adjustment.y,
          bottom: acc.bottom + modifier * adjustment.y,
          left: acc.left + modifier * adjustment.x,
          right: acc.right + modifier * adjustment.x
        }), {
          ...rect
        });
      };
    }
    const getAdjustedRect = /* @__PURE__ */ createRectAdjustmentFn(1);
    function parseTransform(transform) {
      if (transform.startsWith("matrix3d(")) {
        const transformArray = transform.slice(9, -1).split(/, /);
        return {
          x: +transformArray[12],
          y: +transformArray[13],
          scaleX: +transformArray[0],
          scaleY: +transformArray[5]
        };
      } else if (transform.startsWith("matrix(")) {
        const transformArray = transform.slice(7, -1).split(/, /);
        return {
          x: +transformArray[4],
          y: +transformArray[5],
          scaleX: +transformArray[0],
          scaleY: +transformArray[3]
        };
      }
      return null;
    }
    function inverseTransform(rect, transform, transformOrigin) {
      const parsedTransform = parseTransform(transform);
      if (!parsedTransform) {
        return rect;
      }
      const {
        scaleX,
        scaleY,
        x: translateX,
        y: translateY
      } = parsedTransform;
      const x2 = rect.left - translateX - (1 - scaleX) * parseFloat(transformOrigin);
      const y2 = rect.top - translateY - (1 - scaleY) * parseFloat(transformOrigin.slice(transformOrigin.indexOf(" ") + 1));
      const w2 = scaleX ? rect.width / scaleX : rect.width;
      const h2 = scaleY ? rect.height / scaleY : rect.height;
      return {
        width: w2,
        height: h2,
        top: y2,
        right: x2 + w2,
        bottom: y2 + h2,
        left: x2
      };
    }
    const defaultOptions = {
      ignoreTransform: false
    };
    function getClientRect(element, options) {
      if (options === void 0) {
        options = defaultOptions;
      }
      let rect = element.getBoundingClientRect();
      if (options.ignoreTransform) {
        const {
          transform,
          transformOrigin
        } = getWindow(element).getComputedStyle(element);
        if (transform) {
          rect = inverseTransform(rect, transform, transformOrigin);
        }
      }
      const {
        top,
        left,
        width,
        height,
        bottom,
        right
      } = rect;
      return {
        top,
        left,
        width,
        height,
        bottom,
        right
      };
    }
    function getTransformAgnosticClientRect(element) {
      return getClientRect(element, {
        ignoreTransform: true
      });
    }
    function getWindowClientRect(element) {
      const width = element.innerWidth;
      const height = element.innerHeight;
      return {
        top: 0,
        left: 0,
        right: width,
        bottom: height,
        width,
        height
      };
    }
    function isFixed(node, computedStyle) {
      if (computedStyle === void 0) {
        computedStyle = getWindow(node).getComputedStyle(node);
      }
      return computedStyle.position === "fixed";
    }
    function isScrollable(element, computedStyle) {
      if (computedStyle === void 0) {
        computedStyle = getWindow(element).getComputedStyle(element);
      }
      const overflowRegex = /(auto|scroll|overlay)/;
      const properties2 = ["overflow", "overflowX", "overflowY"];
      return properties2.some((property2) => {
        const value2 = computedStyle[property2];
        return typeof value2 === "string" ? overflowRegex.test(value2) : false;
      });
    }
    function getScrollableAncestors(element, limit) {
      const scrollParents = [];
      function findScrollableAncestors(node) {
        if (limit != null && scrollParents.length >= limit) {
          return scrollParents;
        }
        if (!node) {
          return scrollParents;
        }
        if (isDocument(node) && node.scrollingElement != null && !scrollParents.includes(node.scrollingElement)) {
          scrollParents.push(node.scrollingElement);
          return scrollParents;
        }
        if (!isHTMLElement(node) || isSVGElement(node)) {
          return scrollParents;
        }
        if (scrollParents.includes(node)) {
          return scrollParents;
        }
        const computedStyle = getWindow(element).getComputedStyle(node);
        if (node !== element) {
          if (isScrollable(node, computedStyle)) {
            scrollParents.push(node);
          }
        }
        if (isFixed(node, computedStyle)) {
          return scrollParents;
        }
        return findScrollableAncestors(node.parentNode);
      }
      if (!element) {
        return scrollParents;
      }
      return findScrollableAncestors(element);
    }
    function getFirstScrollableAncestor(node) {
      const [firstScrollableAncestor] = getScrollableAncestors(node, 1);
      return firstScrollableAncestor != null ? firstScrollableAncestor : null;
    }
    function getScrollableElement(element) {
      if (!canUseDOM$1 || !element) {
        return null;
      }
      if (isWindow(element)) {
        return element;
      }
      if (!isNode(element)) {
        return null;
      }
      if (isDocument(element) || element === getOwnerDocument(element).scrollingElement) {
        return window;
      }
      if (isHTMLElement(element)) {
        return element;
      }
      return null;
    }
    function getScrollXCoordinate(element) {
      if (isWindow(element)) {
        return element.scrollX;
      }
      return element.scrollLeft;
    }
    function getScrollYCoordinate(element) {
      if (isWindow(element)) {
        return element.scrollY;
      }
      return element.scrollTop;
    }
    function getScrollCoordinates(element) {
      return {
        x: getScrollXCoordinate(element),
        y: getScrollYCoordinate(element)
      };
    }
    var Direction;
    (function(Direction2) {
      Direction2[Direction2["Forward"] = 1] = "Forward";
      Direction2[Direction2["Backward"] = -1] = "Backward";
    })(Direction || (Direction = {}));
    function isDocumentScrollingElement(element) {
      if (!canUseDOM$1 || !element) {
        return false;
      }
      return element === document.scrollingElement;
    }
    function getScrollPosition(scrollingContainer) {
      const minScroll = {
        x: 0,
        y: 0
      };
      const dimensions = isDocumentScrollingElement(scrollingContainer) ? {
        height: window.innerHeight,
        width: window.innerWidth
      } : {
        height: scrollingContainer.clientHeight,
        width: scrollingContainer.clientWidth
      };
      const maxScroll = {
        x: scrollingContainer.scrollWidth - dimensions.width,
        y: scrollingContainer.scrollHeight - dimensions.height
      };
      const isTop = scrollingContainer.scrollTop <= minScroll.y;
      const isLeft = scrollingContainer.scrollLeft <= minScroll.x;
      const isBottom = scrollingContainer.scrollTop >= maxScroll.y;
      const isRight = scrollingContainer.scrollLeft >= maxScroll.x;
      return {
        isTop,
        isLeft,
        isBottom,
        isRight,
        maxScroll,
        minScroll
      };
    }
    const defaultThreshold = {
      x: 0.2,
      y: 0.2
    };
    function getScrollDirectionAndSpeed(scrollContainer, scrollContainerRect, _ref, acceleration, thresholdPercentage) {
      let {
        top,
        left,
        right,
        bottom
      } = _ref;
      if (acceleration === void 0) {
        acceleration = 10;
      }
      if (thresholdPercentage === void 0) {
        thresholdPercentage = defaultThreshold;
      }
      const {
        isTop,
        isBottom,
        isLeft,
        isRight
      } = getScrollPosition(scrollContainer);
      const direction = {
        x: 0,
        y: 0
      };
      const speed = {
        x: 0,
        y: 0
      };
      const threshold2 = {
        height: scrollContainerRect.height * thresholdPercentage.y,
        width: scrollContainerRect.width * thresholdPercentage.x
      };
      if (!isTop && top <= scrollContainerRect.top + threshold2.height) {
        direction.y = Direction.Backward;
        speed.y = acceleration * Math.abs((scrollContainerRect.top + threshold2.height - top) / threshold2.height);
      } else if (!isBottom && bottom >= scrollContainerRect.bottom - threshold2.height) {
        direction.y = Direction.Forward;
        speed.y = acceleration * Math.abs((scrollContainerRect.bottom - threshold2.height - bottom) / threshold2.height);
      }
      if (!isRight && right >= scrollContainerRect.right - threshold2.width) {
        direction.x = Direction.Forward;
        speed.x = acceleration * Math.abs((scrollContainerRect.right - threshold2.width - right) / threshold2.width);
      } else if (!isLeft && left <= scrollContainerRect.left + threshold2.width) {
        direction.x = Direction.Backward;
        speed.x = acceleration * Math.abs((scrollContainerRect.left + threshold2.width - left) / threshold2.width);
      }
      return {
        direction,
        speed
      };
    }
    function getScrollElementRect(element) {
      if (element === document.scrollingElement) {
        const {
          innerWidth,
          innerHeight
        } = window;
        return {
          top: 0,
          left: 0,
          right: innerWidth,
          bottom: innerHeight,
          width: innerWidth,
          height: innerHeight
        };
      }
      const {
        top,
        left,
        right,
        bottom
      } = element.getBoundingClientRect();
      return {
        top,
        left,
        right,
        bottom,
        width: element.clientWidth,
        height: element.clientHeight
      };
    }
    function getScrollOffsets(scrollableAncestors) {
      return scrollableAncestors.reduce((acc, node) => {
        return add$1(acc, getScrollCoordinates(node));
      }, defaultCoordinates);
    }
    function getScrollXOffset(scrollableAncestors) {
      return scrollableAncestors.reduce((acc, node) => {
        return acc + getScrollXCoordinate(node);
      }, 0);
    }
    function getScrollYOffset(scrollableAncestors) {
      return scrollableAncestors.reduce((acc, node) => {
        return acc + getScrollYCoordinate(node);
      }, 0);
    }
    function scrollIntoViewIfNeeded(element, measure) {
      if (measure === void 0) {
        measure = getClientRect;
      }
      if (!element) {
        return;
      }
      const {
        top,
        left,
        bottom,
        right
      } = measure(element);
      const firstScrollableAncestor = getFirstScrollableAncestor(element);
      if (!firstScrollableAncestor) {
        return;
      }
      if (bottom <= 0 || right <= 0 || top >= window.innerHeight || left >= window.innerWidth) {
        element.scrollIntoView({
          block: "center",
          inline: "center"
        });
      }
    }
    const properties = [["x", ["left", "right"], getScrollXOffset], ["y", ["top", "bottom"], getScrollYOffset]];
    class Rect {
      constructor(rect, element) {
        this.rect = void 0;
        this.width = void 0;
        this.height = void 0;
        this.top = void 0;
        this.bottom = void 0;
        this.right = void 0;
        this.left = void 0;
        const scrollableAncestors = getScrollableAncestors(element);
        const scrollOffsets = getScrollOffsets(scrollableAncestors);
        this.rect = {
          ...rect
        };
        this.width = rect.width;
        this.height = rect.height;
        for (const [axis, keys2, getScrollOffset] of properties) {
          for (const key of keys2) {
            Object.defineProperty(this, key, {
              get: () => {
                const currentOffsets = getScrollOffset(scrollableAncestors);
                const scrollOffsetsDeltla = scrollOffsets[axis] - currentOffsets;
                return this.rect[key] + scrollOffsetsDeltla;
              },
              enumerable: true
            });
          }
        }
        Object.defineProperty(this, "rect", {
          enumerable: false
        });
      }
    }
    class Listeners {
      constructor(target) {
        this.target = void 0;
        this.listeners = [];
        this.removeAll = () => {
          this.listeners.forEach((listener) => {
            var _this$target;
            return (_this$target = this.target) == null ? void 0 : _this$target.removeEventListener(...listener);
          });
        };
        this.target = target;
      }
      add(eventName, handler, options) {
        var _this$target2;
        (_this$target2 = this.target) == null ? void 0 : _this$target2.addEventListener(eventName, handler, options);
        this.listeners.push([eventName, handler, options]);
      }
    }
    function getEventListenerTarget(target) {
      const {
        EventTarget
      } = getWindow(target);
      return target instanceof EventTarget ? target : getOwnerDocument(target);
    }
    function hasExceededDistance(delta, measurement) {
      const dx = Math.abs(delta.x);
      const dy = Math.abs(delta.y);
      if (typeof measurement === "number") {
        return Math.sqrt(dx ** 2 + dy ** 2) > measurement;
      }
      if ("x" in measurement && "y" in measurement) {
        return dx > measurement.x && dy > measurement.y;
      }
      if ("x" in measurement) {
        return dx > measurement.x;
      }
      if ("y" in measurement) {
        return dy > measurement.y;
      }
      return false;
    }
    var EventName;
    (function(EventName2) {
      EventName2["Click"] = "click";
      EventName2["DragStart"] = "dragstart";
      EventName2["Keydown"] = "keydown";
      EventName2["ContextMenu"] = "contextmenu";
      EventName2["Resize"] = "resize";
      EventName2["SelectionChange"] = "selectionchange";
      EventName2["VisibilityChange"] = "visibilitychange";
    })(EventName || (EventName = {}));
    function preventDefault(event) {
      event.preventDefault();
    }
    function stopPropagation(event) {
      event.stopPropagation();
    }
    var KeyboardCode;
    (function(KeyboardCode2) {
      KeyboardCode2["Space"] = "Space";
      KeyboardCode2["Down"] = "ArrowDown";
      KeyboardCode2["Right"] = "ArrowRight";
      KeyboardCode2["Left"] = "ArrowLeft";
      KeyboardCode2["Up"] = "ArrowUp";
      KeyboardCode2["Esc"] = "Escape";
      KeyboardCode2["Enter"] = "Enter";
      KeyboardCode2["Tab"] = "Tab";
    })(KeyboardCode || (KeyboardCode = {}));
    const defaultKeyboardCodes = {
      start: [KeyboardCode.Space, KeyboardCode.Enter],
      cancel: [KeyboardCode.Esc],
      end: [KeyboardCode.Space, KeyboardCode.Enter, KeyboardCode.Tab]
    };
    const defaultKeyboardCoordinateGetter = (event, _ref) => {
      let {
        currentCoordinates
      } = _ref;
      switch (event.code) {
        case KeyboardCode.Right:
          return {
            ...currentCoordinates,
            x: currentCoordinates.x + 25
          };
        case KeyboardCode.Left:
          return {
            ...currentCoordinates,
            x: currentCoordinates.x - 25
          };
        case KeyboardCode.Down:
          return {
            ...currentCoordinates,
            y: currentCoordinates.y + 25
          };
        case KeyboardCode.Up:
          return {
            ...currentCoordinates,
            y: currentCoordinates.y - 25
          };
      }
      return void 0;
    };
    class KeyboardSensor {
      constructor(props) {
        this.props = void 0;
        this.autoScrollEnabled = false;
        this.referenceCoordinates = void 0;
        this.listeners = void 0;
        this.windowListeners = void 0;
        this.props = props;
        const {
          event: {
            target
          }
        } = props;
        this.props = props;
        this.listeners = new Listeners(getOwnerDocument(target));
        this.windowListeners = new Listeners(getWindow(target));
        this.handleKeyDown = this.handleKeyDown.bind(this);
        this.handleCancel = this.handleCancel.bind(this);
        this.attach();
      }
      attach() {
        this.handleStart();
        this.windowListeners.add(EventName.Resize, this.handleCancel);
        this.windowListeners.add(EventName.VisibilityChange, this.handleCancel);
        setTimeout(() => this.listeners.add(EventName.Keydown, this.handleKeyDown));
      }
      handleStart() {
        const {
          activeNode,
          onStart
        } = this.props;
        const node = activeNode.node.current;
        if (node) {
          scrollIntoViewIfNeeded(node);
        }
        onStart(defaultCoordinates);
      }
      handleKeyDown(event) {
        if (isKeyboardEvent(event)) {
          const {
            active,
            context,
            options
          } = this.props;
          const {
            keyboardCodes = defaultKeyboardCodes,
            coordinateGetter = defaultKeyboardCoordinateGetter,
            scrollBehavior = "smooth"
          } = options;
          const {
            code
          } = event;
          if (keyboardCodes.end.includes(code)) {
            this.handleEnd(event);
            return;
          }
          if (keyboardCodes.cancel.includes(code)) {
            this.handleCancel(event);
            return;
          }
          const {
            collisionRect
          } = context.current;
          const currentCoordinates = collisionRect ? {
            x: collisionRect.left,
            y: collisionRect.top
          } : defaultCoordinates;
          if (!this.referenceCoordinates) {
            this.referenceCoordinates = currentCoordinates;
          }
          const newCoordinates = coordinateGetter(event, {
            active,
            context: context.current,
            currentCoordinates
          });
          if (newCoordinates) {
            const coordinatesDelta = subtract$1(newCoordinates, currentCoordinates);
            const scrollDelta = {
              x: 0,
              y: 0
            };
            const {
              scrollableAncestors
            } = context.current;
            for (const scrollContainer of scrollableAncestors) {
              const direction = event.code;
              const {
                isTop,
                isRight,
                isLeft,
                isBottom,
                maxScroll,
                minScroll
              } = getScrollPosition(scrollContainer);
              const scrollElementRect = getScrollElementRect(scrollContainer);
              const clampedCoordinates = {
                x: Math.min(direction === KeyboardCode.Right ? scrollElementRect.right - scrollElementRect.width / 2 : scrollElementRect.right, Math.max(direction === KeyboardCode.Right ? scrollElementRect.left : scrollElementRect.left + scrollElementRect.width / 2, newCoordinates.x)),
                y: Math.min(direction === KeyboardCode.Down ? scrollElementRect.bottom - scrollElementRect.height / 2 : scrollElementRect.bottom, Math.max(direction === KeyboardCode.Down ? scrollElementRect.top : scrollElementRect.top + scrollElementRect.height / 2, newCoordinates.y))
              };
              const canScrollX = direction === KeyboardCode.Right && !isRight || direction === KeyboardCode.Left && !isLeft;
              const canScrollY = direction === KeyboardCode.Down && !isBottom || direction === KeyboardCode.Up && !isTop;
              if (canScrollX && clampedCoordinates.x !== newCoordinates.x) {
                const newScrollCoordinates = scrollContainer.scrollLeft + coordinatesDelta.x;
                const canScrollToNewCoordinates = direction === KeyboardCode.Right && newScrollCoordinates <= maxScroll.x || direction === KeyboardCode.Left && newScrollCoordinates >= minScroll.x;
                if (canScrollToNewCoordinates && !coordinatesDelta.y) {
                  scrollContainer.scrollTo({
                    left: newScrollCoordinates,
                    behavior: scrollBehavior
                  });
                  return;
                }
                if (canScrollToNewCoordinates) {
                  scrollDelta.x = scrollContainer.scrollLeft - newScrollCoordinates;
                } else {
                  scrollDelta.x = direction === KeyboardCode.Right ? scrollContainer.scrollLeft - maxScroll.x : scrollContainer.scrollLeft - minScroll.x;
                }
                if (scrollDelta.x) {
                  scrollContainer.scrollBy({
                    left: -scrollDelta.x,
                    behavior: scrollBehavior
                  });
                }
                break;
              } else if (canScrollY && clampedCoordinates.y !== newCoordinates.y) {
                const newScrollCoordinates = scrollContainer.scrollTop + coordinatesDelta.y;
                const canScrollToNewCoordinates = direction === KeyboardCode.Down && newScrollCoordinates <= maxScroll.y || direction === KeyboardCode.Up && newScrollCoordinates >= minScroll.y;
                if (canScrollToNewCoordinates && !coordinatesDelta.x) {
                  scrollContainer.scrollTo({
                    top: newScrollCoordinates,
                    behavior: scrollBehavior
                  });
                  return;
                }
                if (canScrollToNewCoordinates) {
                  scrollDelta.y = scrollContainer.scrollTop - newScrollCoordinates;
                } else {
                  scrollDelta.y = direction === KeyboardCode.Down ? scrollContainer.scrollTop - maxScroll.y : scrollContainer.scrollTop - minScroll.y;
                }
                if (scrollDelta.y) {
                  scrollContainer.scrollBy({
                    top: -scrollDelta.y,
                    behavior: scrollBehavior
                  });
                }
                break;
              }
            }
            this.handleMove(event, add$1(subtract$1(newCoordinates, this.referenceCoordinates), scrollDelta));
          }
        }
      }
      handleMove(event, coordinates) {
        const {
          onMove
        } = this.props;
        event.preventDefault();
        onMove(coordinates);
      }
      handleEnd(event) {
        const {
          onEnd
        } = this.props;
        event.preventDefault();
        this.detach();
        onEnd();
      }
      handleCancel(event) {
        const {
          onCancel
        } = this.props;
        event.preventDefault();
        this.detach();
        onCancel();
      }
      detach() {
        this.listeners.removeAll();
        this.windowListeners.removeAll();
      }
    }
    KeyboardSensor.activators = [{
      eventName: "onKeyDown",
      handler: (event, _ref, _ref2) => {
        let {
          keyboardCodes = defaultKeyboardCodes,
          onActivation
        } = _ref;
        let {
          active
        } = _ref2;
        const {
          code
        } = event.nativeEvent;
        if (keyboardCodes.start.includes(code)) {
          const activator = active.activatorNode.current;
          if (activator && event.target !== activator) {
            return false;
          }
          event.preventDefault();
          onActivation == null ? void 0 : onActivation({
            event: event.nativeEvent
          });
          return true;
        }
        return false;
      }
    }];
    function isDistanceConstraint(constraint) {
      return Boolean(constraint && "distance" in constraint);
    }
    function isDelayConstraint(constraint) {
      return Boolean(constraint && "delay" in constraint);
    }
    class AbstractPointerSensor {
      constructor(props, events2, listenerTarget) {
        var _getEventCoordinates;
        if (listenerTarget === void 0) {
          listenerTarget = getEventListenerTarget(props.event.target);
        }
        this.props = void 0;
        this.events = void 0;
        this.autoScrollEnabled = true;
        this.document = void 0;
        this.activated = false;
        this.initialCoordinates = void 0;
        this.timeoutId = null;
        this.listeners = void 0;
        this.documentListeners = void 0;
        this.windowListeners = void 0;
        this.props = props;
        this.events = events2;
        const {
          event
        } = props;
        const {
          target
        } = event;
        this.props = props;
        this.events = events2;
        this.document = getOwnerDocument(target);
        this.documentListeners = new Listeners(this.document);
        this.listeners = new Listeners(listenerTarget);
        this.windowListeners = new Listeners(getWindow(target));
        this.initialCoordinates = (_getEventCoordinates = getEventCoordinates(event)) != null ? _getEventCoordinates : defaultCoordinates;
        this.handleStart = this.handleStart.bind(this);
        this.handleMove = this.handleMove.bind(this);
        this.handleEnd = this.handleEnd.bind(this);
        this.handleCancel = this.handleCancel.bind(this);
        this.handleKeydown = this.handleKeydown.bind(this);
        this.removeTextSelection = this.removeTextSelection.bind(this);
        this.attach();
      }
      attach() {
        const {
          events: events2,
          props: {
            options: {
              activationConstraint,
              bypassActivationConstraint
            }
          }
        } = this;
        this.listeners.add(events2.move.name, this.handleMove, {
          passive: false
        });
        this.listeners.add(events2.end.name, this.handleEnd);
        if (events2.cancel) {
          this.listeners.add(events2.cancel.name, this.handleCancel);
        }
        this.windowListeners.add(EventName.Resize, this.handleCancel);
        this.windowListeners.add(EventName.DragStart, preventDefault);
        this.windowListeners.add(EventName.VisibilityChange, this.handleCancel);
        this.windowListeners.add(EventName.ContextMenu, preventDefault);
        this.documentListeners.add(EventName.Keydown, this.handleKeydown);
        if (activationConstraint) {
          if (bypassActivationConstraint != null && bypassActivationConstraint({
            event: this.props.event,
            activeNode: this.props.activeNode,
            options: this.props.options
          })) {
            return this.handleStart();
          }
          if (isDelayConstraint(activationConstraint)) {
            this.timeoutId = setTimeout(this.handleStart, activationConstraint.delay);
            this.handlePending(activationConstraint);
            return;
          }
          if (isDistanceConstraint(activationConstraint)) {
            this.handlePending(activationConstraint);
            return;
          }
        }
        this.handleStart();
      }
      detach() {
        this.listeners.removeAll();
        this.windowListeners.removeAll();
        setTimeout(this.documentListeners.removeAll, 50);
        if (this.timeoutId !== null) {
          clearTimeout(this.timeoutId);
          this.timeoutId = null;
        }
      }
      handlePending(constraint, offset2) {
        const {
          active,
          onPending
        } = this.props;
        onPending(active, constraint, this.initialCoordinates, offset2);
      }
      handleStart() {
        const {
          initialCoordinates
        } = this;
        const {
          onStart
        } = this.props;
        if (initialCoordinates) {
          this.activated = true;
          this.documentListeners.add(EventName.Click, stopPropagation, {
            capture: true
          });
          this.removeTextSelection();
          this.documentListeners.add(EventName.SelectionChange, this.removeTextSelection);
          onStart(initialCoordinates);
        }
      }
      handleMove(event) {
        var _getEventCoordinates2;
        const {
          activated,
          initialCoordinates,
          props
        } = this;
        const {
          onMove,
          options: {
            activationConstraint
          }
        } = props;
        if (!initialCoordinates) {
          return;
        }
        const coordinates = (_getEventCoordinates2 = getEventCoordinates(event)) != null ? _getEventCoordinates2 : defaultCoordinates;
        const delta = subtract$1(initialCoordinates, coordinates);
        if (!activated && activationConstraint) {
          if (isDistanceConstraint(activationConstraint)) {
            if (activationConstraint.tolerance != null && hasExceededDistance(delta, activationConstraint.tolerance)) {
              return this.handleCancel();
            }
            if (hasExceededDistance(delta, activationConstraint.distance)) {
              return this.handleStart();
            }
          }
          if (isDelayConstraint(activationConstraint)) {
            if (hasExceededDistance(delta, activationConstraint.tolerance)) {
              return this.handleCancel();
            }
          }
          this.handlePending(activationConstraint, delta);
          return;
        }
        if (event.cancelable) {
          event.preventDefault();
        }
        onMove(coordinates);
      }
      handleEnd() {
        const {
          onAbort,
          onEnd
        } = this.props;
        this.detach();
        if (!this.activated) {
          onAbort(this.props.active);
        }
        onEnd();
      }
      handleCancel() {
        const {
          onAbort,
          onCancel
        } = this.props;
        this.detach();
        if (!this.activated) {
          onAbort(this.props.active);
        }
        onCancel();
      }
      handleKeydown(event) {
        if (event.code === KeyboardCode.Esc) {
          this.handleCancel();
        }
      }
      removeTextSelection() {
        var _this$document$getSel;
        (_this$document$getSel = this.document.getSelection()) == null ? void 0 : _this$document$getSel.removeAllRanges();
      }
    }
    const events = {
      cancel: {
        name: "pointercancel"
      },
      move: {
        name: "pointermove"
      },
      end: {
        name: "pointerup"
      }
    };
    class PointerSensor extends AbstractPointerSensor {
      constructor(props) {
        const {
          event
        } = props;
        const listenerTarget = getOwnerDocument(event.target);
        super(props, events, listenerTarget);
      }
    }
    PointerSensor.activators = [{
      eventName: "onPointerDown",
      handler: (_ref, _ref2) => {
        let {
          nativeEvent: event
        } = _ref;
        let {
          onActivation
        } = _ref2;
        if (!event.isPrimary || event.button !== 0) {
          return false;
        }
        onActivation == null ? void 0 : onActivation({
          event
        });
        return true;
      }
    }];
    const events$1 = {
      move: {
        name: "mousemove"
      },
      end: {
        name: "mouseup"
      }
    };
    var MouseButton;
    (function(MouseButton2) {
      MouseButton2[MouseButton2["RightClick"] = 2] = "RightClick";
    })(MouseButton || (MouseButton = {}));
    class MouseSensor extends AbstractPointerSensor {
      constructor(props) {
        super(props, events$1, getOwnerDocument(props.event.target));
      }
    }
    MouseSensor.activators = [{
      eventName: "onMouseDown",
      handler: (_ref, _ref2) => {
        let {
          nativeEvent: event
        } = _ref;
        let {
          onActivation
        } = _ref2;
        if (event.button === MouseButton.RightClick) {
          return false;
        }
        onActivation == null ? void 0 : onActivation({
          event
        });
        return true;
      }
    }];
    const events$2 = {
      cancel: {
        name: "touchcancel"
      },
      move: {
        name: "touchmove"
      },
      end: {
        name: "touchend"
      }
    };
    class TouchSensor extends AbstractPointerSensor {
      constructor(props) {
        super(props, events$2);
      }
      static setup() {
        window.addEventListener(events$2.move.name, noop2, {
          capture: false,
          passive: false
        });
        return function teardown() {
          window.removeEventListener(events$2.move.name, noop2);
        };
        function noop2() {
        }
      }
    }
    TouchSensor.activators = [{
      eventName: "onTouchStart",
      handler: (_ref, _ref2) => {
        let {
          nativeEvent: event
        } = _ref;
        let {
          onActivation
        } = _ref2;
        const {
          touches
        } = event;
        if (touches.length > 1) {
          return false;
        }
        onActivation == null ? void 0 : onActivation({
          event
        });
        return true;
      }
    }];
    var AutoScrollActivator;
    (function(AutoScrollActivator2) {
      AutoScrollActivator2[AutoScrollActivator2["Pointer"] = 0] = "Pointer";
      AutoScrollActivator2[AutoScrollActivator2["DraggableRect"] = 1] = "DraggableRect";
    })(AutoScrollActivator || (AutoScrollActivator = {}));
    var TraversalOrder;
    (function(TraversalOrder2) {
      TraversalOrder2[TraversalOrder2["TreeOrder"] = 0] = "TreeOrder";
      TraversalOrder2[TraversalOrder2["ReversedTreeOrder"] = 1] = "ReversedTreeOrder";
    })(TraversalOrder || (TraversalOrder = {}));
    function useAutoScroller(_ref) {
      let {
        acceleration,
        activator = AutoScrollActivator.Pointer,
        canScroll,
        draggingRect,
        enabled,
        interval = 5,
        order = TraversalOrder.TreeOrder,
        pointerCoordinates,
        scrollableAncestors,
        scrollableAncestorRects,
        delta,
        threshold: threshold2
      } = _ref;
      const scrollIntent = useScrollIntent({
        delta,
        disabled: !enabled
      });
      const [setAutoScrollInterval, clearAutoScrollInterval] = useInterval();
      const scrollSpeed = reactExports.useRef({
        x: 0,
        y: 0
      });
      const scrollDirection = reactExports.useRef({
        x: 0,
        y: 0
      });
      const rect = reactExports.useMemo(() => {
        switch (activator) {
          case AutoScrollActivator.Pointer:
            return pointerCoordinates ? {
              top: pointerCoordinates.y,
              bottom: pointerCoordinates.y,
              left: pointerCoordinates.x,
              right: pointerCoordinates.x
            } : null;
          case AutoScrollActivator.DraggableRect:
            return draggingRect;
        }
      }, [activator, draggingRect, pointerCoordinates]);
      const scrollContainerRef = reactExports.useRef(null);
      const autoScroll = reactExports.useCallback(() => {
        const scrollContainer = scrollContainerRef.current;
        if (!scrollContainer) {
          return;
        }
        const scrollLeft = scrollSpeed.current.x * scrollDirection.current.x;
        const scrollTop = scrollSpeed.current.y * scrollDirection.current.y;
        scrollContainer.scrollBy(scrollLeft, scrollTop);
      }, []);
      const sortedScrollableAncestors = reactExports.useMemo(() => order === TraversalOrder.TreeOrder ? [...scrollableAncestors].reverse() : scrollableAncestors, [order, scrollableAncestors]);
      reactExports.useEffect(
        () => {
          if (!enabled || !scrollableAncestors.length || !rect) {
            clearAutoScrollInterval();
            return;
          }
          for (const scrollContainer of sortedScrollableAncestors) {
            if ((canScroll == null ? void 0 : canScroll(scrollContainer)) === false) {
              continue;
            }
            const index = scrollableAncestors.indexOf(scrollContainer);
            const scrollContainerRect = scrollableAncestorRects[index];
            if (!scrollContainerRect) {
              continue;
            }
            const {
              direction,
              speed
            } = getScrollDirectionAndSpeed(scrollContainer, scrollContainerRect, rect, acceleration, threshold2);
            for (const axis of ["x", "y"]) {
              if (!scrollIntent[axis][direction[axis]]) {
                speed[axis] = 0;
                direction[axis] = 0;
              }
            }
            if (speed.x > 0 || speed.y > 0) {
              clearAutoScrollInterval();
              scrollContainerRef.current = scrollContainer;
              setAutoScrollInterval(autoScroll, interval);
              scrollSpeed.current = speed;
              scrollDirection.current = direction;
              return;
            }
          }
          scrollSpeed.current = {
            x: 0,
            y: 0
          };
          scrollDirection.current = {
            x: 0,
            y: 0
          };
          clearAutoScrollInterval();
        },
        // eslint-disable-next-line react-hooks/exhaustive-deps
        [
          acceleration,
          autoScroll,
          canScroll,
          clearAutoScrollInterval,
          enabled,
          interval,
          // eslint-disable-next-line react-hooks/exhaustive-deps
          JSON.stringify(rect),
          // eslint-disable-next-line react-hooks/exhaustive-deps
          JSON.stringify(scrollIntent),
          setAutoScrollInterval,
          scrollableAncestors,
          sortedScrollableAncestors,
          scrollableAncestorRects,
          // eslint-disable-next-line react-hooks/exhaustive-deps
          JSON.stringify(threshold2)
        ]
      );
    }
    const defaultScrollIntent = {
      x: {
        [Direction.Backward]: false,
        [Direction.Forward]: false
      },
      y: {
        [Direction.Backward]: false,
        [Direction.Forward]: false
      }
    };
    function useScrollIntent(_ref2) {
      let {
        delta,
        disabled
      } = _ref2;
      const previousDelta = usePrevious(delta);
      return useLazyMemo((previousIntent) => {
        if (disabled || !previousDelta || !previousIntent) {
          return defaultScrollIntent;
        }
        const direction = {
          x: Math.sign(delta.x - previousDelta.x),
          y: Math.sign(delta.y - previousDelta.y)
        };
        return {
          x: {
            [Direction.Backward]: previousIntent.x[Direction.Backward] || direction.x === -1,
            [Direction.Forward]: previousIntent.x[Direction.Forward] || direction.x === 1
          },
          y: {
            [Direction.Backward]: previousIntent.y[Direction.Backward] || direction.y === -1,
            [Direction.Forward]: previousIntent.y[Direction.Forward] || direction.y === 1
          }
        };
      }, [disabled, delta, previousDelta]);
    }
    function useCachedNode(draggableNodes, id2) {
      const draggableNode = id2 != null ? draggableNodes.get(id2) : void 0;
      const node = draggableNode ? draggableNode.node.current : null;
      return useLazyMemo((cachedNode) => {
        var _ref;
        if (id2 == null) {
          return null;
        }
        return (_ref = node != null ? node : cachedNode) != null ? _ref : null;
      }, [node, id2]);
    }
    function useCombineActivators(sensors, getSyntheticHandler) {
      return reactExports.useMemo(() => sensors.reduce((accumulator, sensor) => {
        const {
          sensor: Sensor
        } = sensor;
        const sensorActivators = Sensor.activators.map((activator) => ({
          eventName: activator.eventName,
          handler: getSyntheticHandler(activator.handler, sensor)
        }));
        return [...accumulator, ...sensorActivators];
      }, []), [sensors, getSyntheticHandler]);
    }
    var MeasuringStrategy;
    (function(MeasuringStrategy2) {
      MeasuringStrategy2[MeasuringStrategy2["Always"] = 0] = "Always";
      MeasuringStrategy2[MeasuringStrategy2["BeforeDragging"] = 1] = "BeforeDragging";
      MeasuringStrategy2[MeasuringStrategy2["WhileDragging"] = 2] = "WhileDragging";
    })(MeasuringStrategy || (MeasuringStrategy = {}));
    var MeasuringFrequency;
    (function(MeasuringFrequency2) {
      MeasuringFrequency2["Optimized"] = "optimized";
    })(MeasuringFrequency || (MeasuringFrequency = {}));
    const defaultValue = /* @__PURE__ */ new Map();
    function useDroppableMeasuring(containers, _ref) {
      let {
        dragging,
        dependencies,
        config: config2
      } = _ref;
      const [queue, setQueue] = reactExports.useState(null);
      const {
        frequency,
        measure,
        strategy
      } = config2;
      const containersRef = reactExports.useRef(containers);
      const disabled = isDisabled();
      const disabledRef = useLatestValue(disabled);
      const measureDroppableContainers = reactExports.useCallback(function(ids2) {
        if (ids2 === void 0) {
          ids2 = [];
        }
        if (disabledRef.current) {
          return;
        }
        setQueue((value2) => {
          if (value2 === null) {
            return ids2;
          }
          return value2.concat(ids2.filter((id2) => !value2.includes(id2)));
        });
      }, [disabledRef]);
      const timeoutId = reactExports.useRef(null);
      const droppableRects = useLazyMemo((previousValue) => {
        if (disabled && !dragging) {
          return defaultValue;
        }
        if (!previousValue || previousValue === defaultValue || containersRef.current !== containers || queue != null) {
          const map2 = /* @__PURE__ */ new Map();
          for (let container of containers) {
            if (!container) {
              continue;
            }
            if (queue && queue.length > 0 && !queue.includes(container.id) && container.rect.current) {
              map2.set(container.id, container.rect.current);
              continue;
            }
            const node = container.node.current;
            const rect = node ? new Rect(measure(node), node) : null;
            container.rect.current = rect;
            if (rect) {
              map2.set(container.id, rect);
            }
          }
          return map2;
        }
        return previousValue;
      }, [containers, queue, dragging, disabled, measure]);
      reactExports.useEffect(() => {
        containersRef.current = containers;
      }, [containers]);
      reactExports.useEffect(
        () => {
          if (disabled) {
            return;
          }
          measureDroppableContainers();
        },
        // eslint-disable-next-line react-hooks/exhaustive-deps
        [dragging, disabled]
      );
      reactExports.useEffect(
        () => {
          if (queue && queue.length > 0) {
            setQueue(null);
          }
        },
        //eslint-disable-next-line react-hooks/exhaustive-deps
        [JSON.stringify(queue)]
      );
      reactExports.useEffect(
        () => {
          if (disabled || typeof frequency !== "number" || timeoutId.current !== null) {
            return;
          }
          timeoutId.current = setTimeout(() => {
            measureDroppableContainers();
            timeoutId.current = null;
          }, frequency);
        },
        // eslint-disable-next-line react-hooks/exhaustive-deps
        [frequency, disabled, measureDroppableContainers, ...dependencies]
      );
      return {
        droppableRects,
        measureDroppableContainers,
        measuringScheduled: queue != null
      };
      function isDisabled() {
        switch (strategy) {
          case MeasuringStrategy.Always:
            return false;
          case MeasuringStrategy.BeforeDragging:
            return dragging;
          default:
            return !dragging;
        }
      }
    }
    function useInitialValue(value2, computeFn) {
      return useLazyMemo((previousValue) => {
        if (!value2) {
          return null;
        }
        if (previousValue) {
          return previousValue;
        }
        return typeof computeFn === "function" ? computeFn(value2) : value2;
      }, [computeFn, value2]);
    }
    function useInitialRect(node, measure) {
      return useInitialValue(node, measure);
    }
    function useMutationObserver(_ref) {
      let {
        callback,
        disabled
      } = _ref;
      const handleMutations = useEvent(callback);
      const mutationObserver = reactExports.useMemo(() => {
        if (disabled || typeof window === "undefined" || typeof window.MutationObserver === "undefined") {
          return void 0;
        }
        const {
          MutationObserver: MutationObserver2
        } = window;
        return new MutationObserver2(handleMutations);
      }, [handleMutations, disabled]);
      reactExports.useEffect(() => {
        return () => mutationObserver == null ? void 0 : mutationObserver.disconnect();
      }, [mutationObserver]);
      return mutationObserver;
    }
    function useResizeObserver(_ref) {
      let {
        callback,
        disabled
      } = _ref;
      const handleResize = useEvent(callback);
      const resizeObserver = reactExports.useMemo(
        () => {
          if (disabled || typeof window === "undefined" || typeof window.ResizeObserver === "undefined") {
            return void 0;
          }
          const {
            ResizeObserver: ResizeObserver2
          } = window;
          return new ResizeObserver2(handleResize);
        },
        // eslint-disable-next-line react-hooks/exhaustive-deps
        [disabled]
      );
      reactExports.useEffect(() => {
        return () => resizeObserver == null ? void 0 : resizeObserver.disconnect();
      }, [resizeObserver]);
      return resizeObserver;
    }
    function defaultMeasure(element) {
      return new Rect(getClientRect(element), element);
    }
    function useRect(element, measure, fallbackRect) {
      if (measure === void 0) {
        measure = defaultMeasure;
      }
      const [rect, setRect] = reactExports.useState(null);
      function measureRect() {
        setRect((currentRect) => {
          if (!element) {
            return null;
          }
          if (element.isConnected === false) {
            var _ref;
            return (_ref = currentRect != null ? currentRect : fallbackRect) != null ? _ref : null;
          }
          const newRect = measure(element);
          if (JSON.stringify(currentRect) === JSON.stringify(newRect)) {
            return currentRect;
          }
          return newRect;
        });
      }
      const mutationObserver = useMutationObserver({
        callback(records) {
          if (!element) {
            return;
          }
          for (const record of records) {
            const {
              type,
              target
            } = record;
            if (type === "childList" && target instanceof HTMLElement && target.contains(element)) {
              measureRect();
              break;
            }
          }
        }
      });
      const resizeObserver = useResizeObserver({
        callback: measureRect
      });
      useIsomorphicLayoutEffect$1(() => {
        measureRect();
        if (element) {
          resizeObserver == null ? void 0 : resizeObserver.observe(element);
          mutationObserver == null ? void 0 : mutationObserver.observe(document.body, {
            childList: true,
            subtree: true
          });
        } else {
          resizeObserver == null ? void 0 : resizeObserver.disconnect();
          mutationObserver == null ? void 0 : mutationObserver.disconnect();
        }
      }, [element]);
      return rect;
    }
    function useRectDelta(rect) {
      const initialRect = useInitialValue(rect);
      return getRectDelta(rect, initialRect);
    }
    const defaultValue$1 = [];
    function useScrollableAncestors(node) {
      const previousNode = reactExports.useRef(node);
      const ancestors = useLazyMemo((previousValue) => {
        if (!node) {
          return defaultValue$1;
        }
        if (previousValue && previousValue !== defaultValue$1 && node && previousNode.current && node.parentNode === previousNode.current.parentNode) {
          return previousValue;
        }
        return getScrollableAncestors(node);
      }, [node]);
      reactExports.useEffect(() => {
        previousNode.current = node;
      }, [node]);
      return ancestors;
    }
    function useScrollOffsets(elements) {
      const [scrollCoordinates, setScrollCoordinates] = reactExports.useState(null);
      const prevElements = reactExports.useRef(elements);
      const handleScroll = reactExports.useCallback((event) => {
        const scrollingElement = getScrollableElement(event.target);
        if (!scrollingElement) {
          return;
        }
        setScrollCoordinates((scrollCoordinates2) => {
          if (!scrollCoordinates2) {
            return null;
          }
          scrollCoordinates2.set(scrollingElement, getScrollCoordinates(scrollingElement));
          return new Map(scrollCoordinates2);
        });
      }, []);
      reactExports.useEffect(() => {
        const previousElements = prevElements.current;
        if (elements !== previousElements) {
          cleanup(previousElements);
          const entries = elements.map((element) => {
            const scrollableElement = getScrollableElement(element);
            if (scrollableElement) {
              scrollableElement.addEventListener("scroll", handleScroll, {
                passive: true
              });
              return [scrollableElement, getScrollCoordinates(scrollableElement)];
            }
            return null;
          }).filter((entry) => entry != null);
          setScrollCoordinates(entries.length ? new Map(entries) : null);
          prevElements.current = elements;
        }
        return () => {
          cleanup(elements);
          cleanup(previousElements);
        };
        function cleanup(elements2) {
          elements2.forEach((element) => {
            const scrollableElement = getScrollableElement(element);
            scrollableElement == null ? void 0 : scrollableElement.removeEventListener("scroll", handleScroll);
          });
        }
      }, [handleScroll, elements]);
      return reactExports.useMemo(() => {
        if (elements.length) {
          return scrollCoordinates ? Array.from(scrollCoordinates.values()).reduce((acc, coordinates) => add$1(acc, coordinates), defaultCoordinates) : getScrollOffsets(elements);
        }
        return defaultCoordinates;
      }, [elements, scrollCoordinates]);
    }
    function useScrollOffsetsDelta(scrollOffsets, dependencies) {
      if (dependencies === void 0) {
        dependencies = [];
      }
      const initialScrollOffsets = reactExports.useRef(null);
      reactExports.useEffect(
        () => {
          initialScrollOffsets.current = null;
        },
        // eslint-disable-next-line react-hooks/exhaustive-deps
        dependencies
      );
      reactExports.useEffect(() => {
        const hasScrollOffsets = scrollOffsets !== defaultCoordinates;
        if (hasScrollOffsets && !initialScrollOffsets.current) {
          initialScrollOffsets.current = scrollOffsets;
        }
        if (!hasScrollOffsets && initialScrollOffsets.current) {
          initialScrollOffsets.current = null;
        }
      }, [scrollOffsets]);
      return initialScrollOffsets.current ? subtract$1(scrollOffsets, initialScrollOffsets.current) : defaultCoordinates;
    }
    function useSensorSetup(sensors) {
      reactExports.useEffect(
        () => {
          if (!canUseDOM$1) {
            return;
          }
          const teardownFns = sensors.map((_ref) => {
            let {
              sensor
            } = _ref;
            return sensor.setup == null ? void 0 : sensor.setup();
          });
          return () => {
            for (const teardown of teardownFns) {
              teardown == null ? void 0 : teardown();
            }
          };
        },
        // TO-DO: Sensors length could theoretically change which would not be a valid dependency
        // eslint-disable-next-line react-hooks/exhaustive-deps
        sensors.map((_ref2) => {
          let {
            sensor
          } = _ref2;
          return sensor;
        })
      );
    }
    function useSyntheticListeners(listeners, id2) {
      return reactExports.useMemo(() => {
        return listeners.reduce((acc, _ref) => {
          let {
            eventName,
            handler
          } = _ref;
          acc[eventName] = (event) => {
            handler(event, id2);
          };
          return acc;
        }, {});
      }, [listeners, id2]);
    }
    function useWindowRect(element) {
      return reactExports.useMemo(() => element ? getWindowClientRect(element) : null, [element]);
    }
    const defaultValue$2 = [];
    function useRects(elements, measure) {
      if (measure === void 0) {
        measure = getClientRect;
      }
      const [firstElement] = elements;
      const windowRect = useWindowRect(firstElement ? getWindow(firstElement) : null);
      const [rects, setRects] = reactExports.useState(defaultValue$2);
      function measureRects() {
        setRects(() => {
          if (!elements.length) {
            return defaultValue$2;
          }
          return elements.map((element) => isDocumentScrollingElement(element) ? windowRect : new Rect(measure(element), element));
        });
      }
      const resizeObserver = useResizeObserver({
        callback: measureRects
      });
      useIsomorphicLayoutEffect$1(() => {
        resizeObserver == null ? void 0 : resizeObserver.disconnect();
        measureRects();
        elements.forEach((element) => resizeObserver == null ? void 0 : resizeObserver.observe(element));
      }, [elements]);
      return rects;
    }
    function getMeasurableNode(node) {
      if (!node) {
        return null;
      }
      if (node.children.length > 1) {
        return node;
      }
      const firstChild = node.children[0];
      return isHTMLElement(firstChild) ? firstChild : node;
    }
    function useDragOverlayMeasuring(_ref) {
      let {
        measure
      } = _ref;
      const [rect, setRect] = reactExports.useState(null);
      const handleResize = reactExports.useCallback((entries) => {
        for (const {
          target
        } of entries) {
          if (isHTMLElement(target)) {
            setRect((rect2) => {
              const newRect = measure(target);
              return rect2 ? {
                ...rect2,
                width: newRect.width,
                height: newRect.height
              } : newRect;
            });
            break;
          }
        }
      }, [measure]);
      const resizeObserver = useResizeObserver({
        callback: handleResize
      });
      const handleNodeChange = reactExports.useCallback((element) => {
        const node = getMeasurableNode(element);
        resizeObserver == null ? void 0 : resizeObserver.disconnect();
        if (node) {
          resizeObserver == null ? void 0 : resizeObserver.observe(node);
        }
        setRect(node ? measure(node) : null);
      }, [measure, resizeObserver]);
      const [nodeRef, setRef] = useNodeRef(handleNodeChange);
      return reactExports.useMemo(() => ({
        nodeRef,
        rect,
        setRef
      }), [rect, nodeRef, setRef]);
    }
    const defaultSensors = [{
      sensor: PointerSensor,
      options: {}
    }, {
      sensor: KeyboardSensor,
      options: {}
    }];
    const defaultData = {
      current: {}
    };
    const defaultMeasuringConfiguration = {
      draggable: {
        measure: getTransformAgnosticClientRect
      },
      droppable: {
        measure: getTransformAgnosticClientRect,
        strategy: MeasuringStrategy.WhileDragging,
        frequency: MeasuringFrequency.Optimized
      },
      dragOverlay: {
        measure: getClientRect
      }
    };
    class DroppableContainersMap extends Map {
      get(id2) {
        var _super$get;
        return id2 != null ? (_super$get = super.get(id2)) != null ? _super$get : void 0 : void 0;
      }
      toArray() {
        return Array.from(this.values());
      }
      getEnabled() {
        return this.toArray().filter((_ref) => {
          let {
            disabled
          } = _ref;
          return !disabled;
        });
      }
      getNodeFor(id2) {
        var _this$get$node$curren, _this$get;
        return (_this$get$node$curren = (_this$get = this.get(id2)) == null ? void 0 : _this$get.node.current) != null ? _this$get$node$curren : void 0;
      }
    }
    const defaultPublicContext = {
      activatorEvent: null,
      active: null,
      activeNode: null,
      activeNodeRect: null,
      collisions: null,
      containerNodeRect: null,
      draggableNodes: /* @__PURE__ */ new Map(),
      droppableRects: /* @__PURE__ */ new Map(),
      droppableContainers: /* @__PURE__ */ new DroppableContainersMap(),
      over: null,
      dragOverlay: {
        nodeRef: {
          current: null
        },
        rect: null,
        setRef: noop$3
      },
      scrollableAncestors: [],
      scrollableAncestorRects: [],
      measuringConfiguration: defaultMeasuringConfiguration,
      measureDroppableContainers: noop$3,
      windowRect: null,
      measuringScheduled: false
    };
    const defaultInternalContext = {
      activatorEvent: null,
      activators: [],
      active: null,
      activeNodeRect: null,
      ariaDescribedById: {
        draggable: ""
      },
      dispatch: noop$3,
      draggableNodes: /* @__PURE__ */ new Map(),
      over: null,
      measureDroppableContainers: noop$3
    };
    const InternalContext = /* @__PURE__ */ reactExports.createContext(defaultInternalContext);
    const PublicContext = /* @__PURE__ */ reactExports.createContext(defaultPublicContext);
    function getInitialState() {
      return {
        draggable: {
          active: null,
          initialCoordinates: {
            x: 0,
            y: 0
          },
          nodes: /* @__PURE__ */ new Map(),
          translate: {
            x: 0,
            y: 0
          }
        },
        droppable: {
          containers: new DroppableContainersMap()
        }
      };
    }
    function reducer(state, action) {
      switch (action.type) {
        case Action.DragStart:
          return {
            ...state,
            draggable: {
              ...state.draggable,
              initialCoordinates: action.initialCoordinates,
              active: action.active
            }
          };
        case Action.DragMove:
          if (state.draggable.active == null) {
            return state;
          }
          return {
            ...state,
            draggable: {
              ...state.draggable,
              translate: {
                x: action.coordinates.x - state.draggable.initialCoordinates.x,
                y: action.coordinates.y - state.draggable.initialCoordinates.y
              }
            }
          };
        case Action.DragEnd:
        case Action.DragCancel:
          return {
            ...state,
            draggable: {
              ...state.draggable,
              active: null,
              initialCoordinates: {
                x: 0,
                y: 0
              },
              translate: {
                x: 0,
                y: 0
              }
            }
          };
        case Action.RegisterDroppable: {
          const {
            element
          } = action;
          const {
            id: id2
          } = element;
          const containers = new DroppableContainersMap(state.droppable.containers);
          containers.set(id2, element);
          return {
            ...state,
            droppable: {
              ...state.droppable,
              containers
            }
          };
        }
        case Action.SetDroppableDisabled: {
          const {
            id: id2,
            key,
            disabled
          } = action;
          const element = state.droppable.containers.get(id2);
          if (!element || key !== element.key) {
            return state;
          }
          const containers = new DroppableContainersMap(state.droppable.containers);
          containers.set(id2, {
            ...element,
            disabled
          });
          return {
            ...state,
            droppable: {
              ...state.droppable,
              containers
            }
          };
        }
        case Action.UnregisterDroppable: {
          const {
            id: id2,
            key
          } = action;
          const element = state.droppable.containers.get(id2);
          if (!element || key !== element.key) {
            return state;
          }
          const containers = new DroppableContainersMap(state.droppable.containers);
          containers.delete(id2);
          return {
            ...state,
            droppable: {
              ...state.droppable,
              containers
            }
          };
        }
        default: {
          return state;
        }
      }
    }
    function RestoreFocus(_ref) {
      let {
        disabled
      } = _ref;
      const {
        active,
        activatorEvent,
        draggableNodes
      } = reactExports.useContext(InternalContext);
      const previousActivatorEvent = usePrevious(activatorEvent);
      const previousActiveId = usePrevious(active == null ? void 0 : active.id);
      reactExports.useEffect(() => {
        if (disabled) {
          return;
        }
        if (!activatorEvent && previousActivatorEvent && previousActiveId != null) {
          if (!isKeyboardEvent(previousActivatorEvent)) {
            return;
          }
          if (document.activeElement === previousActivatorEvent.target) {
            return;
          }
          const draggableNode = draggableNodes.get(previousActiveId);
          if (!draggableNode) {
            return;
          }
          const {
            activatorNode,
            node
          } = draggableNode;
          if (!activatorNode.current && !node.current) {
            return;
          }
          requestAnimationFrame(() => {
            for (const element of [activatorNode.current, node.current]) {
              if (!element) {
                continue;
              }
              const focusableNode = findFirstFocusableNode(element);
              if (focusableNode) {
                focusableNode.focus();
                break;
              }
            }
          });
        }
      }, [activatorEvent, disabled, draggableNodes, previousActiveId, previousActivatorEvent]);
      return null;
    }
    function applyModifiers(modifiers, _ref) {
      let {
        transform,
        ...args
      } = _ref;
      return modifiers != null && modifiers.length ? modifiers.reduce((accumulator, modifier) => {
        return modifier({
          transform: accumulator,
          ...args
        });
      }, transform) : transform;
    }
    function useMeasuringConfiguration(config2) {
      return reactExports.useMemo(
        () => ({
          draggable: {
            ...defaultMeasuringConfiguration.draggable,
            ...config2 == null ? void 0 : config2.draggable
          },
          droppable: {
            ...defaultMeasuringConfiguration.droppable,
            ...config2 == null ? void 0 : config2.droppable
          },
          dragOverlay: {
            ...defaultMeasuringConfiguration.dragOverlay,
            ...config2 == null ? void 0 : config2.dragOverlay
          }
        }),
        // eslint-disable-next-line react-hooks/exhaustive-deps
        [config2 == null ? void 0 : config2.draggable, config2 == null ? void 0 : config2.droppable, config2 == null ? void 0 : config2.dragOverlay]
      );
    }
    function useLayoutShiftScrollCompensation(_ref) {
      let {
        activeNode,
        measure,
        initialRect,
        config: config2 = true
      } = _ref;
      const initialized = reactExports.useRef(false);
      const {
        x: x2,
        y: y2
      } = typeof config2 === "boolean" ? {
        x: config2,
        y: config2
      } : config2;
      useIsomorphicLayoutEffect$1(() => {
        const disabled = !x2 && !y2;
        if (disabled || !activeNode) {
          initialized.current = false;
          return;
        }
        if (initialized.current || !initialRect) {
          return;
        }
        const node = activeNode == null ? void 0 : activeNode.node.current;
        if (!node || node.isConnected === false) {
          return;
        }
        const rect = measure(node);
        const rectDelta = getRectDelta(rect, initialRect);
        if (!x2) {
          rectDelta.x = 0;
        }
        if (!y2) {
          rectDelta.y = 0;
        }
        initialized.current = true;
        if (Math.abs(rectDelta.x) > 0 || Math.abs(rectDelta.y) > 0) {
          const firstScrollableAncestor = getFirstScrollableAncestor(node);
          if (firstScrollableAncestor) {
            firstScrollableAncestor.scrollBy({
              top: rectDelta.y,
              left: rectDelta.x
            });
          }
        }
      }, [activeNode, x2, y2, initialRect, measure]);
    }
    const ActiveDraggableContext = /* @__PURE__ */ reactExports.createContext({
      ...defaultCoordinates,
      scaleX: 1,
      scaleY: 1
    });
    var Status;
    (function(Status2) {
      Status2[Status2["Uninitialized"] = 0] = "Uninitialized";
      Status2[Status2["Initializing"] = 1] = "Initializing";
      Status2[Status2["Initialized"] = 2] = "Initialized";
    })(Status || (Status = {}));
    const DndContext = /* @__PURE__ */ reactExports.memo(function DndContext2(_ref) {
      var _sensorContext$curren, _dragOverlay$nodeRef$, _dragOverlay$rect, _over$rect;
      let {
        id: id2,
        accessibility,
        autoScroll = true,
        children,
        sensors = defaultSensors,
        collisionDetection = rectIntersection,
        measuring,
        modifiers,
        ...props
      } = _ref;
      const store2 = reactExports.useReducer(reducer, void 0, getInitialState);
      const [state, dispatch] = store2;
      const [dispatchMonitorEvent, registerMonitorListener] = useDndMonitorProvider();
      const [status, setStatus] = reactExports.useState(Status.Uninitialized);
      const isInitialized = status === Status.Initialized;
      const {
        draggable: {
          active: activeId,
          nodes: draggableNodes,
          translate
        },
        droppable: {
          containers: droppableContainers
        }
      } = state;
      const node = activeId != null ? draggableNodes.get(activeId) : null;
      const activeRects = reactExports.useRef({
        initial: null,
        translated: null
      });
      const active = reactExports.useMemo(() => {
        var _node$data;
        return activeId != null ? {
          id: activeId,
          // It's possible for the active node to unmount while dragging
          data: (_node$data = node == null ? void 0 : node.data) != null ? _node$data : defaultData,
          rect: activeRects
        } : null;
      }, [activeId, node]);
      const activeRef = reactExports.useRef(null);
      const [activeSensor, setActiveSensor] = reactExports.useState(null);
      const [activatorEvent, setActivatorEvent] = reactExports.useState(null);
      const latestProps = useLatestValue(props, Object.values(props));
      const draggableDescribedById = useUniqueId("DndDescribedBy", id2);
      const enabledDroppableContainers = reactExports.useMemo(() => droppableContainers.getEnabled(), [droppableContainers]);
      const measuringConfiguration = useMeasuringConfiguration(measuring);
      const {
        droppableRects,
        measureDroppableContainers,
        measuringScheduled
      } = useDroppableMeasuring(enabledDroppableContainers, {
        dragging: isInitialized,
        dependencies: [translate.x, translate.y],
        config: measuringConfiguration.droppable
      });
      const activeNode = useCachedNode(draggableNodes, activeId);
      const activationCoordinates = reactExports.useMemo(() => activatorEvent ? getEventCoordinates(activatorEvent) : null, [activatorEvent]);
      const autoScrollOptions = getAutoScrollerOptions();
      const initialActiveNodeRect = useInitialRect(activeNode, measuringConfiguration.draggable.measure);
      useLayoutShiftScrollCompensation({
        activeNode: activeId != null ? draggableNodes.get(activeId) : null,
        config: autoScrollOptions.layoutShiftCompensation,
        initialRect: initialActiveNodeRect,
        measure: measuringConfiguration.draggable.measure
      });
      const activeNodeRect = useRect(activeNode, measuringConfiguration.draggable.measure, initialActiveNodeRect);
      const containerNodeRect = useRect(activeNode ? activeNode.parentElement : null);
      const sensorContext = reactExports.useRef({
        activatorEvent: null,
        active: null,
        activeNode,
        collisionRect: null,
        collisions: null,
        droppableRects,
        draggableNodes,
        draggingNode: null,
        draggingNodeRect: null,
        droppableContainers,
        over: null,
        scrollableAncestors: [],
        scrollAdjustedTranslate: null
      });
      const overNode = droppableContainers.getNodeFor((_sensorContext$curren = sensorContext.current.over) == null ? void 0 : _sensorContext$curren.id);
      const dragOverlay = useDragOverlayMeasuring({
        measure: measuringConfiguration.dragOverlay.measure
      });
      const draggingNode = (_dragOverlay$nodeRef$ = dragOverlay.nodeRef.current) != null ? _dragOverlay$nodeRef$ : activeNode;
      const draggingNodeRect = isInitialized ? (_dragOverlay$rect = dragOverlay.rect) != null ? _dragOverlay$rect : activeNodeRect : null;
      const usesDragOverlay = Boolean(dragOverlay.nodeRef.current && dragOverlay.rect);
      const nodeRectDelta = useRectDelta(usesDragOverlay ? null : activeNodeRect);
      const windowRect = useWindowRect(draggingNode ? getWindow(draggingNode) : null);
      const scrollableAncestors = useScrollableAncestors(isInitialized ? overNode != null ? overNode : activeNode : null);
      const scrollableAncestorRects = useRects(scrollableAncestors);
      const modifiedTranslate = applyModifiers(modifiers, {
        transform: {
          x: translate.x - nodeRectDelta.x,
          y: translate.y - nodeRectDelta.y,
          scaleX: 1,
          scaleY: 1
        },
        activatorEvent,
        active,
        activeNodeRect,
        containerNodeRect,
        draggingNodeRect,
        over: sensorContext.current.over,
        overlayNodeRect: dragOverlay.rect,
        scrollableAncestors,
        scrollableAncestorRects,
        windowRect
      });
      const pointerCoordinates = activationCoordinates ? add$1(activationCoordinates, translate) : null;
      const scrollOffsets = useScrollOffsets(scrollableAncestors);
      const scrollAdjustment = useScrollOffsetsDelta(scrollOffsets);
      const activeNodeScrollDelta = useScrollOffsetsDelta(scrollOffsets, [activeNodeRect]);
      const scrollAdjustedTranslate = add$1(modifiedTranslate, scrollAdjustment);
      const collisionRect = draggingNodeRect ? getAdjustedRect(draggingNodeRect, modifiedTranslate) : null;
      const collisions = active && collisionRect ? collisionDetection({
        active,
        collisionRect,
        droppableRects,
        droppableContainers: enabledDroppableContainers,
        pointerCoordinates
      }) : null;
      const overId = getFirstCollision(collisions, "id");
      const [over, setOver] = reactExports.useState(null);
      const appliedTranslate = usesDragOverlay ? modifiedTranslate : add$1(modifiedTranslate, activeNodeScrollDelta);
      const transform = adjustScale(appliedTranslate, (_over$rect = over == null ? void 0 : over.rect) != null ? _over$rect : null, activeNodeRect);
      const activeSensorRef = reactExports.useRef(null);
      const instantiateSensor = reactExports.useCallback(
        (event, _ref2) => {
          let {
            sensor: Sensor,
            options
          } = _ref2;
          if (activeRef.current == null) {
            return;
          }
          const activeNode2 = draggableNodes.get(activeRef.current);
          if (!activeNode2) {
            return;
          }
          const activatorEvent2 = event.nativeEvent;
          const sensorInstance = new Sensor({
            active: activeRef.current,
            activeNode: activeNode2,
            event: activatorEvent2,
            options,
            // Sensors need to be instantiated with refs for arguments that change over time
            // otherwise they are frozen in time with the stale arguments
            context: sensorContext,
            onAbort(id3) {
              const draggableNode = draggableNodes.get(id3);
              if (!draggableNode) {
                return;
              }
              const {
                onDragAbort
              } = latestProps.current;
              const event2 = {
                id: id3
              };
              onDragAbort == null ? void 0 : onDragAbort(event2);
              dispatchMonitorEvent({
                type: "onDragAbort",
                event: event2
              });
            },
            onPending(id3, constraint, initialCoordinates, offset2) {
              const draggableNode = draggableNodes.get(id3);
              if (!draggableNode) {
                return;
              }
              const {
                onDragPending
              } = latestProps.current;
              const event2 = {
                id: id3,
                constraint,
                initialCoordinates,
                offset: offset2
              };
              onDragPending == null ? void 0 : onDragPending(event2);
              dispatchMonitorEvent({
                type: "onDragPending",
                event: event2
              });
            },
            onStart(initialCoordinates) {
              const id3 = activeRef.current;
              if (id3 == null) {
                return;
              }
              const draggableNode = draggableNodes.get(id3);
              if (!draggableNode) {
                return;
              }
              const {
                onDragStart
              } = latestProps.current;
              const event2 = {
                activatorEvent: activatorEvent2,
                active: {
                  id: id3,
                  data: draggableNode.data,
                  rect: activeRects
                }
              };
              reactDomExports.unstable_batchedUpdates(() => {
                onDragStart == null ? void 0 : onDragStart(event2);
                setStatus(Status.Initializing);
                dispatch({
                  type: Action.DragStart,
                  initialCoordinates,
                  active: id3
                });
                dispatchMonitorEvent({
                  type: "onDragStart",
                  event: event2
                });
                setActiveSensor(activeSensorRef.current);
                setActivatorEvent(activatorEvent2);
              });
            },
            onMove(coordinates) {
              dispatch({
                type: Action.DragMove,
                coordinates
              });
            },
            onEnd: createHandler(Action.DragEnd),
            onCancel: createHandler(Action.DragCancel)
          });
          activeSensorRef.current = sensorInstance;
          function createHandler(type) {
            return async function handler() {
              const {
                active: active2,
                collisions: collisions2,
                over: over2,
                scrollAdjustedTranslate: scrollAdjustedTranslate2
              } = sensorContext.current;
              let event2 = null;
              if (active2 && scrollAdjustedTranslate2) {
                const {
                  cancelDrop
                } = latestProps.current;
                event2 = {
                  activatorEvent: activatorEvent2,
                  active: active2,
                  collisions: collisions2,
                  delta: scrollAdjustedTranslate2,
                  over: over2
                };
                if (type === Action.DragEnd && typeof cancelDrop === "function") {
                  const shouldCancel = await Promise.resolve(cancelDrop(event2));
                  if (shouldCancel) {
                    type = Action.DragCancel;
                  }
                }
              }
              activeRef.current = null;
              reactDomExports.unstable_batchedUpdates(() => {
                dispatch({
                  type
                });
                setStatus(Status.Uninitialized);
                setOver(null);
                setActiveSensor(null);
                setActivatorEvent(null);
                activeSensorRef.current = null;
                const eventName = type === Action.DragEnd ? "onDragEnd" : "onDragCancel";
                if (event2) {
                  const handler2 = latestProps.current[eventName];
                  handler2 == null ? void 0 : handler2(event2);
                  dispatchMonitorEvent({
                    type: eventName,
                    event: event2
                  });
                }
              });
            };
          }
        },
        // eslint-disable-next-line react-hooks/exhaustive-deps
        [draggableNodes]
      );
      const bindActivatorToSensorInstantiator = reactExports.useCallback((handler, sensor) => {
        return (event, active2) => {
          const nativeEvent = event.nativeEvent;
          const activeDraggableNode = draggableNodes.get(active2);
          if (
            // Another sensor is already instantiating
            activeRef.current !== null || // No active draggable
            !activeDraggableNode || // Event has already been captured
            nativeEvent.dndKit || nativeEvent.defaultPrevented
          ) {
            return;
          }
          const activationContext = {
            active: activeDraggableNode
          };
          const shouldActivate = handler(event, sensor.options, activationContext);
          if (shouldActivate === true) {
            nativeEvent.dndKit = {
              capturedBy: sensor.sensor
            };
            activeRef.current = active2;
            instantiateSensor(event, sensor);
          }
        };
      }, [draggableNodes, instantiateSensor]);
      const activators = useCombineActivators(sensors, bindActivatorToSensorInstantiator);
      useSensorSetup(sensors);
      useIsomorphicLayoutEffect$1(() => {
        if (activeNodeRect && status === Status.Initializing) {
          setStatus(Status.Initialized);
        }
      }, [activeNodeRect, status]);
      reactExports.useEffect(
        () => {
          const {
            onDragMove
          } = latestProps.current;
          const {
            active: active2,
            activatorEvent: activatorEvent2,
            collisions: collisions2,
            over: over2
          } = sensorContext.current;
          if (!active2 || !activatorEvent2) {
            return;
          }
          const event = {
            active: active2,
            activatorEvent: activatorEvent2,
            collisions: collisions2,
            delta: {
              x: scrollAdjustedTranslate.x,
              y: scrollAdjustedTranslate.y
            },
            over: over2
          };
          reactDomExports.unstable_batchedUpdates(() => {
            onDragMove == null ? void 0 : onDragMove(event);
            dispatchMonitorEvent({
              type: "onDragMove",
              event
            });
          });
        },
        // eslint-disable-next-line react-hooks/exhaustive-deps
        [scrollAdjustedTranslate.x, scrollAdjustedTranslate.y]
      );
      reactExports.useEffect(
        () => {
          const {
            active: active2,
            activatorEvent: activatorEvent2,
            collisions: collisions2,
            droppableContainers: droppableContainers2,
            scrollAdjustedTranslate: scrollAdjustedTranslate2
          } = sensorContext.current;
          if (!active2 || activeRef.current == null || !activatorEvent2 || !scrollAdjustedTranslate2) {
            return;
          }
          const {
            onDragOver
          } = latestProps.current;
          const overContainer = droppableContainers2.get(overId);
          const over2 = overContainer && overContainer.rect.current ? {
            id: overContainer.id,
            rect: overContainer.rect.current,
            data: overContainer.data,
            disabled: overContainer.disabled
          } : null;
          const event = {
            active: active2,
            activatorEvent: activatorEvent2,
            collisions: collisions2,
            delta: {
              x: scrollAdjustedTranslate2.x,
              y: scrollAdjustedTranslate2.y
            },
            over: over2
          };
          reactDomExports.unstable_batchedUpdates(() => {
            setOver(over2);
            onDragOver == null ? void 0 : onDragOver(event);
            dispatchMonitorEvent({
              type: "onDragOver",
              event
            });
          });
        },
        // eslint-disable-next-line react-hooks/exhaustive-deps
        [overId]
      );
      useIsomorphicLayoutEffect$1(() => {
        sensorContext.current = {
          activatorEvent,
          active,
          activeNode,
          collisionRect,
          collisions,
          droppableRects,
          draggableNodes,
          draggingNode,
          draggingNodeRect,
          droppableContainers,
          over,
          scrollableAncestors,
          scrollAdjustedTranslate
        };
        activeRects.current = {
          initial: draggingNodeRect,
          translated: collisionRect
        };
      }, [active, activeNode, collisions, collisionRect, draggableNodes, draggingNode, draggingNodeRect, droppableRects, droppableContainers, over, scrollableAncestors, scrollAdjustedTranslate]);
      useAutoScroller({
        ...autoScrollOptions,
        delta: translate,
        draggingRect: collisionRect,
        pointerCoordinates,
        scrollableAncestors,
        scrollableAncestorRects
      });
      const publicContext = reactExports.useMemo(() => {
        const context = {
          active,
          activeNode,
          activeNodeRect,
          activatorEvent,
          collisions,
          containerNodeRect,
          dragOverlay,
          draggableNodes,
          droppableContainers,
          droppableRects,
          over,
          measureDroppableContainers,
          scrollableAncestors,
          scrollableAncestorRects,
          measuringConfiguration,
          measuringScheduled,
          windowRect
        };
        return context;
      }, [active, activeNode, activeNodeRect, activatorEvent, collisions, containerNodeRect, dragOverlay, draggableNodes, droppableContainers, droppableRects, over, measureDroppableContainers, scrollableAncestors, scrollableAncestorRects, measuringConfiguration, measuringScheduled, windowRect]);
      const internalContext = reactExports.useMemo(() => {
        const context = {
          activatorEvent,
          activators,
          active,
          activeNodeRect,
          ariaDescribedById: {
            draggable: draggableDescribedById
          },
          dispatch,
          draggableNodes,
          over,
          measureDroppableContainers
        };
        return context;
      }, [activatorEvent, activators, active, activeNodeRect, dispatch, draggableDescribedById, draggableNodes, over, measureDroppableContainers]);
      return React$1.createElement(DndMonitorContext.Provider, {
        value: registerMonitorListener
      }, React$1.createElement(InternalContext.Provider, {
        value: internalContext
      }, React$1.createElement(PublicContext.Provider, {
        value: publicContext
      }, React$1.createElement(ActiveDraggableContext.Provider, {
        value: transform
      }, children)), React$1.createElement(RestoreFocus, {
        disabled: (accessibility == null ? void 0 : accessibility.restoreFocus) === false
      })), React$1.createElement(Accessibility, {
        ...accessibility,
        hiddenTextDescribedById: draggableDescribedById
      }));
      function getAutoScrollerOptions() {
        const activeSensorDisablesAutoscroll = (activeSensor == null ? void 0 : activeSensor.autoScrollEnabled) === false;
        const autoScrollGloballyDisabled = typeof autoScroll === "object" ? autoScroll.enabled === false : autoScroll === false;
        const enabled = isInitialized && !activeSensorDisablesAutoscroll && !autoScrollGloballyDisabled;
        if (typeof autoScroll === "object") {
          return {
            ...autoScroll,
            enabled
          };
        }
        return {
          enabled
        };
      }
    });
    const NullContext = /* @__PURE__ */ reactExports.createContext(null);
    const defaultRole = "button";
    const ID_PREFIX = "Draggable";
    function useDraggable(_ref) {
      let {
        id: id2,
        data,
        disabled = false,
        attributes
      } = _ref;
      const key = useUniqueId(ID_PREFIX);
      const {
        activators,
        activatorEvent,
        active,
        activeNodeRect,
        ariaDescribedById,
        draggableNodes,
        over
      } = reactExports.useContext(InternalContext);
      const {
        role = defaultRole,
        roleDescription = "draggable",
        tabIndex = 0
      } = attributes != null ? attributes : {};
      const isDragging = (active == null ? void 0 : active.id) === id2;
      const transform = reactExports.useContext(isDragging ? ActiveDraggableContext : NullContext);
      const [node, setNodeRef] = useNodeRef();
      const [activatorNode, setActivatorNodeRef] = useNodeRef();
      const listeners = useSyntheticListeners(activators, id2);
      const dataRef = useLatestValue(data);
      useIsomorphicLayoutEffect$1(
        () => {
          draggableNodes.set(id2, {
            id: id2,
            key,
            node,
            activatorNode,
            data: dataRef
          });
          return () => {
            const node2 = draggableNodes.get(id2);
            if (node2 && node2.key === key) {
              draggableNodes.delete(id2);
            }
          };
        },
        // eslint-disable-next-line react-hooks/exhaustive-deps
        [draggableNodes, id2]
      );
      const memoizedAttributes = reactExports.useMemo(() => ({
        role,
        tabIndex,
        "aria-disabled": disabled,
        "aria-pressed": isDragging && role === defaultRole ? true : void 0,
        "aria-roledescription": roleDescription,
        "aria-describedby": ariaDescribedById.draggable
      }), [disabled, role, tabIndex, isDragging, roleDescription, ariaDescribedById.draggable]);
      return {
        active,
        activatorEvent,
        activeNodeRect,
        attributes: memoizedAttributes,
        isDragging,
        listeners: disabled ? void 0 : listeners,
        node,
        over,
        setNodeRef,
        setActivatorNodeRef,
        transform
      };
    }
    const ID_PREFIX$1 = "Droppable";
    const defaultResizeObserverConfig = {
      timeout: 25
    };
    function useDroppable(_ref) {
      let {
        data,
        disabled = false,
        id: id2,
        resizeObserverConfig
      } = _ref;
      const key = useUniqueId(ID_PREFIX$1);
      const {
        active,
        dispatch,
        over,
        measureDroppableContainers
      } = reactExports.useContext(InternalContext);
      const previous = reactExports.useRef({
        disabled
      });
      const resizeObserverConnected = reactExports.useRef(false);
      const rect = reactExports.useRef(null);
      const callbackId = reactExports.useRef(null);
      const {
        disabled: resizeObserverDisabled,
        updateMeasurementsFor,
        timeout: resizeObserverTimeout
      } = {
        ...defaultResizeObserverConfig,
        ...resizeObserverConfig
      };
      const ids2 = useLatestValue(updateMeasurementsFor != null ? updateMeasurementsFor : id2);
      const handleResize = reactExports.useCallback(
        () => {
          if (!resizeObserverConnected.current) {
            resizeObserverConnected.current = true;
            return;
          }
          if (callbackId.current != null) {
            clearTimeout(callbackId.current);
          }
          callbackId.current = setTimeout(() => {
            measureDroppableContainers(Array.isArray(ids2.current) ? ids2.current : [ids2.current]);
            callbackId.current = null;
          }, resizeObserverTimeout);
        },
        //eslint-disable-next-line react-hooks/exhaustive-deps
        [resizeObserverTimeout]
      );
      const resizeObserver = useResizeObserver({
        callback: handleResize,
        disabled: resizeObserverDisabled || !active
      });
      const handleNodeChange = reactExports.useCallback((newElement, previousElement) => {
        if (!resizeObserver) {
          return;
        }
        if (previousElement) {
          resizeObserver.unobserve(previousElement);
          resizeObserverConnected.current = false;
        }
        if (newElement) {
          resizeObserver.observe(newElement);
        }
      }, [resizeObserver]);
      const [nodeRef, setNodeRef] = useNodeRef(handleNodeChange);
      const dataRef = useLatestValue(data);
      reactExports.useEffect(() => {
        if (!resizeObserver || !nodeRef.current) {
          return;
        }
        resizeObserver.disconnect();
        resizeObserverConnected.current = false;
        resizeObserver.observe(nodeRef.current);
      }, [nodeRef, resizeObserver]);
      reactExports.useEffect(
        () => {
          dispatch({
            type: Action.RegisterDroppable,
            element: {
              id: id2,
              key,
              disabled,
              node: nodeRef,
              rect,
              data: dataRef
            }
          });
          return () => dispatch({
            type: Action.UnregisterDroppable,
            key,
            id: id2
          });
        },
        // eslint-disable-next-line react-hooks/exhaustive-deps
        [id2]
      );
      reactExports.useEffect(() => {
        if (disabled !== previous.current.disabled) {
          dispatch({
            type: Action.SetDroppableDisabled,
            id: id2,
            key,
            disabled
          });
          previous.current.disabled = disabled;
        }
      }, [id2, key, disabled, dispatch]);
      return {
        active,
        rect,
        isOver: (over == null ? void 0 : over.id) === id2,
        node: nodeRef,
        over,
        setNodeRef
      };
    }
    const ICONS = {
      high: /* @__PURE__ */ jsxRuntimeExports.jsx(MdKeyboardDoubleArrowUp, {}),
      medium: /* @__PURE__ */ jsxRuntimeExports.jsx(MdKeyboardArrowUp, {}),
      low: /* @__PURE__ */ jsxRuntimeExports.jsx(MdKeyboardArrowDown, {})
    };
    const TaskCard = ({ task }) => {
      var _a2;
      const { user } = useSelector((state) => state.auth);
      reactExports.useState(false);
      const { attributes, listeners, setNodeRef, transform } = useDraggable({
        id: task.id
      });
      const style = transform ? {
        transform: `translate(${transform.x}px, ${transform.y}px)`
      } : void 0;
      return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { ref: setNodeRef, ...listeners, ...attributes, style, className: "w-full  bg-white shadow-md p-4 rounded", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "w-full flex justify-between", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs(
            "div",
            {
              className: clsx(
                "flex flex-1 gap-1 items-center text-sm font-medium",
                PRIOTITYSTYELS[task == null ? void 0 : task.priority]
              ),
              children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-lg", children: ICONS[task == null ? void 0 : task.priority] }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "uppercase", children: [
                  task == null ? void 0 : task.priority,
                  " Priority"
                ] })
              ]
            }
          ),
          (user == null ? void 0 : user.isAdmin) && /* @__PURE__ */ jsxRuntimeExports.jsx(TaskDialog, { task })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "div",
              {
                className: clsx("w-4 h-4 rounded-full", TASK_TYPE$1[task.status])
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "line-clamp-1 text-black", children: task == null ? void 0 : task.title })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-sm text-gray-600", children: formatDate(new Date(task == null ? void 0 : task.dueDate)) })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-full border-t border-gray-200 my-2" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex items-center justify-between mb-2", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex flex-row-reverse", children: (_a2 = task == null ? void 0 : task.assignedUsers) == null ? void 0 : _a2.map((m2, index) => /* @__PURE__ */ jsxRuntimeExports.jsx(
          "div",
          {
            className: clsx(
              "w-7 h-7 rounded-full text-white flex items-center justify-center text-sm -mr-1",
              BGS[index % (BGS == null ? void 0 : BGS.length)]
            ),
            children: /* @__PURE__ */ jsxRuntimeExports.jsx(UserInfo, { user: m2 })
          },
          index
        )) }) })
      ] });
    };
    const Column = ({ column, tasks: tasks2 }) => {
      const { setNodeRef } = useDroppable({
        id: column.id
      });
      const columnBackground = {
        pending: "bg-blue-100",
        "in progress": "bg-yellow-100",
        completed: "bg-green-100"
      };
      return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { ref: setNodeRef, className: `w-full py-4 flex flex-col gap-4 p-4 h-fit ${tasks2.length > 0 ? columnBackground[column.id] : ""}`, style: { minHeight: "300px", position: "relative" }, children: tasks2.map((task) => /* @__PURE__ */ jsxRuntimeExports.jsx(TaskCard, { task }, task.id)) });
    };
    const TASK_TYPE = {
      todo: "bg-blue-600",
      "in progress": "bg-yellow-600",
      completed: "bg-green-600"
    };
    const Tasks = () => {
      const params = useParams();
      reactExports.useState(0);
      const [open, setOpen] = reactExports.useState(false);
      const { user } = useSelector((state) => state.auth);
      const status = (params == null ? void 0 : params.status) || "";
      const [tasks2, setTasks] = reactExports.useState([]);
      const { isPending: isPending2, isError, data, error: error2 } = useQuery({
        queryKey: ["todos", user._id],
        queryFn: async () => {
          const response = await axiosInstance.get(`tasks/?userId=${user._id}`);
          return response.data;
        },
        keepPreviousData: true
      });
      const updateMutation = useMutation(
        {
          mutationFn: ({ taskId, ...data2 }) => axiosInstance.put(`tasks/${taskId}`, data2),
          onSuccess: async (response) => {
            var _a2, _b2, _c2;
            console.log(response, "heiii");
            if (response == null ? void 0 : response.data) {
              Ut.success("Task Updated Successfully", {
                position: "top-center",
                duration: 2e3
              });
              try {
                const notificationPayload = {
                  type: TYPES["STATUS_CHANGED"],
                  message: `Status changed for "${(_a2 = response.data) == null ? void 0 : _a2.title}" has been changed.`,
                  task: (_b2 = response.data) == null ? void 0 : _b2._id,
                  assignedUser: response == null ? void 0 : response.data.assigned_users,
                  status: (_c2 = response == null ? void 0 : response.data) == null ? void 0 : _c2.status
                };
                await axiosInstance.post(`notifications`, notificationPayload);
                Ut.success("Notification created successfully!", {
                  duration: 2e3,
                  position: "top-center"
                });
              } catch (error22) {
                console.log(error22, "popopo");
                Ut.error("Failed to create notification", {
                  position: "top-center",
                  duration: 2e3
                });
              }
            }
          },
          onError: (error22) => {
            Ut.error(error22.response.data.error, {
              position: "top-center",
              duration: 2e3
            });
          }
        }
      );
      reactExports.useEffect(() => {
        setTasks(data == null ? void 0 : data.data);
      }, [data]);
      const taskColumns = reactExports.useMemo(() => {
        if (!(data == null ? void 0 : data.data))
          return [];
        const pendingTasks = data.data.filter((task) => task.status === "pending");
        const inProgressTasks = data.data.filter((task) => task.status === "in progress");
        const completedTasks = data.data.filter((task) => task.status === "completed");
        return [
          { label: "To Do", id: "pending", tasks: pendingTasks },
          { label: "In Progress", id: "in progress", tasks: inProgressTasks },
          { label: "Completed", id: "completed", tasks: completedTasks }
        ];
      }, [tasks2]);
      const handleDragEnd = (event) => {
        const { active, over } = event;
        if (!over)
          return;
        const taskId = active.id;
        const newStatus = over.id;
        const updatedTasks = tasks2 == null ? void 0 : tasks2.map(
          (task) => task.id === taskId ? { ...task, status: newStatus } : task
        );
        setTasks(updatedTasks);
        updateMutation.mutate({ taskId, status: newStatus });
      };
      return isPending2 ? /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "py-10", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Loading, {}) }) : /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "w-full", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between mb-4", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(Title, { title: status ? `${status} Tasks` : "Tasks" }),
          user.role === "admin" && /* @__PURE__ */ jsxRuntimeExports.jsx(
            Button,
            {
              onClick: () => setOpen(true),
              label: "Create Task",
              icon: /* @__PURE__ */ jsxRuntimeExports.jsx(IoMdAdd, { className: "text-lg" }),
              className: "flex flex-row-reverse gap-1 items-center bg-blue-600 text-white rounded-md py-2 2xl:py-2.5"
            }
          )
        ] }),
        !status && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "w-full flex justify-between gap-4 md:gap-x-12 py-4", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(TaskTitle, { label: "To Do", className: TASK_TYPE.todo }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            TaskTitle,
            {
              label: "In Progress",
              className: TASK_TYPE["in progress"]
            }
          ),
          /* @__PURE__ */ jsxRuntimeExports.jsx(TaskTitle, { label: "completed", className: TASK_TYPE.completed })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-full", children: /* @__PURE__ */ jsxRuntimeExports.jsx(DndContext, { onDragEnd: handleDragEnd, children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-full flex gap-4", children: taskColumns.map((column, index) => /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex-1", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Column, { tasks: tasks2.filter((task) => task.status === column.id), column }) }, column.id)) }) }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(AddTask, { open, setOpen })
      ] });
    };
    function LuClipboardEdit(props) {
      return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 24 24", "fill": "none", "stroke": "currentColor", "strokeWidth": "2", "strokeLinecap": "round", "strokeLinejoin": "round" }, "child": [{ "tag": "rect", "attr": { "width": "8", "height": "4", "x": "8", "y": "2", "rx": "1", "ry": "1" }, "child": [] }, { "tag": "path", "attr": { "d": "M10.42 12.61a2.1 2.1 0 1 1 2.97 2.97L7.95 21 4 22l.99-3.95 5.43-5.44Z" }, "child": [] }, { "tag": "path", "attr": { "d": "M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-5.5" }, "child": [] }, { "tag": "path", "attr": { "d": "M4 13.5V6a2 2 0 0 1 2-2h2" }, "child": [] }] })(props);
    }
    function FaArrowsToDot(props) {
      return GenIcon({ "tag": "svg", "attr": { "viewBox": "0 0 512 512" }, "child": [{ "tag": "path", "attr": { "d": "M256 0c17.7 0 32 14.3 32 32V64h32c12.9 0 24.6 7.8 29.6 19.8s2.2 25.7-6.9 34.9l-64 64c-12.5 12.5-32.8 12.5-45.3 0l-64-64c-9.2-9.2-11.9-22.9-6.9-34.9s16.6-19.8 29.6-19.8h32V32c0-17.7 14.3-32 32-32zM169.4 393.4l64-64c12.5-12.5 32.8-12.5 45.3 0l64 64c9.2 9.2 11.9 22.9 6.9 34.9s-16.6 19.8-29.6 19.8H288v32c0 17.7-14.3 32-32 32s-32-14.3-32-32V448H192c-12.9 0-24.6-7.8-29.6-19.8s-2.2-25.7 6.9-34.9zM32 224H64V192c0-12.9 7.8-24.6 19.8-29.6s25.7-2.2 34.9 6.9l64 64c12.5 12.5 12.5 32.8 0 45.3l-64 64c-9.2 9.2-22.9 11.9-34.9 6.9s-19.8-16.6-19.8-29.6V288H32c-17.7 0-32-14.3-32-32s14.3-32 32-32zm297.4 54.6c-12.5-12.5-12.5-32.8 0-45.3l64-64c9.2-9.2 22.9-11.9 34.9-6.9s19.8 16.6 19.8 29.6v32h32c17.7 0 32 14.3 32 32s-14.3 32-32 32H448v32c0 12.9-7.8 24.6-19.8 29.6s-25.7 2.2-34.9-6.9l-64-64zM256 224a32 32 0 1 1 0 64 32 32 0 1 1 0-64z" }, "child": [] }] })(props);
    }
    var isArray$f = Array.isArray;
    var isArray_1 = isArray$f;
    var freeGlobal$1 = typeof commonjsGlobal == "object" && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;
    var _freeGlobal = freeGlobal$1;
    var freeGlobal = _freeGlobal;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root$9 = freeGlobal || freeSelf || Function("return this")();
    var _root = root$9;
    var root$8 = _root;
    var Symbol$7 = root$8.Symbol;
    var _Symbol = Symbol$7;
    var Symbol$6 = _Symbol;
    var objectProto$c = Object.prototype;
    var hasOwnProperty$a = objectProto$c.hasOwnProperty;
    var nativeObjectToString$1 = objectProto$c.toString;
    var symToStringTag$1 = Symbol$6 ? Symbol$6.toStringTag : void 0;
    function getRawTag$1(value2) {
      var isOwn = hasOwnProperty$a.call(value2, symToStringTag$1), tag = value2[symToStringTag$1];
      try {
        value2[symToStringTag$1] = void 0;
        var unmasked = true;
      } catch (e3) {
      }
      var result = nativeObjectToString$1.call(value2);
      if (unmasked) {
        if (isOwn) {
          value2[symToStringTag$1] = tag;
        } else {
          delete value2[symToStringTag$1];
        }
      }
      return result;
    }
    var _getRawTag = getRawTag$1;
    var objectProto$b = Object.prototype;
    var nativeObjectToString = objectProto$b.toString;
    function objectToString$1(value2) {
      return nativeObjectToString.call(value2);
    }
    var _objectToString = objectToString$1;
    var Symbol$5 = _Symbol, getRawTag = _getRawTag, objectToString = _objectToString;
    var nullTag = "[object Null]", undefinedTag = "[object Undefined]";
    var symToStringTag = Symbol$5 ? Symbol$5.toStringTag : void 0;
    function baseGetTag$9(value2) {
      if (value2 == null) {
        return value2 === void 0 ? undefinedTag : nullTag;
      }
      return symToStringTag && symToStringTag in Object(value2) ? getRawTag(value2) : objectToString(value2);
    }
    var _baseGetTag = baseGetTag$9;
    function isObjectLike$9(value2) {
      return value2 != null && typeof value2 == "object";
    }
    var isObjectLike_1 = isObjectLike$9;
    var baseGetTag$8 = _baseGetTag, isObjectLike$8 = isObjectLike_1;
    var symbolTag$1 = "[object Symbol]";
    function isSymbol$6(value2) {
      return typeof value2 == "symbol" || isObjectLike$8(value2) && baseGetTag$8(value2) == symbolTag$1;
    }
    var isSymbol_1 = isSymbol$6;
    var isArray$e = isArray_1, isSymbol$5 = isSymbol_1;
    var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/;
    function isKey$3(value2, object2) {
      if (isArray$e(value2)) {
        return false;
      }
      var type = typeof value2;
      if (type == "number" || type == "symbol" || type == "boolean" || value2 == null || isSymbol$5(value2)) {
        return true;
      }
      return reIsPlainProp.test(value2) || !reIsDeepProp.test(value2) || object2 != null && value2 in Object(object2);
    }
    var _isKey = isKey$3;
    function isObject$7(value2) {
      var type = typeof value2;
      return value2 != null && (type == "object" || type == "function");
    }
    var isObject_1 = isObject$7;
    const isObject$8 = /* @__PURE__ */ getDefaultExportFromCjs(isObject_1);
    var baseGetTag$7 = _baseGetTag, isObject$6 = isObject_1;
    var asyncTag = "[object AsyncFunction]", funcTag$1 = "[object Function]", genTag = "[object GeneratorFunction]", proxyTag = "[object Proxy]";
    function isFunction$3(value2) {
      if (!isObject$6(value2)) {
        return false;
      }
      var tag = baseGetTag$7(value2);
      return tag == funcTag$1 || tag == genTag || tag == asyncTag || tag == proxyTag;
    }
    var isFunction_1 = isFunction$3;
    const isFunction$4 = /* @__PURE__ */ getDefaultExportFromCjs(isFunction_1);
    var root$7 = _root;
    var coreJsData$1 = root$7["__core-js_shared__"];
    var _coreJsData = coreJsData$1;
    var coreJsData = _coreJsData;
    var maskSrcKey = function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
      return uid ? "Symbol(src)_1." + uid : "";
    }();
    function isMasked$1(func) {
      return !!maskSrcKey && maskSrcKey in func;
    }
    var _isMasked = isMasked$1;
    var funcProto$2 = Function.prototype;
    var funcToString$2 = funcProto$2.toString;
    function toSource$2(func) {
      if (func != null) {
        try {
          return funcToString$2.call(func);
        } catch (e3) {
        }
        try {
          return func + "";
        } catch (e3) {
        }
      }
      return "";
    }
    var _toSource = toSource$2;
    var isFunction$2 = isFunction_1, isMasked = _isMasked, isObject$5 = isObject_1, toSource$1 = _toSource;
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var funcProto$1 = Function.prototype, objectProto$a = Object.prototype;
    var funcToString$1 = funcProto$1.toString;
    var hasOwnProperty$9 = objectProto$a.hasOwnProperty;
    var reIsNative = RegExp(
      "^" + funcToString$1.call(hasOwnProperty$9).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
    );
    function baseIsNative$1(value2) {
      if (!isObject$5(value2) || isMasked(value2)) {
        return false;
      }
      var pattern = isFunction$2(value2) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource$1(value2));
    }
    var _baseIsNative = baseIsNative$1;
    function getValue$1(object2, key) {
      return object2 == null ? void 0 : object2[key];
    }
    var _getValue = getValue$1;
    var baseIsNative = _baseIsNative, getValue = _getValue;
    function getNative$7(object2, key) {
      var value2 = getValue(object2, key);
      return baseIsNative(value2) ? value2 : void 0;
    }
    var _getNative = getNative$7;
    var getNative$6 = _getNative;
    var nativeCreate$4 = getNative$6(Object, "create");
    var _nativeCreate = nativeCreate$4;
    var nativeCreate$3 = _nativeCreate;
    function hashClear$1() {
      this.__data__ = nativeCreate$3 ? nativeCreate$3(null) : {};
      this.size = 0;
    }
    var _hashClear = hashClear$1;
    function hashDelete$1(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }
    var _hashDelete = hashDelete$1;
    var nativeCreate$2 = _nativeCreate;
    var HASH_UNDEFINED$2 = "__lodash_hash_undefined__";
    var objectProto$9 = Object.prototype;
    var hasOwnProperty$8 = objectProto$9.hasOwnProperty;
    function hashGet$1(key) {
      var data = this.__data__;
      if (nativeCreate$2) {
        var result = data[key];
        return result === HASH_UNDEFINED$2 ? void 0 : result;
      }
      return hasOwnProperty$8.call(data, key) ? data[key] : void 0;
    }
    var _hashGet = hashGet$1;
    var nativeCreate$1 = _nativeCreate;
    var objectProto$8 = Object.prototype;
    var hasOwnProperty$7 = objectProto$8.hasOwnProperty;
    function hashHas$1(key) {
      var data = this.__data__;
      return nativeCreate$1 ? data[key] !== void 0 : hasOwnProperty$7.call(data, key);
    }
    var _hashHas = hashHas$1;
    var nativeCreate = _nativeCreate;
    var HASH_UNDEFINED$1 = "__lodash_hash_undefined__";
    function hashSet$1(key, value2) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = nativeCreate && value2 === void 0 ? HASH_UNDEFINED$1 : value2;
      return this;
    }
    var _hashSet = hashSet$1;
    var hashClear = _hashClear, hashDelete = _hashDelete, hashGet = _hashGet, hashHas = _hashHas, hashSet = _hashSet;
    function Hash$1(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    Hash$1.prototype.clear = hashClear;
    Hash$1.prototype["delete"] = hashDelete;
    Hash$1.prototype.get = hashGet;
    Hash$1.prototype.has = hashHas;
    Hash$1.prototype.set = hashSet;
    var _Hash = Hash$1;
    function listCacheClear$1() {
      this.__data__ = [];
      this.size = 0;
    }
    var _listCacheClear = listCacheClear$1;
    function eq$3(value2, other) {
      return value2 === other || value2 !== value2 && other !== other;
    }
    var eq_1 = eq$3;
    var eq$2 = eq_1;
    function assocIndexOf$4(array2, key) {
      var length = array2.length;
      while (length--) {
        if (eq$2(array2[length][0], key)) {
          return length;
        }
      }
      return -1;
    }
    var _assocIndexOf = assocIndexOf$4;
    var assocIndexOf$3 = _assocIndexOf;
    var arrayProto = Array.prototype;
    var splice = arrayProto.splice;
    function listCacheDelete$1(key) {
      var data = this.__data__, index = assocIndexOf$3(data, key);
      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }
    var _listCacheDelete = listCacheDelete$1;
    var assocIndexOf$2 = _assocIndexOf;
    function listCacheGet$1(key) {
      var data = this.__data__, index = assocIndexOf$2(data, key);
      return index < 0 ? void 0 : data[index][1];
    }
    var _listCacheGet = listCacheGet$1;
    var assocIndexOf$1 = _assocIndexOf;
    function listCacheHas$1(key) {
      return assocIndexOf$1(this.__data__, key) > -1;
    }
    var _listCacheHas = listCacheHas$1;
    var assocIndexOf = _assocIndexOf;
    function listCacheSet$1(key, value2) {
      var data = this.__data__, index = assocIndexOf(data, key);
      if (index < 0) {
        ++this.size;
        data.push([key, value2]);
      } else {
        data[index][1] = value2;
      }
      return this;
    }
    var _listCacheSet = listCacheSet$1;
    var listCacheClear = _listCacheClear, listCacheDelete = _listCacheDelete, listCacheGet = _listCacheGet, listCacheHas = _listCacheHas, listCacheSet = _listCacheSet;
    function ListCache$4(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    ListCache$4.prototype.clear = listCacheClear;
    ListCache$4.prototype["delete"] = listCacheDelete;
    ListCache$4.prototype.get = listCacheGet;
    ListCache$4.prototype.has = listCacheHas;
    ListCache$4.prototype.set = listCacheSet;
    var _ListCache = ListCache$4;
    var getNative$5 = _getNative, root$6 = _root;
    var Map$4 = getNative$5(root$6, "Map");
    var _Map = Map$4;
    var Hash = _Hash, ListCache$3 = _ListCache, Map$3 = _Map;
    function mapCacheClear$1() {
      this.size = 0;
      this.__data__ = {
        "hash": new Hash(),
        "map": new (Map$3 || ListCache$3)(),
        "string": new Hash()
      };
    }
    var _mapCacheClear = mapCacheClear$1;
    function isKeyable$1(value2) {
      var type = typeof value2;
      return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value2 !== "__proto__" : value2 === null;
    }
    var _isKeyable = isKeyable$1;
    var isKeyable = _isKeyable;
    function getMapData$4(map2, key) {
      var data = map2.__data__;
      return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
    }
    var _getMapData = getMapData$4;
    var getMapData$3 = _getMapData;
    function mapCacheDelete$1(key) {
      var result = getMapData$3(this, key)["delete"](key);
      this.size -= result ? 1 : 0;
      return result;
    }
    var _mapCacheDelete = mapCacheDelete$1;
    var getMapData$2 = _getMapData;
    function mapCacheGet$1(key) {
      return getMapData$2(this, key).get(key);
    }
    var _mapCacheGet = mapCacheGet$1;
    var getMapData$1 = _getMapData;
    function mapCacheHas$1(key) {
      return getMapData$1(this, key).has(key);
    }
    var _mapCacheHas = mapCacheHas$1;
    var getMapData = _getMapData;
    function mapCacheSet$1(key, value2) {
      var data = getMapData(this, key), size = data.size;
      data.set(key, value2);
      this.size += data.size == size ? 0 : 1;
      return this;
    }
    var _mapCacheSet = mapCacheSet$1;
    var mapCacheClear = _mapCacheClear, mapCacheDelete = _mapCacheDelete, mapCacheGet = _mapCacheGet, mapCacheHas = _mapCacheHas, mapCacheSet = _mapCacheSet;
    function MapCache$3(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    MapCache$3.prototype.clear = mapCacheClear;
    MapCache$3.prototype["delete"] = mapCacheDelete;
    MapCache$3.prototype.get = mapCacheGet;
    MapCache$3.prototype.has = mapCacheHas;
    MapCache$3.prototype.set = mapCacheSet;
    var _MapCache = MapCache$3;
    var MapCache$2 = _MapCache;
    var FUNC_ERROR_TEXT$2 = "Expected a function";
    function memoize$2(func, resolver) {
      if (typeof func != "function" || resolver != null && typeof resolver != "function") {
        throw new TypeError(FUNC_ERROR_TEXT$2);
      }
      var memoized = function() {
        var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache2 = memoized.cache;
        if (cache2.has(key)) {
          return cache2.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache2.set(key, result) || cache2;
        return result;
      };
      memoized.cache = new (memoize$2.Cache || MapCache$2)();
      return memoized;
    }
    memoize$2.Cache = MapCache$2;
    var memoize_1 = memoize$2;
    const memoize$3 = /* @__PURE__ */ getDefaultExportFromCjs(memoize_1);
    var memoize$1 = memoize_1;
    var MAX_MEMOIZE_SIZE = 500;
    function memoizeCapped$1(func) {
      var result = memoize$1(func, function(key) {
        if (cache2.size === MAX_MEMOIZE_SIZE) {
          cache2.clear();
        }
        return key;
      });
      var cache2 = result.cache;
      return result;
    }
    var _memoizeCapped = memoizeCapped$1;
    var memoizeCapped = _memoizeCapped;
    var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
    var reEscapeChar = /\\(\\)?/g;
    var stringToPath$1 = memoizeCapped(function(string2) {
      var result = [];
      if (string2.charCodeAt(0) === 46) {
        result.push("");
      }
      string2.replace(rePropName, function(match, number2, quote, subString) {
        result.push(quote ? subString.replace(reEscapeChar, "$1") : number2 || match);
      });
      return result;
    });
    var _stringToPath = stringToPath$1;
    function arrayMap$3(array2, iteratee) {
      var index = -1, length = array2 == null ? 0 : array2.length, result = Array(length);
      while (++index < length) {
        result[index] = iteratee(array2[index], index, array2);
      }
      return result;
    }
    var _arrayMap = arrayMap$3;
    var Symbol$4 = _Symbol, arrayMap$2 = _arrayMap, isArray$d = isArray_1, isSymbol$4 = isSymbol_1;
    var INFINITY$3 = 1 / 0;
    var symbolProto$1 = Symbol$4 ? Symbol$4.prototype : void 0, symbolToString = symbolProto$1 ? symbolProto$1.toString : void 0;
    function baseToString$1(value2) {
      if (typeof value2 == "string") {
        return value2;
      }
      if (isArray$d(value2)) {
        return arrayMap$2(value2, baseToString$1) + "";
      }
      if (isSymbol$4(value2)) {
        return symbolToString ? symbolToString.call(value2) : "";
      }
      var result = value2 + "";
      return result == "0" && 1 / value2 == -INFINITY$3 ? "-0" : result;
    }
    var _baseToString = baseToString$1;
    var baseToString = _baseToString;
    function toString$3(value2) {
      return value2 == null ? "" : baseToString(value2);
    }
    var toString_1 = toString$3;
    var isArray$c = isArray_1, isKey$2 = _isKey, stringToPath = _stringToPath, toString$2 = toString_1;
    function castPath$2(value2, object2) {
      if (isArray$c(value2)) {
        return value2;
      }
      return isKey$2(value2, object2) ? [value2] : stringToPath(toString$2(value2));
    }
    var _castPath = castPath$2;
    var isSymbol$3 = isSymbol_1;
    var INFINITY$2 = 1 / 0;
    function toKey$4(value2) {
      if (typeof value2 == "string" || isSymbol$3(value2)) {
        return value2;
      }
      var result = value2 + "";
      return result == "0" && 1 / value2 == -INFINITY$2 ? "-0" : result;
    }
    var _toKey = toKey$4;
    var castPath$1 = _castPath, toKey$3 = _toKey;
    function baseGet$3(object2, path) {
      path = castPath$1(path, object2);
      var index = 0, length = path.length;
      while (object2 != null && index < length) {
        object2 = object2[toKey$3(path[index++])];
      }
      return index && index == length ? object2 : void 0;
    }
    var _baseGet = baseGet$3;
    var baseGet$2 = _baseGet;
    function get$1(object2, path, defaultValue2) {
      var result = object2 == null ? void 0 : baseGet$2(object2, path);
      return result === void 0 ? defaultValue2 : result;
    }
    var get_1 = get$1;
    const get$2 = /* @__PURE__ */ getDefaultExportFromCjs(get_1);
    function isNil(value2) {
      return value2 == null;
    }
    var isNil_1 = isNil;
    const isNil$1 = /* @__PURE__ */ getDefaultExportFromCjs(isNil_1);
    var baseGetTag$6 = _baseGetTag, isArray$b = isArray_1, isObjectLike$7 = isObjectLike_1;
    var stringTag$2 = "[object String]";
    function isString(value2) {
      return typeof value2 == "string" || !isArray$b(value2) && isObjectLike$7(value2) && baseGetTag$6(value2) == stringTag$2;
    }
    var isString_1 = isString;
    const isString$1 = /* @__PURE__ */ getDefaultExportFromCjs(isString_1);
    var reactIs = { exports: {} };
    var reactIs_production_min = {};
    /** @license React v16.13.1
     * react-is.production.min.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    var b = "function" === typeof Symbol && Symbol.for, c$1 = b ? Symbol.for("react.element") : 60103, d = b ? Symbol.for("react.portal") : 60106, e = b ? Symbol.for("react.fragment") : 60107, f = b ? Symbol.for("react.strict_mode") : 60108, g = b ? Symbol.for("react.profiler") : 60114, h = b ? Symbol.for("react.provider") : 60109, k$1 = b ? Symbol.for("react.context") : 60110, l = b ? Symbol.for("react.async_mode") : 60111, m = b ? Symbol.for("react.concurrent_mode") : 60111, n = b ? Symbol.for("react.forward_ref") : 60112, p = b ? Symbol.for("react.suspense") : 60113, q = b ? Symbol.for("react.suspense_list") : 60120, r = b ? Symbol.for("react.memo") : 60115, t = b ? Symbol.for("react.lazy") : 60116, v = b ? Symbol.for("react.block") : 60121, w = b ? Symbol.for("react.fundamental") : 60117, x$1 = b ? Symbol.for("react.responder") : 60118, y$1 = b ? Symbol.for("react.scope") : 60119;
    function z(a2) {
      if ("object" === typeof a2 && null !== a2) {
        var u2 = a2.$$typeof;
        switch (u2) {
          case c$1:
            switch (a2 = a2.type, a2) {
              case l:
              case m:
              case e:
              case g:
              case f:
              case p:
                return a2;
              default:
                switch (a2 = a2 && a2.$$typeof, a2) {
                  case k$1:
                  case n:
                  case t:
                  case r:
                  case h:
                    return a2;
                  default:
                    return u2;
                }
            }
          case d:
            return u2;
        }
      }
    }
    function A(a2) {
      return z(a2) === m;
    }
    reactIs_production_min.AsyncMode = l;
    reactIs_production_min.ConcurrentMode = m;
    reactIs_production_min.ContextConsumer = k$1;
    reactIs_production_min.ContextProvider = h;
    reactIs_production_min.Element = c$1;
    reactIs_production_min.ForwardRef = n;
    reactIs_production_min.Fragment = e;
    reactIs_production_min.Lazy = t;
    reactIs_production_min.Memo = r;
    reactIs_production_min.Portal = d;
    reactIs_production_min.Profiler = g;
    reactIs_production_min.StrictMode = f;
    reactIs_production_min.Suspense = p;
    reactIs_production_min.isAsyncMode = function(a2) {
      return A(a2) || z(a2) === l;
    };
    reactIs_production_min.isConcurrentMode = A;
    reactIs_production_min.isContextConsumer = function(a2) {
      return z(a2) === k$1;
    };
    reactIs_production_min.isContextProvider = function(a2) {
      return z(a2) === h;
    };
    reactIs_production_min.isElement = function(a2) {
      return "object" === typeof a2 && null !== a2 && a2.$$typeof === c$1;
    };
    reactIs_production_min.isForwardRef = function(a2) {
      return z(a2) === n;
    };
    reactIs_production_min.isFragment = function(a2) {
      return z(a2) === e;
    };
    reactIs_production_min.isLazy = function(a2) {
      return z(a2) === t;
    };
    reactIs_production_min.isMemo = function(a2) {
      return z(a2) === r;
    };
    reactIs_production_min.isPortal = function(a2) {
      return z(a2) === d;
    };
    reactIs_production_min.isProfiler = function(a2) {
      return z(a2) === g;
    };
    reactIs_production_min.isStrictMode = function(a2) {
      return z(a2) === f;
    };
    reactIs_production_min.isSuspense = function(a2) {
      return z(a2) === p;
    };
    reactIs_production_min.isValidElementType = function(a2) {
      return "string" === typeof a2 || "function" === typeof a2 || a2 === e || a2 === m || a2 === g || a2 === f || a2 === p || a2 === q || "object" === typeof a2 && null !== a2 && (a2.$$typeof === t || a2.$$typeof === r || a2.$$typeof === h || a2.$$typeof === k$1 || a2.$$typeof === n || a2.$$typeof === w || a2.$$typeof === x$1 || a2.$$typeof === y$1 || a2.$$typeof === v);
    };
    reactIs_production_min.typeOf = z;
    {
      reactIs.exports = reactIs_production_min;
    }
    var reactIsExports = reactIs.exports;
    var baseGetTag$5 = _baseGetTag, isObjectLike$6 = isObjectLike_1;
    var numberTag$2 = "[object Number]";
    function isNumber$2(value2) {
      return typeof value2 == "number" || isObjectLike$6(value2) && baseGetTag$5(value2) == numberTag$2;
    }
    var isNumber_1 = isNumber$2;
    const isNumber$3 = /* @__PURE__ */ getDefaultExportFromCjs(isNumber_1);
    var isNumber$1 = isNumber_1;
    function isNaN$1(value2) {
      return isNumber$1(value2) && value2 != +value2;
    }
    var _isNaN = isNaN$1;
    const isNan = /* @__PURE__ */ getDefaultExportFromCjs(_isNaN);
    var mathSign = function mathSign2(value2) {
      if (value2 === 0) {
        return 0;
      }
      if (value2 > 0) {
        return 1;
      }
      return -1;
    };
    var isPercent = function isPercent2(value2) {
      return isString$1(value2) && value2.indexOf("%") === value2.length - 1;
    };
    var isNumber = function isNumber2(value2) {
      return isNumber$3(value2) && !isNan(value2);
    };
    var isNumOrStr = function isNumOrStr2(value2) {
      return isNumber(value2) || isString$1(value2);
    };
    var idCounter = 0;
    var uniqueId = function uniqueId2(prefix2) {
      var id2 = ++idCounter;
      return "".concat(prefix2 || "").concat(id2);
    };
    var getPercentValue = function getPercentValue2(percent, totalValue) {
      var defaultValue2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;
      var validate = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
      if (!isNumber(percent) && !isString$1(percent)) {
        return defaultValue2;
      }
      var value2;
      if (isPercent(percent)) {
        var index = percent.indexOf("%");
        value2 = totalValue * parseFloat(percent.slice(0, index)) / 100;
      } else {
        value2 = +percent;
      }
      if (isNan(value2)) {
        value2 = defaultValue2;
      }
      if (validate && value2 > totalValue) {
        value2 = totalValue;
      }
      return value2;
    };
    var getAnyElementOfObject = function getAnyElementOfObject2(obj) {
      if (!obj) {
        return null;
      }
      var keys2 = Object.keys(obj);
      if (keys2 && keys2.length) {
        return obj[keys2[0]];
      }
      return null;
    };
    var hasDuplicate = function hasDuplicate2(ary) {
      if (!Array.isArray(ary)) {
        return false;
      }
      var len = ary.length;
      var cache2 = {};
      for (var i2 = 0; i2 < len; i2++) {
        if (!cache2[ary[i2]]) {
          cache2[ary[i2]] = true;
        } else {
          return true;
        }
      }
      return false;
    };
    var interpolateNumber$2 = function interpolateNumber2(numberA, numberB) {
      if (isNumber(numberA) && isNumber(numberB)) {
        return function(t2) {
          return numberA + t2 * (numberB - numberA);
        };
      }
      return function() {
        return numberB;
      };
    };
    function findEntryInArray(ary, specifiedKey, specifiedValue) {
      if (!ary || !ary.length) {
        return null;
      }
      return ary.find(function(entry) {
        return entry && (typeof specifiedKey === "function" ? specifiedKey(entry) : get$2(entry, specifiedKey)) === specifiedValue;
      });
    }
    function shallowEqual(a2, b2) {
      for (var key in a2) {
        if ({}.hasOwnProperty.call(a2, key) && (!{}.hasOwnProperty.call(b2, key) || a2[key] !== b2[key])) {
          return false;
        }
      }
      for (var _key in b2) {
        if ({}.hasOwnProperty.call(b2, _key) && !{}.hasOwnProperty.call(a2, _key)) {
          return false;
        }
      }
      return true;
    }
    function _typeof$D(o2) {
      "@babel/helpers - typeof";
      return _typeof$D = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
        return typeof o3;
      } : function(o3) {
        return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
      }, _typeof$D(o2);
    }
    var SVGContainerPropKeys = ["viewBox", "children"];
    var SVGElementPropKeys = [
      "aria-activedescendant",
      "aria-atomic",
      "aria-autocomplete",
      "aria-busy",
      "aria-checked",
      "aria-colcount",
      "aria-colindex",
      "aria-colspan",
      "aria-controls",
      "aria-current",
      "aria-describedby",
      "aria-details",
      "aria-disabled",
      "aria-errormessage",
      "aria-expanded",
      "aria-flowto",
      "aria-haspopup",
      "aria-hidden",
      "aria-invalid",
      "aria-keyshortcuts",
      "aria-label",
      "aria-labelledby",
      "aria-level",
      "aria-live",
      "aria-modal",
      "aria-multiline",
      "aria-multiselectable",
      "aria-orientation",
      "aria-owns",
      "aria-placeholder",
      "aria-posinset",
      "aria-pressed",
      "aria-readonly",
      "aria-relevant",
      "aria-required",
      "aria-roledescription",
      "aria-rowcount",
      "aria-rowindex",
      "aria-rowspan",
      "aria-selected",
      "aria-setsize",
      "aria-sort",
      "aria-valuemax",
      "aria-valuemin",
      "aria-valuenow",
      "aria-valuetext",
      "className",
      "color",
      "height",
      "id",
      "lang",
      "max",
      "media",
      "method",
      "min",
      "name",
      "style",
      /*
       * removed 'type' SVGElementPropKey because we do not currently use any SVG elements
       * that can use it and it conflicts with the recharts prop 'type'
       * https://github.com/recharts/recharts/pull/3327
       * https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/type
       */
      // 'type',
      "target",
      "width",
      "role",
      "tabIndex",
      "accentHeight",
      "accumulate",
      "additive",
      "alignmentBaseline",
      "allowReorder",
      "alphabetic",
      "amplitude",
      "arabicForm",
      "ascent",
      "attributeName",
      "attributeType",
      "autoReverse",
      "azimuth",
      "baseFrequency",
      "baselineShift",
      "baseProfile",
      "bbox",
      "begin",
      "bias",
      "by",
      "calcMode",
      "capHeight",
      "clip",
      "clipPath",
      "clipPathUnits",
      "clipRule",
      "colorInterpolation",
      "colorInterpolationFilters",
      "colorProfile",
      "colorRendering",
      "contentScriptType",
      "contentStyleType",
      "cursor",
      "cx",
      "cy",
      "d",
      "decelerate",
      "descent",
      "diffuseConstant",
      "direction",
      "display",
      "divisor",
      "dominantBaseline",
      "dur",
      "dx",
      "dy",
      "edgeMode",
      "elevation",
      "enableBackground",
      "end",
      "exponent",
      "externalResourcesRequired",
      "fill",
      "fillOpacity",
      "fillRule",
      "filter",
      "filterRes",
      "filterUnits",
      "floodColor",
      "floodOpacity",
      "focusable",
      "fontFamily",
      "fontSize",
      "fontSizeAdjust",
      "fontStretch",
      "fontStyle",
      "fontVariant",
      "fontWeight",
      "format",
      "from",
      "fx",
      "fy",
      "g1",
      "g2",
      "glyphName",
      "glyphOrientationHorizontal",
      "glyphOrientationVertical",
      "glyphRef",
      "gradientTransform",
      "gradientUnits",
      "hanging",
      "horizAdvX",
      "horizOriginX",
      "href",
      "ideographic",
      "imageRendering",
      "in2",
      "in",
      "intercept",
      "k1",
      "k2",
      "k3",
      "k4",
      "k",
      "kernelMatrix",
      "kernelUnitLength",
      "kerning",
      "keyPoints",
      "keySplines",
      "keyTimes",
      "lengthAdjust",
      "letterSpacing",
      "lightingColor",
      "limitingConeAngle",
      "local",
      "markerEnd",
      "markerHeight",
      "markerMid",
      "markerStart",
      "markerUnits",
      "markerWidth",
      "mask",
      "maskContentUnits",
      "maskUnits",
      "mathematical",
      "mode",
      "numOctaves",
      "offset",
      "opacity",
      "operator",
      "order",
      "orient",
      "orientation",
      "origin",
      "overflow",
      "overlinePosition",
      "overlineThickness",
      "paintOrder",
      "panose1",
      "pathLength",
      "patternContentUnits",
      "patternTransform",
      "patternUnits",
      "pointerEvents",
      "pointsAtX",
      "pointsAtY",
      "pointsAtZ",
      "preserveAlpha",
      "preserveAspectRatio",
      "primitiveUnits",
      "r",
      "radius",
      "refX",
      "refY",
      "renderingIntent",
      "repeatCount",
      "repeatDur",
      "requiredExtensions",
      "requiredFeatures",
      "restart",
      "result",
      "rotate",
      "rx",
      "ry",
      "seed",
      "shapeRendering",
      "slope",
      "spacing",
      "specularConstant",
      "specularExponent",
      "speed",
      "spreadMethod",
      "startOffset",
      "stdDeviation",
      "stemh",
      "stemv",
      "stitchTiles",
      "stopColor",
      "stopOpacity",
      "strikethroughPosition",
      "strikethroughThickness",
      "string",
      "stroke",
      "strokeDasharray",
      "strokeDashoffset",
      "strokeLinecap",
      "strokeLinejoin",
      "strokeMiterlimit",
      "strokeOpacity",
      "strokeWidth",
      "surfaceScale",
      "systemLanguage",
      "tableValues",
      "targetX",
      "targetY",
      "textAnchor",
      "textDecoration",
      "textLength",
      "textRendering",
      "to",
      "transform",
      "u1",
      "u2",
      "underlinePosition",
      "underlineThickness",
      "unicode",
      "unicodeBidi",
      "unicodeRange",
      "unitsPerEm",
      "vAlphabetic",
      "values",
      "vectorEffect",
      "version",
      "vertAdvY",
      "vertOriginX",
      "vertOriginY",
      "vHanging",
      "vIdeographic",
      "viewTarget",
      "visibility",
      "vMathematical",
      "widths",
      "wordSpacing",
      "writingMode",
      "x1",
      "x2",
      "x",
      "xChannelSelector",
      "xHeight",
      "xlinkActuate",
      "xlinkArcrole",
      "xlinkHref",
      "xlinkRole",
      "xlinkShow",
      "xlinkTitle",
      "xlinkType",
      "xmlBase",
      "xmlLang",
      "xmlns",
      "xmlnsXlink",
      "xmlSpace",
      "y1",
      "y2",
      "y",
      "yChannelSelector",
      "z",
      "zoomAndPan",
      "ref",
      "key",
      "angle"
    ];
    var PolyElementKeys = ["points", "pathLength"];
    var FilteredElementKeyMap = {
      svg: SVGContainerPropKeys,
      polygon: PolyElementKeys,
      polyline: PolyElementKeys
    };
    var EventKeys = ["dangerouslySetInnerHTML", "onCopy", "onCopyCapture", "onCut", "onCutCapture", "onPaste", "onPasteCapture", "onCompositionEnd", "onCompositionEndCapture", "onCompositionStart", "onCompositionStartCapture", "onCompositionUpdate", "onCompositionUpdateCapture", "onFocus", "onFocusCapture", "onBlur", "onBlurCapture", "onChange", "onChangeCapture", "onBeforeInput", "onBeforeInputCapture", "onInput", "onInputCapture", "onReset", "onResetCapture", "onSubmit", "onSubmitCapture", "onInvalid", "onInvalidCapture", "onLoad", "onLoadCapture", "onError", "onErrorCapture", "onKeyDown", "onKeyDownCapture", "onKeyPress", "onKeyPressCapture", "onKeyUp", "onKeyUpCapture", "onAbort", "onAbortCapture", "onCanPlay", "onCanPlayCapture", "onCanPlayThrough", "onCanPlayThroughCapture", "onDurationChange", "onDurationChangeCapture", "onEmptied", "onEmptiedCapture", "onEncrypted", "onEncryptedCapture", "onEnded", "onEndedCapture", "onLoadedData", "onLoadedDataCapture", "onLoadedMetadata", "onLoadedMetadataCapture", "onLoadStart", "onLoadStartCapture", "onPause", "onPauseCapture", "onPlay", "onPlayCapture", "onPlaying", "onPlayingCapture", "onProgress", "onProgressCapture", "onRateChange", "onRateChangeCapture", "onSeeked", "onSeekedCapture", "onSeeking", "onSeekingCapture", "onStalled", "onStalledCapture", "onSuspend", "onSuspendCapture", "onTimeUpdate", "onTimeUpdateCapture", "onVolumeChange", "onVolumeChangeCapture", "onWaiting", "onWaitingCapture", "onAuxClick", "onAuxClickCapture", "onClick", "onClickCapture", "onContextMenu", "onContextMenuCapture", "onDoubleClick", "onDoubleClickCapture", "onDrag", "onDragCapture", "onDragEnd", "onDragEndCapture", "onDragEnter", "onDragEnterCapture", "onDragExit", "onDragExitCapture", "onDragLeave", "onDragLeaveCapture", "onDragOver", "onDragOverCapture", "onDragStart", "onDragStartCapture", "onDrop", "onDropCapture", "onMouseDown", "onMouseDownCapture", "onMouseEnter", "onMouseLeave", "onMouseMove", "onMouseMoveCapture", "onMouseOut", "onMouseOutCapture", "onMouseOver", "onMouseOverCapture", "onMouseUp", "onMouseUpCapture", "onSelect", "onSelectCapture", "onTouchCancel", "onTouchCancelCapture", "onTouchEnd", "onTouchEndCapture", "onTouchMove", "onTouchMoveCapture", "onTouchStart", "onTouchStartCapture", "onPointerDown", "onPointerDownCapture", "onPointerMove", "onPointerMoveCapture", "onPointerUp", "onPointerUpCapture", "onPointerCancel", "onPointerCancelCapture", "onPointerEnter", "onPointerEnterCapture", "onPointerLeave", "onPointerLeaveCapture", "onPointerOver", "onPointerOverCapture", "onPointerOut", "onPointerOutCapture", "onGotPointerCapture", "onGotPointerCaptureCapture", "onLostPointerCapture", "onLostPointerCaptureCapture", "onScroll", "onScrollCapture", "onWheel", "onWheelCapture", "onAnimationStart", "onAnimationStartCapture", "onAnimationEnd", "onAnimationEndCapture", "onAnimationIteration", "onAnimationIterationCapture", "onTransitionEnd", "onTransitionEndCapture"];
    var adaptEventHandlers = function adaptEventHandlers2(props, newHandler) {
      if (!props || typeof props === "function" || typeof props === "boolean") {
        return null;
      }
      var inputProps = props;
      if (/* @__PURE__ */ reactExports.isValidElement(props)) {
        inputProps = props.props;
      }
      if (!isObject$8(inputProps)) {
        return null;
      }
      var out = {};
      Object.keys(inputProps).forEach(function(key) {
        if (EventKeys.includes(key)) {
          out[key] = newHandler || function(e3) {
            return inputProps[key](inputProps, e3);
          };
        }
      });
      return out;
    };
    var getEventHandlerOfChild = function getEventHandlerOfChild2(originalHandler, data, index) {
      return function(e3) {
        originalHandler(data, index, e3);
        return null;
      };
    };
    var adaptEventsOfChild = function adaptEventsOfChild2(props, data, index) {
      if (!isObject$8(props) || _typeof$D(props) !== "object") {
        return null;
      }
      var out = null;
      Object.keys(props).forEach(function(key) {
        var item = props[key];
        if (EventKeys.includes(key) && typeof item === "function") {
          if (!out)
            out = {};
          out[key] = getEventHandlerOfChild(item, data, index);
        }
      });
      return out;
    };
    var _excluded$g = ["children"], _excluded2$5 = ["children"];
    function _objectWithoutProperties$g(source, excluded) {
      if (source == null)
        return {};
      var target = _objectWithoutPropertiesLoose$g(source, excluded);
      var key, i2;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i2 = 0; i2 < sourceSymbolKeys.length; i2++) {
          key = sourceSymbolKeys[i2];
          if (excluded.indexOf(key) >= 0)
            continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key))
            continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose$g(source, excluded) {
      if (source == null)
        return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i2;
      for (i2 = 0; i2 < sourceKeys.length; i2++) {
        key = sourceKeys[i2];
        if (excluded.indexOf(key) >= 0)
          continue;
        target[key] = source[key];
      }
      return target;
    }
    var REACT_BROWSER_EVENT_MAP = {
      click: "onClick",
      mousedown: "onMouseDown",
      mouseup: "onMouseUp",
      mouseover: "onMouseOver",
      mousemove: "onMouseMove",
      mouseout: "onMouseOut",
      mouseenter: "onMouseEnter",
      mouseleave: "onMouseLeave",
      touchcancel: "onTouchCancel",
      touchend: "onTouchEnd",
      touchmove: "onTouchMove",
      touchstart: "onTouchStart"
    };
    var getDisplayName = function getDisplayName2(Comp) {
      if (typeof Comp === "string") {
        return Comp;
      }
      if (!Comp) {
        return "";
      }
      return Comp.displayName || Comp.name || "Component";
    };
    var lastChildren = null;
    var lastResult = null;
    var toArray = function toArray2(children) {
      if (children === lastChildren && Array.isArray(lastResult)) {
        return lastResult;
      }
      var result = [];
      reactExports.Children.forEach(children, function(child) {
        if (isNil$1(child))
          return;
        if (reactIsExports.isFragment(child)) {
          result = result.concat(toArray2(child.props.children));
        } else {
          result.push(child);
        }
      });
      lastResult = result;
      lastChildren = children;
      return result;
    };
    function findAllByType(children, type) {
      var result = [];
      var types = [];
      if (Array.isArray(type)) {
        types = type.map(function(t2) {
          return getDisplayName(t2);
        });
      } else {
        types = [getDisplayName(type)];
      }
      toArray(children).forEach(function(child) {
        var childType = get$2(child, "type.displayName") || get$2(child, "type.name");
        if (types.indexOf(childType) !== -1) {
          result.push(child);
        }
      });
      return result;
    }
    function findChildByType(children, type) {
      var result = findAllByType(children, type);
      return result && result[0];
    }
    var validateWidthHeight = function validateWidthHeight2(el2) {
      if (!el2 || !el2.props) {
        return false;
      }
      var _el$props = el2.props, width = _el$props.width, height = _el$props.height;
      if (!isNumber(width) || width <= 0 || !isNumber(height) || height <= 0) {
        return false;
      }
      return true;
    };
    var SVG_TAGS = ["a", "altGlyph", "altGlyphDef", "altGlyphItem", "animate", "animateColor", "animateMotion", "animateTransform", "circle", "clipPath", "color-profile", "cursor", "defs", "desc", "ellipse", "feBlend", "feColormatrix", "feComponentTransfer", "feComposite", "feConvolveMatrix", "feDiffuseLighting", "feDisplacementMap", "feDistantLight", "feFlood", "feFuncA", "feFuncB", "feFuncG", "feFuncR", "feGaussianBlur", "feImage", "feMerge", "feMergeNode", "feMorphology", "feOffset", "fePointLight", "feSpecularLighting", "feSpotLight", "feTile", "feTurbulence", "filter", "font", "font-face", "font-face-format", "font-face-name", "font-face-url", "foreignObject", "g", "glyph", "glyphRef", "hkern", "image", "line", "lineGradient", "marker", "mask", "metadata", "missing-glyph", "mpath", "path", "pattern", "polygon", "polyline", "radialGradient", "rect", "script", "set", "stop", "style", "svg", "switch", "symbol", "text", "textPath", "title", "tref", "tspan", "use", "view", "vkern"];
    var isSvgElement = function isSvgElement2(child) {
      return child && child.type && isString$1(child.type) && SVG_TAGS.indexOf(child.type) >= 0;
    };
    var isValidSpreadableProp = function isValidSpreadableProp2(property2, key, includeEvents, svgElementType) {
      var _FilteredElementKeyMa;
      var matchingElementTypeKeys = (_FilteredElementKeyMa = FilteredElementKeyMap === null || FilteredElementKeyMap === void 0 ? void 0 : FilteredElementKeyMap[svgElementType]) !== null && _FilteredElementKeyMa !== void 0 ? _FilteredElementKeyMa : [];
      return !isFunction$4(property2) && (svgElementType && matchingElementTypeKeys.includes(key) || SVGElementPropKeys.includes(key)) || includeEvents && EventKeys.includes(key);
    };
    var filterProps = function filterProps2(props, includeEvents, svgElementType) {
      if (!props || typeof props === "function" || typeof props === "boolean") {
        return null;
      }
      var inputProps = props;
      if (/* @__PURE__ */ reactExports.isValidElement(props)) {
        inputProps = props.props;
      }
      if (!isObject$8(inputProps)) {
        return null;
      }
      var out = {};
      Object.keys(inputProps).forEach(function(key) {
        var _inputProps;
        if (isValidSpreadableProp((_inputProps = inputProps) === null || _inputProps === void 0 ? void 0 : _inputProps[key], key, includeEvents, svgElementType)) {
          out[key] = inputProps[key];
        }
      });
      return out;
    };
    var isChildrenEqual = function isChildrenEqual2(nextChildren, prevChildren) {
      if (nextChildren === prevChildren) {
        return true;
      }
      var count = reactExports.Children.count(nextChildren);
      if (count !== reactExports.Children.count(prevChildren)) {
        return false;
      }
      if (count === 0) {
        return true;
      }
      if (count === 1) {
        return isSingleChildEqual(Array.isArray(nextChildren) ? nextChildren[0] : nextChildren, Array.isArray(prevChildren) ? prevChildren[0] : prevChildren);
      }
      for (var i2 = 0; i2 < count; i2++) {
        var nextChild = nextChildren[i2];
        var prevChild = prevChildren[i2];
        if (Array.isArray(nextChild) || Array.isArray(prevChild)) {
          if (!isChildrenEqual2(nextChild, prevChild)) {
            return false;
          }
        } else if (!isSingleChildEqual(nextChild, prevChild)) {
          return false;
        }
      }
      return true;
    };
    var isSingleChildEqual = function isSingleChildEqual2(nextChild, prevChild) {
      if (isNil$1(nextChild) && isNil$1(prevChild)) {
        return true;
      }
      if (!isNil$1(nextChild) && !isNil$1(prevChild)) {
        var _ref = nextChild.props || {}, nextChildren = _ref.children, nextProps = _objectWithoutProperties$g(_ref, _excluded$g);
        var _ref2 = prevChild.props || {}, prevChildren = _ref2.children, prevProps = _objectWithoutProperties$g(_ref2, _excluded2$5);
        if (nextChildren && prevChildren) {
          return shallowEqual(nextProps, prevProps) && isChildrenEqual(nextChildren, prevChildren);
        }
        if (!nextChildren && !prevChildren) {
          return shallowEqual(nextProps, prevProps);
        }
        return false;
      }
      return false;
    };
    var renderByOrder = function renderByOrder2(children, renderMap) {
      var elements = [];
      var record = {};
      toArray(children).forEach(function(child, index) {
        if (isSvgElement(child)) {
          elements.push(child);
        } else if (child) {
          var displayName = getDisplayName(child.type);
          var _ref3 = renderMap[displayName] || {}, handler = _ref3.handler, once = _ref3.once;
          if (handler && (!once || !record[displayName])) {
            var results = handler(child, displayName, index);
            elements.push(results);
            record[displayName] = true;
          }
        }
      });
      return elements;
    };
    var getReactEventByType = function getReactEventByType2(e3) {
      var type = e3 && e3.type;
      if (type && REACT_BROWSER_EVENT_MAP[type]) {
        return REACT_BROWSER_EVENT_MAP[type];
      }
      return null;
    };
    var parseChildIndex = function parseChildIndex2(child, children) {
      return toArray(children).indexOf(child);
    };
    var _excluded$f = ["children", "width", "height", "viewBox", "className", "style", "title", "desc"];
    function _extends$p() {
      _extends$p = Object.assign ? Object.assign.bind() : function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends$p.apply(this, arguments);
    }
    function _objectWithoutProperties$f(source, excluded) {
      if (source == null)
        return {};
      var target = _objectWithoutPropertiesLoose$f(source, excluded);
      var key, i2;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i2 = 0; i2 < sourceSymbolKeys.length; i2++) {
          key = sourceSymbolKeys[i2];
          if (excluded.indexOf(key) >= 0)
            continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key))
            continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose$f(source, excluded) {
      if (source == null)
        return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i2;
      for (i2 = 0; i2 < sourceKeys.length; i2++) {
        key = sourceKeys[i2];
        if (excluded.indexOf(key) >= 0)
          continue;
        target[key] = source[key];
      }
      return target;
    }
    function Surface(props) {
      var children = props.children, width = props.width, height = props.height, viewBox = props.viewBox, className = props.className, style = props.style, title = props.title, desc = props.desc, others = _objectWithoutProperties$f(props, _excluded$f);
      var svgView = viewBox || {
        width,
        height,
        x: 0,
        y: 0
      };
      var layerClass = clsx("recharts-surface", className);
      return /* @__PURE__ */ React$1.createElement("svg", _extends$p({}, filterProps(others, true, "svg"), {
        className: layerClass,
        width,
        height,
        style,
        viewBox: "".concat(svgView.x, " ").concat(svgView.y, " ").concat(svgView.width, " ").concat(svgView.height)
      }), /* @__PURE__ */ React$1.createElement("title", null, title), /* @__PURE__ */ React$1.createElement("desc", null, desc), children);
    }
    var _excluded$e = ["children", "className"];
    function _extends$o() {
      _extends$o = Object.assign ? Object.assign.bind() : function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends$o.apply(this, arguments);
    }
    function _objectWithoutProperties$e(source, excluded) {
      if (source == null)
        return {};
      var target = _objectWithoutPropertiesLoose$e(source, excluded);
      var key, i2;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i2 = 0; i2 < sourceSymbolKeys.length; i2++) {
          key = sourceSymbolKeys[i2];
          if (excluded.indexOf(key) >= 0)
            continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key))
            continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose$e(source, excluded) {
      if (source == null)
        return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i2;
      for (i2 = 0; i2 < sourceKeys.length; i2++) {
        key = sourceKeys[i2];
        if (excluded.indexOf(key) >= 0)
          continue;
        target[key] = source[key];
      }
      return target;
    }
    var Layer = /* @__PURE__ */ React$1.forwardRef(function(props, ref) {
      var children = props.children, className = props.className, others = _objectWithoutProperties$e(props, _excluded$e);
      var layerClass = clsx("recharts-layer", className);
      return /* @__PURE__ */ React$1.createElement("g", _extends$o({
        className: layerClass
      }, filterProps(others, true), {
        ref
      }), children);
    });
    var warn = function warn2(condition, format2) {
      for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
        args[_key - 2] = arguments[_key];
      }
    };
    function baseSlice$1(array2, start, end) {
      var index = -1, length = array2.length;
      if (start < 0) {
        start = -start > length ? 0 : length + start;
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : end - start >>> 0;
      start >>>= 0;
      var result = Array(length);
      while (++index < length) {
        result[index] = array2[index + start];
      }
      return result;
    }
    var _baseSlice = baseSlice$1;
    var baseSlice = _baseSlice;
    function castSlice$1(array2, start, end) {
      var length = array2.length;
      end = end === void 0 ? length : end;
      return !start && end >= length ? array2 : baseSlice(array2, start, end);
    }
    var _castSlice = castSlice$1;
    var rsAstralRange$1 = "\\ud800-\\udfff", rsComboMarksRange$1 = "\\u0300-\\u036f", reComboHalfMarksRange$1 = "\\ufe20-\\ufe2f", rsComboSymbolsRange$1 = "\\u20d0-\\u20ff", rsComboRange$1 = rsComboMarksRange$1 + reComboHalfMarksRange$1 + rsComboSymbolsRange$1, rsVarRange$1 = "\\ufe0e\\ufe0f";
    var rsZWJ$1 = "\\u200d";
    var reHasUnicode = RegExp("[" + rsZWJ$1 + rsAstralRange$1 + rsComboRange$1 + rsVarRange$1 + "]");
    function hasUnicode$2(string2) {
      return reHasUnicode.test(string2);
    }
    var _hasUnicode = hasUnicode$2;
    function asciiToArray$1(string2) {
      return string2.split("");
    }
    var _asciiToArray = asciiToArray$1;
    var rsAstralRange = "\\ud800-\\udfff", rsComboMarksRange = "\\u0300-\\u036f", reComboHalfMarksRange = "\\ufe20-\\ufe2f", rsComboSymbolsRange = "\\u20d0-\\u20ff", rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsVarRange = "\\ufe0e\\ufe0f";
    var rsAstral = "[" + rsAstralRange + "]", rsCombo = "[" + rsComboRange + "]", rsFitz = "\\ud83c[\\udffb-\\udfff]", rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")", rsNonAstral = "[^" + rsAstralRange + "]", rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}", rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]", rsZWJ = "\\u200d";
    var reOptMod = rsModifier + "?", rsOptVar = "[" + rsVarRange + "]?", rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*", rsSeq = rsOptVar + reOptMod + rsOptJoin, rsSymbol = "(?:" + [rsNonAstral + rsCombo + "?", rsCombo, rsRegional, rsSurrPair, rsAstral].join("|") + ")";
    var reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");
    function unicodeToArray$1(string2) {
      return string2.match(reUnicode) || [];
    }
    var _unicodeToArray = unicodeToArray$1;
    var asciiToArray = _asciiToArray, hasUnicode$1 = _hasUnicode, unicodeToArray = _unicodeToArray;
    function stringToArray$1(string2) {
      return hasUnicode$1(string2) ? unicodeToArray(string2) : asciiToArray(string2);
    }
    var _stringToArray = stringToArray$1;
    var castSlice = _castSlice, hasUnicode = _hasUnicode, stringToArray = _stringToArray, toString$1 = toString_1;
    function createCaseFirst$1(methodName) {
      return function(string2) {
        string2 = toString$1(string2);
        var strSymbols = hasUnicode(string2) ? stringToArray(string2) : void 0;
        var chr = strSymbols ? strSymbols[0] : string2.charAt(0);
        var trailing = strSymbols ? castSlice(strSymbols, 1).join("") : string2.slice(1);
        return chr[methodName]() + trailing;
      };
    }
    var _createCaseFirst = createCaseFirst$1;
    var createCaseFirst = _createCaseFirst;
    var upperFirst = createCaseFirst("toUpperCase");
    var upperFirst_1 = upperFirst;
    const upperFirst$1 = /* @__PURE__ */ getDefaultExportFromCjs(upperFirst_1);
    function constant$3(x2) {
      return function constant2() {
        return x2;
      };
    }
    const cos = Math.cos;
    const sin = Math.sin;
    const sqrt$1 = Math.sqrt;
    const pi$1 = Math.PI;
    const tau$1 = 2 * pi$1;
    const pi = Math.PI, tau = 2 * pi, epsilon = 1e-6, tauEpsilon = tau - epsilon;
    function append(strings) {
      this._ += strings[0];
      for (let i2 = 1, n2 = strings.length; i2 < n2; ++i2) {
        this._ += arguments[i2] + strings[i2];
      }
    }
    function appendRound(digits) {
      let d2 = Math.floor(digits);
      if (!(d2 >= 0))
        throw new Error(`invalid digits: ${digits}`);
      if (d2 > 15)
        return append;
      const k2 = 10 ** d2;
      return function(strings) {
        this._ += strings[0];
        for (let i2 = 1, n2 = strings.length; i2 < n2; ++i2) {
          this._ += Math.round(arguments[i2] * k2) / k2 + strings[i2];
        }
      };
    }
    class Path {
      constructor(digits) {
        this._x0 = this._y0 = // start of current subpath
        this._x1 = this._y1 = null;
        this._ = "";
        this._append = digits == null ? append : appendRound(digits);
      }
      moveTo(x2, y2) {
        this._append`M${this._x0 = this._x1 = +x2},${this._y0 = this._y1 = +y2}`;
      }
      closePath() {
        if (this._x1 !== null) {
          this._x1 = this._x0, this._y1 = this._y0;
          this._append`Z`;
        }
      }
      lineTo(x2, y2) {
        this._append`L${this._x1 = +x2},${this._y1 = +y2}`;
      }
      quadraticCurveTo(x1, y1, x2, y2) {
        this._append`Q${+x1},${+y1},${this._x1 = +x2},${this._y1 = +y2}`;
      }
      bezierCurveTo(x1, y1, x2, y2, x3, y3) {
        this._append`C${+x1},${+y1},${+x2},${+y2},${this._x1 = +x3},${this._y1 = +y3}`;
      }
      arcTo(x1, y1, x2, y2, r2) {
        x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r2 = +r2;
        if (r2 < 0)
          throw new Error(`negative radius: ${r2}`);
        let x0 = this._x1, y0 = this._y1, x21 = x2 - x1, y21 = y2 - y1, x01 = x0 - x1, y01 = y0 - y1, l01_2 = x01 * x01 + y01 * y01;
        if (this._x1 === null) {
          this._append`M${this._x1 = x1},${this._y1 = y1}`;
        } else if (!(l01_2 > epsilon))
          ;
        else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon) || !r2) {
          this._append`L${this._x1 = x1},${this._y1 = y1}`;
        } else {
          let x20 = x2 - x0, y20 = y2 - y0, l21_2 = x21 * x21 + y21 * y21, l20_2 = x20 * x20 + y20 * y20, l21 = Math.sqrt(l21_2), l01 = Math.sqrt(l01_2), l2 = r2 * Math.tan((pi - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2), t01 = l2 / l01, t21 = l2 / l21;
          if (Math.abs(t01 - 1) > epsilon) {
            this._append`L${x1 + t01 * x01},${y1 + t01 * y01}`;
          }
          this._append`A${r2},${r2},0,0,${+(y01 * x20 > x01 * y20)},${this._x1 = x1 + t21 * x21},${this._y1 = y1 + t21 * y21}`;
        }
      }
      arc(x2, y2, r2, a0, a1, ccw) {
        x2 = +x2, y2 = +y2, r2 = +r2, ccw = !!ccw;
        if (r2 < 0)
          throw new Error(`negative radius: ${r2}`);
        let dx = r2 * Math.cos(a0), dy = r2 * Math.sin(a0), x0 = x2 + dx, y0 = y2 + dy, cw = 1 ^ ccw, da2 = ccw ? a0 - a1 : a1 - a0;
        if (this._x1 === null) {
          this._append`M${x0},${y0}`;
        } else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) {
          this._append`L${x0},${y0}`;
        }
        if (!r2)
          return;
        if (da2 < 0)
          da2 = da2 % tau + tau;
        if (da2 > tauEpsilon) {
          this._append`A${r2},${r2},0,1,${cw},${x2 - dx},${y2 - dy}A${r2},${r2},0,1,${cw},${this._x1 = x0},${this._y1 = y0}`;
        } else if (da2 > epsilon) {
          this._append`A${r2},${r2},0,${+(da2 >= pi)},${cw},${this._x1 = x2 + r2 * Math.cos(a1)},${this._y1 = y2 + r2 * Math.sin(a1)}`;
        }
      }
      rect(x2, y2, w2, h2) {
        this._append`M${this._x0 = this._x1 = +x2},${this._y0 = this._y1 = +y2}h${w2 = +w2}v${+h2}h${-w2}Z`;
      }
      toString() {
        return this._;
      }
    }
    function withPath(shape) {
      let digits = 3;
      shape.digits = function(_2) {
        if (!arguments.length)
          return digits;
        if (_2 == null) {
          digits = null;
        } else {
          const d2 = Math.floor(_2);
          if (!(d2 >= 0))
            throw new RangeError(`invalid digits: ${_2}`);
          digits = d2;
        }
        return shape;
      };
      return () => new Path(digits);
    }
    function array(x2) {
      return typeof x2 === "object" && "length" in x2 ? x2 : Array.from(x2);
    }
    function Linear(context) {
      this._context = context;
    }
    Linear.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._point = 0;
      },
      lineEnd: function() {
        if (this._line || this._line !== 0 && this._point === 1)
          this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x2, y2) {
        x2 = +x2, y2 = +y2;
        switch (this._point) {
          case 0:
            this._point = 1;
            this._line ? this._context.lineTo(x2, y2) : this._context.moveTo(x2, y2);
            break;
          case 1:
            this._point = 2;
          default:
            this._context.lineTo(x2, y2);
            break;
        }
      }
    };
    function curveLinear(context) {
      return new Linear(context);
    }
    function x(p2) {
      return p2[0];
    }
    function y(p2) {
      return p2[1];
    }
    function shapeLine(x$12, y$12) {
      var defined2 = constant$3(true), context = null, curve = curveLinear, output = null, path = withPath(line);
      x$12 = typeof x$12 === "function" ? x$12 : x$12 === void 0 ? x : constant$3(x$12);
      y$12 = typeof y$12 === "function" ? y$12 : y$12 === void 0 ? y : constant$3(y$12);
      function line(data) {
        var i2, n2 = (data = array(data)).length, d2, defined0 = false, buffer;
        if (context == null)
          output = curve(buffer = path());
        for (i2 = 0; i2 <= n2; ++i2) {
          if (!(i2 < n2 && defined2(d2 = data[i2], i2, data)) === defined0) {
            if (defined0 = !defined0)
              output.lineStart();
            else
              output.lineEnd();
          }
          if (defined0)
            output.point(+x$12(d2, i2, data), +y$12(d2, i2, data));
        }
        if (buffer)
          return output = null, buffer + "" || null;
      }
      line.x = function(_2) {
        return arguments.length ? (x$12 = typeof _2 === "function" ? _2 : constant$3(+_2), line) : x$12;
      };
      line.y = function(_2) {
        return arguments.length ? (y$12 = typeof _2 === "function" ? _2 : constant$3(+_2), line) : y$12;
      };
      line.defined = function(_2) {
        return arguments.length ? (defined2 = typeof _2 === "function" ? _2 : constant$3(!!_2), line) : defined2;
      };
      line.curve = function(_2) {
        return arguments.length ? (curve = _2, context != null && (output = curve(context)), line) : curve;
      };
      line.context = function(_2) {
        return arguments.length ? (_2 == null ? context = output = null : output = curve(context = _2), line) : context;
      };
      return line;
    }
    function shapeArea(x0, y0, y1) {
      var x1 = null, defined2 = constant$3(true), context = null, curve = curveLinear, output = null, path = withPath(area);
      x0 = typeof x0 === "function" ? x0 : x0 === void 0 ? x : constant$3(+x0);
      y0 = typeof y0 === "function" ? y0 : y0 === void 0 ? constant$3(0) : constant$3(+y0);
      y1 = typeof y1 === "function" ? y1 : y1 === void 0 ? y : constant$3(+y1);
      function area(data) {
        var i2, j2, k2, n2 = (data = array(data)).length, d2, defined0 = false, buffer, x0z = new Array(n2), y0z = new Array(n2);
        if (context == null)
          output = curve(buffer = path());
        for (i2 = 0; i2 <= n2; ++i2) {
          if (!(i2 < n2 && defined2(d2 = data[i2], i2, data)) === defined0) {
            if (defined0 = !defined0) {
              j2 = i2;
              output.areaStart();
              output.lineStart();
            } else {
              output.lineEnd();
              output.lineStart();
              for (k2 = i2 - 1; k2 >= j2; --k2) {
                output.point(x0z[k2], y0z[k2]);
              }
              output.lineEnd();
              output.areaEnd();
            }
          }
          if (defined0) {
            x0z[i2] = +x0(d2, i2, data), y0z[i2] = +y0(d2, i2, data);
            output.point(x1 ? +x1(d2, i2, data) : x0z[i2], y1 ? +y1(d2, i2, data) : y0z[i2]);
          }
        }
        if (buffer)
          return output = null, buffer + "" || null;
      }
      function arealine() {
        return shapeLine().defined(defined2).curve(curve).context(context);
      }
      area.x = function(_2) {
        return arguments.length ? (x0 = typeof _2 === "function" ? _2 : constant$3(+_2), x1 = null, area) : x0;
      };
      area.x0 = function(_2) {
        return arguments.length ? (x0 = typeof _2 === "function" ? _2 : constant$3(+_2), area) : x0;
      };
      area.x1 = function(_2) {
        return arguments.length ? (x1 = _2 == null ? null : typeof _2 === "function" ? _2 : constant$3(+_2), area) : x1;
      };
      area.y = function(_2) {
        return arguments.length ? (y0 = typeof _2 === "function" ? _2 : constant$3(+_2), y1 = null, area) : y0;
      };
      area.y0 = function(_2) {
        return arguments.length ? (y0 = typeof _2 === "function" ? _2 : constant$3(+_2), area) : y0;
      };
      area.y1 = function(_2) {
        return arguments.length ? (y1 = _2 == null ? null : typeof _2 === "function" ? _2 : constant$3(+_2), area) : y1;
      };
      area.lineX0 = area.lineY0 = function() {
        return arealine().x(x0).y(y0);
      };
      area.lineY1 = function() {
        return arealine().x(x0).y(y1);
      };
      area.lineX1 = function() {
        return arealine().x(x1).y(y0);
      };
      area.defined = function(_2) {
        return arguments.length ? (defined2 = typeof _2 === "function" ? _2 : constant$3(!!_2), area) : defined2;
      };
      area.curve = function(_2) {
        return arguments.length ? (curve = _2, context != null && (output = curve(context)), area) : curve;
      };
      area.context = function(_2) {
        return arguments.length ? (_2 == null ? context = output = null : output = curve(context = _2), area) : context;
      };
      return area;
    }
    class Bump {
      constructor(context, x2) {
        this._context = context;
        this._x = x2;
      }
      areaStart() {
        this._line = 0;
      }
      areaEnd() {
        this._line = NaN;
      }
      lineStart() {
        this._point = 0;
      }
      lineEnd() {
        if (this._line || this._line !== 0 && this._point === 1)
          this._context.closePath();
        this._line = 1 - this._line;
      }
      point(x2, y2) {
        x2 = +x2, y2 = +y2;
        switch (this._point) {
          case 0: {
            this._point = 1;
            if (this._line)
              this._context.lineTo(x2, y2);
            else
              this._context.moveTo(x2, y2);
            break;
          }
          case 1:
            this._point = 2;
          default: {
            if (this._x)
              this._context.bezierCurveTo(this._x0 = (this._x0 + x2) / 2, this._y0, this._x0, y2, x2, y2);
            else
              this._context.bezierCurveTo(this._x0, this._y0 = (this._y0 + y2) / 2, x2, this._y0, x2, y2);
            break;
          }
        }
        this._x0 = x2, this._y0 = y2;
      }
    }
    function bumpX(context) {
      return new Bump(context, true);
    }
    function bumpY(context) {
      return new Bump(context, false);
    }
    const symbolCircle = {
      draw(context, size) {
        const r2 = sqrt$1(size / pi$1);
        context.moveTo(r2, 0);
        context.arc(0, 0, r2, 0, tau$1);
      }
    };
    const symbolCross = {
      draw(context, size) {
        const r2 = sqrt$1(size / 5) / 2;
        context.moveTo(-3 * r2, -r2);
        context.lineTo(-r2, -r2);
        context.lineTo(-r2, -3 * r2);
        context.lineTo(r2, -3 * r2);
        context.lineTo(r2, -r2);
        context.lineTo(3 * r2, -r2);
        context.lineTo(3 * r2, r2);
        context.lineTo(r2, r2);
        context.lineTo(r2, 3 * r2);
        context.lineTo(-r2, 3 * r2);
        context.lineTo(-r2, r2);
        context.lineTo(-3 * r2, r2);
        context.closePath();
      }
    };
    const tan30 = sqrt$1(1 / 3);
    const tan30_2 = tan30 * 2;
    const symbolDiamond = {
      draw(context, size) {
        const y2 = sqrt$1(size / tan30_2);
        const x2 = y2 * tan30;
        context.moveTo(0, -y2);
        context.lineTo(x2, 0);
        context.lineTo(0, y2);
        context.lineTo(-x2, 0);
        context.closePath();
      }
    };
    const symbolSquare = {
      draw(context, size) {
        const w2 = sqrt$1(size);
        const x2 = -w2 / 2;
        context.rect(x2, x2, w2, w2);
      }
    };
    const ka = 0.8908130915292852;
    const kr = sin(pi$1 / 10) / sin(7 * pi$1 / 10);
    const kx = sin(tau$1 / 10) * kr;
    const ky = -cos(tau$1 / 10) * kr;
    const symbolStar = {
      draw(context, size) {
        const r2 = sqrt$1(size * ka);
        const x2 = kx * r2;
        const y2 = ky * r2;
        context.moveTo(0, -r2);
        context.lineTo(x2, y2);
        for (let i2 = 1; i2 < 5; ++i2) {
          const a2 = tau$1 * i2 / 5;
          const c2 = cos(a2);
          const s2 = sin(a2);
          context.lineTo(s2 * r2, -c2 * r2);
          context.lineTo(c2 * x2 - s2 * y2, s2 * x2 + c2 * y2);
        }
        context.closePath();
      }
    };
    const sqrt3 = sqrt$1(3);
    const symbolTriangle = {
      draw(context, size) {
        const y2 = -sqrt$1(size / (sqrt3 * 3));
        context.moveTo(0, y2 * 2);
        context.lineTo(-sqrt3 * y2, -y2);
        context.lineTo(sqrt3 * y2, -y2);
        context.closePath();
      }
    };
    const c = -0.5;
    const s = sqrt$1(3) / 2;
    const k = 1 / sqrt$1(12);
    const a = (k / 2 + 1) * 3;
    const symbolWye = {
      draw(context, size) {
        const r2 = sqrt$1(size / a);
        const x0 = r2 / 2, y0 = r2 * k;
        const x1 = x0, y1 = r2 * k + r2;
        const x2 = -x1, y2 = y1;
        context.moveTo(x0, y0);
        context.lineTo(x1, y1);
        context.lineTo(x2, y2);
        context.lineTo(c * x0 - s * y0, s * x0 + c * y0);
        context.lineTo(c * x1 - s * y1, s * x1 + c * y1);
        context.lineTo(c * x2 - s * y2, s * x2 + c * y2);
        context.lineTo(c * x0 + s * y0, c * y0 - s * x0);
        context.lineTo(c * x1 + s * y1, c * y1 - s * x1);
        context.lineTo(c * x2 + s * y2, c * y2 - s * x2);
        context.closePath();
      }
    };
    function Symbol$3(type, size) {
      let context = null, path = withPath(symbol);
      type = typeof type === "function" ? type : constant$3(type || symbolCircle);
      size = typeof size === "function" ? size : constant$3(size === void 0 ? 64 : +size);
      function symbol() {
        let buffer;
        if (!context)
          context = buffer = path();
        type.apply(this, arguments).draw(context, +size.apply(this, arguments));
        if (buffer)
          return context = null, buffer + "" || null;
      }
      symbol.type = function(_2) {
        return arguments.length ? (type = typeof _2 === "function" ? _2 : constant$3(_2), symbol) : type;
      };
      symbol.size = function(_2) {
        return arguments.length ? (size = typeof _2 === "function" ? _2 : constant$3(+_2), symbol) : size;
      };
      symbol.context = function(_2) {
        return arguments.length ? (context = _2 == null ? null : _2, symbol) : context;
      };
      return symbol;
    }
    function noop$2() {
    }
    function point$2(that, x2, y2) {
      that._context.bezierCurveTo(
        (2 * that._x0 + that._x1) / 3,
        (2 * that._y0 + that._y1) / 3,
        (that._x0 + 2 * that._x1) / 3,
        (that._y0 + 2 * that._y1) / 3,
        (that._x0 + 4 * that._x1 + x2) / 6,
        (that._y0 + 4 * that._y1 + y2) / 6
      );
    }
    function Basis(context) {
      this._context = context;
    }
    Basis.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x0 = this._x1 = this._y0 = this._y1 = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        switch (this._point) {
          case 3:
            point$2(this, this._x1, this._y1);
          case 2:
            this._context.lineTo(this._x1, this._y1);
            break;
        }
        if (this._line || this._line !== 0 && this._point === 1)
          this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x2, y2) {
        x2 = +x2, y2 = +y2;
        switch (this._point) {
          case 0:
            this._point = 1;
            this._line ? this._context.lineTo(x2, y2) : this._context.moveTo(x2, y2);
            break;
          case 1:
            this._point = 2;
            break;
          case 2:
            this._point = 3;
            this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6);
          default:
            point$2(this, x2, y2);
            break;
        }
        this._x0 = this._x1, this._x1 = x2;
        this._y0 = this._y1, this._y1 = y2;
      }
    };
    function curveBasis(context) {
      return new Basis(context);
    }
    function BasisClosed(context) {
      this._context = context;
    }
    BasisClosed.prototype = {
      areaStart: noop$2,
      areaEnd: noop$2,
      lineStart: function() {
        this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        switch (this._point) {
          case 1: {
            this._context.moveTo(this._x2, this._y2);
            this._context.closePath();
            break;
          }
          case 2: {
            this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3);
            this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3);
            this._context.closePath();
            break;
          }
          case 3: {
            this.point(this._x2, this._y2);
            this.point(this._x3, this._y3);
            this.point(this._x4, this._y4);
            break;
          }
        }
      },
      point: function(x2, y2) {
        x2 = +x2, y2 = +y2;
        switch (this._point) {
          case 0:
            this._point = 1;
            this._x2 = x2, this._y2 = y2;
            break;
          case 1:
            this._point = 2;
            this._x3 = x2, this._y3 = y2;
            break;
          case 2:
            this._point = 3;
            this._x4 = x2, this._y4 = y2;
            this._context.moveTo((this._x0 + 4 * this._x1 + x2) / 6, (this._y0 + 4 * this._y1 + y2) / 6);
            break;
          default:
            point$2(this, x2, y2);
            break;
        }
        this._x0 = this._x1, this._x1 = x2;
        this._y0 = this._y1, this._y1 = y2;
      }
    };
    function curveBasisClosed(context) {
      return new BasisClosed(context);
    }
    function BasisOpen(context) {
      this._context = context;
    }
    BasisOpen.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x0 = this._x1 = this._y0 = this._y1 = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        if (this._line || this._line !== 0 && this._point === 3)
          this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x2, y2) {
        x2 = +x2, y2 = +y2;
        switch (this._point) {
          case 0:
            this._point = 1;
            break;
          case 1:
            this._point = 2;
            break;
          case 2:
            this._point = 3;
            var x0 = (this._x0 + 4 * this._x1 + x2) / 6, y0 = (this._y0 + 4 * this._y1 + y2) / 6;
            this._line ? this._context.lineTo(x0, y0) : this._context.moveTo(x0, y0);
            break;
          case 3:
            this._point = 4;
          default:
            point$2(this, x2, y2);
            break;
        }
        this._x0 = this._x1, this._x1 = x2;
        this._y0 = this._y1, this._y1 = y2;
      }
    };
    function curveBasisOpen(context) {
      return new BasisOpen(context);
    }
    function LinearClosed(context) {
      this._context = context;
    }
    LinearClosed.prototype = {
      areaStart: noop$2,
      areaEnd: noop$2,
      lineStart: function() {
        this._point = 0;
      },
      lineEnd: function() {
        if (this._point)
          this._context.closePath();
      },
      point: function(x2, y2) {
        x2 = +x2, y2 = +y2;
        if (this._point)
          this._context.lineTo(x2, y2);
        else
          this._point = 1, this._context.moveTo(x2, y2);
      }
    };
    function curveLinearClosed(context) {
      return new LinearClosed(context);
    }
    function sign(x2) {
      return x2 < 0 ? -1 : 1;
    }
    function slope3(that, x2, y2) {
      var h0 = that._x1 - that._x0, h1 = x2 - that._x1, s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0), s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0), p2 = (s0 * h1 + s1 * h0) / (h0 + h1);
      return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p2)) || 0;
    }
    function slope2(that, t2) {
      var h2 = that._x1 - that._x0;
      return h2 ? (3 * (that._y1 - that._y0) / h2 - t2) / 2 : t2;
    }
    function point$1(that, t02, t12) {
      var x0 = that._x0, y0 = that._y0, x1 = that._x1, y1 = that._y1, dx = (x1 - x0) / 3;
      that._context.bezierCurveTo(x0 + dx, y0 + dx * t02, x1 - dx, y1 - dx * t12, x1, y1);
    }
    function MonotoneX(context) {
      this._context = context;
    }
    MonotoneX.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x0 = this._x1 = this._y0 = this._y1 = this._t0 = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        switch (this._point) {
          case 2:
            this._context.lineTo(this._x1, this._y1);
            break;
          case 3:
            point$1(this, this._t0, slope2(this, this._t0));
            break;
        }
        if (this._line || this._line !== 0 && this._point === 1)
          this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x2, y2) {
        var t12 = NaN;
        x2 = +x2, y2 = +y2;
        if (x2 === this._x1 && y2 === this._y1)
          return;
        switch (this._point) {
          case 0:
            this._point = 1;
            this._line ? this._context.lineTo(x2, y2) : this._context.moveTo(x2, y2);
            break;
          case 1:
            this._point = 2;
            break;
          case 2:
            this._point = 3;
            point$1(this, slope2(this, t12 = slope3(this, x2, y2)), t12);
            break;
          default:
            point$1(this, this._t0, t12 = slope3(this, x2, y2));
            break;
        }
        this._x0 = this._x1, this._x1 = x2;
        this._y0 = this._y1, this._y1 = y2;
        this._t0 = t12;
      }
    };
    function MonotoneY(context) {
      this._context = new ReflectContext(context);
    }
    (MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function(x2, y2) {
      MonotoneX.prototype.point.call(this, y2, x2);
    };
    function ReflectContext(context) {
      this._context = context;
    }
    ReflectContext.prototype = {
      moveTo: function(x2, y2) {
        this._context.moveTo(y2, x2);
      },
      closePath: function() {
        this._context.closePath();
      },
      lineTo: function(x2, y2) {
        this._context.lineTo(y2, x2);
      },
      bezierCurveTo: function(x1, y1, x2, y2, x3, y3) {
        this._context.bezierCurveTo(y1, x1, y2, x2, y3, x3);
      }
    };
    function monotoneX(context) {
      return new MonotoneX(context);
    }
    function monotoneY(context) {
      return new MonotoneY(context);
    }
    function Natural(context) {
      this._context = context;
    }
    Natural.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x = [];
        this._y = [];
      },
      lineEnd: function() {
        var x2 = this._x, y2 = this._y, n2 = x2.length;
        if (n2) {
          this._line ? this._context.lineTo(x2[0], y2[0]) : this._context.moveTo(x2[0], y2[0]);
          if (n2 === 2) {
            this._context.lineTo(x2[1], y2[1]);
          } else {
            var px = controlPoints(x2), py = controlPoints(y2);
            for (var i0 = 0, i1 = 1; i1 < n2; ++i0, ++i1) {
              this._context.bezierCurveTo(px[0][i0], py[0][i0], px[1][i0], py[1][i0], x2[i1], y2[i1]);
            }
          }
        }
        if (this._line || this._line !== 0 && n2 === 1)
          this._context.closePath();
        this._line = 1 - this._line;
        this._x = this._y = null;
      },
      point: function(x2, y2) {
        this._x.push(+x2);
        this._y.push(+y2);
      }
    };
    function controlPoints(x2) {
      var i2, n2 = x2.length - 1, m2, a2 = new Array(n2), b2 = new Array(n2), r2 = new Array(n2);
      a2[0] = 0, b2[0] = 2, r2[0] = x2[0] + 2 * x2[1];
      for (i2 = 1; i2 < n2 - 1; ++i2)
        a2[i2] = 1, b2[i2] = 4, r2[i2] = 4 * x2[i2] + 2 * x2[i2 + 1];
      a2[n2 - 1] = 2, b2[n2 - 1] = 7, r2[n2 - 1] = 8 * x2[n2 - 1] + x2[n2];
      for (i2 = 1; i2 < n2; ++i2)
        m2 = a2[i2] / b2[i2 - 1], b2[i2] -= m2, r2[i2] -= m2 * r2[i2 - 1];
      a2[n2 - 1] = r2[n2 - 1] / b2[n2 - 1];
      for (i2 = n2 - 2; i2 >= 0; --i2)
        a2[i2] = (r2[i2] - a2[i2 + 1]) / b2[i2];
      b2[n2 - 1] = (x2[n2] + a2[n2 - 1]) / 2;
      for (i2 = 0; i2 < n2 - 1; ++i2)
        b2[i2] = 2 * x2[i2 + 1] - a2[i2 + 1];
      return [a2, b2];
    }
    function curveNatural(context) {
      return new Natural(context);
    }
    function Step(context, t2) {
      this._context = context;
      this._t = t2;
    }
    Step.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x = this._y = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        if (0 < this._t && this._t < 1 && this._point === 2)
          this._context.lineTo(this._x, this._y);
        if (this._line || this._line !== 0 && this._point === 1)
          this._context.closePath();
        if (this._line >= 0)
          this._t = 1 - this._t, this._line = 1 - this._line;
      },
      point: function(x2, y2) {
        x2 = +x2, y2 = +y2;
        switch (this._point) {
          case 0:
            this._point = 1;
            this._line ? this._context.lineTo(x2, y2) : this._context.moveTo(x2, y2);
            break;
          case 1:
            this._point = 2;
          default: {
            if (this._t <= 0) {
              this._context.lineTo(this._x, y2);
              this._context.lineTo(x2, y2);
            } else {
              var x1 = this._x * (1 - this._t) + x2 * this._t;
              this._context.lineTo(x1, this._y);
              this._context.lineTo(x1, y2);
            }
            break;
          }
        }
        this._x = x2, this._y = y2;
      }
    };
    function curveStep(context) {
      return new Step(context, 0.5);
    }
    function stepBefore(context) {
      return new Step(context, 0);
    }
    function stepAfter(context) {
      return new Step(context, 1);
    }
    function stackOffsetNone(series, order) {
      if (!((n2 = series.length) > 1))
        return;
      for (var i2 = 1, j2, s0, s1 = series[order[0]], n2, m2 = s1.length; i2 < n2; ++i2) {
        s0 = s1, s1 = series[order[i2]];
        for (j2 = 0; j2 < m2; ++j2) {
          s1[j2][1] += s1[j2][0] = isNaN(s0[j2][1]) ? s0[j2][0] : s0[j2][1];
        }
      }
    }
    function stackOrderNone(series) {
      var n2 = series.length, o2 = new Array(n2);
      while (--n2 >= 0)
        o2[n2] = n2;
      return o2;
    }
    function stackValue(d2, key) {
      return d2[key];
    }
    function stackSeries(key) {
      const series = [];
      series.key = key;
      return series;
    }
    function shapeStack() {
      var keys2 = constant$3([]), order = stackOrderNone, offset2 = stackOffsetNone, value2 = stackValue;
      function stack(data) {
        var sz = Array.from(keys2.apply(this, arguments), stackSeries), i2, n2 = sz.length, j2 = -1, oz;
        for (const d2 of data) {
          for (i2 = 0, ++j2; i2 < n2; ++i2) {
            (sz[i2][j2] = [0, +value2(d2, sz[i2].key, j2, data)]).data = d2;
          }
        }
        for (i2 = 0, oz = array(order(sz)); i2 < n2; ++i2) {
          sz[oz[i2]].index = i2;
        }
        offset2(sz, oz);
        return sz;
      }
      stack.keys = function(_2) {
        return arguments.length ? (keys2 = typeof _2 === "function" ? _2 : constant$3(Array.from(_2)), stack) : keys2;
      };
      stack.value = function(_2) {
        return arguments.length ? (value2 = typeof _2 === "function" ? _2 : constant$3(+_2), stack) : value2;
      };
      stack.order = function(_2) {
        return arguments.length ? (order = _2 == null ? stackOrderNone : typeof _2 === "function" ? _2 : constant$3(Array.from(_2)), stack) : order;
      };
      stack.offset = function(_2) {
        return arguments.length ? (offset2 = _2 == null ? stackOffsetNone : _2, stack) : offset2;
      };
      return stack;
    }
    function stackOffsetExpand(series, order) {
      if (!((n2 = series.length) > 0))
        return;
      for (var i2, n2, j2 = 0, m2 = series[0].length, y2; j2 < m2; ++j2) {
        for (y2 = i2 = 0; i2 < n2; ++i2)
          y2 += series[i2][j2][1] || 0;
        if (y2)
          for (i2 = 0; i2 < n2; ++i2)
            series[i2][j2][1] /= y2;
      }
      stackOffsetNone(series, order);
    }
    function stackOffsetSilhouette(series, order) {
      if (!((n2 = series.length) > 0))
        return;
      for (var j2 = 0, s0 = series[order[0]], n2, m2 = s0.length; j2 < m2; ++j2) {
        for (var i2 = 0, y2 = 0; i2 < n2; ++i2)
          y2 += series[i2][j2][1] || 0;
        s0[j2][1] += s0[j2][0] = -y2 / 2;
      }
      stackOffsetNone(series, order);
    }
    function stackOffsetWiggle(series, order) {
      if (!((n2 = series.length) > 0) || !((m2 = (s0 = series[order[0]]).length) > 0))
        return;
      for (var y2 = 0, j2 = 1, s0, m2, n2; j2 < m2; ++j2) {
        for (var i2 = 0, s1 = 0, s2 = 0; i2 < n2; ++i2) {
          var si2 = series[order[i2]], sij0 = si2[j2][1] || 0, sij1 = si2[j2 - 1][1] || 0, s3 = (sij0 - sij1) / 2;
          for (var k2 = 0; k2 < i2; ++k2) {
            var sk2 = series[order[k2]], skj0 = sk2[j2][1] || 0, skj1 = sk2[j2 - 1][1] || 0;
            s3 += skj0 - skj1;
          }
          s1 += sij0, s2 += s3 * sij0;
        }
        s0[j2 - 1][1] += s0[j2 - 1][0] = y2;
        if (s1)
          y2 -= s2 / s1;
      }
      s0[j2 - 1][1] += s0[j2 - 1][0] = y2;
      stackOffsetNone(series, order);
    }
    function _typeof$C(o2) {
      "@babel/helpers - typeof";
      return _typeof$C = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
        return typeof o3;
      } : function(o3) {
        return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
      }, _typeof$C(o2);
    }
    var _excluded$d = ["type", "size", "sizeType"];
    function _extends$n() {
      _extends$n = Object.assign ? Object.assign.bind() : function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends$n.apply(this, arguments);
    }
    function ownKeys$y(e3, r2) {
      var t2 = Object.keys(e3);
      if (Object.getOwnPropertySymbols) {
        var o2 = Object.getOwnPropertySymbols(e3);
        r2 && (o2 = o2.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e3, r3).enumerable;
        })), t2.push.apply(t2, o2);
      }
      return t2;
    }
    function _objectSpread$y(e3) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t2 = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$y(Object(t2), true).forEach(function(r3) {
          _defineProperty$B(e3, r3, t2[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$y(Object(t2)).forEach(function(r3) {
          Object.defineProperty(e3, r3, Object.getOwnPropertyDescriptor(t2, r3));
        });
      }
      return e3;
    }
    function _defineProperty$B(obj, key, value2) {
      key = _toPropertyKey$B(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value: value2, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value2;
      }
      return obj;
    }
    function _toPropertyKey$B(t2) {
      var i2 = _toPrimitive$B(t2, "string");
      return "symbol" == _typeof$C(i2) ? i2 : String(i2);
    }
    function _toPrimitive$B(t2, r2) {
      if ("object" != _typeof$C(t2) || !t2)
        return t2;
      var e3 = t2[Symbol.toPrimitive];
      if (void 0 !== e3) {
        var i2 = e3.call(t2, r2 || "default");
        if ("object" != _typeof$C(i2))
          return i2;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r2 ? String : Number)(t2);
    }
    function _objectWithoutProperties$d(source, excluded) {
      if (source == null)
        return {};
      var target = _objectWithoutPropertiesLoose$d(source, excluded);
      var key, i2;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i2 = 0; i2 < sourceSymbolKeys.length; i2++) {
          key = sourceSymbolKeys[i2];
          if (excluded.indexOf(key) >= 0)
            continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key))
            continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose$d(source, excluded) {
      if (source == null)
        return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i2;
      for (i2 = 0; i2 < sourceKeys.length; i2++) {
        key = sourceKeys[i2];
        if (excluded.indexOf(key) >= 0)
          continue;
        target[key] = source[key];
      }
      return target;
    }
    var symbolFactories = {
      symbolCircle,
      symbolCross,
      symbolDiamond,
      symbolSquare,
      symbolStar,
      symbolTriangle,
      symbolWye
    };
    var RADIAN$1 = Math.PI / 180;
    var getSymbolFactory = function getSymbolFactory2(type) {
      var name = "symbol".concat(upperFirst$1(type));
      return symbolFactories[name] || symbolCircle;
    };
    var calculateAreaSize = function calculateAreaSize2(size, sizeType, type) {
      if (sizeType === "area") {
        return size;
      }
      switch (type) {
        case "cross":
          return 5 * size * size / 9;
        case "diamond":
          return 0.5 * size * size / Math.sqrt(3);
        case "square":
          return size * size;
        case "star": {
          var angle = 18 * RADIAN$1;
          return 1.25 * size * size * (Math.tan(angle) - Math.tan(angle * 2) * Math.pow(Math.tan(angle), 2));
        }
        case "triangle":
          return Math.sqrt(3) * size * size / 4;
        case "wye":
          return (21 - 10 * Math.sqrt(3)) * size * size / 8;
        default:
          return Math.PI * size * size / 4;
      }
    };
    var registerSymbol = function registerSymbol2(key, factory) {
      symbolFactories["symbol".concat(upperFirst$1(key))] = factory;
    };
    var Symbols = function Symbols2(_ref) {
      var _ref$type = _ref.type, type = _ref$type === void 0 ? "circle" : _ref$type, _ref$size = _ref.size, size = _ref$size === void 0 ? 64 : _ref$size, _ref$sizeType = _ref.sizeType, sizeType = _ref$sizeType === void 0 ? "area" : _ref$sizeType, rest = _objectWithoutProperties$d(_ref, _excluded$d);
      var props = _objectSpread$y(_objectSpread$y({}, rest), {}, {
        type,
        size,
        sizeType
      });
      var getPath2 = function getPath3() {
        var symbolFactory = getSymbolFactory(type);
        var symbol = Symbol$3().type(symbolFactory).size(calculateAreaSize(size, sizeType, type));
        return symbol();
      };
      var className = props.className, cx = props.cx, cy = props.cy;
      var filteredProps = filterProps(props, true);
      if (cx === +cx && cy === +cy && size === +size) {
        return /* @__PURE__ */ React$1.createElement("path", _extends$n({}, filteredProps, {
          className: clsx("recharts-symbols", className),
          transform: "translate(".concat(cx, ", ").concat(cy, ")"),
          d: getPath2()
        }));
      }
      return null;
    };
    Symbols.registerSymbol = registerSymbol;
    function _typeof$B(o2) {
      "@babel/helpers - typeof";
      return _typeof$B = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
        return typeof o3;
      } : function(o3) {
        return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
      }, _typeof$B(o2);
    }
    function _extends$m() {
      _extends$m = Object.assign ? Object.assign.bind() : function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends$m.apply(this, arguments);
    }
    function ownKeys$x(e3, r2) {
      var t2 = Object.keys(e3);
      if (Object.getOwnPropertySymbols) {
        var o2 = Object.getOwnPropertySymbols(e3);
        r2 && (o2 = o2.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e3, r3).enumerable;
        })), t2.push.apply(t2, o2);
      }
      return t2;
    }
    function _objectSpread$x(e3) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t2 = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$x(Object(t2), true).forEach(function(r3) {
          _defineProperty$A(e3, r3, t2[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$x(Object(t2)).forEach(function(r3) {
          Object.defineProperty(e3, r3, Object.getOwnPropertyDescriptor(t2, r3));
        });
      }
      return e3;
    }
    function _classCallCheck$b(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties$b(target, props) {
      for (var i2 = 0; i2 < props.length; i2++) {
        var descriptor = props[i2];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey$A(descriptor.key), descriptor);
      }
    }
    function _createClass$b(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties$b(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties$b(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _callSuper$7(t2, o2, e3) {
      return o2 = _getPrototypeOf$8(o2), _possibleConstructorReturn$8(t2, _isNativeReflectConstruct$8() ? Reflect.construct(o2, e3 || [], _getPrototypeOf$8(t2).constructor) : o2.apply(t2, e3));
    }
    function _possibleConstructorReturn$8(self2, call) {
      if (call && (_typeof$B(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }
      return _assertThisInitialized$8(self2);
    }
    function _assertThisInitialized$8(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _isNativeReflectConstruct$8() {
      try {
        var t2 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
      } catch (t3) {
      }
      return (_isNativeReflectConstruct$8 = function _isNativeReflectConstruct2() {
        return !!t2;
      })();
    }
    function _getPrototypeOf$8(o2) {
      _getPrototypeOf$8 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o3) {
        return o3.__proto__ || Object.getPrototypeOf(o3);
      };
      return _getPrototypeOf$8(o2);
    }
    function _inherits$8(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      Object.defineProperty(subClass, "prototype", { writable: false });
      if (superClass)
        _setPrototypeOf$8(subClass, superClass);
    }
    function _setPrototypeOf$8(o2, p2) {
      _setPrototypeOf$8 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o3, p3) {
        o3.__proto__ = p3;
        return o3;
      };
      return _setPrototypeOf$8(o2, p2);
    }
    function _defineProperty$A(obj, key, value2) {
      key = _toPropertyKey$A(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value: value2, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value2;
      }
      return obj;
    }
    function _toPropertyKey$A(t2) {
      var i2 = _toPrimitive$A(t2, "string");
      return "symbol" == _typeof$B(i2) ? i2 : String(i2);
    }
    function _toPrimitive$A(t2, r2) {
      if ("object" != _typeof$B(t2) || !t2)
        return t2;
      var e3 = t2[Symbol.toPrimitive];
      if (void 0 !== e3) {
        var i2 = e3.call(t2, r2 || "default");
        if ("object" != _typeof$B(i2))
          return i2;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r2 ? String : Number)(t2);
    }
    var SIZE = 32;
    var DefaultLegendContent = /* @__PURE__ */ function(_PureComponent) {
      _inherits$8(DefaultLegendContent2, _PureComponent);
      function DefaultLegendContent2() {
        _classCallCheck$b(this, DefaultLegendContent2);
        return _callSuper$7(this, DefaultLegendContent2, arguments);
      }
      _createClass$b(DefaultLegendContent2, [{
        key: "renderIcon",
        value: (
          /**
           * Render the path of icon
           * @param {Object} data Data of each legend item
           * @return {String} Path element
           */
          function renderIcon(data) {
            var inactiveColor = this.props.inactiveColor;
            var halfSize = SIZE / 2;
            var sixthSize = SIZE / 6;
            var thirdSize = SIZE / 3;
            var color2 = data.inactive ? inactiveColor : data.color;
            if (data.type === "plainline") {
              return /* @__PURE__ */ React$1.createElement("line", {
                strokeWidth: 4,
                fill: "none",
                stroke: color2,
                strokeDasharray: data.payload.strokeDasharray,
                x1: 0,
                y1: halfSize,
                x2: SIZE,
                y2: halfSize,
                className: "recharts-legend-icon"
              });
            }
            if (data.type === "line") {
              return /* @__PURE__ */ React$1.createElement("path", {
                strokeWidth: 4,
                fill: "none",
                stroke: color2,
                d: "M0,".concat(halfSize, "h").concat(thirdSize, "\n            A").concat(sixthSize, ",").concat(sixthSize, ",0,1,1,").concat(2 * thirdSize, ",").concat(halfSize, "\n            H").concat(SIZE, "M").concat(2 * thirdSize, ",").concat(halfSize, "\n            A").concat(sixthSize, ",").concat(sixthSize, ",0,1,1,").concat(thirdSize, ",").concat(halfSize),
                className: "recharts-legend-icon"
              });
            }
            if (data.type === "rect") {
              return /* @__PURE__ */ React$1.createElement("path", {
                stroke: "none",
                fill: color2,
                d: "M0,".concat(SIZE / 8, "h").concat(SIZE, "v").concat(SIZE * 3 / 4, "h").concat(-SIZE, "z"),
                className: "recharts-legend-icon"
              });
            }
            if (/* @__PURE__ */ React$1.isValidElement(data.legendIcon)) {
              var iconProps = _objectSpread$x({}, data);
              delete iconProps.legendIcon;
              return /* @__PURE__ */ React$1.cloneElement(data.legendIcon, iconProps);
            }
            return /* @__PURE__ */ React$1.createElement(Symbols, {
              fill: color2,
              cx: halfSize,
              cy: halfSize,
              size: SIZE,
              sizeType: "diameter",
              type: data.type
            });
          }
        )
        /**
         * Draw items of legend
         * @return {ReactElement} Items
         */
      }, {
        key: "renderItems",
        value: function renderItems() {
          var _this = this;
          var _this$props = this.props, payload = _this$props.payload, iconSize = _this$props.iconSize, layout = _this$props.layout, formatter = _this$props.formatter, inactiveColor = _this$props.inactiveColor;
          var viewBox = {
            x: 0,
            y: 0,
            width: SIZE,
            height: SIZE
          };
          var itemStyle = {
            display: layout === "horizontal" ? "inline-block" : "block",
            marginRight: 10
          };
          var svgStyle = {
            display: "inline-block",
            verticalAlign: "middle",
            marginRight: 4
          };
          return payload.map(function(entry, i2) {
            var finalFormatter = entry.formatter || formatter;
            var className = clsx(_defineProperty$A(_defineProperty$A({
              "recharts-legend-item": true
            }, "legend-item-".concat(i2), true), "inactive", entry.inactive));
            if (entry.type === "none") {
              return null;
            }
            var entryValue = !isFunction$4(entry.value) ? entry.value : null;
            warn(
              !isFunction$4(entry.value),
              `The name property is also required when using a function for the dataKey of a chart's cartesian components. Ex: <Bar name="Name of my Data"/>`
              // eslint-disable-line max-len
            );
            var color2 = entry.inactive ? inactiveColor : entry.color;
            return /* @__PURE__ */ React$1.createElement("li", _extends$m({
              className,
              style: itemStyle,
              key: "legend-item-".concat(i2)
            }, adaptEventsOfChild(_this.props, entry, i2)), /* @__PURE__ */ React$1.createElement(Surface, {
              width: iconSize,
              height: iconSize,
              viewBox,
              style: svgStyle
            }, _this.renderIcon(entry)), /* @__PURE__ */ React$1.createElement("span", {
              className: "recharts-legend-item-text",
              style: {
                color: color2
              }
            }, finalFormatter ? finalFormatter(entryValue, entry, i2) : entryValue));
          });
        }
      }, {
        key: "render",
        value: function render() {
          var _this$props2 = this.props, payload = _this$props2.payload, layout = _this$props2.layout, align = _this$props2.align;
          if (!payload || !payload.length) {
            return null;
          }
          var finalStyle = {
            padding: 0,
            margin: 0,
            textAlign: layout === "horizontal" ? align : "left"
          };
          return /* @__PURE__ */ React$1.createElement("ul", {
            className: "recharts-default-legend",
            style: finalStyle
          }, this.renderItems());
        }
      }]);
      return DefaultLegendContent2;
    }(reactExports.PureComponent);
    _defineProperty$A(DefaultLegendContent, "displayName", "Legend");
    _defineProperty$A(DefaultLegendContent, "defaultProps", {
      iconSize: 14,
      layout: "horizontal",
      align: "center",
      verticalAlign: "middle",
      inactiveColor: "#ccc"
    });
    var ListCache$2 = _ListCache;
    function stackClear$1() {
      this.__data__ = new ListCache$2();
      this.size = 0;
    }
    var _stackClear = stackClear$1;
    function stackDelete$1(key) {
      var data = this.__data__, result = data["delete"](key);
      this.size = data.size;
      return result;
    }
    var _stackDelete = stackDelete$1;
    function stackGet$1(key) {
      return this.__data__.get(key);
    }
    var _stackGet = stackGet$1;
    function stackHas$1(key) {
      return this.__data__.has(key);
    }
    var _stackHas = stackHas$1;
    var ListCache$1 = _ListCache, Map$2 = _Map, MapCache$1 = _MapCache;
    var LARGE_ARRAY_SIZE$1 = 200;
    function stackSet$1(key, value2) {
      var data = this.__data__;
      if (data instanceof ListCache$1) {
        var pairs = data.__data__;
        if (!Map$2 || pairs.length < LARGE_ARRAY_SIZE$1 - 1) {
          pairs.push([key, value2]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache$1(pairs);
      }
      data.set(key, value2);
      this.size = data.size;
      return this;
    }
    var _stackSet = stackSet$1;
    var ListCache = _ListCache, stackClear = _stackClear, stackDelete = _stackDelete, stackGet = _stackGet, stackHas = _stackHas, stackSet = _stackSet;
    function Stack$2(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }
    Stack$2.prototype.clear = stackClear;
    Stack$2.prototype["delete"] = stackDelete;
    Stack$2.prototype.get = stackGet;
    Stack$2.prototype.has = stackHas;
    Stack$2.prototype.set = stackSet;
    var _Stack = Stack$2;
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    function setCacheAdd$1(value2) {
      this.__data__.set(value2, HASH_UNDEFINED);
      return this;
    }
    var _setCacheAdd = setCacheAdd$1;
    function setCacheHas$1(value2) {
      return this.__data__.has(value2);
    }
    var _setCacheHas = setCacheHas$1;
    var MapCache = _MapCache, setCacheAdd = _setCacheAdd, setCacheHas = _setCacheHas;
    function SetCache$2(values) {
      var index = -1, length = values == null ? 0 : values.length;
      this.__data__ = new MapCache();
      while (++index < length) {
        this.add(values[index]);
      }
    }
    SetCache$2.prototype.add = SetCache$2.prototype.push = setCacheAdd;
    SetCache$2.prototype.has = setCacheHas;
    var _SetCache = SetCache$2;
    function arraySome$2(array2, predicate) {
      var index = -1, length = array2 == null ? 0 : array2.length;
      while (++index < length) {
        if (predicate(array2[index], index, array2)) {
          return true;
        }
      }
      return false;
    }
    var _arraySome = arraySome$2;
    function cacheHas$2(cache2, key) {
      return cache2.has(key);
    }
    var _cacheHas = cacheHas$2;
    var SetCache$1 = _SetCache, arraySome$1 = _arraySome, cacheHas$1 = _cacheHas;
    var COMPARE_PARTIAL_FLAG$5 = 1, COMPARE_UNORDERED_FLAG$3 = 2;
    function equalArrays$2(array2, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG$5, arrLength = array2.length, othLength = other.length;
      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      var arrStacked = stack.get(array2);
      var othStacked = stack.get(other);
      if (arrStacked && othStacked) {
        return arrStacked == other && othStacked == array2;
      }
      var index = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG$3 ? new SetCache$1() : void 0;
      stack.set(array2, other);
      stack.set(other, array2);
      while (++index < arrLength) {
        var arrValue = array2[index], othValue = other[index];
        if (customizer) {
          var compared = isPartial ? customizer(othValue, arrValue, index, other, array2, stack) : customizer(arrValue, othValue, index, array2, other, stack);
        }
        if (compared !== void 0) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        if (seen) {
          if (!arraySome$1(other, function(othValue2, othIndex) {
            if (!cacheHas$1(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
              return seen.push(othIndex);
            }
          })) {
            result = false;
            break;
          }
        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
          result = false;
          break;
        }
      }
      stack["delete"](array2);
      stack["delete"](other);
      return result;
    }
    var _equalArrays = equalArrays$2;
    var root$5 = _root;
    var Uint8Array$2 = root$5.Uint8Array;
    var _Uint8Array = Uint8Array$2;
    function mapToArray$1(map2) {
      var index = -1, result = Array(map2.size);
      map2.forEach(function(value2, key) {
        result[++index] = [key, value2];
      });
      return result;
    }
    var _mapToArray = mapToArray$1;
    function setToArray$3(set2) {
      var index = -1, result = Array(set2.size);
      set2.forEach(function(value2) {
        result[++index] = value2;
      });
      return result;
    }
    var _setToArray = setToArray$3;
    var Symbol$2 = _Symbol, Uint8Array$1 = _Uint8Array, eq$1 = eq_1, equalArrays$1 = _equalArrays, mapToArray = _mapToArray, setToArray$2 = _setToArray;
    var COMPARE_PARTIAL_FLAG$4 = 1, COMPARE_UNORDERED_FLAG$2 = 2;
    var boolTag$2 = "[object Boolean]", dateTag$1 = "[object Date]", errorTag$1 = "[object Error]", mapTag$2 = "[object Map]", numberTag$1 = "[object Number]", regexpTag$1 = "[object RegExp]", setTag$2 = "[object Set]", stringTag$1 = "[object String]", symbolTag = "[object Symbol]";
    var arrayBufferTag$1 = "[object ArrayBuffer]", dataViewTag$2 = "[object DataView]";
    var symbolProto = Symbol$2 ? Symbol$2.prototype : void 0, symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
    function equalByTag$1(object2, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag$2:
          if (object2.byteLength != other.byteLength || object2.byteOffset != other.byteOffset) {
            return false;
          }
          object2 = object2.buffer;
          other = other.buffer;
        case arrayBufferTag$1:
          if (object2.byteLength != other.byteLength || !equalFunc(new Uint8Array$1(object2), new Uint8Array$1(other))) {
            return false;
          }
          return true;
        case boolTag$2:
        case dateTag$1:
        case numberTag$1:
          return eq$1(+object2, +other);
        case errorTag$1:
          return object2.name == other.name && object2.message == other.message;
        case regexpTag$1:
        case stringTag$1:
          return object2 == other + "";
        case mapTag$2:
          var convert = mapToArray;
        case setTag$2:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG$4;
          convert || (convert = setToArray$2);
          if (object2.size != other.size && !isPartial) {
            return false;
          }
          var stacked = stack.get(object2);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG$2;
          stack.set(object2, other);
          var result = equalArrays$1(convert(object2), convert(other), bitmask, customizer, equalFunc, stack);
          stack["delete"](object2);
          return result;
        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object2) == symbolValueOf.call(other);
          }
      }
      return false;
    }
    var _equalByTag = equalByTag$1;
    function arrayPush$2(array2, values) {
      var index = -1, length = values.length, offset2 = array2.length;
      while (++index < length) {
        array2[offset2 + index] = values[index];
      }
      return array2;
    }
    var _arrayPush = arrayPush$2;
    var arrayPush$1 = _arrayPush, isArray$a = isArray_1;
    function baseGetAllKeys$1(object2, keysFunc, symbolsFunc) {
      var result = keysFunc(object2);
      return isArray$a(object2) ? result : arrayPush$1(result, symbolsFunc(object2));
    }
    var _baseGetAllKeys = baseGetAllKeys$1;
    function arrayFilter$1(array2, predicate) {
      var index = -1, length = array2 == null ? 0 : array2.length, resIndex = 0, result = [];
      while (++index < length) {
        var value2 = array2[index];
        if (predicate(value2, index, array2)) {
          result[resIndex++] = value2;
        }
      }
      return result;
    }
    var _arrayFilter = arrayFilter$1;
    function stubArray$1() {
      return [];
    }
    var stubArray_1 = stubArray$1;
    var arrayFilter = _arrayFilter, stubArray = stubArray_1;
    var objectProto$7 = Object.prototype;
    var propertyIsEnumerable$1 = objectProto$7.propertyIsEnumerable;
    var nativeGetSymbols = Object.getOwnPropertySymbols;
    var getSymbols$1 = !nativeGetSymbols ? stubArray : function(object2) {
      if (object2 == null) {
        return [];
      }
      object2 = Object(object2);
      return arrayFilter(nativeGetSymbols(object2), function(symbol) {
        return propertyIsEnumerable$1.call(object2, symbol);
      });
    };
    var _getSymbols = getSymbols$1;
    function baseTimes$1(n2, iteratee) {
      var index = -1, result = Array(n2);
      while (++index < n2) {
        result[index] = iteratee(index);
      }
      return result;
    }
    var _baseTimes = baseTimes$1;
    var baseGetTag$4 = _baseGetTag, isObjectLike$5 = isObjectLike_1;
    var argsTag$2 = "[object Arguments]";
    function baseIsArguments$1(value2) {
      return isObjectLike$5(value2) && baseGetTag$4(value2) == argsTag$2;
    }
    var _baseIsArguments = baseIsArguments$1;
    var baseIsArguments = _baseIsArguments, isObjectLike$4 = isObjectLike_1;
    var objectProto$6 = Object.prototype;
    var hasOwnProperty$6 = objectProto$6.hasOwnProperty;
    var propertyIsEnumerable = objectProto$6.propertyIsEnumerable;
    var isArguments$3 = baseIsArguments(/* @__PURE__ */ function() {
      return arguments;
    }()) ? baseIsArguments : function(value2) {
      return isObjectLike$4(value2) && hasOwnProperty$6.call(value2, "callee") && !propertyIsEnumerable.call(value2, "callee");
    };
    var isArguments_1 = isArguments$3;
    var isBuffer$2 = { exports: {} };
    function stubFalse() {
      return false;
    }
    var stubFalse_1 = stubFalse;
    isBuffer$2.exports;
    (function(module2, exports2) {
      var root2 = _root, stubFalse2 = stubFalse_1;
      var freeExports = exports2 && !exports2.nodeType && exports2;
      var freeModule = freeExports && true && module2 && !module2.nodeType && module2;
      var moduleExports = freeModule && freeModule.exports === freeExports;
      var Buffer2 = moduleExports ? root2.Buffer : void 0;
      var nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : void 0;
      var isBuffer2 = nativeIsBuffer || stubFalse2;
      module2.exports = isBuffer2;
    })(isBuffer$2, isBuffer$2.exports);
    var isBufferExports = isBuffer$2.exports;
    var MAX_SAFE_INTEGER$2 = 9007199254740991;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    function isIndex$3(value2, length) {
      var type = typeof value2;
      length = length == null ? MAX_SAFE_INTEGER$2 : length;
      return !!length && (type == "number" || type != "symbol" && reIsUint.test(value2)) && (value2 > -1 && value2 % 1 == 0 && value2 < length);
    }
    var _isIndex = isIndex$3;
    var MAX_SAFE_INTEGER$1 = 9007199254740991;
    function isLength$3(value2) {
      return typeof value2 == "number" && value2 > -1 && value2 % 1 == 0 && value2 <= MAX_SAFE_INTEGER$1;
    }
    var isLength_1 = isLength$3;
    var baseGetTag$3 = _baseGetTag, isLength$2 = isLength_1, isObjectLike$3 = isObjectLike_1;
    var argsTag$1 = "[object Arguments]", arrayTag$1 = "[object Array]", boolTag$1 = "[object Boolean]", dateTag = "[object Date]", errorTag = "[object Error]", funcTag = "[object Function]", mapTag$1 = "[object Map]", numberTag = "[object Number]", objectTag$3 = "[object Object]", regexpTag = "[object RegExp]", setTag$1 = "[object Set]", stringTag = "[object String]", weakMapTag$1 = "[object WeakMap]";
    var arrayBufferTag = "[object ArrayBuffer]", dataViewTag$1 = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag$1] = typedArrayTags[arrayTag$1] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag$1] = typedArrayTags[dataViewTag$1] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag$1] = typedArrayTags[numberTag] = typedArrayTags[objectTag$3] = typedArrayTags[regexpTag] = typedArrayTags[setTag$1] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag$1] = false;
    function baseIsTypedArray$1(value2) {
      return isObjectLike$3(value2) && isLength$2(value2.length) && !!typedArrayTags[baseGetTag$3(value2)];
    }
    var _baseIsTypedArray = baseIsTypedArray$1;
    function baseUnary$2(func) {
      return function(value2) {
        return func(value2);
      };
    }
    var _baseUnary = baseUnary$2;
    var _nodeUtil = { exports: {} };
    _nodeUtil.exports;
    (function(module2, exports2) {
      var freeGlobal2 = _freeGlobal;
      var freeExports = exports2 && !exports2.nodeType && exports2;
      var freeModule = freeExports && true && module2 && !module2.nodeType && module2;
      var moduleExports = freeModule && freeModule.exports === freeExports;
      var freeProcess = moduleExports && freeGlobal2.process;
      var nodeUtil2 = function() {
        try {
          var types = freeModule && freeModule.require && freeModule.require("util").types;
          if (types) {
            return types;
          }
          return freeProcess && freeProcess.binding && freeProcess.binding("util");
        } catch (e3) {
        }
      }();
      module2.exports = nodeUtil2;
    })(_nodeUtil, _nodeUtil.exports);
    var _nodeUtilExports = _nodeUtil.exports;
    var baseIsTypedArray = _baseIsTypedArray, baseUnary$1 = _baseUnary, nodeUtil = _nodeUtilExports;
    var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
    var isTypedArray$3 = nodeIsTypedArray ? baseUnary$1(nodeIsTypedArray) : baseIsTypedArray;
    var isTypedArray_1 = isTypedArray$3;
    var baseTimes = _baseTimes, isArguments$2 = isArguments_1, isArray$9 = isArray_1, isBuffer$1 = isBufferExports, isIndex$2 = _isIndex, isTypedArray$2 = isTypedArray_1;
    var objectProto$5 = Object.prototype;
    var hasOwnProperty$5 = objectProto$5.hasOwnProperty;
    function arrayLikeKeys$1(value2, inherited) {
      var isArr = isArray$9(value2), isArg = !isArr && isArguments$2(value2), isBuff = !isArr && !isArg && isBuffer$1(value2), isType = !isArr && !isArg && !isBuff && isTypedArray$2(value2), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value2.length, String) : [], length = result.length;
      for (var key in value2) {
        if ((inherited || hasOwnProperty$5.call(value2, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
        (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
        isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
        isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
        isIndex$2(key, length)))) {
          result.push(key);
        }
      }
      return result;
    }
    var _arrayLikeKeys = arrayLikeKeys$1;
    var objectProto$4 = Object.prototype;
    function isPrototype$1(value2) {
      var Ctor = value2 && value2.constructor, proto2 = typeof Ctor == "function" && Ctor.prototype || objectProto$4;
      return value2 === proto2;
    }
    var _isPrototype = isPrototype$1;
    function overArg$2(func, transform) {
      return function(arg) {
        return func(transform(arg));
      };
    }
    var _overArg = overArg$2;
    var overArg$1 = _overArg;
    var nativeKeys$1 = overArg$1(Object.keys, Object);
    var _nativeKeys = nativeKeys$1;
    var isPrototype = _isPrototype, nativeKeys = _nativeKeys;
    var objectProto$3 = Object.prototype;
    var hasOwnProperty$4 = objectProto$3.hasOwnProperty;
    function baseKeys$1(object2) {
      if (!isPrototype(object2)) {
        return nativeKeys(object2);
      }
      var result = [];
      for (var key in Object(object2)) {
        if (hasOwnProperty$4.call(object2, key) && key != "constructor") {
          result.push(key);
        }
      }
      return result;
    }
    var _baseKeys = baseKeys$1;
    var isFunction$1 = isFunction_1, isLength$1 = isLength_1;
    function isArrayLike$5(value2) {
      return value2 != null && isLength$1(value2.length) && !isFunction$1(value2);
    }
    var isArrayLike_1 = isArrayLike$5;
    var arrayLikeKeys = _arrayLikeKeys, baseKeys = _baseKeys, isArrayLike$4 = isArrayLike_1;
    function keys$5(object2) {
      return isArrayLike$4(object2) ? arrayLikeKeys(object2) : baseKeys(object2);
    }
    var keys_1 = keys$5;
    var baseGetAllKeys = _baseGetAllKeys, getSymbols = _getSymbols, keys$4 = keys_1;
    function getAllKeys$1(object2) {
      return baseGetAllKeys(object2, keys$4, getSymbols);
    }
    var _getAllKeys = getAllKeys$1;
    var getAllKeys = _getAllKeys;
    var COMPARE_PARTIAL_FLAG$3 = 1;
    var objectProto$2 = Object.prototype;
    var hasOwnProperty$3 = objectProto$2.hasOwnProperty;
    function equalObjects$1(object2, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG$3, objProps = getAllKeys(object2), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty$3.call(other, key))) {
          return false;
        }
      }
      var objStacked = stack.get(object2);
      var othStacked = stack.get(other);
      if (objStacked && othStacked) {
        return objStacked == other && othStacked == object2;
      }
      var result = true;
      stack.set(object2, other);
      stack.set(other, object2);
      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object2[key], othValue = other[key];
        if (customizer) {
          var compared = isPartial ? customizer(othValue, objValue, key, other, object2, stack) : customizer(objValue, othValue, key, object2, other, stack);
        }
        if (!(compared === void 0 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == "constructor");
      }
      if (result && !skipCtor) {
        var objCtor = object2.constructor, othCtor = other.constructor;
        if (objCtor != othCtor && ("constructor" in object2 && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack["delete"](object2);
      stack["delete"](other);
      return result;
    }
    var _equalObjects = equalObjects$1;
    var getNative$4 = _getNative, root$4 = _root;
    var DataView$2 = getNative$4(root$4, "DataView");
    var _DataView = DataView$2;
    var getNative$3 = _getNative, root$3 = _root;
    var Promise$2 = getNative$3(root$3, "Promise");
    var _Promise = Promise$2;
    var getNative$2 = _getNative, root$2 = _root;
    var Set$3 = getNative$2(root$2, "Set");
    var _Set = Set$3;
    var getNative$1 = _getNative, root$1 = _root;
    var WeakMap$2 = getNative$1(root$1, "WeakMap");
    var _WeakMap = WeakMap$2;
    var DataView$1 = _DataView, Map$1 = _Map, Promise$1 = _Promise, Set$2 = _Set, WeakMap$1 = _WeakMap, baseGetTag$2 = _baseGetTag, toSource = _toSource;
    var mapTag = "[object Map]", objectTag$2 = "[object Object]", promiseTag = "[object Promise]", setTag = "[object Set]", weakMapTag = "[object WeakMap]";
    var dataViewTag = "[object DataView]";
    var dataViewCtorString = toSource(DataView$1), mapCtorString = toSource(Map$1), promiseCtorString = toSource(Promise$1), setCtorString = toSource(Set$2), weakMapCtorString = toSource(WeakMap$1);
    var getTag$2 = baseGetTag$2;
    if (DataView$1 && getTag$2(new DataView$1(new ArrayBuffer(1))) != dataViewTag || Map$1 && getTag$2(new Map$1()) != mapTag || Promise$1 && getTag$2(Promise$1.resolve()) != promiseTag || Set$2 && getTag$2(new Set$2()) != setTag || WeakMap$1 && getTag$2(new WeakMap$1()) != weakMapTag) {
      getTag$2 = function(value2) {
        var result = baseGetTag$2(value2), Ctor = result == objectTag$2 ? value2.constructor : void 0, ctorString = Ctor ? toSource(Ctor) : "";
        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString:
              return dataViewTag;
            case mapCtorString:
              return mapTag;
            case promiseCtorString:
              return promiseTag;
            case setCtorString:
              return setTag;
            case weakMapCtorString:
              return weakMapTag;
          }
        }
        return result;
      };
    }
    var _getTag = getTag$2;
    var Stack$1 = _Stack, equalArrays = _equalArrays, equalByTag = _equalByTag, equalObjects = _equalObjects, getTag$1 = _getTag, isArray$8 = isArray_1, isBuffer = isBufferExports, isTypedArray$1 = isTypedArray_1;
    var COMPARE_PARTIAL_FLAG$2 = 1;
    var argsTag = "[object Arguments]", arrayTag = "[object Array]", objectTag$1 = "[object Object]";
    var objectProto$1 = Object.prototype;
    var hasOwnProperty$2 = objectProto$1.hasOwnProperty;
    function baseIsEqualDeep$1(object2, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray$8(object2), othIsArr = isArray$8(other), objTag = objIsArr ? arrayTag : getTag$1(object2), othTag = othIsArr ? arrayTag : getTag$1(other);
      objTag = objTag == argsTag ? objectTag$1 : objTag;
      othTag = othTag == argsTag ? objectTag$1 : othTag;
      var objIsObj = objTag == objectTag$1, othIsObj = othTag == objectTag$1, isSameTag = objTag == othTag;
      if (isSameTag && isBuffer(object2)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack$1());
        return objIsArr || isTypedArray$1(object2) ? equalArrays(object2, other, bitmask, customizer, equalFunc, stack) : equalByTag(object2, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG$2)) {
        var objIsWrapped = objIsObj && hasOwnProperty$2.call(object2, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty$2.call(other, "__wrapped__");
        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object2.value() : object2, othUnwrapped = othIsWrapped ? other.value() : other;
          stack || (stack = new Stack$1());
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack$1());
      return equalObjects(object2, other, bitmask, customizer, equalFunc, stack);
    }
    var _baseIsEqualDeep = baseIsEqualDeep$1;
    var baseIsEqualDeep = _baseIsEqualDeep, isObjectLike$2 = isObjectLike_1;
    function baseIsEqual$3(value2, other, bitmask, customizer, stack) {
      if (value2 === other) {
        return true;
      }
      if (value2 == null || other == null || !isObjectLike$2(value2) && !isObjectLike$2(other)) {
        return value2 !== value2 && other !== other;
      }
      return baseIsEqualDeep(value2, other, bitmask, customizer, baseIsEqual$3, stack);
    }
    var _baseIsEqual = baseIsEqual$3;
    var Stack = _Stack, baseIsEqual$2 = _baseIsEqual;
    var COMPARE_PARTIAL_FLAG$1 = 1, COMPARE_UNORDERED_FLAG$1 = 2;
    function baseIsMatch$1(object2, source, matchData, customizer) {
      var index = matchData.length, length = index, noCustomizer = !customizer;
      if (object2 == null) {
        return !length;
      }
      object2 = Object(object2);
      while (index--) {
        var data = matchData[index];
        if (noCustomizer && data[2] ? data[1] !== object2[data[0]] : !(data[0] in object2)) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0], objValue = object2[key], srcValue = data[1];
        if (noCustomizer && data[2]) {
          if (objValue === void 0 && !(key in object2)) {
            return false;
          }
        } else {
          var stack = new Stack();
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object2, source, stack);
          }
          if (!(result === void 0 ? baseIsEqual$2(srcValue, objValue, COMPARE_PARTIAL_FLAG$1 | COMPARE_UNORDERED_FLAG$1, customizer, stack) : result)) {
            return false;
          }
        }
      }
      return true;
    }
    var _baseIsMatch = baseIsMatch$1;
    var isObject$4 = isObject_1;
    function isStrictComparable$2(value2) {
      return value2 === value2 && !isObject$4(value2);
    }
    var _isStrictComparable = isStrictComparable$2;
    var isStrictComparable$1 = _isStrictComparable, keys$3 = keys_1;
    function getMatchData$1(object2) {
      var result = keys$3(object2), length = result.length;
      while (length--) {
        var key = result[length], value2 = object2[key];
        result[length] = [key, value2, isStrictComparable$1(value2)];
      }
      return result;
    }
    var _getMatchData = getMatchData$1;
    function matchesStrictComparable$2(key, srcValue) {
      return function(object2) {
        if (object2 == null) {
          return false;
        }
        return object2[key] === srcValue && (srcValue !== void 0 || key in Object(object2));
      };
    }
    var _matchesStrictComparable = matchesStrictComparable$2;
    var baseIsMatch = _baseIsMatch, getMatchData = _getMatchData, matchesStrictComparable$1 = _matchesStrictComparable;
    function baseMatches$1(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable$1(matchData[0][0], matchData[0][1]);
      }
      return function(object2) {
        return object2 === source || baseIsMatch(object2, source, matchData);
      };
    }
    var _baseMatches = baseMatches$1;
    function baseHasIn$1(object2, key) {
      return object2 != null && key in Object(object2);
    }
    var _baseHasIn = baseHasIn$1;
    var castPath = _castPath, isArguments$1 = isArguments_1, isArray$7 = isArray_1, isIndex$1 = _isIndex, isLength = isLength_1, toKey$2 = _toKey;
    function hasPath$1(object2, path, hasFunc) {
      path = castPath(path, object2);
      var index = -1, length = path.length, result = false;
      while (++index < length) {
        var key = toKey$2(path[index]);
        if (!(result = object2 != null && hasFunc(object2, key))) {
          break;
        }
        object2 = object2[key];
      }
      if (result || ++index != length) {
        return result;
      }
      length = object2 == null ? 0 : object2.length;
      return !!length && isLength(length) && isIndex$1(key, length) && (isArray$7(object2) || isArguments$1(object2));
    }
    var _hasPath = hasPath$1;
    var baseHasIn = _baseHasIn, hasPath = _hasPath;
    function hasIn$1(object2, path) {
      return object2 != null && hasPath(object2, path, baseHasIn);
    }
    var hasIn_1 = hasIn$1;
    var baseIsEqual$1 = _baseIsEqual, get = get_1, hasIn = hasIn_1, isKey$1 = _isKey, isStrictComparable = _isStrictComparable, matchesStrictComparable = _matchesStrictComparable, toKey$1 = _toKey;
    var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
    function baseMatchesProperty$1(path, srcValue) {
      if (isKey$1(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey$1(path), srcValue);
      }
      return function(object2) {
        var objValue = get(object2, path);
        return objValue === void 0 && objValue === srcValue ? hasIn(object2, path) : baseIsEqual$1(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
      };
    }
    var _baseMatchesProperty = baseMatchesProperty$1;
    function identity$b(value2) {
      return value2;
    }
    var identity_1 = identity$b;
    function baseProperty$1(key) {
      return function(object2) {
        return object2 == null ? void 0 : object2[key];
      };
    }
    var _baseProperty = baseProperty$1;
    var baseGet$1 = _baseGet;
    function basePropertyDeep$1(path) {
      return function(object2) {
        return baseGet$1(object2, path);
      };
    }
    var _basePropertyDeep = basePropertyDeep$1;
    var baseProperty = _baseProperty, basePropertyDeep = _basePropertyDeep, isKey = _isKey, toKey = _toKey;
    function property$1(path) {
      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    }
    var property_1 = property$1;
    var baseMatches = _baseMatches, baseMatchesProperty = _baseMatchesProperty, identity$a = identity_1, isArray$6 = isArray_1, property = property_1;
    function baseIteratee$8(value2) {
      if (typeof value2 == "function") {
        return value2;
      }
      if (value2 == null) {
        return identity$a;
      }
      if (typeof value2 == "object") {
        return isArray$6(value2) ? baseMatchesProperty(value2[0], value2[1]) : baseMatches(value2);
      }
      return property(value2);
    }
    var _baseIteratee = baseIteratee$8;
    function baseFindIndex$2(array2, predicate, fromIndex, fromRight) {
      var length = array2.length, index = fromIndex + (fromRight ? 1 : -1);
      while (fromRight ? index-- : ++index < length) {
        if (predicate(array2[index], index, array2)) {
          return index;
        }
      }
      return -1;
    }
    var _baseFindIndex = baseFindIndex$2;
    function baseIsNaN$1(value2) {
      return value2 !== value2;
    }
    var _baseIsNaN = baseIsNaN$1;
    function strictIndexOf$1(array2, value2, fromIndex) {
      var index = fromIndex - 1, length = array2.length;
      while (++index < length) {
        if (array2[index] === value2) {
          return index;
        }
      }
      return -1;
    }
    var _strictIndexOf = strictIndexOf$1;
    var baseFindIndex$1 = _baseFindIndex, baseIsNaN = _baseIsNaN, strictIndexOf = _strictIndexOf;
    function baseIndexOf$1(array2, value2, fromIndex) {
      return value2 === value2 ? strictIndexOf(array2, value2, fromIndex) : baseFindIndex$1(array2, baseIsNaN, fromIndex);
    }
    var _baseIndexOf = baseIndexOf$1;
    var baseIndexOf = _baseIndexOf;
    function arrayIncludes$1(array2, value2) {
      var length = array2 == null ? 0 : array2.length;
      return !!length && baseIndexOf(array2, value2, 0) > -1;
    }
    var _arrayIncludes = arrayIncludes$1;
    function arrayIncludesWith$1(array2, value2, comparator) {
      var index = -1, length = array2 == null ? 0 : array2.length;
      while (++index < length) {
        if (comparator(value2, array2[index])) {
          return true;
        }
      }
      return false;
    }
    var _arrayIncludesWith = arrayIncludesWith$1;
    function noop$1() {
    }
    var noop_1 = noop$1;
    var Set$1 = _Set, noop = noop_1, setToArray$1 = _setToArray;
    var INFINITY$1 = 1 / 0;
    var createSet$1 = !(Set$1 && 1 / setToArray$1(new Set$1([, -0]))[1] == INFINITY$1) ? noop : function(values) {
      return new Set$1(values);
    };
    var _createSet = createSet$1;
    var SetCache = _SetCache, arrayIncludes = _arrayIncludes, arrayIncludesWith = _arrayIncludesWith, cacheHas = _cacheHas, createSet = _createSet, setToArray = _setToArray;
    var LARGE_ARRAY_SIZE = 200;
    function baseUniq$1(array2, iteratee, comparator) {
      var index = -1, includes = arrayIncludes, length = array2.length, isCommon = true, result = [], seen = result;
      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      } else if (length >= LARGE_ARRAY_SIZE) {
        var set2 = iteratee ? null : createSet(array2);
        if (set2) {
          return setToArray(set2);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache();
      } else {
        seen = iteratee ? [] : result;
      }
      outer:
        while (++index < length) {
          var value2 = array2[index], computed = iteratee ? iteratee(value2) : value2;
          value2 = comparator || value2 !== 0 ? value2 : 0;
          if (isCommon && computed === computed) {
            var seenIndex = seen.length;
            while (seenIndex--) {
              if (seen[seenIndex] === computed) {
                continue outer;
              }
            }
            if (iteratee) {
              seen.push(computed);
            }
            result.push(value2);
          } else if (!includes(seen, computed, comparator)) {
            if (seen !== result) {
              seen.push(computed);
            }
            result.push(value2);
          }
        }
      return result;
    }
    var _baseUniq = baseUniq$1;
    var baseIteratee$7 = _baseIteratee, baseUniq = _baseUniq;
    function uniqBy(array2, iteratee) {
      return array2 && array2.length ? baseUniq(array2, baseIteratee$7(iteratee)) : [];
    }
    var uniqBy_1 = uniqBy;
    const uniqBy$1 = /* @__PURE__ */ getDefaultExportFromCjs(uniqBy_1);
    function getUniqPayload(payload, option, defaultUniqBy2) {
      if (option === true) {
        return uniqBy$1(payload, defaultUniqBy2);
      }
      if (isFunction$4(option)) {
        return uniqBy$1(payload, option);
      }
      return payload;
    }
    function _typeof$A(o2) {
      "@babel/helpers - typeof";
      return _typeof$A = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
        return typeof o3;
      } : function(o3) {
        return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
      }, _typeof$A(o2);
    }
    var _excluded$c = ["ref"];
    function ownKeys$w(e3, r2) {
      var t2 = Object.keys(e3);
      if (Object.getOwnPropertySymbols) {
        var o2 = Object.getOwnPropertySymbols(e3);
        r2 && (o2 = o2.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e3, r3).enumerable;
        })), t2.push.apply(t2, o2);
      }
      return t2;
    }
    function _objectSpread$w(e3) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t2 = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$w(Object(t2), true).forEach(function(r3) {
          _defineProperty$z(e3, r3, t2[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$w(Object(t2)).forEach(function(r3) {
          Object.defineProperty(e3, r3, Object.getOwnPropertyDescriptor(t2, r3));
        });
      }
      return e3;
    }
    function _classCallCheck$a(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties$a(target, props) {
      for (var i2 = 0; i2 < props.length; i2++) {
        var descriptor = props[i2];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey$z(descriptor.key), descriptor);
      }
    }
    function _createClass$a(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties$a(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties$a(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _callSuper$6(t2, o2, e3) {
      return o2 = _getPrototypeOf$7(o2), _possibleConstructorReturn$7(t2, _isNativeReflectConstruct$7() ? Reflect.construct(o2, e3 || [], _getPrototypeOf$7(t2).constructor) : o2.apply(t2, e3));
    }
    function _possibleConstructorReturn$7(self2, call) {
      if (call && (_typeof$A(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }
      return _assertThisInitialized$7(self2);
    }
    function _isNativeReflectConstruct$7() {
      try {
        var t2 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
      } catch (t3) {
      }
      return (_isNativeReflectConstruct$7 = function _isNativeReflectConstruct2() {
        return !!t2;
      })();
    }
    function _getPrototypeOf$7(o2) {
      _getPrototypeOf$7 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o3) {
        return o3.__proto__ || Object.getPrototypeOf(o3);
      };
      return _getPrototypeOf$7(o2);
    }
    function _assertThisInitialized$7(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _inherits$7(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      Object.defineProperty(subClass, "prototype", { writable: false });
      if (superClass)
        _setPrototypeOf$7(subClass, superClass);
    }
    function _setPrototypeOf$7(o2, p2) {
      _setPrototypeOf$7 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o3, p3) {
        o3.__proto__ = p3;
        return o3;
      };
      return _setPrototypeOf$7(o2, p2);
    }
    function _defineProperty$z(obj, key, value2) {
      key = _toPropertyKey$z(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value: value2, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value2;
      }
      return obj;
    }
    function _toPropertyKey$z(t2) {
      var i2 = _toPrimitive$z(t2, "string");
      return "symbol" == _typeof$A(i2) ? i2 : String(i2);
    }
    function _toPrimitive$z(t2, r2) {
      if ("object" != _typeof$A(t2) || !t2)
        return t2;
      var e3 = t2[Symbol.toPrimitive];
      if (void 0 !== e3) {
        var i2 = e3.call(t2, r2 || "default");
        if ("object" != _typeof$A(i2))
          return i2;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r2 ? String : Number)(t2);
    }
    function _objectWithoutProperties$c(source, excluded) {
      if (source == null)
        return {};
      var target = _objectWithoutPropertiesLoose$c(source, excluded);
      var key, i2;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i2 = 0; i2 < sourceSymbolKeys.length; i2++) {
          key = sourceSymbolKeys[i2];
          if (excluded.indexOf(key) >= 0)
            continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key))
            continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose$c(source, excluded) {
      if (source == null)
        return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i2;
      for (i2 = 0; i2 < sourceKeys.length; i2++) {
        key = sourceKeys[i2];
        if (excluded.indexOf(key) >= 0)
          continue;
        target[key] = source[key];
      }
      return target;
    }
    function defaultUniqBy$1(entry) {
      return entry.value;
    }
    function renderContent$1(content, props) {
      if (/* @__PURE__ */ React$1.isValidElement(content)) {
        return /* @__PURE__ */ React$1.cloneElement(content, props);
      }
      if (typeof content === "function") {
        return /* @__PURE__ */ React$1.createElement(content, props);
      }
      props.ref;
      var otherProps = _objectWithoutProperties$c(props, _excluded$c);
      return /* @__PURE__ */ React$1.createElement(DefaultLegendContent, otherProps);
    }
    var EPS$1 = 1;
    var Legend = /* @__PURE__ */ function(_PureComponent) {
      _inherits$7(Legend2, _PureComponent);
      function Legend2() {
        var _this;
        _classCallCheck$a(this, Legend2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _callSuper$6(this, Legend2, [].concat(args));
        _defineProperty$z(_assertThisInitialized$7(_this), "lastBoundingBox", {
          width: -1,
          height: -1
        });
        return _this;
      }
      _createClass$a(Legend2, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          this.updateBBox();
        }
      }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate() {
          this.updateBBox();
        }
      }, {
        key: "getBBox",
        value: function getBBox() {
          if (this.wrapperNode && this.wrapperNode.getBoundingClientRect) {
            return this.wrapperNode.getBoundingClientRect();
          }
          return null;
        }
      }, {
        key: "updateBBox",
        value: function updateBBox() {
          var onBBoxUpdate = this.props.onBBoxUpdate;
          if (this.wrapperNode && this.wrapperNode.getBoundingClientRect) {
            var _box = this.wrapperNode.getBoundingClientRect();
            if (Math.abs(_box.width - this.lastBoundingBox.width) > EPS$1 || Math.abs(_box.height - this.lastBoundingBox.height) > EPS$1) {
              this.lastBoundingBox.width = _box.width;
              this.lastBoundingBox.height = _box.height;
              if (onBBoxUpdate) {
                onBBoxUpdate(_box);
              }
            }
          } else if (this.lastBoundingBox.width !== -1 || this.lastBoundingBox.height !== -1) {
            this.lastBoundingBox.width = -1;
            this.lastBoundingBox.height = -1;
            if (onBBoxUpdate) {
              onBBoxUpdate(null);
            }
          }
        }
      }, {
        key: "getBBoxSnapshot",
        value: function getBBoxSnapshot() {
          if (this.lastBoundingBox.width >= 0 && this.lastBoundingBox.height >= 0) {
            return _objectSpread$w({}, this.lastBoundingBox);
          }
          return {
            width: 0,
            height: 0
          };
        }
      }, {
        key: "getDefaultPosition",
        value: function getDefaultPosition(style) {
          var _this$props = this.props, layout = _this$props.layout, align = _this$props.align, verticalAlign = _this$props.verticalAlign, margin = _this$props.margin, chartWidth = _this$props.chartWidth, chartHeight = _this$props.chartHeight;
          var hPos, vPos;
          if (!style || (style.left === void 0 || style.left === null) && (style.right === void 0 || style.right === null)) {
            if (align === "center" && layout === "vertical") {
              var _box2 = this.getBBoxSnapshot();
              hPos = {
                left: ((chartWidth || 0) - _box2.width) / 2
              };
            } else {
              hPos = align === "right" ? {
                right: margin && margin.right || 0
              } : {
                left: margin && margin.left || 0
              };
            }
          }
          if (!style || (style.top === void 0 || style.top === null) && (style.bottom === void 0 || style.bottom === null)) {
            if (verticalAlign === "middle") {
              var _box3 = this.getBBoxSnapshot();
              vPos = {
                top: ((chartHeight || 0) - _box3.height) / 2
              };
            } else {
              vPos = verticalAlign === "bottom" ? {
                bottom: margin && margin.bottom || 0
              } : {
                top: margin && margin.top || 0
              };
            }
          }
          return _objectSpread$w(_objectSpread$w({}, hPos), vPos);
        }
      }, {
        key: "render",
        value: function render() {
          var _this2 = this;
          var _this$props2 = this.props, content = _this$props2.content, width = _this$props2.width, height = _this$props2.height, wrapperStyle = _this$props2.wrapperStyle, payloadUniqBy = _this$props2.payloadUniqBy, payload = _this$props2.payload;
          var outerStyle = _objectSpread$w(_objectSpread$w({
            position: "absolute",
            width: width || "auto",
            height: height || "auto"
          }, this.getDefaultPosition(wrapperStyle)), wrapperStyle);
          return /* @__PURE__ */ React$1.createElement("div", {
            className: "recharts-legend-wrapper",
            style: outerStyle,
            ref: function ref(node) {
              _this2.wrapperNode = node;
            }
          }, renderContent$1(content, _objectSpread$w(_objectSpread$w({}, this.props), {}, {
            payload: getUniqPayload(payload, payloadUniqBy, defaultUniqBy$1)
          })));
        }
      }], [{
        key: "getWithHeight",
        value: function getWithHeight(item, chartWidth) {
          var layout = item.props.layout;
          if (layout === "vertical" && isNumber(item.props.height)) {
            return {
              height: item.props.height
            };
          }
          if (layout === "horizontal") {
            return {
              width: item.props.width || chartWidth
            };
          }
          return null;
        }
      }]);
      return Legend2;
    }(reactExports.PureComponent);
    _defineProperty$z(Legend, "displayName", "Legend");
    _defineProperty$z(Legend, "defaultProps", {
      iconSize: 14,
      layout: "horizontal",
      align: "center",
      verticalAlign: "bottom"
    });
    var Symbol$1 = _Symbol, isArguments = isArguments_1, isArray$5 = isArray_1;
    var spreadableSymbol = Symbol$1 ? Symbol$1.isConcatSpreadable : void 0;
    function isFlattenable$1(value2) {
      return isArray$5(value2) || isArguments(value2) || !!(spreadableSymbol && value2 && value2[spreadableSymbol]);
    }
    var _isFlattenable = isFlattenable$1;
    var arrayPush = _arrayPush, isFlattenable = _isFlattenable;
    function baseFlatten$2(array2, depth, predicate, isStrict, result) {
      var index = -1, length = array2.length;
      predicate || (predicate = isFlattenable);
      result || (result = []);
      while (++index < length) {
        var value2 = array2[index];
        if (depth > 0 && predicate(value2)) {
          if (depth > 1) {
            baseFlatten$2(value2, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value2);
          }
        } else if (!isStrict) {
          result[result.length] = value2;
        }
      }
      return result;
    }
    var _baseFlatten = baseFlatten$2;
    function createBaseFor$1(fromRight) {
      return function(object2, iteratee, keysFunc) {
        var index = -1, iterable = Object(object2), props = keysFunc(object2), length = props.length;
        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object2;
      };
    }
    var _createBaseFor = createBaseFor$1;
    var createBaseFor = _createBaseFor;
    var baseFor$1 = createBaseFor();
    var _baseFor = baseFor$1;
    var baseFor = _baseFor, keys$2 = keys_1;
    function baseForOwn$2(object2, iteratee) {
      return object2 && baseFor(object2, iteratee, keys$2);
    }
    var _baseForOwn = baseForOwn$2;
    var isArrayLike$3 = isArrayLike_1;
    function createBaseEach$1(eachFunc, fromRight) {
      return function(collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike$3(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length, index = fromRight ? length : -1, iterable = Object(collection);
        while (fromRight ? index-- : ++index < length) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }
    var _createBaseEach = createBaseEach$1;
    var baseForOwn$1 = _baseForOwn, createBaseEach = _createBaseEach;
    var baseEach$3 = createBaseEach(baseForOwn$1);
    var _baseEach = baseEach$3;
    var baseEach$2 = _baseEach, isArrayLike$2 = isArrayLike_1;
    function baseMap$2(collection, iteratee) {
      var index = -1, result = isArrayLike$2(collection) ? Array(collection.length) : [];
      baseEach$2(collection, function(value2, key, collection2) {
        result[++index] = iteratee(value2, key, collection2);
      });
      return result;
    }
    var _baseMap = baseMap$2;
    function baseSortBy$1(array2, comparer) {
      var length = array2.length;
      array2.sort(comparer);
      while (length--) {
        array2[length] = array2[length].value;
      }
      return array2;
    }
    var _baseSortBy = baseSortBy$1;
    var isSymbol$2 = isSymbol_1;
    function compareAscending$1(value2, other) {
      if (value2 !== other) {
        var valIsDefined = value2 !== void 0, valIsNull = value2 === null, valIsReflexive = value2 === value2, valIsSymbol = isSymbol$2(value2);
        var othIsDefined = other !== void 0, othIsNull = other === null, othIsReflexive = other === other, othIsSymbol = isSymbol$2(other);
        if (!othIsNull && !othIsSymbol && !valIsSymbol && value2 > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {
          return 1;
        }
        if (!valIsNull && !valIsSymbol && !othIsSymbol && value2 < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {
          return -1;
        }
      }
      return 0;
    }
    var _compareAscending = compareAscending$1;
    var compareAscending = _compareAscending;
    function compareMultiple$1(object2, other, orders) {
      var index = -1, objCriteria = object2.criteria, othCriteria = other.criteria, length = objCriteria.length, ordersLength = orders.length;
      while (++index < length) {
        var result = compareAscending(objCriteria[index], othCriteria[index]);
        if (result) {
          if (index >= ordersLength) {
            return result;
          }
          var order = orders[index];
          return result * (order == "desc" ? -1 : 1);
        }
      }
      return object2.index - other.index;
    }
    var _compareMultiple = compareMultiple$1;
    var arrayMap$1 = _arrayMap, baseGet = _baseGet, baseIteratee$6 = _baseIteratee, baseMap$1 = _baseMap, baseSortBy = _baseSortBy, baseUnary = _baseUnary, compareMultiple = _compareMultiple, identity$9 = identity_1, isArray$4 = isArray_1;
    function baseOrderBy$1(collection, iteratees, orders) {
      if (iteratees.length) {
        iteratees = arrayMap$1(iteratees, function(iteratee) {
          if (isArray$4(iteratee)) {
            return function(value2) {
              return baseGet(value2, iteratee.length === 1 ? iteratee[0] : iteratee);
            };
          }
          return iteratee;
        });
      } else {
        iteratees = [identity$9];
      }
      var index = -1;
      iteratees = arrayMap$1(iteratees, baseUnary(baseIteratee$6));
      var result = baseMap$1(collection, function(value2, key, collection2) {
        var criteria = arrayMap$1(iteratees, function(iteratee) {
          return iteratee(value2);
        });
        return { "criteria": criteria, "index": ++index, "value": value2 };
      });
      return baseSortBy(result, function(object2, other) {
        return compareMultiple(object2, other, orders);
      });
    }
    var _baseOrderBy = baseOrderBy$1;
    function apply$1(func, thisArg, args) {
      switch (args.length) {
        case 0:
          return func.call(thisArg);
        case 1:
          return func.call(thisArg, args[0]);
        case 2:
          return func.call(thisArg, args[0], args[1]);
        case 3:
          return func.call(thisArg, args[0], args[1], args[2]);
      }
      return func.apply(thisArg, args);
    }
    var _apply = apply$1;
    var apply = _apply;
    var nativeMax$3 = Math.max;
    function overRest$1(func, start, transform) {
      start = nativeMax$3(start === void 0 ? func.length - 1 : start, 0);
      return function() {
        var args = arguments, index = -1, length = nativeMax$3(args.length - start, 0), array2 = Array(length);
        while (++index < length) {
          array2[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = transform(array2);
        return apply(func, this, otherArgs);
      };
    }
    var _overRest = overRest$1;
    function constant$2(value2) {
      return function() {
        return value2;
      };
    }
    var constant_1 = constant$2;
    var getNative = _getNative;
    var defineProperty$2 = function() {
      try {
        var func = getNative(Object, "defineProperty");
        func({}, "", {});
        return func;
      } catch (e3) {
      }
    }();
    var _defineProperty$y = defineProperty$2;
    var constant$1 = constant_1, defineProperty$1 = _defineProperty$y, identity$8 = identity_1;
    var baseSetToString$1 = !defineProperty$1 ? identity$8 : function(func, string2) {
      return defineProperty$1(func, "toString", {
        "configurable": true,
        "enumerable": false,
        "value": constant$1(string2),
        "writable": true
      });
    };
    var _baseSetToString = baseSetToString$1;
    var HOT_COUNT = 800, HOT_SPAN = 16;
    var nativeNow = Date.now;
    function shortOut$1(func) {
      var count = 0, lastCalled = 0;
      return function() {
        var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(void 0, arguments);
      };
    }
    var _shortOut = shortOut$1;
    var baseSetToString = _baseSetToString, shortOut = _shortOut;
    var setToString$1 = shortOut(baseSetToString);
    var _setToString = setToString$1;
    var identity$7 = identity_1, overRest = _overRest, setToString = _setToString;
    function baseRest$1(func, start) {
      return setToString(overRest(func, start, identity$7), func + "");
    }
    var _baseRest = baseRest$1;
    var eq = eq_1, isArrayLike$1 = isArrayLike_1, isIndex = _isIndex, isObject$3 = isObject_1;
    function isIterateeCall$4(value2, index, object2) {
      if (!isObject$3(object2)) {
        return false;
      }
      var type = typeof index;
      if (type == "number" ? isArrayLike$1(object2) && isIndex(index, object2.length) : type == "string" && index in object2) {
        return eq(object2[index], value2);
      }
      return false;
    }
    var _isIterateeCall = isIterateeCall$4;
    var baseFlatten$1 = _baseFlatten, baseOrderBy = _baseOrderBy, baseRest = _baseRest, isIterateeCall$3 = _isIterateeCall;
    var sortBy = baseRest(function(collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var length = iteratees.length;
      if (length > 1 && isIterateeCall$3(collection, iteratees[0], iteratees[1])) {
        iteratees = [];
      } else if (length > 2 && isIterateeCall$3(iteratees[0], iteratees[1], iteratees[2])) {
        iteratees = [iteratees[0]];
      }
      return baseOrderBy(collection, baseFlatten$1(iteratees, 1), []);
    });
    var sortBy_1 = sortBy;
    const sortBy$1 = /* @__PURE__ */ getDefaultExportFromCjs(sortBy_1);
    function _typeof$z(o2) {
      "@babel/helpers - typeof";
      return _typeof$z = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
        return typeof o3;
      } : function(o3) {
        return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
      }, _typeof$z(o2);
    }
    function _extends$l() {
      _extends$l = Object.assign ? Object.assign.bind() : function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends$l.apply(this, arguments);
    }
    function _slicedToArray$b(arr, i2) {
      return _arrayWithHoles$c(arr) || _iterableToArrayLimit$b(arr, i2) || _unsupportedIterableToArray$i(arr, i2) || _nonIterableRest$c();
    }
    function _nonIterableRest$c() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray$i(o2, minLen) {
      if (!o2)
        return;
      if (typeof o2 === "string")
        return _arrayLikeToArray$i(o2, minLen);
      var n2 = Object.prototype.toString.call(o2).slice(8, -1);
      if (n2 === "Object" && o2.constructor)
        n2 = o2.constructor.name;
      if (n2 === "Map" || n2 === "Set")
        return Array.from(o2);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
        return _arrayLikeToArray$i(o2, minLen);
    }
    function _arrayLikeToArray$i(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++)
        arr2[i2] = arr[i2];
      return arr2;
    }
    function _iterableToArrayLimit$b(r2, l2) {
      var t2 = null == r2 ? null : "undefined" != typeof Symbol && r2[Symbol.iterator] || r2["@@iterator"];
      if (null != t2) {
        var e3, n2, i2, u2, a2 = [], f2 = true, o2 = false;
        try {
          if (i2 = (t2 = t2.call(r2)).next, 0 === l2) {
            if (Object(t2) !== t2)
              return;
            f2 = false;
          } else
            for (; !(f2 = (e3 = i2.call(t2)).done) && (a2.push(e3.value), a2.length !== l2); f2 = true)
              ;
        } catch (r3) {
          o2 = true, n2 = r3;
        } finally {
          try {
            if (!f2 && null != t2["return"] && (u2 = t2["return"](), Object(u2) !== u2))
              return;
          } finally {
            if (o2)
              throw n2;
          }
        }
        return a2;
      }
    }
    function _arrayWithHoles$c(arr) {
      if (Array.isArray(arr))
        return arr;
    }
    function ownKeys$v(e3, r2) {
      var t2 = Object.keys(e3);
      if (Object.getOwnPropertySymbols) {
        var o2 = Object.getOwnPropertySymbols(e3);
        r2 && (o2 = o2.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e3, r3).enumerable;
        })), t2.push.apply(t2, o2);
      }
      return t2;
    }
    function _objectSpread$v(e3) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t2 = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$v(Object(t2), true).forEach(function(r3) {
          _defineProperty$x(e3, r3, t2[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$v(Object(t2)).forEach(function(r3) {
          Object.defineProperty(e3, r3, Object.getOwnPropertyDescriptor(t2, r3));
        });
      }
      return e3;
    }
    function _defineProperty$x(obj, key, value2) {
      key = _toPropertyKey$y(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value: value2, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value2;
      }
      return obj;
    }
    function _toPropertyKey$y(t2) {
      var i2 = _toPrimitive$y(t2, "string");
      return "symbol" == _typeof$z(i2) ? i2 : String(i2);
    }
    function _toPrimitive$y(t2, r2) {
      if ("object" != _typeof$z(t2) || !t2)
        return t2;
      var e3 = t2[Symbol.toPrimitive];
      if (void 0 !== e3) {
        var i2 = e3.call(t2, r2 || "default");
        if ("object" != _typeof$z(i2))
          return i2;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r2 ? String : Number)(t2);
    }
    function defaultFormatter(value2) {
      return Array.isArray(value2) && isNumOrStr(value2[0]) && isNumOrStr(value2[1]) ? value2.join(" ~ ") : value2;
    }
    var DefaultTooltipContent = function DefaultTooltipContent2(props) {
      var _props$separator = props.separator, separator = _props$separator === void 0 ? " : " : _props$separator, _props$contentStyle = props.contentStyle, contentStyle = _props$contentStyle === void 0 ? {} : _props$contentStyle, _props$itemStyle = props.itemStyle, itemStyle = _props$itemStyle === void 0 ? {} : _props$itemStyle, _props$labelStyle = props.labelStyle, labelStyle = _props$labelStyle === void 0 ? {} : _props$labelStyle, payload = props.payload, formatter = props.formatter, itemSorter = props.itemSorter, wrapperClassName = props.wrapperClassName, labelClassName = props.labelClassName, label = props.label, labelFormatter = props.labelFormatter, _props$accessibilityL = props.accessibilityLayer, accessibilityLayer = _props$accessibilityL === void 0 ? false : _props$accessibilityL;
      var renderContent2 = function renderContent3() {
        if (payload && payload.length) {
          var listStyle = {
            padding: 0,
            margin: 0
          };
          var items = (itemSorter ? sortBy$1(payload, itemSorter) : payload).map(function(entry, i2) {
            if (entry.type === "none") {
              return null;
            }
            var finalItemStyle = _objectSpread$v({
              display: "block",
              paddingTop: 4,
              paddingBottom: 4,
              color: entry.color || "#000"
            }, itemStyle);
            var finalFormatter = entry.formatter || formatter || defaultFormatter;
            var value2 = entry.value, name = entry.name;
            var finalValue = value2;
            var finalName = name;
            if (finalFormatter && finalValue != null && finalName != null) {
              var formatted = finalFormatter(value2, name, entry, i2, payload);
              if (Array.isArray(formatted)) {
                var _formatted = _slicedToArray$b(formatted, 2);
                finalValue = _formatted[0];
                finalName = _formatted[1];
              } else {
                finalValue = formatted;
              }
            }
            return (
              // eslint-disable-next-line react/no-array-index-key
              /* @__PURE__ */ React$1.createElement("li", {
                className: "recharts-tooltip-item",
                key: "tooltip-item-".concat(i2),
                style: finalItemStyle
              }, isNumOrStr(finalName) ? /* @__PURE__ */ React$1.createElement("span", {
                className: "recharts-tooltip-item-name"
              }, finalName) : null, isNumOrStr(finalName) ? /* @__PURE__ */ React$1.createElement("span", {
                className: "recharts-tooltip-item-separator"
              }, separator) : null, /* @__PURE__ */ React$1.createElement("span", {
                className: "recharts-tooltip-item-value"
              }, finalValue), /* @__PURE__ */ React$1.createElement("span", {
                className: "recharts-tooltip-item-unit"
              }, entry.unit || ""))
            );
          });
          return /* @__PURE__ */ React$1.createElement("ul", {
            className: "recharts-tooltip-item-list",
            style: listStyle
          }, items);
        }
        return null;
      };
      var finalStyle = _objectSpread$v({
        margin: 0,
        padding: 10,
        backgroundColor: "#fff",
        border: "1px solid #ccc",
        whiteSpace: "nowrap"
      }, contentStyle);
      var finalLabelStyle = _objectSpread$v({
        margin: 0
      }, labelStyle);
      var hasLabel = !isNil$1(label);
      var finalLabel = hasLabel ? label : "";
      var wrapperCN = clsx("recharts-default-tooltip", wrapperClassName);
      var labelCN = clsx("recharts-tooltip-label", labelClassName);
      if (hasLabel && labelFormatter && payload !== void 0 && payload !== null) {
        finalLabel = labelFormatter(label, payload);
      }
      var accessibilityAttributes = accessibilityLayer ? {
        role: "status",
        "aria-live": "assertive"
      } : {};
      return /* @__PURE__ */ React$1.createElement("div", _extends$l({
        className: wrapperCN,
        style: finalStyle
      }, accessibilityAttributes), /* @__PURE__ */ React$1.createElement("p", {
        className: labelCN,
        style: finalLabelStyle
      }, /* @__PURE__ */ React$1.isValidElement(finalLabel) ? finalLabel : "".concat(finalLabel)), renderContent2());
    };
    function _typeof$y(o2) {
      "@babel/helpers - typeof";
      return _typeof$y = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
        return typeof o3;
      } : function(o3) {
        return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
      }, _typeof$y(o2);
    }
    function _defineProperty$w(obj, key, value2) {
      key = _toPropertyKey$x(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value: value2, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value2;
      }
      return obj;
    }
    function _toPropertyKey$x(t2) {
      var i2 = _toPrimitive$x(t2, "string");
      return "symbol" == _typeof$y(i2) ? i2 : String(i2);
    }
    function _toPrimitive$x(t2, r2) {
      if ("object" != _typeof$y(t2) || !t2)
        return t2;
      var e3 = t2[Symbol.toPrimitive];
      if (void 0 !== e3) {
        var i2 = e3.call(t2, r2 || "default");
        if ("object" != _typeof$y(i2))
          return i2;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r2 ? String : Number)(t2);
    }
    var CSS_CLASS_PREFIX = "recharts-tooltip-wrapper";
    var TOOLTIP_HIDDEN = {
      visibility: "hidden"
    };
    function getTooltipCSSClassName(_ref) {
      var coordinate = _ref.coordinate, translateX = _ref.translateX, translateY = _ref.translateY;
      return clsx(CSS_CLASS_PREFIX, _defineProperty$w(_defineProperty$w(_defineProperty$w(_defineProperty$w({}, "".concat(CSS_CLASS_PREFIX, "-right"), isNumber(translateX) && coordinate && isNumber(coordinate.x) && translateX >= coordinate.x), "".concat(CSS_CLASS_PREFIX, "-left"), isNumber(translateX) && coordinate && isNumber(coordinate.x) && translateX < coordinate.x), "".concat(CSS_CLASS_PREFIX, "-bottom"), isNumber(translateY) && coordinate && isNumber(coordinate.y) && translateY >= coordinate.y), "".concat(CSS_CLASS_PREFIX, "-top"), isNumber(translateY) && coordinate && isNumber(coordinate.y) && translateY < coordinate.y));
    }
    function getTooltipTranslateXY(_ref2) {
      var allowEscapeViewBox = _ref2.allowEscapeViewBox, coordinate = _ref2.coordinate, key = _ref2.key, offsetTopLeft = _ref2.offsetTopLeft, position = _ref2.position, reverseDirection = _ref2.reverseDirection, tooltipDimension = _ref2.tooltipDimension, viewBox = _ref2.viewBox, viewBoxDimension = _ref2.viewBoxDimension;
      if (position && isNumber(position[key])) {
        return position[key];
      }
      var negative = coordinate[key] - tooltipDimension - offsetTopLeft;
      var positive = coordinate[key] + offsetTopLeft;
      if (allowEscapeViewBox[key]) {
        return reverseDirection[key] ? negative : positive;
      }
      if (reverseDirection[key]) {
        var _tooltipBoundary = negative;
        var _viewBoxBoundary = viewBox[key];
        if (_tooltipBoundary < _viewBoxBoundary) {
          return Math.max(positive, viewBox[key]);
        }
        return Math.max(negative, viewBox[key]);
      }
      var tooltipBoundary = positive + tooltipDimension;
      var viewBoxBoundary = viewBox[key] + viewBoxDimension;
      if (tooltipBoundary > viewBoxBoundary) {
        return Math.max(negative, viewBox[key]);
      }
      return Math.max(positive, viewBox[key]);
    }
    function getTransformStyle(_ref3) {
      var translateX = _ref3.translateX, translateY = _ref3.translateY, useTranslate3d = _ref3.useTranslate3d;
      return {
        transform: useTranslate3d ? "translate3d(".concat(translateX, "px, ").concat(translateY, "px, 0)") : "translate(".concat(translateX, "px, ").concat(translateY, "px)")
      };
    }
    function getTooltipTranslate(_ref4) {
      var allowEscapeViewBox = _ref4.allowEscapeViewBox, coordinate = _ref4.coordinate, offsetTopLeft = _ref4.offsetTopLeft, position = _ref4.position, reverseDirection = _ref4.reverseDirection, tooltipBox = _ref4.tooltipBox, useTranslate3d = _ref4.useTranslate3d, viewBox = _ref4.viewBox;
      var cssProperties, translateX, translateY;
      if (tooltipBox.height > 0 && tooltipBox.width > 0 && coordinate) {
        translateX = getTooltipTranslateXY({
          allowEscapeViewBox,
          coordinate,
          key: "x",
          offsetTopLeft,
          position,
          reverseDirection,
          tooltipDimension: tooltipBox.width,
          viewBox,
          viewBoxDimension: viewBox.width
        });
        translateY = getTooltipTranslateXY({
          allowEscapeViewBox,
          coordinate,
          key: "y",
          offsetTopLeft,
          position,
          reverseDirection,
          tooltipDimension: tooltipBox.height,
          viewBox,
          viewBoxDimension: viewBox.height
        });
        cssProperties = getTransformStyle({
          translateX,
          translateY,
          useTranslate3d
        });
      } else {
        cssProperties = TOOLTIP_HIDDEN;
      }
      return {
        cssProperties,
        cssClasses: getTooltipCSSClassName({
          translateX,
          translateY,
          coordinate
        })
      };
    }
    function _typeof$x(o2) {
      "@babel/helpers - typeof";
      return _typeof$x = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
        return typeof o3;
      } : function(o3) {
        return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
      }, _typeof$x(o2);
    }
    function ownKeys$u(e3, r2) {
      var t2 = Object.keys(e3);
      if (Object.getOwnPropertySymbols) {
        var o2 = Object.getOwnPropertySymbols(e3);
        r2 && (o2 = o2.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e3, r3).enumerable;
        })), t2.push.apply(t2, o2);
      }
      return t2;
    }
    function _objectSpread$u(e3) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t2 = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$u(Object(t2), true).forEach(function(r3) {
          _defineProperty$v(e3, r3, t2[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$u(Object(t2)).forEach(function(r3) {
          Object.defineProperty(e3, r3, Object.getOwnPropertyDescriptor(t2, r3));
        });
      }
      return e3;
    }
    function _classCallCheck$9(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties$9(target, props) {
      for (var i2 = 0; i2 < props.length; i2++) {
        var descriptor = props[i2];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey$w(descriptor.key), descriptor);
      }
    }
    function _createClass$9(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties$9(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties$9(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _callSuper$5(t2, o2, e3) {
      return o2 = _getPrototypeOf$6(o2), _possibleConstructorReturn$6(t2, _isNativeReflectConstruct$6() ? Reflect.construct(o2, e3 || [], _getPrototypeOf$6(t2).constructor) : o2.apply(t2, e3));
    }
    function _possibleConstructorReturn$6(self2, call) {
      if (call && (_typeof$x(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }
      return _assertThisInitialized$6(self2);
    }
    function _isNativeReflectConstruct$6() {
      try {
        var t2 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
      } catch (t3) {
      }
      return (_isNativeReflectConstruct$6 = function _isNativeReflectConstruct2() {
        return !!t2;
      })();
    }
    function _getPrototypeOf$6(o2) {
      _getPrototypeOf$6 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o3) {
        return o3.__proto__ || Object.getPrototypeOf(o3);
      };
      return _getPrototypeOf$6(o2);
    }
    function _assertThisInitialized$6(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _inherits$6(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      Object.defineProperty(subClass, "prototype", { writable: false });
      if (superClass)
        _setPrototypeOf$6(subClass, superClass);
    }
    function _setPrototypeOf$6(o2, p2) {
      _setPrototypeOf$6 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o3, p3) {
        o3.__proto__ = p3;
        return o3;
      };
      return _setPrototypeOf$6(o2, p2);
    }
    function _defineProperty$v(obj, key, value2) {
      key = _toPropertyKey$w(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value: value2, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value2;
      }
      return obj;
    }
    function _toPropertyKey$w(t2) {
      var i2 = _toPrimitive$w(t2, "string");
      return "symbol" == _typeof$x(i2) ? i2 : String(i2);
    }
    function _toPrimitive$w(t2, r2) {
      if ("object" != _typeof$x(t2) || !t2)
        return t2;
      var e3 = t2[Symbol.toPrimitive];
      if (void 0 !== e3) {
        var i2 = e3.call(t2, r2 || "default");
        if ("object" != _typeof$x(i2))
          return i2;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r2 ? String : Number)(t2);
    }
    var EPSILON = 1;
    var TooltipBoundingBox = /* @__PURE__ */ function(_PureComponent) {
      _inherits$6(TooltipBoundingBox2, _PureComponent);
      function TooltipBoundingBox2() {
        var _this;
        _classCallCheck$9(this, TooltipBoundingBox2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _callSuper$5(this, TooltipBoundingBox2, [].concat(args));
        _defineProperty$v(_assertThisInitialized$6(_this), "state", {
          dismissed: false,
          dismissedAtCoordinate: {
            x: 0,
            y: 0
          }
        });
        _defineProperty$v(_assertThisInitialized$6(_this), "lastBoundingBox", {
          width: -1,
          height: -1
        });
        _defineProperty$v(_assertThisInitialized$6(_this), "handleKeyDown", function(event) {
          if (event.key === "Escape") {
            var _this$props$coordinat, _this$props$coordinat2, _this$props$coordinat3, _this$props$coordinat4;
            _this.setState({
              dismissed: true,
              dismissedAtCoordinate: {
                x: (_this$props$coordinat = (_this$props$coordinat2 = _this.props.coordinate) === null || _this$props$coordinat2 === void 0 ? void 0 : _this$props$coordinat2.x) !== null && _this$props$coordinat !== void 0 ? _this$props$coordinat : 0,
                y: (_this$props$coordinat3 = (_this$props$coordinat4 = _this.props.coordinate) === null || _this$props$coordinat4 === void 0 ? void 0 : _this$props$coordinat4.y) !== null && _this$props$coordinat3 !== void 0 ? _this$props$coordinat3 : 0
              }
            });
          }
        });
        return _this;
      }
      _createClass$9(TooltipBoundingBox2, [{
        key: "updateBBox",
        value: function updateBBox() {
          if (this.wrapperNode && this.wrapperNode.getBoundingClientRect) {
            var box = this.wrapperNode.getBoundingClientRect();
            if (Math.abs(box.width - this.lastBoundingBox.width) > EPSILON || Math.abs(box.height - this.lastBoundingBox.height) > EPSILON) {
              this.lastBoundingBox.width = box.width;
              this.lastBoundingBox.height = box.height;
            }
          } else if (this.lastBoundingBox.width !== -1 || this.lastBoundingBox.height !== -1) {
            this.lastBoundingBox.width = -1;
            this.lastBoundingBox.height = -1;
          }
        }
      }, {
        key: "componentDidMount",
        value: function componentDidMount() {
          document.addEventListener("keydown", this.handleKeyDown);
          this.updateBBox();
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          document.removeEventListener("keydown", this.handleKeyDown);
        }
      }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate() {
          var _this$props$coordinat5, _this$props$coordinat6;
          if (this.props.active) {
            this.updateBBox();
          }
          if (!this.state.dismissed) {
            return;
          }
          if (((_this$props$coordinat5 = this.props.coordinate) === null || _this$props$coordinat5 === void 0 ? void 0 : _this$props$coordinat5.x) !== this.state.dismissedAtCoordinate.x || ((_this$props$coordinat6 = this.props.coordinate) === null || _this$props$coordinat6 === void 0 ? void 0 : _this$props$coordinat6.y) !== this.state.dismissedAtCoordinate.y) {
            this.state.dismissed = false;
          }
        }
      }, {
        key: "render",
        value: function render() {
          var _this2 = this;
          var _this$props = this.props, active = _this$props.active, allowEscapeViewBox = _this$props.allowEscapeViewBox, animationDuration = _this$props.animationDuration, animationEasing = _this$props.animationEasing, children = _this$props.children, coordinate = _this$props.coordinate, hasPayload = _this$props.hasPayload, isAnimationActive = _this$props.isAnimationActive, offset2 = _this$props.offset, position = _this$props.position, reverseDirection = _this$props.reverseDirection, useTranslate3d = _this$props.useTranslate3d, viewBox = _this$props.viewBox, wrapperStyle = _this$props.wrapperStyle;
          var _getTooltipTranslate = getTooltipTranslate({
            allowEscapeViewBox,
            coordinate,
            offsetTopLeft: offset2,
            position,
            reverseDirection,
            tooltipBox: {
              height: this.lastBoundingBox.height,
              width: this.lastBoundingBox.width
            },
            useTranslate3d,
            viewBox
          }), cssClasses = _getTooltipTranslate.cssClasses, cssProperties = _getTooltipTranslate.cssProperties;
          var outerStyle = _objectSpread$u(_objectSpread$u({
            transition: isAnimationActive && active ? "transform ".concat(animationDuration, "ms ").concat(animationEasing) : void 0
          }, cssProperties), {}, {
            pointerEvents: "none",
            visibility: !this.state.dismissed && active && hasPayload ? "visible" : "hidden",
            position: "absolute",
            top: 0,
            left: 0
          }, wrapperStyle);
          return (
            // This element allow listening to the `Escape` key.
            // See https://github.com/recharts/recharts/pull/2925
            /* @__PURE__ */ React$1.createElement("div", {
              tabIndex: -1,
              className: cssClasses,
              style: outerStyle,
              ref: function ref(node) {
                _this2.wrapperNode = node;
              }
            }, children)
          );
        }
      }]);
      return TooltipBoundingBox2;
    }(reactExports.PureComponent);
    var parseIsSsrByDefault = function parseIsSsrByDefault2() {
      return !(typeof window !== "undefined" && window.document && window.document.createElement && window.setTimeout);
    };
    var Global = {
      isSsr: parseIsSsrByDefault(),
      get: function get2(key) {
        return Global[key];
      },
      set: function set2(key, value2) {
        if (typeof key === "string") {
          Global[key] = value2;
        } else {
          var keys2 = Object.keys(key);
          if (keys2 && keys2.length) {
            keys2.forEach(function(k2) {
              Global[k2] = key[k2];
            });
          }
        }
      }
    };
    function _typeof$w(o2) {
      "@babel/helpers - typeof";
      return _typeof$w = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
        return typeof o3;
      } : function(o3) {
        return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
      }, _typeof$w(o2);
    }
    function ownKeys$t(e3, r2) {
      var t2 = Object.keys(e3);
      if (Object.getOwnPropertySymbols) {
        var o2 = Object.getOwnPropertySymbols(e3);
        r2 && (o2 = o2.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e3, r3).enumerable;
        })), t2.push.apply(t2, o2);
      }
      return t2;
    }
    function _objectSpread$t(e3) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t2 = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$t(Object(t2), true).forEach(function(r3) {
          _defineProperty$u(e3, r3, t2[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$t(Object(t2)).forEach(function(r3) {
          Object.defineProperty(e3, r3, Object.getOwnPropertyDescriptor(t2, r3));
        });
      }
      return e3;
    }
    function _classCallCheck$8(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties$8(target, props) {
      for (var i2 = 0; i2 < props.length; i2++) {
        var descriptor = props[i2];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey$v(descriptor.key), descriptor);
      }
    }
    function _createClass$8(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties$8(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties$8(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _callSuper$4(t2, o2, e3) {
      return o2 = _getPrototypeOf$5(o2), _possibleConstructorReturn$5(t2, _isNativeReflectConstruct$5() ? Reflect.construct(o2, e3 || [], _getPrototypeOf$5(t2).constructor) : o2.apply(t2, e3));
    }
    function _possibleConstructorReturn$5(self2, call) {
      if (call && (_typeof$w(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }
      return _assertThisInitialized$5(self2);
    }
    function _assertThisInitialized$5(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _isNativeReflectConstruct$5() {
      try {
        var t2 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
      } catch (t3) {
      }
      return (_isNativeReflectConstruct$5 = function _isNativeReflectConstruct2() {
        return !!t2;
      })();
    }
    function _getPrototypeOf$5(o2) {
      _getPrototypeOf$5 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o3) {
        return o3.__proto__ || Object.getPrototypeOf(o3);
      };
      return _getPrototypeOf$5(o2);
    }
    function _inherits$5(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      Object.defineProperty(subClass, "prototype", { writable: false });
      if (superClass)
        _setPrototypeOf$5(subClass, superClass);
    }
    function _setPrototypeOf$5(o2, p2) {
      _setPrototypeOf$5 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o3, p3) {
        o3.__proto__ = p3;
        return o3;
      };
      return _setPrototypeOf$5(o2, p2);
    }
    function _defineProperty$u(obj, key, value2) {
      key = _toPropertyKey$v(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value: value2, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value2;
      }
      return obj;
    }
    function _toPropertyKey$v(t2) {
      var i2 = _toPrimitive$v(t2, "string");
      return "symbol" == _typeof$w(i2) ? i2 : String(i2);
    }
    function _toPrimitive$v(t2, r2) {
      if ("object" != _typeof$w(t2) || !t2)
        return t2;
      var e3 = t2[Symbol.toPrimitive];
      if (void 0 !== e3) {
        var i2 = e3.call(t2, r2 || "default");
        if ("object" != _typeof$w(i2))
          return i2;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r2 ? String : Number)(t2);
    }
    function defaultUniqBy(entry) {
      return entry.dataKey;
    }
    function renderContent(content, props) {
      if (/* @__PURE__ */ React$1.isValidElement(content)) {
        return /* @__PURE__ */ React$1.cloneElement(content, props);
      }
      if (typeof content === "function") {
        return /* @__PURE__ */ React$1.createElement(content, props);
      }
      return /* @__PURE__ */ React$1.createElement(DefaultTooltipContent, props);
    }
    var Tooltip = /* @__PURE__ */ function(_PureComponent) {
      _inherits$5(Tooltip2, _PureComponent);
      function Tooltip2() {
        _classCallCheck$8(this, Tooltip2);
        return _callSuper$4(this, Tooltip2, arguments);
      }
      _createClass$8(Tooltip2, [{
        key: "render",
        value: function render() {
          var _this = this;
          var _this$props = this.props, active = _this$props.active, allowEscapeViewBox = _this$props.allowEscapeViewBox, animationDuration = _this$props.animationDuration, animationEasing = _this$props.animationEasing, content = _this$props.content, coordinate = _this$props.coordinate, filterNull = _this$props.filterNull, isAnimationActive = _this$props.isAnimationActive, offset2 = _this$props.offset, payload = _this$props.payload, payloadUniqBy = _this$props.payloadUniqBy, position = _this$props.position, reverseDirection = _this$props.reverseDirection, useTranslate3d = _this$props.useTranslate3d, viewBox = _this$props.viewBox, wrapperStyle = _this$props.wrapperStyle;
          var finalPayload = payload !== null && payload !== void 0 ? payload : [];
          if (filterNull && finalPayload.length) {
            finalPayload = getUniqPayload(payload.filter(function(entry) {
              return entry.value != null && (entry.hide !== true || _this.props.includeHidden);
            }), payloadUniqBy, defaultUniqBy);
          }
          var hasPayload = finalPayload.length > 0;
          return /* @__PURE__ */ React$1.createElement(TooltipBoundingBox, {
            allowEscapeViewBox,
            animationDuration,
            animationEasing,
            isAnimationActive,
            active,
            coordinate,
            hasPayload,
            offset: offset2,
            position,
            reverseDirection,
            useTranslate3d,
            viewBox,
            wrapperStyle
          }, renderContent(content, _objectSpread$t(_objectSpread$t({}, this.props), {}, {
            payload: finalPayload
          })));
        }
      }]);
      return Tooltip2;
    }(reactExports.PureComponent);
    _defineProperty$u(Tooltip, "displayName", "Tooltip");
    _defineProperty$u(Tooltip, "defaultProps", {
      accessibilityLayer: false,
      allowEscapeViewBox: {
        x: false,
        y: false
      },
      animationDuration: 400,
      animationEasing: "ease",
      contentStyle: {},
      coordinate: {
        x: 0,
        y: 0
      },
      cursor: true,
      cursorStyle: {},
      filterNull: true,
      isAnimationActive: !Global.isSsr,
      itemStyle: {},
      labelStyle: {},
      offset: 10,
      reverseDirection: {
        x: false,
        y: false
      },
      separator: " : ",
      trigger: "hover",
      useTranslate3d: false,
      viewBox: {
        x: 0,
        y: 0,
        height: 0,
        width: 0
      },
      wrapperStyle: {}
    });
    var root = _root;
    var now$1 = function() {
      return root.Date.now();
    };
    var now_1 = now$1;
    var reWhitespace = /\s/;
    function trimmedEndIndex$1(string2) {
      var index = string2.length;
      while (index-- && reWhitespace.test(string2.charAt(index))) {
      }
      return index;
    }
    var _trimmedEndIndex = trimmedEndIndex$1;
    var trimmedEndIndex = _trimmedEndIndex;
    var reTrimStart = /^\s+/;
    function baseTrim$1(string2) {
      return string2 ? string2.slice(0, trimmedEndIndex(string2) + 1).replace(reTrimStart, "") : string2;
    }
    var _baseTrim = baseTrim$1;
    var baseTrim = _baseTrim, isObject$2 = isObject_1, isSymbol$1 = isSymbol_1;
    var NAN = 0 / 0;
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
    var reIsBinary = /^0b[01]+$/i;
    var reIsOctal = /^0o[0-7]+$/i;
    var freeParseInt = parseInt;
    function toNumber$2(value2) {
      if (typeof value2 == "number") {
        return value2;
      }
      if (isSymbol$1(value2)) {
        return NAN;
      }
      if (isObject$2(value2)) {
        var other = typeof value2.valueOf == "function" ? value2.valueOf() : value2;
        value2 = isObject$2(other) ? other + "" : other;
      }
      if (typeof value2 != "string") {
        return value2 === 0 ? value2 : +value2;
      }
      value2 = baseTrim(value2);
      var isBinary2 = reIsBinary.test(value2);
      return isBinary2 || reIsOctal.test(value2) ? freeParseInt(value2.slice(2), isBinary2 ? 2 : 8) : reIsBadHex.test(value2) ? NAN : +value2;
    }
    var toNumber_1 = toNumber$2;
    var isObject$1 = isObject_1, now = now_1, toNumber$1 = toNumber_1;
    var FUNC_ERROR_TEXT$1 = "Expected a function";
    var nativeMax$2 = Math.max, nativeMin = Math.min;
    function debounce$1(func, wait, options) {
      var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
      if (typeof func != "function") {
        throw new TypeError(FUNC_ERROR_TEXT$1);
      }
      wait = toNumber$1(wait) || 0;
      if (isObject$1(options)) {
        leading = !!options.leading;
        maxing = "maxWait" in options;
        maxWait = maxing ? nativeMax$2(toNumber$1(options.maxWait) || 0, wait) : maxWait;
        trailing = "trailing" in options ? !!options.trailing : trailing;
      }
      function invokeFunc(time2) {
        var args = lastArgs, thisArg = lastThis;
        lastArgs = lastThis = void 0;
        lastInvokeTime = time2;
        result = func.apply(thisArg, args);
        return result;
      }
      function leadingEdge(time2) {
        lastInvokeTime = time2;
        timerId = setTimeout(timerExpired, wait);
        return leading ? invokeFunc(time2) : result;
      }
      function remainingWait(time2) {
        var timeSinceLastCall = time2 - lastCallTime, timeSinceLastInvoke = time2 - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
        return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
      }
      function shouldInvoke(time2) {
        var timeSinceLastCall = time2 - lastCallTime, timeSinceLastInvoke = time2 - lastInvokeTime;
        return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
      }
      function timerExpired() {
        var time2 = now();
        if (shouldInvoke(time2)) {
          return trailingEdge(time2);
        }
        timerId = setTimeout(timerExpired, remainingWait(time2));
      }
      function trailingEdge(time2) {
        timerId = void 0;
        if (trailing && lastArgs) {
          return invokeFunc(time2);
        }
        lastArgs = lastThis = void 0;
        return result;
      }
      function cancel() {
        if (timerId !== void 0) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = void 0;
      }
      function flush() {
        return timerId === void 0 ? result : trailingEdge(now());
      }
      function debounced() {
        var time2 = now(), isInvoking = shouldInvoke(time2);
        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time2;
        if (isInvoking) {
          if (timerId === void 0) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            clearTimeout(timerId);
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === void 0) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }
    var debounce_1 = debounce$1;
    var debounce = debounce_1, isObject = isObject_1;
    var FUNC_ERROR_TEXT = "Expected a function";
    function throttle(func, wait, options) {
      var leading = true, trailing = true;
      if (typeof func != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject(options)) {
        leading = "leading" in options ? !!options.leading : leading;
        trailing = "trailing" in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, {
        "leading": leading,
        "maxWait": wait,
        "trailing": trailing
      });
    }
    var throttle_1 = throttle;
    const throttle$1 = /* @__PURE__ */ getDefaultExportFromCjs(throttle_1);
    function _typeof$v(o2) {
      "@babel/helpers - typeof";
      return _typeof$v = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
        return typeof o3;
      } : function(o3) {
        return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
      }, _typeof$v(o2);
    }
    function ownKeys$s(e3, r2) {
      var t2 = Object.keys(e3);
      if (Object.getOwnPropertySymbols) {
        var o2 = Object.getOwnPropertySymbols(e3);
        r2 && (o2 = o2.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e3, r3).enumerable;
        })), t2.push.apply(t2, o2);
      }
      return t2;
    }
    function _objectSpread$s(e3) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t2 = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$s(Object(t2), true).forEach(function(r3) {
          _defineProperty$t(e3, r3, t2[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$s(Object(t2)).forEach(function(r3) {
          Object.defineProperty(e3, r3, Object.getOwnPropertyDescriptor(t2, r3));
        });
      }
      return e3;
    }
    function _defineProperty$t(obj, key, value2) {
      key = _toPropertyKey$u(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value: value2, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value2;
      }
      return obj;
    }
    function _toPropertyKey$u(t2) {
      var i2 = _toPrimitive$u(t2, "string");
      return "symbol" == _typeof$v(i2) ? i2 : String(i2);
    }
    function _toPrimitive$u(t2, r2) {
      if ("object" != _typeof$v(t2) || !t2)
        return t2;
      var e3 = t2[Symbol.toPrimitive];
      if (void 0 !== e3) {
        var i2 = e3.call(t2, r2 || "default");
        if ("object" != _typeof$v(i2))
          return i2;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r2 ? String : Number)(t2);
    }
    function _slicedToArray$a(arr, i2) {
      return _arrayWithHoles$b(arr) || _iterableToArrayLimit$a(arr, i2) || _unsupportedIterableToArray$h(arr, i2) || _nonIterableRest$b();
    }
    function _nonIterableRest$b() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray$h(o2, minLen) {
      if (!o2)
        return;
      if (typeof o2 === "string")
        return _arrayLikeToArray$h(o2, minLen);
      var n2 = Object.prototype.toString.call(o2).slice(8, -1);
      if (n2 === "Object" && o2.constructor)
        n2 = o2.constructor.name;
      if (n2 === "Map" || n2 === "Set")
        return Array.from(o2);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
        return _arrayLikeToArray$h(o2, minLen);
    }
    function _arrayLikeToArray$h(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++)
        arr2[i2] = arr[i2];
      return arr2;
    }
    function _iterableToArrayLimit$a(r2, l2) {
      var t2 = null == r2 ? null : "undefined" != typeof Symbol && r2[Symbol.iterator] || r2["@@iterator"];
      if (null != t2) {
        var e3, n2, i2, u2, a2 = [], f2 = true, o2 = false;
        try {
          if (i2 = (t2 = t2.call(r2)).next, 0 === l2) {
            if (Object(t2) !== t2)
              return;
            f2 = false;
          } else
            for (; !(f2 = (e3 = i2.call(t2)).done) && (a2.push(e3.value), a2.length !== l2); f2 = true)
              ;
        } catch (r3) {
          o2 = true, n2 = r3;
        } finally {
          try {
            if (!f2 && null != t2["return"] && (u2 = t2["return"](), Object(u2) !== u2))
              return;
          } finally {
            if (o2)
              throw n2;
          }
        }
        return a2;
      }
    }
    function _arrayWithHoles$b(arr) {
      if (Array.isArray(arr))
        return arr;
    }
    var ResponsiveContainer = /* @__PURE__ */ reactExports.forwardRef(function(_ref, ref) {
      var aspect = _ref.aspect, _ref$initialDimension = _ref.initialDimension, initialDimension = _ref$initialDimension === void 0 ? {
        width: -1,
        height: -1
      } : _ref$initialDimension, _ref$width = _ref.width, width = _ref$width === void 0 ? "100%" : _ref$width, _ref$height = _ref.height, height = _ref$height === void 0 ? "100%" : _ref$height, _ref$minWidth = _ref.minWidth, minWidth = _ref$minWidth === void 0 ? 0 : _ref$minWidth, minHeight = _ref.minHeight, maxHeight = _ref.maxHeight, children = _ref.children, _ref$debounce = _ref.debounce, debounce2 = _ref$debounce === void 0 ? 0 : _ref$debounce, id2 = _ref.id, className = _ref.className, onResize = _ref.onResize, _ref$style = _ref.style, style = _ref$style === void 0 ? {} : _ref$style;
      var containerRef = reactExports.useRef(null);
      var onResizeRef = reactExports.useRef();
      onResizeRef.current = onResize;
      reactExports.useImperativeHandle(ref, function() {
        return Object.assign(containerRef.current, {
          get current() {
            console.warn("The usage of ref.current.current is deprecated and will no longer be supported.");
            return containerRef.current;
          }
        });
      });
      var _useState = reactExports.useState({
        containerWidth: initialDimension.width,
        containerHeight: initialDimension.height
      }), _useState2 = _slicedToArray$a(_useState, 2), sizes = _useState2[0], setSizes = _useState2[1];
      var setContainerSize = reactExports.useCallback(function(newWidth, newHeight) {
        setSizes(function(prevState) {
          var roundedWidth = Math.round(newWidth);
          var roundedHeight = Math.round(newHeight);
          if (prevState.containerWidth === roundedWidth && prevState.containerHeight === roundedHeight) {
            return prevState;
          }
          return {
            containerWidth: roundedWidth,
            containerHeight: roundedHeight
          };
        });
      }, []);
      reactExports.useEffect(function() {
        var callback = function callback2(entries) {
          var _onResizeRef$current;
          var _entries$0$contentRec = entries[0].contentRect, containerWidth2 = _entries$0$contentRec.width, containerHeight2 = _entries$0$contentRec.height;
          setContainerSize(containerWidth2, containerHeight2);
          (_onResizeRef$current = onResizeRef.current) === null || _onResizeRef$current === void 0 || _onResizeRef$current.call(onResizeRef, containerWidth2, containerHeight2);
        };
        if (debounce2 > 0) {
          callback = throttle$1(callback, debounce2, {
            trailing: true,
            leading: false
          });
        }
        var observer = new ResizeObserver(callback);
        var _containerRef$current = containerRef.current.getBoundingClientRect(), containerWidth = _containerRef$current.width, containerHeight = _containerRef$current.height;
        setContainerSize(containerWidth, containerHeight);
        observer.observe(containerRef.current);
        return function() {
          observer.disconnect();
        };
      }, [setContainerSize, debounce2]);
      var chartContent = reactExports.useMemo(function() {
        var containerWidth = sizes.containerWidth, containerHeight = sizes.containerHeight;
        if (containerWidth < 0 || containerHeight < 0) {
          return null;
        }
        warn(isPercent(width) || isPercent(height), "The width(%s) and height(%s) are both fixed numbers,\n       maybe you don't need to use a ResponsiveContainer.", width, height);
        warn(!aspect || aspect > 0, "The aspect(%s) must be greater than zero.", aspect);
        var calculatedWidth = isPercent(width) ? containerWidth : width;
        var calculatedHeight = isPercent(height) ? containerHeight : height;
        if (aspect && aspect > 0) {
          if (calculatedWidth) {
            calculatedHeight = calculatedWidth / aspect;
          } else if (calculatedHeight) {
            calculatedWidth = calculatedHeight * aspect;
          }
          if (maxHeight && calculatedHeight > maxHeight) {
            calculatedHeight = maxHeight;
          }
        }
        warn(calculatedWidth > 0 || calculatedHeight > 0, "The width(%s) and height(%s) of chart should be greater than 0,\n       please check the style of container, or the props width(%s) and height(%s),\n       or add a minWidth(%s) or minHeight(%s) or use aspect(%s) to control the\n       height and width.", calculatedWidth, calculatedHeight, width, height, minWidth, minHeight, aspect);
        var isCharts = !Array.isArray(children) && reactIsExports.isElement(children) && getDisplayName(children.type).endsWith("Chart");
        return React$1.Children.map(children, function(child) {
          if (reactIsExports.isElement(child)) {
            return /* @__PURE__ */ reactExports.cloneElement(child, _objectSpread$s({
              width: calculatedWidth,
              height: calculatedHeight
            }, isCharts ? {
              style: _objectSpread$s({
                height: "100%",
                width: "100%",
                maxHeight: calculatedHeight,
                maxWidth: calculatedWidth
              }, child.props.style)
            } : {}));
          }
          return child;
        });
      }, [aspect, children, height, maxHeight, minHeight, minWidth, sizes, width]);
      return /* @__PURE__ */ React$1.createElement("div", {
        id: id2 ? "".concat(id2) : void 0,
        className: clsx("recharts-responsive-container", className),
        style: _objectSpread$s(_objectSpread$s({}, style), {}, {
          width,
          height,
          minWidth,
          minHeight,
          maxHeight
        }),
        ref: containerRef
      }, chartContent);
    });
    var Cell = function Cell2(_props) {
      return null;
    };
    Cell.displayName = "Cell";
    function _typeof$u(o2) {
      "@babel/helpers - typeof";
      return _typeof$u = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
        return typeof o3;
      } : function(o3) {
        return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
      }, _typeof$u(o2);
    }
    function ownKeys$r(e3, r2) {
      var t2 = Object.keys(e3);
      if (Object.getOwnPropertySymbols) {
        var o2 = Object.getOwnPropertySymbols(e3);
        r2 && (o2 = o2.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e3, r3).enumerable;
        })), t2.push.apply(t2, o2);
      }
      return t2;
    }
    function _objectSpread$r(e3) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t2 = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$r(Object(t2), true).forEach(function(r3) {
          _defineProperty$s(e3, r3, t2[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$r(Object(t2)).forEach(function(r3) {
          Object.defineProperty(e3, r3, Object.getOwnPropertyDescriptor(t2, r3));
        });
      }
      return e3;
    }
    function _defineProperty$s(obj, key, value2) {
      key = _toPropertyKey$t(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value: value2, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value2;
      }
      return obj;
    }
    function _toPropertyKey$t(t2) {
      var i2 = _toPrimitive$t(t2, "string");
      return "symbol" == _typeof$u(i2) ? i2 : String(i2);
    }
    function _toPrimitive$t(t2, r2) {
      if ("object" != _typeof$u(t2) || !t2)
        return t2;
      var e3 = t2[Symbol.toPrimitive];
      if (void 0 !== e3) {
        var i2 = e3.call(t2, r2 || "default");
        if ("object" != _typeof$u(i2))
          return i2;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r2 ? String : Number)(t2);
    }
    var stringCache = {
      widthCache: {},
      cacheCount: 0
    };
    var MAX_CACHE_NUM = 2e3;
    var SPAN_STYLE = {
      position: "absolute",
      top: "-20000px",
      left: 0,
      padding: 0,
      margin: 0,
      border: "none",
      whiteSpace: "pre"
    };
    var MEASUREMENT_SPAN_ID = "recharts_measurement_span";
    function removeInvalidKeys(obj) {
      var copyObj = _objectSpread$r({}, obj);
      Object.keys(copyObj).forEach(function(key) {
        if (!copyObj[key]) {
          delete copyObj[key];
        }
      });
      return copyObj;
    }
    var getStringSize = function getStringSize2(text) {
      var style = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      if (text === void 0 || text === null || Global.isSsr) {
        return {
          width: 0,
          height: 0
        };
      }
      var copyStyle = removeInvalidKeys(style);
      var cacheKey = JSON.stringify({
        text,
        copyStyle
      });
      if (stringCache.widthCache[cacheKey]) {
        return stringCache.widthCache[cacheKey];
      }
      try {
        var measurementSpan = document.getElementById(MEASUREMENT_SPAN_ID);
        if (!measurementSpan) {
          measurementSpan = document.createElement("span");
          measurementSpan.setAttribute("id", MEASUREMENT_SPAN_ID);
          measurementSpan.setAttribute("aria-hidden", "true");
          document.body.appendChild(measurementSpan);
        }
        var measurementSpanStyle = _objectSpread$r(_objectSpread$r({}, SPAN_STYLE), copyStyle);
        Object.assign(measurementSpan.style, measurementSpanStyle);
        measurementSpan.textContent = "".concat(text);
        var rect = measurementSpan.getBoundingClientRect();
        var result = {
          width: rect.width,
          height: rect.height
        };
        stringCache.widthCache[cacheKey] = result;
        if (++stringCache.cacheCount > MAX_CACHE_NUM) {
          stringCache.cacheCount = 0;
          stringCache.widthCache = {};
        }
        return result;
      } catch (e3) {
        return {
          width: 0,
          height: 0
        };
      }
    };
    var getOffset = function getOffset2(rect) {
      return {
        top: rect.top + window.scrollY - document.documentElement.clientTop,
        left: rect.left + window.scrollX - document.documentElement.clientLeft
      };
    };
    function _typeof$t(o2) {
      "@babel/helpers - typeof";
      return _typeof$t = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
        return typeof o3;
      } : function(o3) {
        return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
      }, _typeof$t(o2);
    }
    function _slicedToArray$9(arr, i2) {
      return _arrayWithHoles$a(arr) || _iterableToArrayLimit$9(arr, i2) || _unsupportedIterableToArray$g(arr, i2) || _nonIterableRest$a();
    }
    function _nonIterableRest$a() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray$g(o2, minLen) {
      if (!o2)
        return;
      if (typeof o2 === "string")
        return _arrayLikeToArray$g(o2, minLen);
      var n2 = Object.prototype.toString.call(o2).slice(8, -1);
      if (n2 === "Object" && o2.constructor)
        n2 = o2.constructor.name;
      if (n2 === "Map" || n2 === "Set")
        return Array.from(o2);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
        return _arrayLikeToArray$g(o2, minLen);
    }
    function _arrayLikeToArray$g(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++)
        arr2[i2] = arr[i2];
      return arr2;
    }
    function _iterableToArrayLimit$9(r2, l2) {
      var t2 = null == r2 ? null : "undefined" != typeof Symbol && r2[Symbol.iterator] || r2["@@iterator"];
      if (null != t2) {
        var e3, n2, i2, u2, a2 = [], f2 = true, o2 = false;
        try {
          if (i2 = (t2 = t2.call(r2)).next, 0 === l2) {
            if (Object(t2) !== t2)
              return;
            f2 = false;
          } else
            for (; !(f2 = (e3 = i2.call(t2)).done) && (a2.push(e3.value), a2.length !== l2); f2 = true)
              ;
        } catch (r3) {
          o2 = true, n2 = r3;
        } finally {
          try {
            if (!f2 && null != t2["return"] && (u2 = t2["return"](), Object(u2) !== u2))
              return;
          } finally {
            if (o2)
              throw n2;
          }
        }
        return a2;
      }
    }
    function _arrayWithHoles$a(arr) {
      if (Array.isArray(arr))
        return arr;
    }
    function _classCallCheck$7(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties$7(target, props) {
      for (var i2 = 0; i2 < props.length; i2++) {
        var descriptor = props[i2];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey$s(descriptor.key), descriptor);
      }
    }
    function _createClass$7(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties$7(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties$7(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey$s(t2) {
      var i2 = _toPrimitive$s(t2, "string");
      return "symbol" == _typeof$t(i2) ? i2 : String(i2);
    }
    function _toPrimitive$s(t2, r2) {
      if ("object" != _typeof$t(t2) || !t2)
        return t2;
      var e3 = t2[Symbol.toPrimitive];
      if (void 0 !== e3) {
        var i2 = e3.call(t2, r2 || "default");
        if ("object" != _typeof$t(i2))
          return i2;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r2 ? String : Number)(t2);
    }
    var MULTIPLY_OR_DIVIDE_REGEX = /(-?\d+(?:\.\d+)?[a-zA-Z%]*)([*/])(-?\d+(?:\.\d+)?[a-zA-Z%]*)/;
    var ADD_OR_SUBTRACT_REGEX = /(-?\d+(?:\.\d+)?[a-zA-Z%]*)([+-])(-?\d+(?:\.\d+)?[a-zA-Z%]*)/;
    var CSS_LENGTH_UNIT_REGEX = /^px|cm|vh|vw|em|rem|%|mm|in|pt|pc|ex|ch|vmin|vmax|Q$/;
    var NUM_SPLIT_REGEX = /(-?\d+(?:\.\d+)?)([a-zA-Z%]+)?/;
    var CONVERSION_RATES = {
      cm: 96 / 2.54,
      mm: 96 / 25.4,
      pt: 96 / 72,
      pc: 96 / 6,
      "in": 96,
      Q: 96 / (2.54 * 40),
      px: 1
    };
    var FIXED_CSS_LENGTH_UNITS = Object.keys(CONVERSION_RATES);
    var STR_NAN = "NaN";
    function convertToPx(value2, unit2) {
      return value2 * CONVERSION_RATES[unit2];
    }
    var DecimalCSS = /* @__PURE__ */ function() {
      function DecimalCSS2(num, unit2) {
        _classCallCheck$7(this, DecimalCSS2);
        this.num = num;
        this.unit = unit2;
        this.num = num;
        this.unit = unit2;
        if (Number.isNaN(num)) {
          this.unit = "";
        }
        if (unit2 !== "" && !CSS_LENGTH_UNIT_REGEX.test(unit2)) {
          this.num = NaN;
          this.unit = "";
        }
        if (FIXED_CSS_LENGTH_UNITS.includes(unit2)) {
          this.num = convertToPx(num, unit2);
          this.unit = "px";
        }
      }
      _createClass$7(DecimalCSS2, [{
        key: "add",
        value: function add2(other) {
          if (this.unit !== other.unit) {
            return new DecimalCSS2(NaN, "");
          }
          return new DecimalCSS2(this.num + other.num, this.unit);
        }
      }, {
        key: "subtract",
        value: function subtract2(other) {
          if (this.unit !== other.unit) {
            return new DecimalCSS2(NaN, "");
          }
          return new DecimalCSS2(this.num - other.num, this.unit);
        }
      }, {
        key: "multiply",
        value: function multiply(other) {
          if (this.unit !== "" && other.unit !== "" && this.unit !== other.unit) {
            return new DecimalCSS2(NaN, "");
          }
          return new DecimalCSS2(this.num * other.num, this.unit || other.unit);
        }
      }, {
        key: "divide",
        value: function divide2(other) {
          if (this.unit !== "" && other.unit !== "" && this.unit !== other.unit) {
            return new DecimalCSS2(NaN, "");
          }
          return new DecimalCSS2(this.num / other.num, this.unit || other.unit);
        }
      }, {
        key: "toString",
        value: function toString2() {
          return "".concat(this.num).concat(this.unit);
        }
      }, {
        key: "isNaN",
        value: function isNaN2() {
          return Number.isNaN(this.num);
        }
      }], [{
        key: "parse",
        value: function parse2(str) {
          var _NUM_SPLIT_REGEX$exec;
          var _ref = (_NUM_SPLIT_REGEX$exec = NUM_SPLIT_REGEX.exec(str)) !== null && _NUM_SPLIT_REGEX$exec !== void 0 ? _NUM_SPLIT_REGEX$exec : [], _ref2 = _slicedToArray$9(_ref, 3), numStr = _ref2[1], unit2 = _ref2[2];
          return new DecimalCSS2(parseFloat(numStr), unit2 !== null && unit2 !== void 0 ? unit2 : "");
        }
      }]);
      return DecimalCSS2;
    }();
    function calculateArithmetic(expr) {
      if (expr.includes(STR_NAN)) {
        return STR_NAN;
      }
      var newExpr = expr;
      while (newExpr.includes("*") || newExpr.includes("/")) {
        var _MULTIPLY_OR_DIVIDE_R;
        var _ref3 = (_MULTIPLY_OR_DIVIDE_R = MULTIPLY_OR_DIVIDE_REGEX.exec(newExpr)) !== null && _MULTIPLY_OR_DIVIDE_R !== void 0 ? _MULTIPLY_OR_DIVIDE_R : [], _ref4 = _slicedToArray$9(_ref3, 4), leftOperand = _ref4[1], operator = _ref4[2], rightOperand = _ref4[3];
        var lTs = DecimalCSS.parse(leftOperand !== null && leftOperand !== void 0 ? leftOperand : "");
        var rTs = DecimalCSS.parse(rightOperand !== null && rightOperand !== void 0 ? rightOperand : "");
        var result = operator === "*" ? lTs.multiply(rTs) : lTs.divide(rTs);
        if (result.isNaN()) {
          return STR_NAN;
        }
        newExpr = newExpr.replace(MULTIPLY_OR_DIVIDE_REGEX, result.toString());
      }
      while (newExpr.includes("+") || /.-\d+(?:\.\d+)?/.test(newExpr)) {
        var _ADD_OR_SUBTRACT_REGE;
        var _ref5 = (_ADD_OR_SUBTRACT_REGE = ADD_OR_SUBTRACT_REGEX.exec(newExpr)) !== null && _ADD_OR_SUBTRACT_REGE !== void 0 ? _ADD_OR_SUBTRACT_REGE : [], _ref6 = _slicedToArray$9(_ref5, 4), _leftOperand = _ref6[1], _operator = _ref6[2], _rightOperand = _ref6[3];
        var _lTs = DecimalCSS.parse(_leftOperand !== null && _leftOperand !== void 0 ? _leftOperand : "");
        var _rTs = DecimalCSS.parse(_rightOperand !== null && _rightOperand !== void 0 ? _rightOperand : "");
        var _result = _operator === "+" ? _lTs.add(_rTs) : _lTs.subtract(_rTs);
        if (_result.isNaN()) {
          return STR_NAN;
        }
        newExpr = newExpr.replace(ADD_OR_SUBTRACT_REGEX, _result.toString());
      }
      return newExpr;
    }
    var PARENTHESES_REGEX = /\(([^()]*)\)/;
    function calculateParentheses(expr) {
      var newExpr = expr;
      while (newExpr.includes("(")) {
        var _PARENTHESES_REGEX$ex = PARENTHESES_REGEX.exec(newExpr), _PARENTHESES_REGEX$ex2 = _slicedToArray$9(_PARENTHESES_REGEX$ex, 2), parentheticalExpression = _PARENTHESES_REGEX$ex2[1];
        newExpr = newExpr.replace(PARENTHESES_REGEX, calculateArithmetic(parentheticalExpression));
      }
      return newExpr;
    }
    function evaluateExpression(expression) {
      var newExpr = expression.replace(/\s+/g, "");
      newExpr = calculateParentheses(newExpr);
      newExpr = calculateArithmetic(newExpr);
      return newExpr;
    }
    function safeEvaluateExpression(expression) {
      try {
        return evaluateExpression(expression);
      } catch (e3) {
        return STR_NAN;
      }
    }
    function reduceCSSCalc(expression) {
      var result = safeEvaluateExpression(expression.slice(5, -1));
      if (result === STR_NAN) {
        return "";
      }
      return result;
    }
    var _excluded$b = ["x", "y", "lineHeight", "capHeight", "scaleToFit", "textAnchor", "verticalAnchor", "fill"], _excluded2$4 = ["dx", "dy", "angle", "className", "breakAll"];
    function _extends$k() {
      _extends$k = Object.assign ? Object.assign.bind() : function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends$k.apply(this, arguments);
    }
    function _objectWithoutProperties$b(source, excluded) {
      if (source == null)
        return {};
      var target = _objectWithoutPropertiesLoose$b(source, excluded);
      var key, i2;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i2 = 0; i2 < sourceSymbolKeys.length; i2++) {
          key = sourceSymbolKeys[i2];
          if (excluded.indexOf(key) >= 0)
            continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key))
            continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose$b(source, excluded) {
      if (source == null)
        return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i2;
      for (i2 = 0; i2 < sourceKeys.length; i2++) {
        key = sourceKeys[i2];
        if (excluded.indexOf(key) >= 0)
          continue;
        target[key] = source[key];
      }
      return target;
    }
    function _slicedToArray$8(arr, i2) {
      return _arrayWithHoles$9(arr) || _iterableToArrayLimit$8(arr, i2) || _unsupportedIterableToArray$f(arr, i2) || _nonIterableRest$9();
    }
    function _nonIterableRest$9() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray$f(o2, minLen) {
      if (!o2)
        return;
      if (typeof o2 === "string")
        return _arrayLikeToArray$f(o2, minLen);
      var n2 = Object.prototype.toString.call(o2).slice(8, -1);
      if (n2 === "Object" && o2.constructor)
        n2 = o2.constructor.name;
      if (n2 === "Map" || n2 === "Set")
        return Array.from(o2);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
        return _arrayLikeToArray$f(o2, minLen);
    }
    function _arrayLikeToArray$f(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++)
        arr2[i2] = arr[i2];
      return arr2;
    }
    function _iterableToArrayLimit$8(r2, l2) {
      var t2 = null == r2 ? null : "undefined" != typeof Symbol && r2[Symbol.iterator] || r2["@@iterator"];
      if (null != t2) {
        var e3, n2, i2, u2, a2 = [], f2 = true, o2 = false;
        try {
          if (i2 = (t2 = t2.call(r2)).next, 0 === l2) {
            if (Object(t2) !== t2)
              return;
            f2 = false;
          } else
            for (; !(f2 = (e3 = i2.call(t2)).done) && (a2.push(e3.value), a2.length !== l2); f2 = true)
              ;
        } catch (r3) {
          o2 = true, n2 = r3;
        } finally {
          try {
            if (!f2 && null != t2["return"] && (u2 = t2["return"](), Object(u2) !== u2))
              return;
          } finally {
            if (o2)
              throw n2;
          }
        }
        return a2;
      }
    }
    function _arrayWithHoles$9(arr) {
      if (Array.isArray(arr))
        return arr;
    }
    var BREAKING_SPACES = /[ \f\n\r\t\v\u2028\u2029]+/;
    var calculateWordWidths = function calculateWordWidths2(_ref) {
      var children = _ref.children, breakAll = _ref.breakAll, style = _ref.style;
      try {
        var words = [];
        if (!isNil$1(children)) {
          if (breakAll) {
            words = children.toString().split("");
          } else {
            words = children.toString().split(BREAKING_SPACES);
          }
        }
        var wordsWithComputedWidth = words.map(function(word) {
          return {
            word,
            width: getStringSize(word, style).width
          };
        });
        var spaceWidth = breakAll ? 0 : getStringSize(" ", style).width;
        return {
          wordsWithComputedWidth,
          spaceWidth
        };
      } catch (e3) {
        return null;
      }
    };
    var calculateWordsByLines = function calculateWordsByLines2(_ref2, initialWordsWithComputedWith, spaceWidth, lineWidth, scaleToFit) {
      var maxLines = _ref2.maxLines, children = _ref2.children, style = _ref2.style, breakAll = _ref2.breakAll;
      var shouldLimitLines = isNumber(maxLines);
      var text = children;
      var calculate = function calculate2() {
        var words = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
        return words.reduce(function(result2, _ref3) {
          var word = _ref3.word, width = _ref3.width;
          var currentLine = result2[result2.length - 1];
          if (currentLine && (lineWidth == null || scaleToFit || currentLine.width + width + spaceWidth < Number(lineWidth))) {
            currentLine.words.push(word);
            currentLine.width += width + spaceWidth;
          } else {
            var newLine = {
              words: [word],
              width
            };
            result2.push(newLine);
          }
          return result2;
        }, []);
      };
      var originalResult = calculate(initialWordsWithComputedWith);
      var findLongestLine = function findLongestLine2(words) {
        return words.reduce(function(a2, b2) {
          return a2.width > b2.width ? a2 : b2;
        });
      };
      if (!shouldLimitLines) {
        return originalResult;
      }
      var suffix = "…";
      var checkOverflow2 = function checkOverflow3(index) {
        var tempText = text.slice(0, index);
        var words = calculateWordWidths({
          breakAll,
          style,
          children: tempText + suffix
        }).wordsWithComputedWidth;
        var result2 = calculate(words);
        var doesOverflow = result2.length > maxLines || findLongestLine(result2).width > Number(lineWidth);
        return [doesOverflow, result2];
      };
      var start = 0;
      var end = text.length - 1;
      var iterations = 0;
      var trimmedResult;
      while (start <= end && iterations <= text.length - 1) {
        var middle = Math.floor((start + end) / 2);
        var prev = middle - 1;
        var _checkOverflow = checkOverflow2(prev), _checkOverflow2 = _slicedToArray$8(_checkOverflow, 2), doesPrevOverflow = _checkOverflow2[0], result = _checkOverflow2[1];
        var _checkOverflow3 = checkOverflow2(middle), _checkOverflow4 = _slicedToArray$8(_checkOverflow3, 1), doesMiddleOverflow = _checkOverflow4[0];
        if (!doesPrevOverflow && !doesMiddleOverflow) {
          start = middle + 1;
        }
        if (doesPrevOverflow && doesMiddleOverflow) {
          end = middle - 1;
        }
        if (!doesPrevOverflow && doesMiddleOverflow) {
          trimmedResult = result;
          break;
        }
        iterations++;
      }
      return trimmedResult || originalResult;
    };
    var getWordsWithoutCalculate = function getWordsWithoutCalculate2(children) {
      var words = !isNil$1(children) ? children.toString().split(BREAKING_SPACES) : [];
      return [{
        words
      }];
    };
    var getWordsByLines = function getWordsByLines2(_ref4) {
      var width = _ref4.width, scaleToFit = _ref4.scaleToFit, children = _ref4.children, style = _ref4.style, breakAll = _ref4.breakAll, maxLines = _ref4.maxLines;
      if ((width || scaleToFit) && !Global.isSsr) {
        var wordsWithComputedWidth, spaceWidth;
        var wordWidths = calculateWordWidths({
          breakAll,
          children,
          style
        });
        if (wordWidths) {
          var wcw = wordWidths.wordsWithComputedWidth, sw = wordWidths.spaceWidth;
          wordsWithComputedWidth = wcw;
          spaceWidth = sw;
        } else {
          return getWordsWithoutCalculate(children);
        }
        return calculateWordsByLines({
          breakAll,
          children,
          maxLines,
          style
        }, wordsWithComputedWidth, spaceWidth, width, scaleToFit);
      }
      return getWordsWithoutCalculate(children);
    };
    var DEFAULT_FILL = "#808080";
    var Text = function Text2(_ref5) {
      var _ref5$x = _ref5.x, propsX = _ref5$x === void 0 ? 0 : _ref5$x, _ref5$y = _ref5.y, propsY = _ref5$y === void 0 ? 0 : _ref5$y, _ref5$lineHeight = _ref5.lineHeight, lineHeight = _ref5$lineHeight === void 0 ? "1em" : _ref5$lineHeight, _ref5$capHeight = _ref5.capHeight, capHeight = _ref5$capHeight === void 0 ? "0.71em" : _ref5$capHeight, _ref5$scaleToFit = _ref5.scaleToFit, scaleToFit = _ref5$scaleToFit === void 0 ? false : _ref5$scaleToFit, _ref5$textAnchor = _ref5.textAnchor, textAnchor = _ref5$textAnchor === void 0 ? "start" : _ref5$textAnchor, _ref5$verticalAnchor = _ref5.verticalAnchor, verticalAnchor = _ref5$verticalAnchor === void 0 ? "end" : _ref5$verticalAnchor, _ref5$fill = _ref5.fill, fill = _ref5$fill === void 0 ? DEFAULT_FILL : _ref5$fill, props = _objectWithoutProperties$b(_ref5, _excluded$b);
      var wordsByLines = reactExports.useMemo(function() {
        return getWordsByLines({
          breakAll: props.breakAll,
          children: props.children,
          maxLines: props.maxLines,
          scaleToFit,
          style: props.style,
          width: props.width
        });
      }, [props.breakAll, props.children, props.maxLines, scaleToFit, props.style, props.width]);
      var dx = props.dx, dy = props.dy, angle = props.angle, className = props.className, breakAll = props.breakAll, textProps = _objectWithoutProperties$b(props, _excluded2$4);
      if (!isNumOrStr(propsX) || !isNumOrStr(propsY)) {
        return null;
      }
      var x2 = propsX + (isNumber(dx) ? dx : 0);
      var y2 = propsY + (isNumber(dy) ? dy : 0);
      var startDy;
      switch (verticalAnchor) {
        case "start":
          startDy = reduceCSSCalc("calc(".concat(capHeight, ")"));
          break;
        case "middle":
          startDy = reduceCSSCalc("calc(".concat((wordsByLines.length - 1) / 2, " * -").concat(lineHeight, " + (").concat(capHeight, " / 2))"));
          break;
        default:
          startDy = reduceCSSCalc("calc(".concat(wordsByLines.length - 1, " * -").concat(lineHeight, ")"));
          break;
      }
      var transforms = [];
      if (scaleToFit) {
        var lineWidth = wordsByLines[0].width;
        var width = props.width;
        transforms.push("scale(".concat((isNumber(width) ? width / lineWidth : 1) / lineWidth, ")"));
      }
      if (angle) {
        transforms.push("rotate(".concat(angle, ", ").concat(x2, ", ").concat(y2, ")"));
      }
      if (transforms.length) {
        textProps.transform = transforms.join(" ");
      }
      return /* @__PURE__ */ React$1.createElement("text", _extends$k({}, filterProps(textProps, true), {
        x: x2,
        y: y2,
        className: clsx("recharts-text", className),
        textAnchor,
        fill: fill.includes("url") ? DEFAULT_FILL : fill
      }), wordsByLines.map(function(line, index) {
        var words = line.words.join(breakAll ? "" : " ");
        return /* @__PURE__ */ React$1.createElement("tspan", {
          x: x2,
          dy: index === 0 ? startDy : lineHeight,
          key: words
        }, words);
      }));
    };
    function ascending(a2, b2) {
      return a2 == null || b2 == null ? NaN : a2 < b2 ? -1 : a2 > b2 ? 1 : a2 >= b2 ? 0 : NaN;
    }
    function descending(a2, b2) {
      return a2 == null || b2 == null ? NaN : b2 < a2 ? -1 : b2 > a2 ? 1 : b2 >= a2 ? 0 : NaN;
    }
    function bisector(f2) {
      let compare1, compare2, delta;
      if (f2.length !== 2) {
        compare1 = ascending;
        compare2 = (d2, x2) => ascending(f2(d2), x2);
        delta = (d2, x2) => f2(d2) - x2;
      } else {
        compare1 = f2 === ascending || f2 === descending ? f2 : zero$1;
        compare2 = f2;
        delta = f2;
      }
      function left(a2, x2, lo = 0, hi2 = a2.length) {
        if (lo < hi2) {
          if (compare1(x2, x2) !== 0)
            return hi2;
          do {
            const mid = lo + hi2 >>> 1;
            if (compare2(a2[mid], x2) < 0)
              lo = mid + 1;
            else
              hi2 = mid;
          } while (lo < hi2);
        }
        return lo;
      }
      function right(a2, x2, lo = 0, hi2 = a2.length) {
        if (lo < hi2) {
          if (compare1(x2, x2) !== 0)
            return hi2;
          do {
            const mid = lo + hi2 >>> 1;
            if (compare2(a2[mid], x2) <= 0)
              lo = mid + 1;
            else
              hi2 = mid;
          } while (lo < hi2);
        }
        return lo;
      }
      function center(a2, x2, lo = 0, hi2 = a2.length) {
        const i2 = left(a2, x2, lo, hi2 - 1);
        return i2 > lo && delta(a2[i2 - 1], x2) > -delta(a2[i2], x2) ? i2 - 1 : i2;
      }
      return { left, center, right };
    }
    function zero$1() {
      return 0;
    }
    function number$2(x2) {
      return x2 === null ? NaN : +x2;
    }
    function* numbers(values, valueof) {
      if (valueof === void 0) {
        for (let value2 of values) {
          if (value2 != null && (value2 = +value2) >= value2) {
            yield value2;
          }
        }
      } else {
        let index = -1;
        for (let value2 of values) {
          if ((value2 = valueof(value2, ++index, values)) != null && (value2 = +value2) >= value2) {
            yield value2;
          }
        }
      }
    }
    const ascendingBisect = bisector(ascending);
    const bisectRight = ascendingBisect.right;
    bisector(number$2).center;
    class InternMap extends Map {
      constructor(entries, key = keyof) {
        super();
        Object.defineProperties(this, { _intern: { value: /* @__PURE__ */ new Map() }, _key: { value: key } });
        if (entries != null)
          for (const [key2, value2] of entries)
            this.set(key2, value2);
      }
      get(key) {
        return super.get(intern_get(this, key));
      }
      has(key) {
        return super.has(intern_get(this, key));
      }
      set(key, value2) {
        return super.set(intern_set(this, key), value2);
      }
      delete(key) {
        return super.delete(intern_delete(this, key));
      }
    }
    function intern_get({ _intern, _key }, value2) {
      const key = _key(value2);
      return _intern.has(key) ? _intern.get(key) : value2;
    }
    function intern_set({ _intern, _key }, value2) {
      const key = _key(value2);
      if (_intern.has(key))
        return _intern.get(key);
      _intern.set(key, value2);
      return value2;
    }
    function intern_delete({ _intern, _key }, value2) {
      const key = _key(value2);
      if (_intern.has(key)) {
        value2 = _intern.get(key);
        _intern.delete(key);
      }
      return value2;
    }
    function keyof(value2) {
      return value2 !== null && typeof value2 === "object" ? value2.valueOf() : value2;
    }
    function compareDefined(compare = ascending) {
      if (compare === ascending)
        return ascendingDefined;
      if (typeof compare !== "function")
        throw new TypeError("compare is not a function");
      return (a2, b2) => {
        const x2 = compare(a2, b2);
        if (x2 || x2 === 0)
          return x2;
        return (compare(b2, b2) === 0) - (compare(a2, a2) === 0);
      };
    }
    function ascendingDefined(a2, b2) {
      return (a2 == null || !(a2 >= a2)) - (b2 == null || !(b2 >= b2)) || (a2 < b2 ? -1 : a2 > b2 ? 1 : 0);
    }
    const e10 = Math.sqrt(50), e5 = Math.sqrt(10), e2 = Math.sqrt(2);
    function tickSpec(start, stop, count) {
      const step = (stop - start) / Math.max(0, count), power = Math.floor(Math.log10(step)), error2 = step / Math.pow(10, power), factor = error2 >= e10 ? 10 : error2 >= e5 ? 5 : error2 >= e2 ? 2 : 1;
      let i1, i2, inc;
      if (power < 0) {
        inc = Math.pow(10, -power) / factor;
        i1 = Math.round(start * inc);
        i2 = Math.round(stop * inc);
        if (i1 / inc < start)
          ++i1;
        if (i2 / inc > stop)
          --i2;
        inc = -inc;
      } else {
        inc = Math.pow(10, power) * factor;
        i1 = Math.round(start / inc);
        i2 = Math.round(stop / inc);
        if (i1 * inc < start)
          ++i1;
        if (i2 * inc > stop)
          --i2;
      }
      if (i2 < i1 && 0.5 <= count && count < 2)
        return tickSpec(start, stop, count * 2);
      return [i1, i2, inc];
    }
    function ticks(start, stop, count) {
      stop = +stop, start = +start, count = +count;
      if (!(count > 0))
        return [];
      if (start === stop)
        return [start];
      const reverse2 = stop < start, [i1, i2, inc] = reverse2 ? tickSpec(stop, start, count) : tickSpec(start, stop, count);
      if (!(i2 >= i1))
        return [];
      const n2 = i2 - i1 + 1, ticks2 = new Array(n2);
      if (reverse2) {
        if (inc < 0)
          for (let i3 = 0; i3 < n2; ++i3)
            ticks2[i3] = (i2 - i3) / -inc;
        else
          for (let i3 = 0; i3 < n2; ++i3)
            ticks2[i3] = (i2 - i3) * inc;
      } else {
        if (inc < 0)
          for (let i3 = 0; i3 < n2; ++i3)
            ticks2[i3] = (i1 + i3) / -inc;
        else
          for (let i3 = 0; i3 < n2; ++i3)
            ticks2[i3] = (i1 + i3) * inc;
      }
      return ticks2;
    }
    function tickIncrement(start, stop, count) {
      stop = +stop, start = +start, count = +count;
      return tickSpec(start, stop, count)[2];
    }
    function tickStep(start, stop, count) {
      stop = +stop, start = +start, count = +count;
      const reverse2 = stop < start, inc = reverse2 ? tickIncrement(stop, start, count) : tickIncrement(start, stop, count);
      return (reverse2 ? -1 : 1) * (inc < 0 ? 1 / -inc : inc);
    }
    function max$2(values, valueof) {
      let max2;
      if (valueof === void 0) {
        for (const value2 of values) {
          if (value2 != null && (max2 < value2 || max2 === void 0 && value2 >= value2)) {
            max2 = value2;
          }
        }
      } else {
        let index = -1;
        for (let value2 of values) {
          if ((value2 = valueof(value2, ++index, values)) != null && (max2 < value2 || max2 === void 0 && value2 >= value2)) {
            max2 = value2;
          }
        }
      }
      return max2;
    }
    function min$2(values, valueof) {
      let min2;
      if (valueof === void 0) {
        for (const value2 of values) {
          if (value2 != null && (min2 > value2 || min2 === void 0 && value2 >= value2)) {
            min2 = value2;
          }
        }
      } else {
        let index = -1;
        for (let value2 of values) {
          if ((value2 = valueof(value2, ++index, values)) != null && (min2 > value2 || min2 === void 0 && value2 >= value2)) {
            min2 = value2;
          }
        }
      }
      return min2;
    }
    function quickselect(array2, k2, left = 0, right = Infinity, compare) {
      k2 = Math.floor(k2);
      left = Math.floor(Math.max(0, left));
      right = Math.floor(Math.min(array2.length - 1, right));
      if (!(left <= k2 && k2 <= right))
        return array2;
      compare = compare === void 0 ? ascendingDefined : compareDefined(compare);
      while (right > left) {
        if (right - left > 600) {
          const n2 = right - left + 1;
          const m2 = k2 - left + 1;
          const z2 = Math.log(n2);
          const s2 = 0.5 * Math.exp(2 * z2 / 3);
          const sd2 = 0.5 * Math.sqrt(z2 * s2 * (n2 - s2) / n2) * (m2 - n2 / 2 < 0 ? -1 : 1);
          const newLeft = Math.max(left, Math.floor(k2 - m2 * s2 / n2 + sd2));
          const newRight = Math.min(right, Math.floor(k2 + (n2 - m2) * s2 / n2 + sd2));
          quickselect(array2, k2, newLeft, newRight, compare);
        }
        const t2 = array2[k2];
        let i2 = left;
        let j2 = right;
        swap(array2, left, k2);
        if (compare(array2[right], t2) > 0)
          swap(array2, left, right);
        while (i2 < j2) {
          swap(array2, i2, j2), ++i2, --j2;
          while (compare(array2[i2], t2) < 0)
            ++i2;
          while (compare(array2[j2], t2) > 0)
            --j2;
        }
        if (compare(array2[left], t2) === 0)
          swap(array2, left, j2);
        else
          ++j2, swap(array2, j2, right);
        if (j2 <= k2)
          left = j2 + 1;
        if (k2 <= j2)
          right = j2 - 1;
      }
      return array2;
    }
    function swap(array2, i2, j2) {
      const t2 = array2[i2];
      array2[i2] = array2[j2];
      array2[j2] = t2;
    }
    function quantile$1(values, p2, valueof) {
      values = Float64Array.from(numbers(values, valueof));
      if (!(n2 = values.length) || isNaN(p2 = +p2))
        return;
      if (p2 <= 0 || n2 < 2)
        return min$2(values);
      if (p2 >= 1)
        return max$2(values);
      var n2, i2 = (n2 - 1) * p2, i0 = Math.floor(i2), value0 = max$2(quickselect(values, i0).subarray(0, i0 + 1)), value1 = min$2(values.subarray(i0 + 1));
      return value0 + (value1 - value0) * (i2 - i0);
    }
    function quantileSorted(values, p2, valueof = number$2) {
      if (!(n2 = values.length) || isNaN(p2 = +p2))
        return;
      if (p2 <= 0 || n2 < 2)
        return +valueof(values[0], 0, values);
      if (p2 >= 1)
        return +valueof(values[n2 - 1], n2 - 1, values);
      var n2, i2 = (n2 - 1) * p2, i0 = Math.floor(i2), value0 = +valueof(values[i0], i0, values), value1 = +valueof(values[i0 + 1], i0 + 1, values);
      return value0 + (value1 - value0) * (i2 - i0);
    }
    function range$3(start, stop, step) {
      start = +start, stop = +stop, step = (n2 = arguments.length) < 2 ? (stop = start, start = 0, 1) : n2 < 3 ? 1 : +step;
      var i2 = -1, n2 = Math.max(0, Math.ceil((stop - start) / step)) | 0, range2 = new Array(n2);
      while (++i2 < n2) {
        range2[i2] = start + i2 * step;
      }
      return range2;
    }
    function initRange(domain, range2) {
      switch (arguments.length) {
        case 0:
          break;
        case 1:
          this.range(domain);
          break;
        default:
          this.range(range2).domain(domain);
          break;
      }
      return this;
    }
    function initInterpolator(domain, interpolator) {
      switch (arguments.length) {
        case 0:
          break;
        case 1: {
          if (typeof domain === "function")
            this.interpolator(domain);
          else
            this.range(domain);
          break;
        }
        default: {
          this.domain(domain);
          if (typeof interpolator === "function")
            this.interpolator(interpolator);
          else
            this.range(interpolator);
          break;
        }
      }
      return this;
    }
    const implicit = Symbol("implicit");
    function ordinal() {
      var index = new InternMap(), domain = [], range2 = [], unknown = implicit;
      function scale(d2) {
        let i2 = index.get(d2);
        if (i2 === void 0) {
          if (unknown !== implicit)
            return unknown;
          index.set(d2, i2 = domain.push(d2) - 1);
        }
        return range2[i2 % range2.length];
      }
      scale.domain = function(_2) {
        if (!arguments.length)
          return domain.slice();
        domain = [], index = new InternMap();
        for (const value2 of _2) {
          if (index.has(value2))
            continue;
          index.set(value2, domain.push(value2) - 1);
        }
        return scale;
      };
      scale.range = function(_2) {
        return arguments.length ? (range2 = Array.from(_2), scale) : range2.slice();
      };
      scale.unknown = function(_2) {
        return arguments.length ? (unknown = _2, scale) : unknown;
      };
      scale.copy = function() {
        return ordinal(domain, range2).unknown(unknown);
      };
      initRange.apply(scale, arguments);
      return scale;
    }
    function band() {
      var scale = ordinal().unknown(void 0), domain = scale.domain, ordinalRange = scale.range, r0 = 0, r1 = 1, step, bandwidth, round2 = false, paddingInner = 0, paddingOuter = 0, align = 0.5;
      delete scale.unknown;
      function rescale() {
        var n2 = domain().length, reverse2 = r1 < r0, start = reverse2 ? r1 : r0, stop = reverse2 ? r0 : r1;
        step = (stop - start) / Math.max(1, n2 - paddingInner + paddingOuter * 2);
        if (round2)
          step = Math.floor(step);
        start += (stop - start - step * (n2 - paddingInner)) * align;
        bandwidth = step * (1 - paddingInner);
        if (round2)
          start = Math.round(start), bandwidth = Math.round(bandwidth);
        var values = range$3(n2).map(function(i2) {
          return start + step * i2;
        });
        return ordinalRange(reverse2 ? values.reverse() : values);
      }
      scale.domain = function(_2) {
        return arguments.length ? (domain(_2), rescale()) : domain();
      };
      scale.range = function(_2) {
        return arguments.length ? ([r0, r1] = _2, r0 = +r0, r1 = +r1, rescale()) : [r0, r1];
      };
      scale.rangeRound = function(_2) {
        return [r0, r1] = _2, r0 = +r0, r1 = +r1, round2 = true, rescale();
      };
      scale.bandwidth = function() {
        return bandwidth;
      };
      scale.step = function() {
        return step;
      };
      scale.round = function(_2) {
        return arguments.length ? (round2 = !!_2, rescale()) : round2;
      };
      scale.padding = function(_2) {
        return arguments.length ? (paddingInner = Math.min(1, paddingOuter = +_2), rescale()) : paddingInner;
      };
      scale.paddingInner = function(_2) {
        return arguments.length ? (paddingInner = Math.min(1, _2), rescale()) : paddingInner;
      };
      scale.paddingOuter = function(_2) {
        return arguments.length ? (paddingOuter = +_2, rescale()) : paddingOuter;
      };
      scale.align = function(_2) {
        return arguments.length ? (align = Math.max(0, Math.min(1, _2)), rescale()) : align;
      };
      scale.copy = function() {
        return band(domain(), [r0, r1]).round(round2).paddingInner(paddingInner).paddingOuter(paddingOuter).align(align);
      };
      return initRange.apply(rescale(), arguments);
    }
    function pointish(scale) {
      var copy2 = scale.copy;
      scale.padding = scale.paddingOuter;
      delete scale.paddingInner;
      delete scale.paddingOuter;
      scale.copy = function() {
        return pointish(copy2());
      };
      return scale;
    }
    function point() {
      return pointish(band.apply(null, arguments).paddingInner(1));
    }
    function define(constructor, factory, prototype2) {
      constructor.prototype = factory.prototype = prototype2;
      prototype2.constructor = constructor;
    }
    function extend(parent, definition) {
      var prototype2 = Object.create(parent.prototype);
      for (var key in definition)
        prototype2[key] = definition[key];
      return prototype2;
    }
    function Color() {
    }
    var darker = 0.7;
    var brighter = 1 / darker;
    var reI = "\\s*([+-]?\\d+)\\s*", reN = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)\\s*", reP = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)%\\s*", reHex = /^#([0-9a-f]{3,8})$/, reRgbInteger = new RegExp(`^rgb\\(${reI},${reI},${reI}\\)$`), reRgbPercent = new RegExp(`^rgb\\(${reP},${reP},${reP}\\)$`), reRgbaInteger = new RegExp(`^rgba\\(${reI},${reI},${reI},${reN}\\)$`), reRgbaPercent = new RegExp(`^rgba\\(${reP},${reP},${reP},${reN}\\)$`), reHslPercent = new RegExp(`^hsl\\(${reN},${reP},${reP}\\)$`), reHslaPercent = new RegExp(`^hsla\\(${reN},${reP},${reP},${reN}\\)$`);
    var named = {
      aliceblue: 15792383,
      antiquewhite: 16444375,
      aqua: 65535,
      aquamarine: 8388564,
      azure: 15794175,
      beige: 16119260,
      bisque: 16770244,
      black: 0,
      blanchedalmond: 16772045,
      blue: 255,
      blueviolet: 9055202,
      brown: 10824234,
      burlywood: 14596231,
      cadetblue: 6266528,
      chartreuse: 8388352,
      chocolate: 13789470,
      coral: 16744272,
      cornflowerblue: 6591981,
      cornsilk: 16775388,
      crimson: 14423100,
      cyan: 65535,
      darkblue: 139,
      darkcyan: 35723,
      darkgoldenrod: 12092939,
      darkgray: 11119017,
      darkgreen: 25600,
      darkgrey: 11119017,
      darkkhaki: 12433259,
      darkmagenta: 9109643,
      darkolivegreen: 5597999,
      darkorange: 16747520,
      darkorchid: 10040012,
      darkred: 9109504,
      darksalmon: 15308410,
      darkseagreen: 9419919,
      darkslateblue: 4734347,
      darkslategray: 3100495,
      darkslategrey: 3100495,
      darkturquoise: 52945,
      darkviolet: 9699539,
      deeppink: 16716947,
      deepskyblue: 49151,
      dimgray: 6908265,
      dimgrey: 6908265,
      dodgerblue: 2003199,
      firebrick: 11674146,
      floralwhite: 16775920,
      forestgreen: 2263842,
      fuchsia: 16711935,
      gainsboro: 14474460,
      ghostwhite: 16316671,
      gold: 16766720,
      goldenrod: 14329120,
      gray: 8421504,
      green: 32768,
      greenyellow: 11403055,
      grey: 8421504,
      honeydew: 15794160,
      hotpink: 16738740,
      indianred: 13458524,
      indigo: 4915330,
      ivory: 16777200,
      khaki: 15787660,
      lavender: 15132410,
      lavenderblush: 16773365,
      lawngreen: 8190976,
      lemonchiffon: 16775885,
      lightblue: 11393254,
      lightcoral: 15761536,
      lightcyan: 14745599,
      lightgoldenrodyellow: 16448210,
      lightgray: 13882323,
      lightgreen: 9498256,
      lightgrey: 13882323,
      lightpink: 16758465,
      lightsalmon: 16752762,
      lightseagreen: 2142890,
      lightskyblue: 8900346,
      lightslategray: 7833753,
      lightslategrey: 7833753,
      lightsteelblue: 11584734,
      lightyellow: 16777184,
      lime: 65280,
      limegreen: 3329330,
      linen: 16445670,
      magenta: 16711935,
      maroon: 8388608,
      mediumaquamarine: 6737322,
      mediumblue: 205,
      mediumorchid: 12211667,
      mediumpurple: 9662683,
      mediumseagreen: 3978097,
      mediumslateblue: 8087790,
      mediumspringgreen: 64154,
      mediumturquoise: 4772300,
      mediumvioletred: 13047173,
      midnightblue: 1644912,
      mintcream: 16121850,
      mistyrose: 16770273,
      moccasin: 16770229,
      navajowhite: 16768685,
      navy: 128,
      oldlace: 16643558,
      olive: 8421376,
      olivedrab: 7048739,
      orange: 16753920,
      orangered: 16729344,
      orchid: 14315734,
      palegoldenrod: 15657130,
      palegreen: 10025880,
      paleturquoise: 11529966,
      palevioletred: 14381203,
      papayawhip: 16773077,
      peachpuff: 16767673,
      peru: 13468991,
      pink: 16761035,
      plum: 14524637,
      powderblue: 11591910,
      purple: 8388736,
      rebeccapurple: 6697881,
      red: 16711680,
      rosybrown: 12357519,
      royalblue: 4286945,
      saddlebrown: 9127187,
      salmon: 16416882,
      sandybrown: 16032864,
      seagreen: 3050327,
      seashell: 16774638,
      sienna: 10506797,
      silver: 12632256,
      skyblue: 8900331,
      slateblue: 6970061,
      slategray: 7372944,
      slategrey: 7372944,
      snow: 16775930,
      springgreen: 65407,
      steelblue: 4620980,
      tan: 13808780,
      teal: 32896,
      thistle: 14204888,
      tomato: 16737095,
      turquoise: 4251856,
      violet: 15631086,
      wheat: 16113331,
      white: 16777215,
      whitesmoke: 16119285,
      yellow: 16776960,
      yellowgreen: 10145074
    };
    define(Color, color, {
      copy(channels) {
        return Object.assign(new this.constructor(), this, channels);
      },
      displayable() {
        return this.rgb().displayable();
      },
      hex: color_formatHex,
      // Deprecated! Use color.formatHex.
      formatHex: color_formatHex,
      formatHex8: color_formatHex8,
      formatHsl: color_formatHsl,
      formatRgb: color_formatRgb,
      toString: color_formatRgb
    });
    function color_formatHex() {
      return this.rgb().formatHex();
    }
    function color_formatHex8() {
      return this.rgb().formatHex8();
    }
    function color_formatHsl() {
      return hslConvert(this).formatHsl();
    }
    function color_formatRgb() {
      return this.rgb().formatRgb();
    }
    function color(format2) {
      var m2, l2;
      format2 = (format2 + "").trim().toLowerCase();
      return (m2 = reHex.exec(format2)) ? (l2 = m2[1].length, m2 = parseInt(m2[1], 16), l2 === 6 ? rgbn(m2) : l2 === 3 ? new Rgb(m2 >> 8 & 15 | m2 >> 4 & 240, m2 >> 4 & 15 | m2 & 240, (m2 & 15) << 4 | m2 & 15, 1) : l2 === 8 ? rgba(m2 >> 24 & 255, m2 >> 16 & 255, m2 >> 8 & 255, (m2 & 255) / 255) : l2 === 4 ? rgba(m2 >> 12 & 15 | m2 >> 8 & 240, m2 >> 8 & 15 | m2 >> 4 & 240, m2 >> 4 & 15 | m2 & 240, ((m2 & 15) << 4 | m2 & 15) / 255) : null) : (m2 = reRgbInteger.exec(format2)) ? new Rgb(m2[1], m2[2], m2[3], 1) : (m2 = reRgbPercent.exec(format2)) ? new Rgb(m2[1] * 255 / 100, m2[2] * 255 / 100, m2[3] * 255 / 100, 1) : (m2 = reRgbaInteger.exec(format2)) ? rgba(m2[1], m2[2], m2[3], m2[4]) : (m2 = reRgbaPercent.exec(format2)) ? rgba(m2[1] * 255 / 100, m2[2] * 255 / 100, m2[3] * 255 / 100, m2[4]) : (m2 = reHslPercent.exec(format2)) ? hsla(m2[1], m2[2] / 100, m2[3] / 100, 1) : (m2 = reHslaPercent.exec(format2)) ? hsla(m2[1], m2[2] / 100, m2[3] / 100, m2[4]) : named.hasOwnProperty(format2) ? rgbn(named[format2]) : format2 === "transparent" ? new Rgb(NaN, NaN, NaN, 0) : null;
    }
    function rgbn(n2) {
      return new Rgb(n2 >> 16 & 255, n2 >> 8 & 255, n2 & 255, 1);
    }
    function rgba(r2, g2, b2, a2) {
      if (a2 <= 0)
        r2 = g2 = b2 = NaN;
      return new Rgb(r2, g2, b2, a2);
    }
    function rgbConvert(o2) {
      if (!(o2 instanceof Color))
        o2 = color(o2);
      if (!o2)
        return new Rgb();
      o2 = o2.rgb();
      return new Rgb(o2.r, o2.g, o2.b, o2.opacity);
    }
    function rgb$1(r2, g2, b2, opacity) {
      return arguments.length === 1 ? rgbConvert(r2) : new Rgb(r2, g2, b2, opacity == null ? 1 : opacity);
    }
    function Rgb(r2, g2, b2, opacity) {
      this.r = +r2;
      this.g = +g2;
      this.b = +b2;
      this.opacity = +opacity;
    }
    define(Rgb, rgb$1, extend(Color, {
      brighter(k2) {
        k2 = k2 == null ? brighter : Math.pow(brighter, k2);
        return new Rgb(this.r * k2, this.g * k2, this.b * k2, this.opacity);
      },
      darker(k2) {
        k2 = k2 == null ? darker : Math.pow(darker, k2);
        return new Rgb(this.r * k2, this.g * k2, this.b * k2, this.opacity);
      },
      rgb() {
        return this;
      },
      clamp() {
        return new Rgb(clampi(this.r), clampi(this.g), clampi(this.b), clampa(this.opacity));
      },
      displayable() {
        return -0.5 <= this.r && this.r < 255.5 && (-0.5 <= this.g && this.g < 255.5) && (-0.5 <= this.b && this.b < 255.5) && (0 <= this.opacity && this.opacity <= 1);
      },
      hex: rgb_formatHex,
      // Deprecated! Use color.formatHex.
      formatHex: rgb_formatHex,
      formatHex8: rgb_formatHex8,
      formatRgb: rgb_formatRgb,
      toString: rgb_formatRgb
    }));
    function rgb_formatHex() {
      return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}`;
    }
    function rgb_formatHex8() {
      return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}${hex((isNaN(this.opacity) ? 1 : this.opacity) * 255)}`;
    }
    function rgb_formatRgb() {
      const a2 = clampa(this.opacity);
      return `${a2 === 1 ? "rgb(" : "rgba("}${clampi(this.r)}, ${clampi(this.g)}, ${clampi(this.b)}${a2 === 1 ? ")" : `, ${a2})`}`;
    }
    function clampa(opacity) {
      return isNaN(opacity) ? 1 : Math.max(0, Math.min(1, opacity));
    }
    function clampi(value2) {
      return Math.max(0, Math.min(255, Math.round(value2) || 0));
    }
    function hex(value2) {
      value2 = clampi(value2);
      return (value2 < 16 ? "0" : "") + value2.toString(16);
    }
    function hsla(h2, s2, l2, a2) {
      if (a2 <= 0)
        h2 = s2 = l2 = NaN;
      else if (l2 <= 0 || l2 >= 1)
        h2 = s2 = NaN;
      else if (s2 <= 0)
        h2 = NaN;
      return new Hsl(h2, s2, l2, a2);
    }
    function hslConvert(o2) {
      if (o2 instanceof Hsl)
        return new Hsl(o2.h, o2.s, o2.l, o2.opacity);
      if (!(o2 instanceof Color))
        o2 = color(o2);
      if (!o2)
        return new Hsl();
      if (o2 instanceof Hsl)
        return o2;
      o2 = o2.rgb();
      var r2 = o2.r / 255, g2 = o2.g / 255, b2 = o2.b / 255, min2 = Math.min(r2, g2, b2), max2 = Math.max(r2, g2, b2), h2 = NaN, s2 = max2 - min2, l2 = (max2 + min2) / 2;
      if (s2) {
        if (r2 === max2)
          h2 = (g2 - b2) / s2 + (g2 < b2) * 6;
        else if (g2 === max2)
          h2 = (b2 - r2) / s2 + 2;
        else
          h2 = (r2 - g2) / s2 + 4;
        s2 /= l2 < 0.5 ? max2 + min2 : 2 - max2 - min2;
        h2 *= 60;
      } else {
        s2 = l2 > 0 && l2 < 1 ? 0 : h2;
      }
      return new Hsl(h2, s2, l2, o2.opacity);
    }
    function hsl(h2, s2, l2, opacity) {
      return arguments.length === 1 ? hslConvert(h2) : new Hsl(h2, s2, l2, opacity == null ? 1 : opacity);
    }
    function Hsl(h2, s2, l2, opacity) {
      this.h = +h2;
      this.s = +s2;
      this.l = +l2;
      this.opacity = +opacity;
    }
    define(Hsl, hsl, extend(Color, {
      brighter(k2) {
        k2 = k2 == null ? brighter : Math.pow(brighter, k2);
        return new Hsl(this.h, this.s, this.l * k2, this.opacity);
      },
      darker(k2) {
        k2 = k2 == null ? darker : Math.pow(darker, k2);
        return new Hsl(this.h, this.s, this.l * k2, this.opacity);
      },
      rgb() {
        var h2 = this.h % 360 + (this.h < 0) * 360, s2 = isNaN(h2) || isNaN(this.s) ? 0 : this.s, l2 = this.l, m2 = l2 + (l2 < 0.5 ? l2 : 1 - l2) * s2, m1 = 2 * l2 - m2;
        return new Rgb(
          hsl2rgb(h2 >= 240 ? h2 - 240 : h2 + 120, m1, m2),
          hsl2rgb(h2, m1, m2),
          hsl2rgb(h2 < 120 ? h2 + 240 : h2 - 120, m1, m2),
          this.opacity
        );
      },
      clamp() {
        return new Hsl(clamph(this.h), clampt(this.s), clampt(this.l), clampa(this.opacity));
      },
      displayable() {
        return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && (0 <= this.l && this.l <= 1) && (0 <= this.opacity && this.opacity <= 1);
      },
      formatHsl() {
        const a2 = clampa(this.opacity);
        return `${a2 === 1 ? "hsl(" : "hsla("}${clamph(this.h)}, ${clampt(this.s) * 100}%, ${clampt(this.l) * 100}%${a2 === 1 ? ")" : `, ${a2})`}`;
      }
    }));
    function clamph(value2) {
      value2 = (value2 || 0) % 360;
      return value2 < 0 ? value2 + 360 : value2;
    }
    function clampt(value2) {
      return Math.max(0, Math.min(1, value2 || 0));
    }
    function hsl2rgb(h2, m1, m2) {
      return (h2 < 60 ? m1 + (m2 - m1) * h2 / 60 : h2 < 180 ? m2 : h2 < 240 ? m1 + (m2 - m1) * (240 - h2) / 60 : m1) * 255;
    }
    const constant = (x2) => () => x2;
    function linear$1(a2, d2) {
      return function(t2) {
        return a2 + t2 * d2;
      };
    }
    function exponential(a2, b2, y2) {
      return a2 = Math.pow(a2, y2), b2 = Math.pow(b2, y2) - a2, y2 = 1 / y2, function(t2) {
        return Math.pow(a2 + t2 * b2, y2);
      };
    }
    function gamma(y2) {
      return (y2 = +y2) === 1 ? nogamma : function(a2, b2) {
        return b2 - a2 ? exponential(a2, b2, y2) : constant(isNaN(a2) ? b2 : a2);
      };
    }
    function nogamma(a2, b2) {
      var d2 = b2 - a2;
      return d2 ? linear$1(a2, d2) : constant(isNaN(a2) ? b2 : a2);
    }
    const rgb = function rgbGamma(y2) {
      var color2 = gamma(y2);
      function rgb2(start, end) {
        var r2 = color2((start = rgb$1(start)).r, (end = rgb$1(end)).r), g2 = color2(start.g, end.g), b2 = color2(start.b, end.b), opacity = nogamma(start.opacity, end.opacity);
        return function(t2) {
          start.r = r2(t2);
          start.g = g2(t2);
          start.b = b2(t2);
          start.opacity = opacity(t2);
          return start + "";
        };
      }
      rgb2.gamma = rgbGamma;
      return rgb2;
    }(1);
    function numberArray(a2, b2) {
      if (!b2)
        b2 = [];
      var n2 = a2 ? Math.min(b2.length, a2.length) : 0, c2 = b2.slice(), i2;
      return function(t2) {
        for (i2 = 0; i2 < n2; ++i2)
          c2[i2] = a2[i2] * (1 - t2) + b2[i2] * t2;
        return c2;
      };
    }
    function isNumberArray(x2) {
      return ArrayBuffer.isView(x2) && !(x2 instanceof DataView);
    }
    function genericArray(a2, b2) {
      var nb2 = b2 ? b2.length : 0, na = a2 ? Math.min(nb2, a2.length) : 0, x2 = new Array(na), c2 = new Array(nb2), i2;
      for (i2 = 0; i2 < na; ++i2)
        x2[i2] = interpolate(a2[i2], b2[i2]);
      for (; i2 < nb2; ++i2)
        c2[i2] = b2[i2];
      return function(t2) {
        for (i2 = 0; i2 < na; ++i2)
          c2[i2] = x2[i2](t2);
        return c2;
      };
    }
    function date$1(a2, b2) {
      var d2 = /* @__PURE__ */ new Date();
      return a2 = +a2, b2 = +b2, function(t2) {
        return d2.setTime(a2 * (1 - t2) + b2 * t2), d2;
      };
    }
    function interpolateNumber$1(a2, b2) {
      return a2 = +a2, b2 = +b2, function(t2) {
        return a2 * (1 - t2) + b2 * t2;
      };
    }
    function object(a2, b2) {
      var i2 = {}, c2 = {}, k2;
      if (a2 === null || typeof a2 !== "object")
        a2 = {};
      if (b2 === null || typeof b2 !== "object")
        b2 = {};
      for (k2 in b2) {
        if (k2 in a2) {
          i2[k2] = interpolate(a2[k2], b2[k2]);
        } else {
          c2[k2] = b2[k2];
        }
      }
      return function(t2) {
        for (k2 in i2)
          c2[k2] = i2[k2](t2);
        return c2;
      };
    }
    var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g, reB = new RegExp(reA.source, "g");
    function zero(b2) {
      return function() {
        return b2;
      };
    }
    function one(b2) {
      return function(t2) {
        return b2(t2) + "";
      };
    }
    function string(a2, b2) {
      var bi2 = reA.lastIndex = reB.lastIndex = 0, am, bm, bs, i2 = -1, s2 = [], q2 = [];
      a2 = a2 + "", b2 = b2 + "";
      while ((am = reA.exec(a2)) && (bm = reB.exec(b2))) {
        if ((bs = bm.index) > bi2) {
          bs = b2.slice(bi2, bs);
          if (s2[i2])
            s2[i2] += bs;
          else
            s2[++i2] = bs;
        }
        if ((am = am[0]) === (bm = bm[0])) {
          if (s2[i2])
            s2[i2] += bm;
          else
            s2[++i2] = bm;
        } else {
          s2[++i2] = null;
          q2.push({ i: i2, x: interpolateNumber$1(am, bm) });
        }
        bi2 = reB.lastIndex;
      }
      if (bi2 < b2.length) {
        bs = b2.slice(bi2);
        if (s2[i2])
          s2[i2] += bs;
        else
          s2[++i2] = bs;
      }
      return s2.length < 2 ? q2[0] ? one(q2[0].x) : zero(b2) : (b2 = q2.length, function(t2) {
        for (var i3 = 0, o2; i3 < b2; ++i3)
          s2[(o2 = q2[i3]).i] = o2.x(t2);
        return s2.join("");
      });
    }
    function interpolate(a2, b2) {
      var t2 = typeof b2, c2;
      return b2 == null || t2 === "boolean" ? constant(b2) : (t2 === "number" ? interpolateNumber$1 : t2 === "string" ? (c2 = color(b2)) ? (b2 = c2, rgb) : string : b2 instanceof color ? rgb : b2 instanceof Date ? date$1 : isNumberArray(b2) ? numberArray : Array.isArray(b2) ? genericArray : typeof b2.valueOf !== "function" && typeof b2.toString !== "function" || isNaN(b2) ? object : interpolateNumber$1)(a2, b2);
    }
    function interpolateRound(a2, b2) {
      return a2 = +a2, b2 = +b2, function(t2) {
        return Math.round(a2 * (1 - t2) + b2 * t2);
      };
    }
    function piecewise(interpolate$1, values) {
      if (values === void 0)
        values = interpolate$1, interpolate$1 = interpolate;
      var i2 = 0, n2 = values.length - 1, v2 = values[0], I2 = new Array(n2 < 0 ? 0 : n2);
      while (i2 < n2)
        I2[i2] = interpolate$1(v2, v2 = values[++i2]);
      return function(t2) {
        var i3 = Math.max(0, Math.min(n2 - 1, Math.floor(t2 *= n2)));
        return I2[i3](t2 - i3);
      };
    }
    function constants(x2) {
      return function() {
        return x2;
      };
    }
    function number$1(x2) {
      return +x2;
    }
    var unit = [0, 1];
    function identity$6(x2) {
      return x2;
    }
    function normalize(a2, b2) {
      return (b2 -= a2 = +a2) ? function(x2) {
        return (x2 - a2) / b2;
      } : constants(isNaN(b2) ? NaN : 0.5);
    }
    function clamper(a2, b2) {
      var t2;
      if (a2 > b2)
        t2 = a2, a2 = b2, b2 = t2;
      return function(x2) {
        return Math.max(a2, Math.min(b2, x2));
      };
    }
    function bimap(domain, range2, interpolate2) {
      var d0 = domain[0], d1 = domain[1], r0 = range2[0], r1 = range2[1];
      if (d1 < d0)
        d0 = normalize(d1, d0), r0 = interpolate2(r1, r0);
      else
        d0 = normalize(d0, d1), r0 = interpolate2(r0, r1);
      return function(x2) {
        return r0(d0(x2));
      };
    }
    function polymap(domain, range2, interpolate2) {
      var j2 = Math.min(domain.length, range2.length) - 1, d2 = new Array(j2), r2 = new Array(j2), i2 = -1;
      if (domain[j2] < domain[0]) {
        domain = domain.slice().reverse();
        range2 = range2.slice().reverse();
      }
      while (++i2 < j2) {
        d2[i2] = normalize(domain[i2], domain[i2 + 1]);
        r2[i2] = interpolate2(range2[i2], range2[i2 + 1]);
      }
      return function(x2) {
        var i3 = bisectRight(domain, x2, 1, j2) - 1;
        return r2[i3](d2[i3](x2));
      };
    }
    function copy$1(source, target) {
      return target.domain(source.domain()).range(source.range()).interpolate(source.interpolate()).clamp(source.clamp()).unknown(source.unknown());
    }
    function transformer$2() {
      var domain = unit, range2 = unit, interpolate$1 = interpolate, transform, untransform, unknown, clamp = identity$6, piecewise2, output, input;
      function rescale() {
        var n2 = Math.min(domain.length, range2.length);
        if (clamp !== identity$6)
          clamp = clamper(domain[0], domain[n2 - 1]);
        piecewise2 = n2 > 2 ? polymap : bimap;
        output = input = null;
        return scale;
      }
      function scale(x2) {
        return x2 == null || isNaN(x2 = +x2) ? unknown : (output || (output = piecewise2(domain.map(transform), range2, interpolate$1)))(transform(clamp(x2)));
      }
      scale.invert = function(y2) {
        return clamp(untransform((input || (input = piecewise2(range2, domain.map(transform), interpolateNumber$1)))(y2)));
      };
      scale.domain = function(_2) {
        return arguments.length ? (domain = Array.from(_2, number$1), rescale()) : domain.slice();
      };
      scale.range = function(_2) {
        return arguments.length ? (range2 = Array.from(_2), rescale()) : range2.slice();
      };
      scale.rangeRound = function(_2) {
        return range2 = Array.from(_2), interpolate$1 = interpolateRound, rescale();
      };
      scale.clamp = function(_2) {
        return arguments.length ? (clamp = _2 ? true : identity$6, rescale()) : clamp !== identity$6;
      };
      scale.interpolate = function(_2) {
        return arguments.length ? (interpolate$1 = _2, rescale()) : interpolate$1;
      };
      scale.unknown = function(_2) {
        return arguments.length ? (unknown = _2, scale) : unknown;
      };
      return function(t2, u2) {
        transform = t2, untransform = u2;
        return rescale();
      };
    }
    function continuous() {
      return transformer$2()(identity$6, identity$6);
    }
    function formatDecimal(x2) {
      return Math.abs(x2 = Math.round(x2)) >= 1e21 ? x2.toLocaleString("en").replace(/,/g, "") : x2.toString(10);
    }
    function formatDecimalParts(x2, p2) {
      if ((i2 = (x2 = p2 ? x2.toExponential(p2 - 1) : x2.toExponential()).indexOf("e")) < 0)
        return null;
      var i2, coefficient = x2.slice(0, i2);
      return [
        coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
        +x2.slice(i2 + 1)
      ];
    }
    function exponent(x2) {
      return x2 = formatDecimalParts(Math.abs(x2)), x2 ? x2[1] : NaN;
    }
    function formatGroup(grouping, thousands) {
      return function(value2, width) {
        var i2 = value2.length, t2 = [], j2 = 0, g2 = grouping[0], length = 0;
        while (i2 > 0 && g2 > 0) {
          if (length + g2 + 1 > width)
            g2 = Math.max(1, width - length);
          t2.push(value2.substring(i2 -= g2, i2 + g2));
          if ((length += g2 + 1) > width)
            break;
          g2 = grouping[j2 = (j2 + 1) % grouping.length];
        }
        return t2.reverse().join(thousands);
      };
    }
    function formatNumerals(numerals) {
      return function(value2) {
        return value2.replace(/[0-9]/g, function(i2) {
          return numerals[+i2];
        });
      };
    }
    var re = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;
    function formatSpecifier(specifier) {
      if (!(match = re.exec(specifier)))
        throw new Error("invalid format: " + specifier);
      var match;
      return new FormatSpecifier({
        fill: match[1],
        align: match[2],
        sign: match[3],
        symbol: match[4],
        zero: match[5],
        width: match[6],
        comma: match[7],
        precision: match[8] && match[8].slice(1),
        trim: match[9],
        type: match[10]
      });
    }
    formatSpecifier.prototype = FormatSpecifier.prototype;
    function FormatSpecifier(specifier) {
      this.fill = specifier.fill === void 0 ? " " : specifier.fill + "";
      this.align = specifier.align === void 0 ? ">" : specifier.align + "";
      this.sign = specifier.sign === void 0 ? "-" : specifier.sign + "";
      this.symbol = specifier.symbol === void 0 ? "" : specifier.symbol + "";
      this.zero = !!specifier.zero;
      this.width = specifier.width === void 0 ? void 0 : +specifier.width;
      this.comma = !!specifier.comma;
      this.precision = specifier.precision === void 0 ? void 0 : +specifier.precision;
      this.trim = !!specifier.trim;
      this.type = specifier.type === void 0 ? "" : specifier.type + "";
    }
    FormatSpecifier.prototype.toString = function() {
      return this.fill + this.align + this.sign + this.symbol + (this.zero ? "0" : "") + (this.width === void 0 ? "" : Math.max(1, this.width | 0)) + (this.comma ? "," : "") + (this.precision === void 0 ? "" : "." + Math.max(0, this.precision | 0)) + (this.trim ? "~" : "") + this.type;
    };
    function formatTrim(s2) {
      out:
        for (var n2 = s2.length, i2 = 1, i0 = -1, i1; i2 < n2; ++i2) {
          switch (s2[i2]) {
            case ".":
              i0 = i1 = i2;
              break;
            case "0":
              if (i0 === 0)
                i0 = i2;
              i1 = i2;
              break;
            default:
              if (!+s2[i2])
                break out;
              if (i0 > 0)
                i0 = 0;
              break;
          }
        }
      return i0 > 0 ? s2.slice(0, i0) + s2.slice(i1 + 1) : s2;
    }
    var prefixExponent;
    function formatPrefixAuto(x2, p2) {
      var d2 = formatDecimalParts(x2, p2);
      if (!d2)
        return x2 + "";
      var coefficient = d2[0], exponent2 = d2[1], i2 = exponent2 - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent2 / 3))) * 3) + 1, n2 = coefficient.length;
      return i2 === n2 ? coefficient : i2 > n2 ? coefficient + new Array(i2 - n2 + 1).join("0") : i2 > 0 ? coefficient.slice(0, i2) + "." + coefficient.slice(i2) : "0." + new Array(1 - i2).join("0") + formatDecimalParts(x2, Math.max(0, p2 + i2 - 1))[0];
    }
    function formatRounded(x2, p2) {
      var d2 = formatDecimalParts(x2, p2);
      if (!d2)
        return x2 + "";
      var coefficient = d2[0], exponent2 = d2[1];
      return exponent2 < 0 ? "0." + new Array(-exponent2).join("0") + coefficient : coefficient.length > exponent2 + 1 ? coefficient.slice(0, exponent2 + 1) + "." + coefficient.slice(exponent2 + 1) : coefficient + new Array(exponent2 - coefficient.length + 2).join("0");
    }
    const formatTypes = {
      "%": (x2, p2) => (x2 * 100).toFixed(p2),
      "b": (x2) => Math.round(x2).toString(2),
      "c": (x2) => x2 + "",
      "d": formatDecimal,
      "e": (x2, p2) => x2.toExponential(p2),
      "f": (x2, p2) => x2.toFixed(p2),
      "g": (x2, p2) => x2.toPrecision(p2),
      "o": (x2) => Math.round(x2).toString(8),
      "p": (x2, p2) => formatRounded(x2 * 100, p2),
      "r": formatRounded,
      "s": formatPrefixAuto,
      "X": (x2) => Math.round(x2).toString(16).toUpperCase(),
      "x": (x2) => Math.round(x2).toString(16)
    };
    function identity$5(x2) {
      return x2;
    }
    var map$3 = Array.prototype.map, prefixes = ["y", "z", "a", "f", "p", "n", "µ", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y"];
    function formatLocale$1(locale2) {
      var group = locale2.grouping === void 0 || locale2.thousands === void 0 ? identity$5 : formatGroup(map$3.call(locale2.grouping, Number), locale2.thousands + ""), currencyPrefix = locale2.currency === void 0 ? "" : locale2.currency[0] + "", currencySuffix = locale2.currency === void 0 ? "" : locale2.currency[1] + "", decimal = locale2.decimal === void 0 ? "." : locale2.decimal + "", numerals = locale2.numerals === void 0 ? identity$5 : formatNumerals(map$3.call(locale2.numerals, String)), percent = locale2.percent === void 0 ? "%" : locale2.percent + "", minus = locale2.minus === void 0 ? "−" : locale2.minus + "", nan = locale2.nan === void 0 ? "NaN" : locale2.nan + "";
      function newFormat(specifier) {
        specifier = formatSpecifier(specifier);
        var fill = specifier.fill, align = specifier.align, sign2 = specifier.sign, symbol = specifier.symbol, zero2 = specifier.zero, width = specifier.width, comma = specifier.comma, precision = specifier.precision, trim2 = specifier.trim, type = specifier.type;
        if (type === "n")
          comma = true, type = "g";
        else if (!formatTypes[type])
          precision === void 0 && (precision = 12), trim2 = true, type = "g";
        if (zero2 || fill === "0" && align === "=")
          zero2 = true, fill = "0", align = "=";
        var prefix2 = symbol === "$" ? currencyPrefix : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "", suffix = symbol === "$" ? currencySuffix : /[%p]/.test(type) ? percent : "";
        var formatType = formatTypes[type], maybeSuffix = /[defgprs%]/.test(type);
        precision = precision === void 0 ? 6 : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));
        function format2(value2) {
          var valuePrefix = prefix2, valueSuffix = suffix, i2, n2, c2;
          if (type === "c") {
            valueSuffix = formatType(value2) + valueSuffix;
            value2 = "";
          } else {
            value2 = +value2;
            var valueNegative = value2 < 0 || 1 / value2 < 0;
            value2 = isNaN(value2) ? nan : formatType(Math.abs(value2), precision);
            if (trim2)
              value2 = formatTrim(value2);
            if (valueNegative && +value2 === 0 && sign2 !== "+")
              valueNegative = false;
            valuePrefix = (valueNegative ? sign2 === "(" ? sign2 : minus : sign2 === "-" || sign2 === "(" ? "" : sign2) + valuePrefix;
            valueSuffix = (type === "s" ? prefixes[8 + prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign2 === "(" ? ")" : "");
            if (maybeSuffix) {
              i2 = -1, n2 = value2.length;
              while (++i2 < n2) {
                if (c2 = value2.charCodeAt(i2), 48 > c2 || c2 > 57) {
                  valueSuffix = (c2 === 46 ? decimal + value2.slice(i2 + 1) : value2.slice(i2)) + valueSuffix;
                  value2 = value2.slice(0, i2);
                  break;
                }
              }
            }
          }
          if (comma && !zero2)
            value2 = group(value2, Infinity);
          var length = valuePrefix.length + value2.length + valueSuffix.length, padding = length < width ? new Array(width - length + 1).join(fill) : "";
          if (comma && zero2)
            value2 = group(padding + value2, padding.length ? width - valueSuffix.length : Infinity), padding = "";
          switch (align) {
            case "<":
              value2 = valuePrefix + value2 + valueSuffix + padding;
              break;
            case "=":
              value2 = valuePrefix + padding + value2 + valueSuffix;
              break;
            case "^":
              value2 = padding.slice(0, length = padding.length >> 1) + valuePrefix + value2 + valueSuffix + padding.slice(length);
              break;
            default:
              value2 = padding + valuePrefix + value2 + valueSuffix;
              break;
          }
          return numerals(value2);
        }
        format2.toString = function() {
          return specifier + "";
        };
        return format2;
      }
      function formatPrefix2(specifier, value2) {
        var f2 = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)), e3 = Math.max(-8, Math.min(8, Math.floor(exponent(value2) / 3))) * 3, k2 = Math.pow(10, -e3), prefix2 = prefixes[8 + e3 / 3];
        return function(value3) {
          return f2(k2 * value3) + prefix2;
        };
      }
      return {
        format: newFormat,
        formatPrefix: formatPrefix2
      };
    }
    var locale$1;
    var format;
    var formatPrefix;
    defaultLocale$1({
      thousands: ",",
      grouping: [3],
      currency: ["$", ""]
    });
    function defaultLocale$1(definition) {
      locale$1 = formatLocale$1(definition);
      format = locale$1.format;
      formatPrefix = locale$1.formatPrefix;
      return locale$1;
    }
    function precisionFixed(step) {
      return Math.max(0, -exponent(Math.abs(step)));
    }
    function precisionPrefix(step, value2) {
      return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent(value2) / 3))) * 3 - exponent(Math.abs(step)));
    }
    function precisionRound(step, max2) {
      step = Math.abs(step), max2 = Math.abs(max2) - step;
      return Math.max(0, exponent(max2) - exponent(step)) + 1;
    }
    function tickFormat(start, stop, count, specifier) {
      var step = tickStep(start, stop, count), precision;
      specifier = formatSpecifier(specifier == null ? ",f" : specifier);
      switch (specifier.type) {
        case "s": {
          var value2 = Math.max(Math.abs(start), Math.abs(stop));
          if (specifier.precision == null && !isNaN(precision = precisionPrefix(step, value2)))
            specifier.precision = precision;
          return formatPrefix(specifier, value2);
        }
        case "":
        case "e":
        case "g":
        case "p":
        case "r": {
          if (specifier.precision == null && !isNaN(precision = precisionRound(step, Math.max(Math.abs(start), Math.abs(stop)))))
            specifier.precision = precision - (specifier.type === "e");
          break;
        }
        case "f":
        case "%": {
          if (specifier.precision == null && !isNaN(precision = precisionFixed(step)))
            specifier.precision = precision - (specifier.type === "%") * 2;
          break;
        }
      }
      return format(specifier);
    }
    function linearish(scale) {
      var domain = scale.domain;
      scale.ticks = function(count) {
        var d2 = domain();
        return ticks(d2[0], d2[d2.length - 1], count == null ? 10 : count);
      };
      scale.tickFormat = function(count, specifier) {
        var d2 = domain();
        return tickFormat(d2[0], d2[d2.length - 1], count == null ? 10 : count, specifier);
      };
      scale.nice = function(count) {
        if (count == null)
          count = 10;
        var d2 = domain();
        var i0 = 0;
        var i1 = d2.length - 1;
        var start = d2[i0];
        var stop = d2[i1];
        var prestep;
        var step;
        var maxIter = 10;
        if (stop < start) {
          step = start, start = stop, stop = step;
          step = i0, i0 = i1, i1 = step;
        }
        while (maxIter-- > 0) {
          step = tickIncrement(start, stop, count);
          if (step === prestep) {
            d2[i0] = start;
            d2[i1] = stop;
            return domain(d2);
          } else if (step > 0) {
            start = Math.floor(start / step) * step;
            stop = Math.ceil(stop / step) * step;
          } else if (step < 0) {
            start = Math.ceil(start * step) / step;
            stop = Math.floor(stop * step) / step;
          } else {
            break;
          }
          prestep = step;
        }
        return scale;
      };
      return scale;
    }
    function linear() {
      var scale = continuous();
      scale.copy = function() {
        return copy$1(scale, linear());
      };
      initRange.apply(scale, arguments);
      return linearish(scale);
    }
    function identity$4(domain) {
      var unknown;
      function scale(x2) {
        return x2 == null || isNaN(x2 = +x2) ? unknown : x2;
      }
      scale.invert = scale;
      scale.domain = scale.range = function(_2) {
        return arguments.length ? (domain = Array.from(_2, number$1), scale) : domain.slice();
      };
      scale.unknown = function(_2) {
        return arguments.length ? (unknown = _2, scale) : unknown;
      };
      scale.copy = function() {
        return identity$4(domain).unknown(unknown);
      };
      domain = arguments.length ? Array.from(domain, number$1) : [0, 1];
      return linearish(scale);
    }
    function nice(domain, interval) {
      domain = domain.slice();
      var i0 = 0, i1 = domain.length - 1, x0 = domain[i0], x1 = domain[i1], t2;
      if (x1 < x0) {
        t2 = i0, i0 = i1, i1 = t2;
        t2 = x0, x0 = x1, x1 = t2;
      }
      domain[i0] = interval.floor(x0);
      domain[i1] = interval.ceil(x1);
      return domain;
    }
    function transformLog(x2) {
      return Math.log(x2);
    }
    function transformExp(x2) {
      return Math.exp(x2);
    }
    function transformLogn(x2) {
      return -Math.log(-x2);
    }
    function transformExpn(x2) {
      return -Math.exp(-x2);
    }
    function pow10(x2) {
      return isFinite(x2) ? +("1e" + x2) : x2 < 0 ? 0 : x2;
    }
    function powp(base) {
      return base === 10 ? pow10 : base === Math.E ? Math.exp : (x2) => Math.pow(base, x2);
    }
    function logp(base) {
      return base === Math.E ? Math.log : base === 10 && Math.log10 || base === 2 && Math.log2 || (base = Math.log(base), (x2) => Math.log(x2) / base);
    }
    function reflect(f2) {
      return (x2, k2) => -f2(-x2, k2);
    }
    function loggish(transform) {
      const scale = transform(transformLog, transformExp);
      const domain = scale.domain;
      let base = 10;
      let logs;
      let pows;
      function rescale() {
        logs = logp(base), pows = powp(base);
        if (domain()[0] < 0) {
          logs = reflect(logs), pows = reflect(pows);
          transform(transformLogn, transformExpn);
        } else {
          transform(transformLog, transformExp);
        }
        return scale;
      }
      scale.base = function(_2) {
        return arguments.length ? (base = +_2, rescale()) : base;
      };
      scale.domain = function(_2) {
        return arguments.length ? (domain(_2), rescale()) : domain();
      };
      scale.ticks = (count) => {
        const d2 = domain();
        let u2 = d2[0];
        let v2 = d2[d2.length - 1];
        const r2 = v2 < u2;
        if (r2)
          [u2, v2] = [v2, u2];
        let i2 = logs(u2);
        let j2 = logs(v2);
        let k2;
        let t2;
        const n2 = count == null ? 10 : +count;
        let z2 = [];
        if (!(base % 1) && j2 - i2 < n2) {
          i2 = Math.floor(i2), j2 = Math.ceil(j2);
          if (u2 > 0)
            for (; i2 <= j2; ++i2) {
              for (k2 = 1; k2 < base; ++k2) {
                t2 = i2 < 0 ? k2 / pows(-i2) : k2 * pows(i2);
                if (t2 < u2)
                  continue;
                if (t2 > v2)
                  break;
                z2.push(t2);
              }
            }
          else
            for (; i2 <= j2; ++i2) {
              for (k2 = base - 1; k2 >= 1; --k2) {
                t2 = i2 > 0 ? k2 / pows(-i2) : k2 * pows(i2);
                if (t2 < u2)
                  continue;
                if (t2 > v2)
                  break;
                z2.push(t2);
              }
            }
          if (z2.length * 2 < n2)
            z2 = ticks(u2, v2, n2);
        } else {
          z2 = ticks(i2, j2, Math.min(j2 - i2, n2)).map(pows);
        }
        return r2 ? z2.reverse() : z2;
      };
      scale.tickFormat = (count, specifier) => {
        if (count == null)
          count = 10;
        if (specifier == null)
          specifier = base === 10 ? "s" : ",";
        if (typeof specifier !== "function") {
          if (!(base % 1) && (specifier = formatSpecifier(specifier)).precision == null)
            specifier.trim = true;
          specifier = format(specifier);
        }
        if (count === Infinity)
          return specifier;
        const k2 = Math.max(1, base * count / scale.ticks().length);
        return (d2) => {
          let i2 = d2 / pows(Math.round(logs(d2)));
          if (i2 * base < base - 0.5)
            i2 *= base;
          return i2 <= k2 ? specifier(d2) : "";
        };
      };
      scale.nice = () => {
        return domain(nice(domain(), {
          floor: (x2) => pows(Math.floor(logs(x2))),
          ceil: (x2) => pows(Math.ceil(logs(x2)))
        }));
      };
      return scale;
    }
    function log() {
      const scale = loggish(transformer$2()).domain([1, 10]);
      scale.copy = () => copy$1(scale, log()).base(scale.base());
      initRange.apply(scale, arguments);
      return scale;
    }
    function transformSymlog(c2) {
      return function(x2) {
        return Math.sign(x2) * Math.log1p(Math.abs(x2 / c2));
      };
    }
    function transformSymexp(c2) {
      return function(x2) {
        return Math.sign(x2) * Math.expm1(Math.abs(x2)) * c2;
      };
    }
    function symlogish(transform) {
      var c2 = 1, scale = transform(transformSymlog(c2), transformSymexp(c2));
      scale.constant = function(_2) {
        return arguments.length ? transform(transformSymlog(c2 = +_2), transformSymexp(c2)) : c2;
      };
      return linearish(scale);
    }
    function symlog() {
      var scale = symlogish(transformer$2());
      scale.copy = function() {
        return copy$1(scale, symlog()).constant(scale.constant());
      };
      return initRange.apply(scale, arguments);
    }
    function transformPow(exponent2) {
      return function(x2) {
        return x2 < 0 ? -Math.pow(-x2, exponent2) : Math.pow(x2, exponent2);
      };
    }
    function transformSqrt(x2) {
      return x2 < 0 ? -Math.sqrt(-x2) : Math.sqrt(x2);
    }
    function transformSquare(x2) {
      return x2 < 0 ? -x2 * x2 : x2 * x2;
    }
    function powish(transform) {
      var scale = transform(identity$6, identity$6), exponent2 = 1;
      function rescale() {
        return exponent2 === 1 ? transform(identity$6, identity$6) : exponent2 === 0.5 ? transform(transformSqrt, transformSquare) : transform(transformPow(exponent2), transformPow(1 / exponent2));
      }
      scale.exponent = function(_2) {
        return arguments.length ? (exponent2 = +_2, rescale()) : exponent2;
      };
      return linearish(scale);
    }
    function pow() {
      var scale = powish(transformer$2());
      scale.copy = function() {
        return copy$1(scale, pow()).exponent(scale.exponent());
      };
      initRange.apply(scale, arguments);
      return scale;
    }
    function sqrt() {
      return pow.apply(null, arguments).exponent(0.5);
    }
    function square(x2) {
      return Math.sign(x2) * x2 * x2;
    }
    function unsquare(x2) {
      return Math.sign(x2) * Math.sqrt(Math.abs(x2));
    }
    function radial() {
      var squared = continuous(), range2 = [0, 1], round2 = false, unknown;
      function scale(x2) {
        var y2 = unsquare(squared(x2));
        return isNaN(y2) ? unknown : round2 ? Math.round(y2) : y2;
      }
      scale.invert = function(y2) {
        return squared.invert(square(y2));
      };
      scale.domain = function(_2) {
        return arguments.length ? (squared.domain(_2), scale) : squared.domain();
      };
      scale.range = function(_2) {
        return arguments.length ? (squared.range((range2 = Array.from(_2, number$1)).map(square)), scale) : range2.slice();
      };
      scale.rangeRound = function(_2) {
        return scale.range(_2).round(true);
      };
      scale.round = function(_2) {
        return arguments.length ? (round2 = !!_2, scale) : round2;
      };
      scale.clamp = function(_2) {
        return arguments.length ? (squared.clamp(_2), scale) : squared.clamp();
      };
      scale.unknown = function(_2) {
        return arguments.length ? (unknown = _2, scale) : unknown;
      };
      scale.copy = function() {
        return radial(squared.domain(), range2).round(round2).clamp(squared.clamp()).unknown(unknown);
      };
      initRange.apply(scale, arguments);
      return linearish(scale);
    }
    function quantile() {
      var domain = [], range2 = [], thresholds2 = [], unknown;
      function rescale() {
        var i2 = 0, n2 = Math.max(1, range2.length);
        thresholds2 = new Array(n2 - 1);
        while (++i2 < n2)
          thresholds2[i2 - 1] = quantileSorted(domain, i2 / n2);
        return scale;
      }
      function scale(x2) {
        return x2 == null || isNaN(x2 = +x2) ? unknown : range2[bisectRight(thresholds2, x2)];
      }
      scale.invertExtent = function(y2) {
        var i2 = range2.indexOf(y2);
        return i2 < 0 ? [NaN, NaN] : [
          i2 > 0 ? thresholds2[i2 - 1] : domain[0],
          i2 < thresholds2.length ? thresholds2[i2] : domain[domain.length - 1]
        ];
      };
      scale.domain = function(_2) {
        if (!arguments.length)
          return domain.slice();
        domain = [];
        for (let d2 of _2)
          if (d2 != null && !isNaN(d2 = +d2))
            domain.push(d2);
        domain.sort(ascending);
        return rescale();
      };
      scale.range = function(_2) {
        return arguments.length ? (range2 = Array.from(_2), rescale()) : range2.slice();
      };
      scale.unknown = function(_2) {
        return arguments.length ? (unknown = _2, scale) : unknown;
      };
      scale.quantiles = function() {
        return thresholds2.slice();
      };
      scale.copy = function() {
        return quantile().domain(domain).range(range2).unknown(unknown);
      };
      return initRange.apply(scale, arguments);
    }
    function quantize() {
      var x0 = 0, x1 = 1, n2 = 1, domain = [0.5], range2 = [0, 1], unknown;
      function scale(x2) {
        return x2 != null && x2 <= x2 ? range2[bisectRight(domain, x2, 0, n2)] : unknown;
      }
      function rescale() {
        var i2 = -1;
        domain = new Array(n2);
        while (++i2 < n2)
          domain[i2] = ((i2 + 1) * x1 - (i2 - n2) * x0) / (n2 + 1);
        return scale;
      }
      scale.domain = function(_2) {
        return arguments.length ? ([x0, x1] = _2, x0 = +x0, x1 = +x1, rescale()) : [x0, x1];
      };
      scale.range = function(_2) {
        return arguments.length ? (n2 = (range2 = Array.from(_2)).length - 1, rescale()) : range2.slice();
      };
      scale.invertExtent = function(y2) {
        var i2 = range2.indexOf(y2);
        return i2 < 0 ? [NaN, NaN] : i2 < 1 ? [x0, domain[0]] : i2 >= n2 ? [domain[n2 - 1], x1] : [domain[i2 - 1], domain[i2]];
      };
      scale.unknown = function(_2) {
        return arguments.length ? (unknown = _2, scale) : scale;
      };
      scale.thresholds = function() {
        return domain.slice();
      };
      scale.copy = function() {
        return quantize().domain([x0, x1]).range(range2).unknown(unknown);
      };
      return initRange.apply(linearish(scale), arguments);
    }
    function threshold() {
      var domain = [0.5], range2 = [0, 1], unknown, n2 = 1;
      function scale(x2) {
        return x2 != null && x2 <= x2 ? range2[bisectRight(domain, x2, 0, n2)] : unknown;
      }
      scale.domain = function(_2) {
        return arguments.length ? (domain = Array.from(_2), n2 = Math.min(domain.length, range2.length - 1), scale) : domain.slice();
      };
      scale.range = function(_2) {
        return arguments.length ? (range2 = Array.from(_2), n2 = Math.min(domain.length, range2.length - 1), scale) : range2.slice();
      };
      scale.invertExtent = function(y2) {
        var i2 = range2.indexOf(y2);
        return [domain[i2 - 1], domain[i2]];
      };
      scale.unknown = function(_2) {
        return arguments.length ? (unknown = _2, scale) : unknown;
      };
      scale.copy = function() {
        return threshold().domain(domain).range(range2).unknown(unknown);
      };
      return initRange.apply(scale, arguments);
    }
    const t0 = /* @__PURE__ */ new Date(), t1 = /* @__PURE__ */ new Date();
    function timeInterval(floori, offseti, count, field) {
      function interval(date2) {
        return floori(date2 = arguments.length === 0 ? /* @__PURE__ */ new Date() : /* @__PURE__ */ new Date(+date2)), date2;
      }
      interval.floor = (date2) => {
        return floori(date2 = /* @__PURE__ */ new Date(+date2)), date2;
      };
      interval.ceil = (date2) => {
        return floori(date2 = new Date(date2 - 1)), offseti(date2, 1), floori(date2), date2;
      };
      interval.round = (date2) => {
        const d0 = interval(date2), d1 = interval.ceil(date2);
        return date2 - d0 < d1 - date2 ? d0 : d1;
      };
      interval.offset = (date2, step) => {
        return offseti(date2 = /* @__PURE__ */ new Date(+date2), step == null ? 1 : Math.floor(step)), date2;
      };
      interval.range = (start, stop, step) => {
        const range2 = [];
        start = interval.ceil(start);
        step = step == null ? 1 : Math.floor(step);
        if (!(start < stop) || !(step > 0))
          return range2;
        let previous;
        do
          range2.push(previous = /* @__PURE__ */ new Date(+start)), offseti(start, step), floori(start);
        while (previous < start && start < stop);
        return range2;
      };
      interval.filter = (test2) => {
        return timeInterval((date2) => {
          if (date2 >= date2)
            while (floori(date2), !test2(date2))
              date2.setTime(date2 - 1);
        }, (date2, step) => {
          if (date2 >= date2) {
            if (step < 0)
              while (++step <= 0) {
                while (offseti(date2, -1), !test2(date2)) {
                }
              }
            else
              while (--step >= 0) {
                while (offseti(date2, 1), !test2(date2)) {
                }
              }
          }
        });
      };
      if (count) {
        interval.count = (start, end) => {
          t0.setTime(+start), t1.setTime(+end);
          floori(t0), floori(t1);
          return Math.floor(count(t0, t1));
        };
        interval.every = (step) => {
          step = Math.floor(step);
          return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? (d2) => field(d2) % step === 0 : (d2) => interval.count(0, d2) % step === 0);
        };
      }
      return interval;
    }
    const millisecond = timeInterval(() => {
    }, (date2, step) => {
      date2.setTime(+date2 + step);
    }, (start, end) => {
      return end - start;
    });
    millisecond.every = (k2) => {
      k2 = Math.floor(k2);
      if (!isFinite(k2) || !(k2 > 0))
        return null;
      if (!(k2 > 1))
        return millisecond;
      return timeInterval((date2) => {
        date2.setTime(Math.floor(date2 / k2) * k2);
      }, (date2, step) => {
        date2.setTime(+date2 + step * k2);
      }, (start, end) => {
        return (end - start) / k2;
      });
    };
    millisecond.range;
    const durationSecond = 1e3;
    const durationMinute = durationSecond * 60;
    const durationHour = durationMinute * 60;
    const durationDay = durationHour * 24;
    const durationWeek = durationDay * 7;
    const durationMonth = durationDay * 30;
    const durationYear = durationDay * 365;
    const second = timeInterval((date2) => {
      date2.setTime(date2 - date2.getMilliseconds());
    }, (date2, step) => {
      date2.setTime(+date2 + step * durationSecond);
    }, (start, end) => {
      return (end - start) / durationSecond;
    }, (date2) => {
      return date2.getUTCSeconds();
    });
    second.range;
    const timeMinute = timeInterval((date2) => {
      date2.setTime(date2 - date2.getMilliseconds() - date2.getSeconds() * durationSecond);
    }, (date2, step) => {
      date2.setTime(+date2 + step * durationMinute);
    }, (start, end) => {
      return (end - start) / durationMinute;
    }, (date2) => {
      return date2.getMinutes();
    });
    timeMinute.range;
    const utcMinute = timeInterval((date2) => {
      date2.setUTCSeconds(0, 0);
    }, (date2, step) => {
      date2.setTime(+date2 + step * durationMinute);
    }, (start, end) => {
      return (end - start) / durationMinute;
    }, (date2) => {
      return date2.getUTCMinutes();
    });
    utcMinute.range;
    const timeHour = timeInterval((date2) => {
      date2.setTime(date2 - date2.getMilliseconds() - date2.getSeconds() * durationSecond - date2.getMinutes() * durationMinute);
    }, (date2, step) => {
      date2.setTime(+date2 + step * durationHour);
    }, (start, end) => {
      return (end - start) / durationHour;
    }, (date2) => {
      return date2.getHours();
    });
    timeHour.range;
    const utcHour = timeInterval((date2) => {
      date2.setUTCMinutes(0, 0, 0);
    }, (date2, step) => {
      date2.setTime(+date2 + step * durationHour);
    }, (start, end) => {
      return (end - start) / durationHour;
    }, (date2) => {
      return date2.getUTCHours();
    });
    utcHour.range;
    const timeDay = timeInterval(
      (date2) => date2.setHours(0, 0, 0, 0),
      (date2, step) => date2.setDate(date2.getDate() + step),
      (start, end) => (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationDay,
      (date2) => date2.getDate() - 1
    );
    timeDay.range;
    const utcDay = timeInterval((date2) => {
      date2.setUTCHours(0, 0, 0, 0);
    }, (date2, step) => {
      date2.setUTCDate(date2.getUTCDate() + step);
    }, (start, end) => {
      return (end - start) / durationDay;
    }, (date2) => {
      return date2.getUTCDate() - 1;
    });
    utcDay.range;
    const unixDay = timeInterval((date2) => {
      date2.setUTCHours(0, 0, 0, 0);
    }, (date2, step) => {
      date2.setUTCDate(date2.getUTCDate() + step);
    }, (start, end) => {
      return (end - start) / durationDay;
    }, (date2) => {
      return Math.floor(date2 / durationDay);
    });
    unixDay.range;
    function timeWeekday(i2) {
      return timeInterval((date2) => {
        date2.setDate(date2.getDate() - (date2.getDay() + 7 - i2) % 7);
        date2.setHours(0, 0, 0, 0);
      }, (date2, step) => {
        date2.setDate(date2.getDate() + step * 7);
      }, (start, end) => {
        return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationWeek;
      });
    }
    const timeSunday = timeWeekday(0);
    const timeMonday = timeWeekday(1);
    const timeTuesday = timeWeekday(2);
    const timeWednesday = timeWeekday(3);
    const timeThursday = timeWeekday(4);
    const timeFriday = timeWeekday(5);
    const timeSaturday = timeWeekday(6);
    timeSunday.range;
    timeMonday.range;
    timeTuesday.range;
    timeWednesday.range;
    timeThursday.range;
    timeFriday.range;
    timeSaturday.range;
    function utcWeekday(i2) {
      return timeInterval((date2) => {
        date2.setUTCDate(date2.getUTCDate() - (date2.getUTCDay() + 7 - i2) % 7);
        date2.setUTCHours(0, 0, 0, 0);
      }, (date2, step) => {
        date2.setUTCDate(date2.getUTCDate() + step * 7);
      }, (start, end) => {
        return (end - start) / durationWeek;
      });
    }
    const utcSunday = utcWeekday(0);
    const utcMonday = utcWeekday(1);
    const utcTuesday = utcWeekday(2);
    const utcWednesday = utcWeekday(3);
    const utcThursday = utcWeekday(4);
    const utcFriday = utcWeekday(5);
    const utcSaturday = utcWeekday(6);
    utcSunday.range;
    utcMonday.range;
    utcTuesday.range;
    utcWednesday.range;
    utcThursday.range;
    utcFriday.range;
    utcSaturday.range;
    const timeMonth = timeInterval((date2) => {
      date2.setDate(1);
      date2.setHours(0, 0, 0, 0);
    }, (date2, step) => {
      date2.setMonth(date2.getMonth() + step);
    }, (start, end) => {
      return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;
    }, (date2) => {
      return date2.getMonth();
    });
    timeMonth.range;
    const utcMonth = timeInterval((date2) => {
      date2.setUTCDate(1);
      date2.setUTCHours(0, 0, 0, 0);
    }, (date2, step) => {
      date2.setUTCMonth(date2.getUTCMonth() + step);
    }, (start, end) => {
      return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;
    }, (date2) => {
      return date2.getUTCMonth();
    });
    utcMonth.range;
    const timeYear = timeInterval((date2) => {
      date2.setMonth(0, 1);
      date2.setHours(0, 0, 0, 0);
    }, (date2, step) => {
      date2.setFullYear(date2.getFullYear() + step);
    }, (start, end) => {
      return end.getFullYear() - start.getFullYear();
    }, (date2) => {
      return date2.getFullYear();
    });
    timeYear.every = (k2) => {
      return !isFinite(k2 = Math.floor(k2)) || !(k2 > 0) ? null : timeInterval((date2) => {
        date2.setFullYear(Math.floor(date2.getFullYear() / k2) * k2);
        date2.setMonth(0, 1);
        date2.setHours(0, 0, 0, 0);
      }, (date2, step) => {
        date2.setFullYear(date2.getFullYear() + step * k2);
      });
    };
    timeYear.range;
    const utcYear = timeInterval((date2) => {
      date2.setUTCMonth(0, 1);
      date2.setUTCHours(0, 0, 0, 0);
    }, (date2, step) => {
      date2.setUTCFullYear(date2.getUTCFullYear() + step);
    }, (start, end) => {
      return end.getUTCFullYear() - start.getUTCFullYear();
    }, (date2) => {
      return date2.getUTCFullYear();
    });
    utcYear.every = (k2) => {
      return !isFinite(k2 = Math.floor(k2)) || !(k2 > 0) ? null : timeInterval((date2) => {
        date2.setUTCFullYear(Math.floor(date2.getUTCFullYear() / k2) * k2);
        date2.setUTCMonth(0, 1);
        date2.setUTCHours(0, 0, 0, 0);
      }, (date2, step) => {
        date2.setUTCFullYear(date2.getUTCFullYear() + step * k2);
      });
    };
    utcYear.range;
    function ticker(year, month, week, day, hour, minute) {
      const tickIntervals = [
        [second, 1, durationSecond],
        [second, 5, 5 * durationSecond],
        [second, 15, 15 * durationSecond],
        [second, 30, 30 * durationSecond],
        [minute, 1, durationMinute],
        [minute, 5, 5 * durationMinute],
        [minute, 15, 15 * durationMinute],
        [minute, 30, 30 * durationMinute],
        [hour, 1, durationHour],
        [hour, 3, 3 * durationHour],
        [hour, 6, 6 * durationHour],
        [hour, 12, 12 * durationHour],
        [day, 1, durationDay],
        [day, 2, 2 * durationDay],
        [week, 1, durationWeek],
        [month, 1, durationMonth],
        [month, 3, 3 * durationMonth],
        [year, 1, durationYear]
      ];
      function ticks2(start, stop, count) {
        const reverse2 = stop < start;
        if (reverse2)
          [start, stop] = [stop, start];
        const interval = count && typeof count.range === "function" ? count : tickInterval(start, stop, count);
        const ticks3 = interval ? interval.range(start, +stop + 1) : [];
        return reverse2 ? ticks3.reverse() : ticks3;
      }
      function tickInterval(start, stop, count) {
        const target = Math.abs(stop - start) / count;
        const i2 = bisector(([, , step2]) => step2).right(tickIntervals, target);
        if (i2 === tickIntervals.length)
          return year.every(tickStep(start / durationYear, stop / durationYear, count));
        if (i2 === 0)
          return millisecond.every(Math.max(tickStep(start, stop, count), 1));
        const [t2, step] = tickIntervals[target / tickIntervals[i2 - 1][2] < tickIntervals[i2][2] / target ? i2 - 1 : i2];
        return t2.every(step);
      }
      return [ticks2, tickInterval];
    }
    const [utcTicks, utcTickInterval] = ticker(utcYear, utcMonth, utcSunday, unixDay, utcHour, utcMinute);
    const [timeTicks, timeTickInterval] = ticker(timeYear, timeMonth, timeSunday, timeDay, timeHour, timeMinute);
    function localDate(d2) {
      if (0 <= d2.y && d2.y < 100) {
        var date2 = new Date(-1, d2.m, d2.d, d2.H, d2.M, d2.S, d2.L);
        date2.setFullYear(d2.y);
        return date2;
      }
      return new Date(d2.y, d2.m, d2.d, d2.H, d2.M, d2.S, d2.L);
    }
    function utcDate(d2) {
      if (0 <= d2.y && d2.y < 100) {
        var date2 = new Date(Date.UTC(-1, d2.m, d2.d, d2.H, d2.M, d2.S, d2.L));
        date2.setUTCFullYear(d2.y);
        return date2;
      }
      return new Date(Date.UTC(d2.y, d2.m, d2.d, d2.H, d2.M, d2.S, d2.L));
    }
    function newDate(y2, m2, d2) {
      return { y: y2, m: m2, d: d2, H: 0, M: 0, S: 0, L: 0 };
    }
    function formatLocale(locale2) {
      var locale_dateTime = locale2.dateTime, locale_date = locale2.date, locale_time = locale2.time, locale_periods = locale2.periods, locale_weekdays = locale2.days, locale_shortWeekdays = locale2.shortDays, locale_months = locale2.months, locale_shortMonths = locale2.shortMonths;
      var periodRe = formatRe(locale_periods), periodLookup = formatLookup(locale_periods), weekdayRe = formatRe(locale_weekdays), weekdayLookup = formatLookup(locale_weekdays), shortWeekdayRe = formatRe(locale_shortWeekdays), shortWeekdayLookup = formatLookup(locale_shortWeekdays), monthRe = formatRe(locale_months), monthLookup = formatLookup(locale_months), shortMonthRe = formatRe(locale_shortMonths), shortMonthLookup = formatLookup(locale_shortMonths);
      var formats = {
        "a": formatShortWeekday,
        "A": formatWeekday,
        "b": formatShortMonth,
        "B": formatMonth,
        "c": null,
        "d": formatDayOfMonth,
        "e": formatDayOfMonth,
        "f": formatMicroseconds,
        "g": formatYearISO,
        "G": formatFullYearISO,
        "H": formatHour24,
        "I": formatHour12,
        "j": formatDayOfYear,
        "L": formatMilliseconds,
        "m": formatMonthNumber,
        "M": formatMinutes,
        "p": formatPeriod,
        "q": formatQuarter,
        "Q": formatUnixTimestamp,
        "s": formatUnixTimestampSeconds,
        "S": formatSeconds,
        "u": formatWeekdayNumberMonday,
        "U": formatWeekNumberSunday,
        "V": formatWeekNumberISO,
        "w": formatWeekdayNumberSunday,
        "W": formatWeekNumberMonday,
        "x": null,
        "X": null,
        "y": formatYear,
        "Y": formatFullYear,
        "Z": formatZone,
        "%": formatLiteralPercent
      };
      var utcFormats = {
        "a": formatUTCShortWeekday,
        "A": formatUTCWeekday,
        "b": formatUTCShortMonth,
        "B": formatUTCMonth,
        "c": null,
        "d": formatUTCDayOfMonth,
        "e": formatUTCDayOfMonth,
        "f": formatUTCMicroseconds,
        "g": formatUTCYearISO,
        "G": formatUTCFullYearISO,
        "H": formatUTCHour24,
        "I": formatUTCHour12,
        "j": formatUTCDayOfYear,
        "L": formatUTCMilliseconds,
        "m": formatUTCMonthNumber,
        "M": formatUTCMinutes,
        "p": formatUTCPeriod,
        "q": formatUTCQuarter,
        "Q": formatUnixTimestamp,
        "s": formatUnixTimestampSeconds,
        "S": formatUTCSeconds,
        "u": formatUTCWeekdayNumberMonday,
        "U": formatUTCWeekNumberSunday,
        "V": formatUTCWeekNumberISO,
        "w": formatUTCWeekdayNumberSunday,
        "W": formatUTCWeekNumberMonday,
        "x": null,
        "X": null,
        "y": formatUTCYear,
        "Y": formatUTCFullYear,
        "Z": formatUTCZone,
        "%": formatLiteralPercent
      };
      var parses = {
        "a": parseShortWeekday,
        "A": parseWeekday2,
        "b": parseShortMonth,
        "B": parseMonth,
        "c": parseLocaleDateTime,
        "d": parseDayOfMonth,
        "e": parseDayOfMonth,
        "f": parseMicroseconds,
        "g": parseYear,
        "G": parseFullYear,
        "H": parseHour24,
        "I": parseHour24,
        "j": parseDayOfYear,
        "L": parseMilliseconds,
        "m": parseMonthNumber,
        "M": parseMinutes,
        "p": parsePeriod,
        "q": parseQuarter,
        "Q": parseUnixTimestamp,
        "s": parseUnixTimestampSeconds,
        "S": parseSeconds,
        "u": parseWeekdayNumberMonday,
        "U": parseWeekNumberSunday,
        "V": parseWeekNumberISO,
        "w": parseWeekdayNumberSunday,
        "W": parseWeekNumberMonday,
        "x": parseLocaleDate,
        "X": parseLocaleTime,
        "y": parseYear,
        "Y": parseFullYear,
        "Z": parseZone,
        "%": parseLiteralPercent
      };
      formats.x = newFormat(locale_date, formats);
      formats.X = newFormat(locale_time, formats);
      formats.c = newFormat(locale_dateTime, formats);
      utcFormats.x = newFormat(locale_date, utcFormats);
      utcFormats.X = newFormat(locale_time, utcFormats);
      utcFormats.c = newFormat(locale_dateTime, utcFormats);
      function newFormat(specifier, formats2) {
        return function(date2) {
          var string2 = [], i2 = -1, j2 = 0, n2 = specifier.length, c2, pad2, format2;
          if (!(date2 instanceof Date))
            date2 = /* @__PURE__ */ new Date(+date2);
          while (++i2 < n2) {
            if (specifier.charCodeAt(i2) === 37) {
              string2.push(specifier.slice(j2, i2));
              if ((pad2 = pads[c2 = specifier.charAt(++i2)]) != null)
                c2 = specifier.charAt(++i2);
              else
                pad2 = c2 === "e" ? " " : "0";
              if (format2 = formats2[c2])
                c2 = format2(date2, pad2);
              string2.push(c2);
              j2 = i2 + 1;
            }
          }
          string2.push(specifier.slice(j2, i2));
          return string2.join("");
        };
      }
      function newParse(specifier, Z2) {
        return function(string2) {
          var d2 = newDate(1900, void 0, 1), i2 = parseSpecifier(d2, specifier, string2 += "", 0), week, day;
          if (i2 != string2.length)
            return null;
          if ("Q" in d2)
            return new Date(d2.Q);
          if ("s" in d2)
            return new Date(d2.s * 1e3 + ("L" in d2 ? d2.L : 0));
          if (Z2 && !("Z" in d2))
            d2.Z = 0;
          if ("p" in d2)
            d2.H = d2.H % 12 + d2.p * 12;
          if (d2.m === void 0)
            d2.m = "q" in d2 ? d2.q : 0;
          if ("V" in d2) {
            if (d2.V < 1 || d2.V > 53)
              return null;
            if (!("w" in d2))
              d2.w = 1;
            if ("Z" in d2) {
              week = utcDate(newDate(d2.y, 0, 1)), day = week.getUTCDay();
              week = day > 4 || day === 0 ? utcMonday.ceil(week) : utcMonday(week);
              week = utcDay.offset(week, (d2.V - 1) * 7);
              d2.y = week.getUTCFullYear();
              d2.m = week.getUTCMonth();
              d2.d = week.getUTCDate() + (d2.w + 6) % 7;
            } else {
              week = localDate(newDate(d2.y, 0, 1)), day = week.getDay();
              week = day > 4 || day === 0 ? timeMonday.ceil(week) : timeMonday(week);
              week = timeDay.offset(week, (d2.V - 1) * 7);
              d2.y = week.getFullYear();
              d2.m = week.getMonth();
              d2.d = week.getDate() + (d2.w + 6) % 7;
            }
          } else if ("W" in d2 || "U" in d2) {
            if (!("w" in d2))
              d2.w = "u" in d2 ? d2.u % 7 : "W" in d2 ? 1 : 0;
            day = "Z" in d2 ? utcDate(newDate(d2.y, 0, 1)).getUTCDay() : localDate(newDate(d2.y, 0, 1)).getDay();
            d2.m = 0;
            d2.d = "W" in d2 ? (d2.w + 6) % 7 + d2.W * 7 - (day + 5) % 7 : d2.w + d2.U * 7 - (day + 6) % 7;
          }
          if ("Z" in d2) {
            d2.H += d2.Z / 100 | 0;
            d2.M += d2.Z % 100;
            return utcDate(d2);
          }
          return localDate(d2);
        };
      }
      function parseSpecifier(d2, specifier, string2, j2) {
        var i2 = 0, n2 = specifier.length, m2 = string2.length, c2, parse2;
        while (i2 < n2) {
          if (j2 >= m2)
            return -1;
          c2 = specifier.charCodeAt(i2++);
          if (c2 === 37) {
            c2 = specifier.charAt(i2++);
            parse2 = parses[c2 in pads ? specifier.charAt(i2++) : c2];
            if (!parse2 || (j2 = parse2(d2, string2, j2)) < 0)
              return -1;
          } else if (c2 != string2.charCodeAt(j2++)) {
            return -1;
          }
        }
        return j2;
      }
      function parsePeriod(d2, string2, i2) {
        var n2 = periodRe.exec(string2.slice(i2));
        return n2 ? (d2.p = periodLookup.get(n2[0].toLowerCase()), i2 + n2[0].length) : -1;
      }
      function parseShortWeekday(d2, string2, i2) {
        var n2 = shortWeekdayRe.exec(string2.slice(i2));
        return n2 ? (d2.w = shortWeekdayLookup.get(n2[0].toLowerCase()), i2 + n2[0].length) : -1;
      }
      function parseWeekday2(d2, string2, i2) {
        var n2 = weekdayRe.exec(string2.slice(i2));
        return n2 ? (d2.w = weekdayLookup.get(n2[0].toLowerCase()), i2 + n2[0].length) : -1;
      }
      function parseShortMonth(d2, string2, i2) {
        var n2 = shortMonthRe.exec(string2.slice(i2));
        return n2 ? (d2.m = shortMonthLookup.get(n2[0].toLowerCase()), i2 + n2[0].length) : -1;
      }
      function parseMonth(d2, string2, i2) {
        var n2 = monthRe.exec(string2.slice(i2));
        return n2 ? (d2.m = monthLookup.get(n2[0].toLowerCase()), i2 + n2[0].length) : -1;
      }
      function parseLocaleDateTime(d2, string2, i2) {
        return parseSpecifier(d2, locale_dateTime, string2, i2);
      }
      function parseLocaleDate(d2, string2, i2) {
        return parseSpecifier(d2, locale_date, string2, i2);
      }
      function parseLocaleTime(d2, string2, i2) {
        return parseSpecifier(d2, locale_time, string2, i2);
      }
      function formatShortWeekday(d2) {
        return locale_shortWeekdays[d2.getDay()];
      }
      function formatWeekday(d2) {
        return locale_weekdays[d2.getDay()];
      }
      function formatShortMonth(d2) {
        return locale_shortMonths[d2.getMonth()];
      }
      function formatMonth(d2) {
        return locale_months[d2.getMonth()];
      }
      function formatPeriod(d2) {
        return locale_periods[+(d2.getHours() >= 12)];
      }
      function formatQuarter(d2) {
        return 1 + ~~(d2.getMonth() / 3);
      }
      function formatUTCShortWeekday(d2) {
        return locale_shortWeekdays[d2.getUTCDay()];
      }
      function formatUTCWeekday(d2) {
        return locale_weekdays[d2.getUTCDay()];
      }
      function formatUTCShortMonth(d2) {
        return locale_shortMonths[d2.getUTCMonth()];
      }
      function formatUTCMonth(d2) {
        return locale_months[d2.getUTCMonth()];
      }
      function formatUTCPeriod(d2) {
        return locale_periods[+(d2.getUTCHours() >= 12)];
      }
      function formatUTCQuarter(d2) {
        return 1 + ~~(d2.getUTCMonth() / 3);
      }
      return {
        format: function(specifier) {
          var f2 = newFormat(specifier += "", formats);
          f2.toString = function() {
            return specifier;
          };
          return f2;
        },
        parse: function(specifier) {
          var p2 = newParse(specifier += "", false);
          p2.toString = function() {
            return specifier;
          };
          return p2;
        },
        utcFormat: function(specifier) {
          var f2 = newFormat(specifier += "", utcFormats);
          f2.toString = function() {
            return specifier;
          };
          return f2;
        },
        utcParse: function(specifier) {
          var p2 = newParse(specifier += "", true);
          p2.toString = function() {
            return specifier;
          };
          return p2;
        }
      };
    }
    var pads = { "-": "", "_": " ", "0": "0" }, numberRe = /^\s*\d+/, percentRe = /^%/, requoteRe = /[\\^$*+?|[\]().{}]/g;
    function pad(value2, fill, width) {
      var sign2 = value2 < 0 ? "-" : "", string2 = (sign2 ? -value2 : value2) + "", length = string2.length;
      return sign2 + (length < width ? new Array(width - length + 1).join(fill) + string2 : string2);
    }
    function requote(s2) {
      return s2.replace(requoteRe, "\\$&");
    }
    function formatRe(names) {
      return new RegExp("^(?:" + names.map(requote).join("|") + ")", "i");
    }
    function formatLookup(names) {
      return new Map(names.map((name, i2) => [name.toLowerCase(), i2]));
    }
    function parseWeekdayNumberSunday(d2, string2, i2) {
      var n2 = numberRe.exec(string2.slice(i2, i2 + 1));
      return n2 ? (d2.w = +n2[0], i2 + n2[0].length) : -1;
    }
    function parseWeekdayNumberMonday(d2, string2, i2) {
      var n2 = numberRe.exec(string2.slice(i2, i2 + 1));
      return n2 ? (d2.u = +n2[0], i2 + n2[0].length) : -1;
    }
    function parseWeekNumberSunday(d2, string2, i2) {
      var n2 = numberRe.exec(string2.slice(i2, i2 + 2));
      return n2 ? (d2.U = +n2[0], i2 + n2[0].length) : -1;
    }
    function parseWeekNumberISO(d2, string2, i2) {
      var n2 = numberRe.exec(string2.slice(i2, i2 + 2));
      return n2 ? (d2.V = +n2[0], i2 + n2[0].length) : -1;
    }
    function parseWeekNumberMonday(d2, string2, i2) {
      var n2 = numberRe.exec(string2.slice(i2, i2 + 2));
      return n2 ? (d2.W = +n2[0], i2 + n2[0].length) : -1;
    }
    function parseFullYear(d2, string2, i2) {
      var n2 = numberRe.exec(string2.slice(i2, i2 + 4));
      return n2 ? (d2.y = +n2[0], i2 + n2[0].length) : -1;
    }
    function parseYear(d2, string2, i2) {
      var n2 = numberRe.exec(string2.slice(i2, i2 + 2));
      return n2 ? (d2.y = +n2[0] + (+n2[0] > 68 ? 1900 : 2e3), i2 + n2[0].length) : -1;
    }
    function parseZone(d2, string2, i2) {
      var n2 = /^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(string2.slice(i2, i2 + 6));
      return n2 ? (d2.Z = n2[1] ? 0 : -(n2[2] + (n2[3] || "00")), i2 + n2[0].length) : -1;
    }
    function parseQuarter(d2, string2, i2) {
      var n2 = numberRe.exec(string2.slice(i2, i2 + 1));
      return n2 ? (d2.q = n2[0] * 3 - 3, i2 + n2[0].length) : -1;
    }
    function parseMonthNumber(d2, string2, i2) {
      var n2 = numberRe.exec(string2.slice(i2, i2 + 2));
      return n2 ? (d2.m = n2[0] - 1, i2 + n2[0].length) : -1;
    }
    function parseDayOfMonth(d2, string2, i2) {
      var n2 = numberRe.exec(string2.slice(i2, i2 + 2));
      return n2 ? (d2.d = +n2[0], i2 + n2[0].length) : -1;
    }
    function parseDayOfYear(d2, string2, i2) {
      var n2 = numberRe.exec(string2.slice(i2, i2 + 3));
      return n2 ? (d2.m = 0, d2.d = +n2[0], i2 + n2[0].length) : -1;
    }
    function parseHour24(d2, string2, i2) {
      var n2 = numberRe.exec(string2.slice(i2, i2 + 2));
      return n2 ? (d2.H = +n2[0], i2 + n2[0].length) : -1;
    }
    function parseMinutes(d2, string2, i2) {
      var n2 = numberRe.exec(string2.slice(i2, i2 + 2));
      return n2 ? (d2.M = +n2[0], i2 + n2[0].length) : -1;
    }
    function parseSeconds(d2, string2, i2) {
      var n2 = numberRe.exec(string2.slice(i2, i2 + 2));
      return n2 ? (d2.S = +n2[0], i2 + n2[0].length) : -1;
    }
    function parseMilliseconds(d2, string2, i2) {
      var n2 = numberRe.exec(string2.slice(i2, i2 + 3));
      return n2 ? (d2.L = +n2[0], i2 + n2[0].length) : -1;
    }
    function parseMicroseconds(d2, string2, i2) {
      var n2 = numberRe.exec(string2.slice(i2, i2 + 6));
      return n2 ? (d2.L = Math.floor(n2[0] / 1e3), i2 + n2[0].length) : -1;
    }
    function parseLiteralPercent(d2, string2, i2) {
      var n2 = percentRe.exec(string2.slice(i2, i2 + 1));
      return n2 ? i2 + n2[0].length : -1;
    }
    function parseUnixTimestamp(d2, string2, i2) {
      var n2 = numberRe.exec(string2.slice(i2));
      return n2 ? (d2.Q = +n2[0], i2 + n2[0].length) : -1;
    }
    function parseUnixTimestampSeconds(d2, string2, i2) {
      var n2 = numberRe.exec(string2.slice(i2));
      return n2 ? (d2.s = +n2[0], i2 + n2[0].length) : -1;
    }
    function formatDayOfMonth(d2, p2) {
      return pad(d2.getDate(), p2, 2);
    }
    function formatHour24(d2, p2) {
      return pad(d2.getHours(), p2, 2);
    }
    function formatHour12(d2, p2) {
      return pad(d2.getHours() % 12 || 12, p2, 2);
    }
    function formatDayOfYear(d2, p2) {
      return pad(1 + timeDay.count(timeYear(d2), d2), p2, 3);
    }
    function formatMilliseconds(d2, p2) {
      return pad(d2.getMilliseconds(), p2, 3);
    }
    function formatMicroseconds(d2, p2) {
      return formatMilliseconds(d2, p2) + "000";
    }
    function formatMonthNumber(d2, p2) {
      return pad(d2.getMonth() + 1, p2, 2);
    }
    function formatMinutes(d2, p2) {
      return pad(d2.getMinutes(), p2, 2);
    }
    function formatSeconds(d2, p2) {
      return pad(d2.getSeconds(), p2, 2);
    }
    function formatWeekdayNumberMonday(d2) {
      var day = d2.getDay();
      return day === 0 ? 7 : day;
    }
    function formatWeekNumberSunday(d2, p2) {
      return pad(timeSunday.count(timeYear(d2) - 1, d2), p2, 2);
    }
    function dISO(d2) {
      var day = d2.getDay();
      return day >= 4 || day === 0 ? timeThursday(d2) : timeThursday.ceil(d2);
    }
    function formatWeekNumberISO(d2, p2) {
      d2 = dISO(d2);
      return pad(timeThursday.count(timeYear(d2), d2) + (timeYear(d2).getDay() === 4), p2, 2);
    }
    function formatWeekdayNumberSunday(d2) {
      return d2.getDay();
    }
    function formatWeekNumberMonday(d2, p2) {
      return pad(timeMonday.count(timeYear(d2) - 1, d2), p2, 2);
    }
    function formatYear(d2, p2) {
      return pad(d2.getFullYear() % 100, p2, 2);
    }
    function formatYearISO(d2, p2) {
      d2 = dISO(d2);
      return pad(d2.getFullYear() % 100, p2, 2);
    }
    function formatFullYear(d2, p2) {
      return pad(d2.getFullYear() % 1e4, p2, 4);
    }
    function formatFullYearISO(d2, p2) {
      var day = d2.getDay();
      d2 = day >= 4 || day === 0 ? timeThursday(d2) : timeThursday.ceil(d2);
      return pad(d2.getFullYear() % 1e4, p2, 4);
    }
    function formatZone(d2) {
      var z2 = d2.getTimezoneOffset();
      return (z2 > 0 ? "-" : (z2 *= -1, "+")) + pad(z2 / 60 | 0, "0", 2) + pad(z2 % 60, "0", 2);
    }
    function formatUTCDayOfMonth(d2, p2) {
      return pad(d2.getUTCDate(), p2, 2);
    }
    function formatUTCHour24(d2, p2) {
      return pad(d2.getUTCHours(), p2, 2);
    }
    function formatUTCHour12(d2, p2) {
      return pad(d2.getUTCHours() % 12 || 12, p2, 2);
    }
    function formatUTCDayOfYear(d2, p2) {
      return pad(1 + utcDay.count(utcYear(d2), d2), p2, 3);
    }
    function formatUTCMilliseconds(d2, p2) {
      return pad(d2.getUTCMilliseconds(), p2, 3);
    }
    function formatUTCMicroseconds(d2, p2) {
      return formatUTCMilliseconds(d2, p2) + "000";
    }
    function formatUTCMonthNumber(d2, p2) {
      return pad(d2.getUTCMonth() + 1, p2, 2);
    }
    function formatUTCMinutes(d2, p2) {
      return pad(d2.getUTCMinutes(), p2, 2);
    }
    function formatUTCSeconds(d2, p2) {
      return pad(d2.getUTCSeconds(), p2, 2);
    }
    function formatUTCWeekdayNumberMonday(d2) {
      var dow = d2.getUTCDay();
      return dow === 0 ? 7 : dow;
    }
    function formatUTCWeekNumberSunday(d2, p2) {
      return pad(utcSunday.count(utcYear(d2) - 1, d2), p2, 2);
    }
    function UTCdISO(d2) {
      var day = d2.getUTCDay();
      return day >= 4 || day === 0 ? utcThursday(d2) : utcThursday.ceil(d2);
    }
    function formatUTCWeekNumberISO(d2, p2) {
      d2 = UTCdISO(d2);
      return pad(utcThursday.count(utcYear(d2), d2) + (utcYear(d2).getUTCDay() === 4), p2, 2);
    }
    function formatUTCWeekdayNumberSunday(d2) {
      return d2.getUTCDay();
    }
    function formatUTCWeekNumberMonday(d2, p2) {
      return pad(utcMonday.count(utcYear(d2) - 1, d2), p2, 2);
    }
    function formatUTCYear(d2, p2) {
      return pad(d2.getUTCFullYear() % 100, p2, 2);
    }
    function formatUTCYearISO(d2, p2) {
      d2 = UTCdISO(d2);
      return pad(d2.getUTCFullYear() % 100, p2, 2);
    }
    function formatUTCFullYear(d2, p2) {
      return pad(d2.getUTCFullYear() % 1e4, p2, 4);
    }
    function formatUTCFullYearISO(d2, p2) {
      var day = d2.getUTCDay();
      d2 = day >= 4 || day === 0 ? utcThursday(d2) : utcThursday.ceil(d2);
      return pad(d2.getUTCFullYear() % 1e4, p2, 4);
    }
    function formatUTCZone() {
      return "+0000";
    }
    function formatLiteralPercent() {
      return "%";
    }
    function formatUnixTimestamp(d2) {
      return +d2;
    }
    function formatUnixTimestampSeconds(d2) {
      return Math.floor(+d2 / 1e3);
    }
    var locale;
    var timeFormat;
    var utcFormat;
    defaultLocale({
      dateTime: "%x, %X",
      date: "%-m/%-d/%Y",
      time: "%-I:%M:%S %p",
      periods: ["AM", "PM"],
      days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
      shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
      months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
      shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
    });
    function defaultLocale(definition) {
      locale = formatLocale(definition);
      timeFormat = locale.format;
      locale.parse;
      utcFormat = locale.utcFormat;
      locale.utcParse;
      return locale;
    }
    function date(t2) {
      return new Date(t2);
    }
    function number(t2) {
      return t2 instanceof Date ? +t2 : +/* @__PURE__ */ new Date(+t2);
    }
    function calendar(ticks2, tickInterval, year, month, week, day, hour, minute, second2, format2) {
      var scale = continuous(), invert = scale.invert, domain = scale.domain;
      var formatMillisecond = format2(".%L"), formatSecond = format2(":%S"), formatMinute = format2("%I:%M"), formatHour = format2("%I %p"), formatDay = format2("%a %d"), formatWeek = format2("%b %d"), formatMonth = format2("%B"), formatYear2 = format2("%Y");
      function tickFormat2(date2) {
        return (second2(date2) < date2 ? formatMillisecond : minute(date2) < date2 ? formatSecond : hour(date2) < date2 ? formatMinute : day(date2) < date2 ? formatHour : month(date2) < date2 ? week(date2) < date2 ? formatDay : formatWeek : year(date2) < date2 ? formatMonth : formatYear2)(date2);
      }
      scale.invert = function(y2) {
        return new Date(invert(y2));
      };
      scale.domain = function(_2) {
        return arguments.length ? domain(Array.from(_2, number)) : domain().map(date);
      };
      scale.ticks = function(interval) {
        var d2 = domain();
        return ticks2(d2[0], d2[d2.length - 1], interval == null ? 10 : interval);
      };
      scale.tickFormat = function(count, specifier) {
        return specifier == null ? tickFormat2 : format2(specifier);
      };
      scale.nice = function(interval) {
        var d2 = domain();
        if (!interval || typeof interval.range !== "function")
          interval = tickInterval(d2[0], d2[d2.length - 1], interval == null ? 10 : interval);
        return interval ? domain(nice(d2, interval)) : scale;
      };
      scale.copy = function() {
        return copy$1(scale, calendar(ticks2, tickInterval, year, month, week, day, hour, minute, second2, format2));
      };
      return scale;
    }
    function time() {
      return initRange.apply(calendar(timeTicks, timeTickInterval, timeYear, timeMonth, timeSunday, timeDay, timeHour, timeMinute, second, timeFormat).domain([new Date(2e3, 0, 1), new Date(2e3, 0, 2)]), arguments);
    }
    function utcTime() {
      return initRange.apply(calendar(utcTicks, utcTickInterval, utcYear, utcMonth, utcSunday, utcDay, utcHour, utcMinute, second, utcFormat).domain([Date.UTC(2e3, 0, 1), Date.UTC(2e3, 0, 2)]), arguments);
    }
    function transformer$1() {
      var x0 = 0, x1 = 1, t02, t12, k10, transform, interpolator = identity$6, clamp = false, unknown;
      function scale(x2) {
        return x2 == null || isNaN(x2 = +x2) ? unknown : interpolator(k10 === 0 ? 0.5 : (x2 = (transform(x2) - t02) * k10, clamp ? Math.max(0, Math.min(1, x2)) : x2));
      }
      scale.domain = function(_2) {
        return arguments.length ? ([x0, x1] = _2, t02 = transform(x0 = +x0), t12 = transform(x1 = +x1), k10 = t02 === t12 ? 0 : 1 / (t12 - t02), scale) : [x0, x1];
      };
      scale.clamp = function(_2) {
        return arguments.length ? (clamp = !!_2, scale) : clamp;
      };
      scale.interpolator = function(_2) {
        return arguments.length ? (interpolator = _2, scale) : interpolator;
      };
      function range2(interpolate2) {
        return function(_2) {
          var r0, r1;
          return arguments.length ? ([r0, r1] = _2, interpolator = interpolate2(r0, r1), scale) : [interpolator(0), interpolator(1)];
        };
      }
      scale.range = range2(interpolate);
      scale.rangeRound = range2(interpolateRound);
      scale.unknown = function(_2) {
        return arguments.length ? (unknown = _2, scale) : unknown;
      };
      return function(t2) {
        transform = t2, t02 = t2(x0), t12 = t2(x1), k10 = t02 === t12 ? 0 : 1 / (t12 - t02);
        return scale;
      };
    }
    function copy(source, target) {
      return target.domain(source.domain()).interpolator(source.interpolator()).clamp(source.clamp()).unknown(source.unknown());
    }
    function sequential() {
      var scale = linearish(transformer$1()(identity$6));
      scale.copy = function() {
        return copy(scale, sequential());
      };
      return initInterpolator.apply(scale, arguments);
    }
    function sequentialLog() {
      var scale = loggish(transformer$1()).domain([1, 10]);
      scale.copy = function() {
        return copy(scale, sequentialLog()).base(scale.base());
      };
      return initInterpolator.apply(scale, arguments);
    }
    function sequentialSymlog() {
      var scale = symlogish(transformer$1());
      scale.copy = function() {
        return copy(scale, sequentialSymlog()).constant(scale.constant());
      };
      return initInterpolator.apply(scale, arguments);
    }
    function sequentialPow() {
      var scale = powish(transformer$1());
      scale.copy = function() {
        return copy(scale, sequentialPow()).exponent(scale.exponent());
      };
      return initInterpolator.apply(scale, arguments);
    }
    function sequentialSqrt() {
      return sequentialPow.apply(null, arguments).exponent(0.5);
    }
    function sequentialQuantile() {
      var domain = [], interpolator = identity$6;
      function scale(x2) {
        if (x2 != null && !isNaN(x2 = +x2))
          return interpolator((bisectRight(domain, x2, 1) - 1) / (domain.length - 1));
      }
      scale.domain = function(_2) {
        if (!arguments.length)
          return domain.slice();
        domain = [];
        for (let d2 of _2)
          if (d2 != null && !isNaN(d2 = +d2))
            domain.push(d2);
        domain.sort(ascending);
        return scale;
      };
      scale.interpolator = function(_2) {
        return arguments.length ? (interpolator = _2, scale) : interpolator;
      };
      scale.range = function() {
        return domain.map((d2, i2) => interpolator(i2 / (domain.length - 1)));
      };
      scale.quantiles = function(n2) {
        return Array.from({ length: n2 + 1 }, (_2, i2) => quantile$1(domain, i2 / n2));
      };
      scale.copy = function() {
        return sequentialQuantile(interpolator).domain(domain);
      };
      return initInterpolator.apply(scale, arguments);
    }
    function transformer() {
      var x0 = 0, x1 = 0.5, x2 = 1, s2 = 1, t02, t12, t2, k10, k21, interpolator = identity$6, transform, clamp = false, unknown;
      function scale(x3) {
        return isNaN(x3 = +x3) ? unknown : (x3 = 0.5 + ((x3 = +transform(x3)) - t12) * (s2 * x3 < s2 * t12 ? k10 : k21), interpolator(clamp ? Math.max(0, Math.min(1, x3)) : x3));
      }
      scale.domain = function(_2) {
        return arguments.length ? ([x0, x1, x2] = _2, t02 = transform(x0 = +x0), t12 = transform(x1 = +x1), t2 = transform(x2 = +x2), k10 = t02 === t12 ? 0 : 0.5 / (t12 - t02), k21 = t12 === t2 ? 0 : 0.5 / (t2 - t12), s2 = t12 < t02 ? -1 : 1, scale) : [x0, x1, x2];
      };
      scale.clamp = function(_2) {
        return arguments.length ? (clamp = !!_2, scale) : clamp;
      };
      scale.interpolator = function(_2) {
        return arguments.length ? (interpolator = _2, scale) : interpolator;
      };
      function range2(interpolate2) {
        return function(_2) {
          var r0, r1, r2;
          return arguments.length ? ([r0, r1, r2] = _2, interpolator = piecewise(interpolate2, [r0, r1, r2]), scale) : [interpolator(0), interpolator(0.5), interpolator(1)];
        };
      }
      scale.range = range2(interpolate);
      scale.rangeRound = range2(interpolateRound);
      scale.unknown = function(_2) {
        return arguments.length ? (unknown = _2, scale) : unknown;
      };
      return function(t3) {
        transform = t3, t02 = t3(x0), t12 = t3(x1), t2 = t3(x2), k10 = t02 === t12 ? 0 : 0.5 / (t12 - t02), k21 = t12 === t2 ? 0 : 0.5 / (t2 - t12), s2 = t12 < t02 ? -1 : 1;
        return scale;
      };
    }
    function diverging() {
      var scale = linearish(transformer()(identity$6));
      scale.copy = function() {
        return copy(scale, diverging());
      };
      return initInterpolator.apply(scale, arguments);
    }
    function divergingLog() {
      var scale = loggish(transformer()).domain([0.1, 1, 10]);
      scale.copy = function() {
        return copy(scale, divergingLog()).base(scale.base());
      };
      return initInterpolator.apply(scale, arguments);
    }
    function divergingSymlog() {
      var scale = symlogish(transformer());
      scale.copy = function() {
        return copy(scale, divergingSymlog()).constant(scale.constant());
      };
      return initInterpolator.apply(scale, arguments);
    }
    function divergingPow() {
      var scale = powish(transformer());
      scale.copy = function() {
        return copy(scale, divergingPow()).exponent(scale.exponent());
      };
      return initInterpolator.apply(scale, arguments);
    }
    function divergingSqrt() {
      return divergingPow.apply(null, arguments).exponent(0.5);
    }
    const d3Scales = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      scaleBand: band,
      scaleDiverging: diverging,
      scaleDivergingLog: divergingLog,
      scaleDivergingPow: divergingPow,
      scaleDivergingSqrt: divergingSqrt,
      scaleDivergingSymlog: divergingSymlog,
      scaleIdentity: identity$4,
      scaleImplicit: implicit,
      scaleLinear: linear,
      scaleLog: log,
      scaleOrdinal: ordinal,
      scalePoint: point,
      scalePow: pow,
      scaleQuantile: quantile,
      scaleQuantize: quantize,
      scaleRadial: radial,
      scaleSequential: sequential,
      scaleSequentialLog: sequentialLog,
      scaleSequentialPow: sequentialPow,
      scaleSequentialQuantile: sequentialQuantile,
      scaleSequentialSqrt: sequentialSqrt,
      scaleSequentialSymlog: sequentialSymlog,
      scaleSqrt: sqrt,
      scaleSymlog: symlog,
      scaleThreshold: threshold,
      scaleTime: time,
      scaleUtc: utcTime,
      tickFormat
    }, Symbol.toStringTag, { value: "Module" }));
    var isSymbol = isSymbol_1;
    function baseExtremum$2(array2, iteratee, comparator) {
      var index = -1, length = array2.length;
      while (++index < length) {
        var value2 = array2[index], current2 = iteratee(value2);
        if (current2 != null && (computed === void 0 ? current2 === current2 && !isSymbol(current2) : comparator(current2, computed))) {
          var computed = current2, result = value2;
        }
      }
      return result;
    }
    var _baseExtremum = baseExtremum$2;
    function baseGt$1(value2, other) {
      return value2 > other;
    }
    var _baseGt = baseGt$1;
    var baseExtremum$1 = _baseExtremum, baseGt = _baseGt, identity$3 = identity_1;
    function max(array2) {
      return array2 && array2.length ? baseExtremum$1(array2, identity$3, baseGt) : void 0;
    }
    var max_1 = max;
    const max$1 = /* @__PURE__ */ getDefaultExportFromCjs(max_1);
    function baseLt$1(value2, other) {
      return value2 < other;
    }
    var _baseLt = baseLt$1;
    var baseExtremum = _baseExtremum, baseLt = _baseLt, identity$2 = identity_1;
    function min(array2) {
      return array2 && array2.length ? baseExtremum(array2, identity$2, baseLt) : void 0;
    }
    var min_1 = min;
    const min$1 = /* @__PURE__ */ getDefaultExportFromCjs(min_1);
    var arrayMap = _arrayMap, baseIteratee$5 = _baseIteratee, baseMap = _baseMap, isArray$3 = isArray_1;
    function map$2(collection, iteratee) {
      var func = isArray$3(collection) ? arrayMap : baseMap;
      return func(collection, baseIteratee$5(iteratee));
    }
    var map_1 = map$2;
    var baseFlatten = _baseFlatten, map$1 = map_1;
    function flatMap(collection, iteratee) {
      return baseFlatten(map$1(collection, iteratee), 1);
    }
    var flatMap_1 = flatMap;
    const flatMap$1 = /* @__PURE__ */ getDefaultExportFromCjs(flatMap_1);
    var baseIsEqual = _baseIsEqual;
    function isEqual(value2, other) {
      return baseIsEqual(value2, other);
    }
    var isEqual_1 = isEqual;
    const isEqual$1 = /* @__PURE__ */ getDefaultExportFromCjs(isEqual_1);
    var MAX_DIGITS = 1e9, defaults = {
      // These values must be integers within the stated ranges (inclusive).
      // Most of these values can be changed during run-time using `Decimal.config`.
      // The maximum number of significant digits of the result of a calculation or base conversion.
      // E.g. `Decimal.config({ precision: 20 });`
      precision: 20,
      // 1 to MAX_DIGITS
      // The rounding mode used by default by `toInteger`, `toDecimalPlaces`, `toExponential`,
      // `toFixed`, `toPrecision` and `toSignificantDigits`.
      //
      // ROUND_UP         0 Away from zero.
      // ROUND_DOWN       1 Towards zero.
      // ROUND_CEIL       2 Towards +Infinity.
      // ROUND_FLOOR      3 Towards -Infinity.
      // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.
      // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
      // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
      // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
      // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
      //
      // E.g.
      // `Decimal.rounding = 4;`
      // `Decimal.rounding = Decimal.ROUND_HALF_UP;`
      rounding: 4,
      // 0 to 8
      // The exponent value at and beneath which `toString` returns exponential notation.
      // JavaScript numbers: -7
      toExpNeg: -7,
      // 0 to -MAX_E
      // The exponent value at and above which `toString` returns exponential notation.
      // JavaScript numbers: 21
      toExpPos: 21,
      // 0 to MAX_E
      // The natural logarithm of 10.
      // 115 digits
      LN10: "2.302585092994045684017991454684364207601101488628772976033327900967572609677352480235997205089598298341967784042286"
    }, Decimal, external = true, decimalError = "[DecimalError] ", invalidArgument = decimalError + "Invalid argument: ", exponentOutOfRange = decimalError + "Exponent out of range: ", mathfloor = Math.floor, mathpow = Math.pow, isDecimal = /^(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i, ONE, BASE = 1e7, LOG_BASE = 7, MAX_SAFE_INTEGER = 9007199254740991, MAX_E = mathfloor(MAX_SAFE_INTEGER / LOG_BASE), P = {};
    P.absoluteValue = P.abs = function() {
      var x2 = new this.constructor(this);
      if (x2.s)
        x2.s = 1;
      return x2;
    };
    P.comparedTo = P.cmp = function(y2) {
      var i2, j2, xdL, ydL, x2 = this;
      y2 = new x2.constructor(y2);
      if (x2.s !== y2.s)
        return x2.s || -y2.s;
      if (x2.e !== y2.e)
        return x2.e > y2.e ^ x2.s < 0 ? 1 : -1;
      xdL = x2.d.length;
      ydL = y2.d.length;
      for (i2 = 0, j2 = xdL < ydL ? xdL : ydL; i2 < j2; ++i2) {
        if (x2.d[i2] !== y2.d[i2])
          return x2.d[i2] > y2.d[i2] ^ x2.s < 0 ? 1 : -1;
      }
      return xdL === ydL ? 0 : xdL > ydL ^ x2.s < 0 ? 1 : -1;
    };
    P.decimalPlaces = P.dp = function() {
      var x2 = this, w2 = x2.d.length - 1, dp = (w2 - x2.e) * LOG_BASE;
      w2 = x2.d[w2];
      if (w2)
        for (; w2 % 10 == 0; w2 /= 10)
          dp--;
      return dp < 0 ? 0 : dp;
    };
    P.dividedBy = P.div = function(y2) {
      return divide(this, new this.constructor(y2));
    };
    P.dividedToIntegerBy = P.idiv = function(y2) {
      var x2 = this, Ctor = x2.constructor;
      return round(divide(x2, new Ctor(y2), 0, 1), Ctor.precision);
    };
    P.equals = P.eq = function(y2) {
      return !this.cmp(y2);
    };
    P.exponent = function() {
      return getBase10Exponent(this);
    };
    P.greaterThan = P.gt = function(y2) {
      return this.cmp(y2) > 0;
    };
    P.greaterThanOrEqualTo = P.gte = function(y2) {
      return this.cmp(y2) >= 0;
    };
    P.isInteger = P.isint = function() {
      return this.e > this.d.length - 2;
    };
    P.isNegative = P.isneg = function() {
      return this.s < 0;
    };
    P.isPositive = P.ispos = function() {
      return this.s > 0;
    };
    P.isZero = function() {
      return this.s === 0;
    };
    P.lessThan = P.lt = function(y2) {
      return this.cmp(y2) < 0;
    };
    P.lessThanOrEqualTo = P.lte = function(y2) {
      return this.cmp(y2) < 1;
    };
    P.logarithm = P.log = function(base) {
      var r2, x2 = this, Ctor = x2.constructor, pr = Ctor.precision, wpr = pr + 5;
      if (base === void 0) {
        base = new Ctor(10);
      } else {
        base = new Ctor(base);
        if (base.s < 1 || base.eq(ONE))
          throw Error(decimalError + "NaN");
      }
      if (x2.s < 1)
        throw Error(decimalError + (x2.s ? "NaN" : "-Infinity"));
      if (x2.eq(ONE))
        return new Ctor(0);
      external = false;
      r2 = divide(ln(x2, wpr), ln(base, wpr), wpr);
      external = true;
      return round(r2, pr);
    };
    P.minus = P.sub = function(y2) {
      var x2 = this;
      y2 = new x2.constructor(y2);
      return x2.s == y2.s ? subtract(x2, y2) : add(x2, (y2.s = -y2.s, y2));
    };
    P.modulo = P.mod = function(y2) {
      var q2, x2 = this, Ctor = x2.constructor, pr = Ctor.precision;
      y2 = new Ctor(y2);
      if (!y2.s)
        throw Error(decimalError + "NaN");
      if (!x2.s)
        return round(new Ctor(x2), pr);
      external = false;
      q2 = divide(x2, y2, 0, 1).times(y2);
      external = true;
      return x2.minus(q2);
    };
    P.naturalExponential = P.exp = function() {
      return exp(this);
    };
    P.naturalLogarithm = P.ln = function() {
      return ln(this);
    };
    P.negated = P.neg = function() {
      var x2 = new this.constructor(this);
      x2.s = -x2.s || 0;
      return x2;
    };
    P.plus = P.add = function(y2) {
      var x2 = this;
      y2 = new x2.constructor(y2);
      return x2.s == y2.s ? add(x2, y2) : subtract(x2, (y2.s = -y2.s, y2));
    };
    P.precision = P.sd = function(z2) {
      var e3, sd2, w2, x2 = this;
      if (z2 !== void 0 && z2 !== !!z2 && z2 !== 1 && z2 !== 0)
        throw Error(invalidArgument + z2);
      e3 = getBase10Exponent(x2) + 1;
      w2 = x2.d.length - 1;
      sd2 = w2 * LOG_BASE + 1;
      w2 = x2.d[w2];
      if (w2) {
        for (; w2 % 10 == 0; w2 /= 10)
          sd2--;
        for (w2 = x2.d[0]; w2 >= 10; w2 /= 10)
          sd2++;
      }
      return z2 && e3 > sd2 ? e3 : sd2;
    };
    P.squareRoot = P.sqrt = function() {
      var e3, n2, pr, r2, s2, t2, wpr, x2 = this, Ctor = x2.constructor;
      if (x2.s < 1) {
        if (!x2.s)
          return new Ctor(0);
        throw Error(decimalError + "NaN");
      }
      e3 = getBase10Exponent(x2);
      external = false;
      s2 = Math.sqrt(+x2);
      if (s2 == 0 || s2 == 1 / 0) {
        n2 = digitsToString(x2.d);
        if ((n2.length + e3) % 2 == 0)
          n2 += "0";
        s2 = Math.sqrt(n2);
        e3 = mathfloor((e3 + 1) / 2) - (e3 < 0 || e3 % 2);
        if (s2 == 1 / 0) {
          n2 = "5e" + e3;
        } else {
          n2 = s2.toExponential();
          n2 = n2.slice(0, n2.indexOf("e") + 1) + e3;
        }
        r2 = new Ctor(n2);
      } else {
        r2 = new Ctor(s2.toString());
      }
      pr = Ctor.precision;
      s2 = wpr = pr + 3;
      for (; ; ) {
        t2 = r2;
        r2 = t2.plus(divide(x2, t2, wpr + 2)).times(0.5);
        if (digitsToString(t2.d).slice(0, wpr) === (n2 = digitsToString(r2.d)).slice(0, wpr)) {
          n2 = n2.slice(wpr - 3, wpr + 1);
          if (s2 == wpr && n2 == "4999") {
            round(t2, pr + 1, 0);
            if (t2.times(t2).eq(x2)) {
              r2 = t2;
              break;
            }
          } else if (n2 != "9999") {
            break;
          }
          wpr += 4;
        }
      }
      external = true;
      return round(r2, pr);
    };
    P.times = P.mul = function(y2) {
      var carry, e3, i2, k2, r2, rL, t2, xdL, ydL, x2 = this, Ctor = x2.constructor, xd2 = x2.d, yd2 = (y2 = new Ctor(y2)).d;
      if (!x2.s || !y2.s)
        return new Ctor(0);
      y2.s *= x2.s;
      e3 = x2.e + y2.e;
      xdL = xd2.length;
      ydL = yd2.length;
      if (xdL < ydL) {
        r2 = xd2;
        xd2 = yd2;
        yd2 = r2;
        rL = xdL;
        xdL = ydL;
        ydL = rL;
      }
      r2 = [];
      rL = xdL + ydL;
      for (i2 = rL; i2--; )
        r2.push(0);
      for (i2 = ydL; --i2 >= 0; ) {
        carry = 0;
        for (k2 = xdL + i2; k2 > i2; ) {
          t2 = r2[k2] + yd2[i2] * xd2[k2 - i2 - 1] + carry;
          r2[k2--] = t2 % BASE | 0;
          carry = t2 / BASE | 0;
        }
        r2[k2] = (r2[k2] + carry) % BASE | 0;
      }
      for (; !r2[--rL]; )
        r2.pop();
      if (carry)
        ++e3;
      else
        r2.shift();
      y2.d = r2;
      y2.e = e3;
      return external ? round(y2, Ctor.precision) : y2;
    };
    P.toDecimalPlaces = P.todp = function(dp, rm) {
      var x2 = this, Ctor = x2.constructor;
      x2 = new Ctor(x2);
      if (dp === void 0)
        return x2;
      checkInt32(dp, 0, MAX_DIGITS);
      if (rm === void 0)
        rm = Ctor.rounding;
      else
        checkInt32(rm, 0, 8);
      return round(x2, dp + getBase10Exponent(x2) + 1, rm);
    };
    P.toExponential = function(dp, rm) {
      var str, x2 = this, Ctor = x2.constructor;
      if (dp === void 0) {
        str = toString(x2, true);
      } else {
        checkInt32(dp, 0, MAX_DIGITS);
        if (rm === void 0)
          rm = Ctor.rounding;
        else
          checkInt32(rm, 0, 8);
        x2 = round(new Ctor(x2), dp + 1, rm);
        str = toString(x2, true, dp + 1);
      }
      return str;
    };
    P.toFixed = function(dp, rm) {
      var str, y2, x2 = this, Ctor = x2.constructor;
      if (dp === void 0)
        return toString(x2);
      checkInt32(dp, 0, MAX_DIGITS);
      if (rm === void 0)
        rm = Ctor.rounding;
      else
        checkInt32(rm, 0, 8);
      y2 = round(new Ctor(x2), dp + getBase10Exponent(x2) + 1, rm);
      str = toString(y2.abs(), false, dp + getBase10Exponent(y2) + 1);
      return x2.isneg() && !x2.isZero() ? "-" + str : str;
    };
    P.toInteger = P.toint = function() {
      var x2 = this, Ctor = x2.constructor;
      return round(new Ctor(x2), getBase10Exponent(x2) + 1, Ctor.rounding);
    };
    P.toNumber = function() {
      return +this;
    };
    P.toPower = P.pow = function(y2) {
      var e3, k2, pr, r2, sign2, yIsInt, x2 = this, Ctor = x2.constructor, guard = 12, yn = +(y2 = new Ctor(y2));
      if (!y2.s)
        return new Ctor(ONE);
      x2 = new Ctor(x2);
      if (!x2.s) {
        if (y2.s < 1)
          throw Error(decimalError + "Infinity");
        return x2;
      }
      if (x2.eq(ONE))
        return x2;
      pr = Ctor.precision;
      if (y2.eq(ONE))
        return round(x2, pr);
      e3 = y2.e;
      k2 = y2.d.length - 1;
      yIsInt = e3 >= k2;
      sign2 = x2.s;
      if (!yIsInt) {
        if (sign2 < 0)
          throw Error(decimalError + "NaN");
      } else if ((k2 = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {
        r2 = new Ctor(ONE);
        e3 = Math.ceil(pr / LOG_BASE + 4);
        external = false;
        for (; ; ) {
          if (k2 % 2) {
            r2 = r2.times(x2);
            truncate(r2.d, e3);
          }
          k2 = mathfloor(k2 / 2);
          if (k2 === 0)
            break;
          x2 = x2.times(x2);
          truncate(x2.d, e3);
        }
        external = true;
        return y2.s < 0 ? new Ctor(ONE).div(r2) : round(r2, pr);
      }
      sign2 = sign2 < 0 && y2.d[Math.max(e3, k2)] & 1 ? -1 : 1;
      x2.s = 1;
      external = false;
      r2 = y2.times(ln(x2, pr + guard));
      external = true;
      r2 = exp(r2);
      r2.s = sign2;
      return r2;
    };
    P.toPrecision = function(sd2, rm) {
      var e3, str, x2 = this, Ctor = x2.constructor;
      if (sd2 === void 0) {
        e3 = getBase10Exponent(x2);
        str = toString(x2, e3 <= Ctor.toExpNeg || e3 >= Ctor.toExpPos);
      } else {
        checkInt32(sd2, 1, MAX_DIGITS);
        if (rm === void 0)
          rm = Ctor.rounding;
        else
          checkInt32(rm, 0, 8);
        x2 = round(new Ctor(x2), sd2, rm);
        e3 = getBase10Exponent(x2);
        str = toString(x2, sd2 <= e3 || e3 <= Ctor.toExpNeg, sd2);
      }
      return str;
    };
    P.toSignificantDigits = P.tosd = function(sd2, rm) {
      var x2 = this, Ctor = x2.constructor;
      if (sd2 === void 0) {
        sd2 = Ctor.precision;
        rm = Ctor.rounding;
      } else {
        checkInt32(sd2, 1, MAX_DIGITS);
        if (rm === void 0)
          rm = Ctor.rounding;
        else
          checkInt32(rm, 0, 8);
      }
      return round(new Ctor(x2), sd2, rm);
    };
    P.toString = P.valueOf = P.val = P.toJSON = P[Symbol.for("nodejs.util.inspect.custom")] = function() {
      var x2 = this, e3 = getBase10Exponent(x2), Ctor = x2.constructor;
      return toString(x2, e3 <= Ctor.toExpNeg || e3 >= Ctor.toExpPos);
    };
    function add(x2, y2) {
      var carry, d2, e3, i2, k2, len, xd2, yd2, Ctor = x2.constructor, pr = Ctor.precision;
      if (!x2.s || !y2.s) {
        if (!y2.s)
          y2 = new Ctor(x2);
        return external ? round(y2, pr) : y2;
      }
      xd2 = x2.d;
      yd2 = y2.d;
      k2 = x2.e;
      e3 = y2.e;
      xd2 = xd2.slice();
      i2 = k2 - e3;
      if (i2) {
        if (i2 < 0) {
          d2 = xd2;
          i2 = -i2;
          len = yd2.length;
        } else {
          d2 = yd2;
          e3 = k2;
          len = xd2.length;
        }
        k2 = Math.ceil(pr / LOG_BASE);
        len = k2 > len ? k2 + 1 : len + 1;
        if (i2 > len) {
          i2 = len;
          d2.length = 1;
        }
        d2.reverse();
        for (; i2--; )
          d2.push(0);
        d2.reverse();
      }
      len = xd2.length;
      i2 = yd2.length;
      if (len - i2 < 0) {
        i2 = len;
        d2 = yd2;
        yd2 = xd2;
        xd2 = d2;
      }
      for (carry = 0; i2; ) {
        carry = (xd2[--i2] = xd2[i2] + yd2[i2] + carry) / BASE | 0;
        xd2[i2] %= BASE;
      }
      if (carry) {
        xd2.unshift(carry);
        ++e3;
      }
      for (len = xd2.length; xd2[--len] == 0; )
        xd2.pop();
      y2.d = xd2;
      y2.e = e3;
      return external ? round(y2, pr) : y2;
    }
    function checkInt32(i2, min2, max2) {
      if (i2 !== ~~i2 || i2 < min2 || i2 > max2) {
        throw Error(invalidArgument + i2);
      }
    }
    function digitsToString(d2) {
      var i2, k2, ws, indexOfLastWord = d2.length - 1, str = "", w2 = d2[0];
      if (indexOfLastWord > 0) {
        str += w2;
        for (i2 = 1; i2 < indexOfLastWord; i2++) {
          ws = d2[i2] + "";
          k2 = LOG_BASE - ws.length;
          if (k2)
            str += getZeroString(k2);
          str += ws;
        }
        w2 = d2[i2];
        ws = w2 + "";
        k2 = LOG_BASE - ws.length;
        if (k2)
          str += getZeroString(k2);
      } else if (w2 === 0) {
        return "0";
      }
      for (; w2 % 10 === 0; )
        w2 /= 10;
      return str + w2;
    }
    var divide = /* @__PURE__ */ function() {
      function multiplyInteger(x2, k2) {
        var temp, carry = 0, i2 = x2.length;
        for (x2 = x2.slice(); i2--; ) {
          temp = x2[i2] * k2 + carry;
          x2[i2] = temp % BASE | 0;
          carry = temp / BASE | 0;
        }
        if (carry)
          x2.unshift(carry);
        return x2;
      }
      function compare(a2, b2, aL, bL) {
        var i2, r2;
        if (aL != bL) {
          r2 = aL > bL ? 1 : -1;
        } else {
          for (i2 = r2 = 0; i2 < aL; i2++) {
            if (a2[i2] != b2[i2]) {
              r2 = a2[i2] > b2[i2] ? 1 : -1;
              break;
            }
          }
        }
        return r2;
      }
      function subtract2(a2, b2, aL) {
        var i2 = 0;
        for (; aL--; ) {
          a2[aL] -= i2;
          i2 = a2[aL] < b2[aL] ? 1 : 0;
          a2[aL] = i2 * BASE + a2[aL] - b2[aL];
        }
        for (; !a2[0] && a2.length > 1; )
          a2.shift();
      }
      return function(x2, y2, pr, dp) {
        var cmp, e3, i2, k2, prod, prodL, q2, qd2, rem, remL, rem0, sd2, t2, xi2, xL, yd0, yL, yz, Ctor = x2.constructor, sign2 = x2.s == y2.s ? 1 : -1, xd2 = x2.d, yd2 = y2.d;
        if (!x2.s)
          return new Ctor(x2);
        if (!y2.s)
          throw Error(decimalError + "Division by zero");
        e3 = x2.e - y2.e;
        yL = yd2.length;
        xL = xd2.length;
        q2 = new Ctor(sign2);
        qd2 = q2.d = [];
        for (i2 = 0; yd2[i2] == (xd2[i2] || 0); )
          ++i2;
        if (yd2[i2] > (xd2[i2] || 0))
          --e3;
        if (pr == null) {
          sd2 = pr = Ctor.precision;
        } else if (dp) {
          sd2 = pr + (getBase10Exponent(x2) - getBase10Exponent(y2)) + 1;
        } else {
          sd2 = pr;
        }
        if (sd2 < 0)
          return new Ctor(0);
        sd2 = sd2 / LOG_BASE + 2 | 0;
        i2 = 0;
        if (yL == 1) {
          k2 = 0;
          yd2 = yd2[0];
          sd2++;
          for (; (i2 < xL || k2) && sd2--; i2++) {
            t2 = k2 * BASE + (xd2[i2] || 0);
            qd2[i2] = t2 / yd2 | 0;
            k2 = t2 % yd2 | 0;
          }
        } else {
          k2 = BASE / (yd2[0] + 1) | 0;
          if (k2 > 1) {
            yd2 = multiplyInteger(yd2, k2);
            xd2 = multiplyInteger(xd2, k2);
            yL = yd2.length;
            xL = xd2.length;
          }
          xi2 = yL;
          rem = xd2.slice(0, yL);
          remL = rem.length;
          for (; remL < yL; )
            rem[remL++] = 0;
          yz = yd2.slice();
          yz.unshift(0);
          yd0 = yd2[0];
          if (yd2[1] >= BASE / 2)
            ++yd0;
          do {
            k2 = 0;
            cmp = compare(yd2, rem, yL, remL);
            if (cmp < 0) {
              rem0 = rem[0];
              if (yL != remL)
                rem0 = rem0 * BASE + (rem[1] || 0);
              k2 = rem0 / yd0 | 0;
              if (k2 > 1) {
                if (k2 >= BASE)
                  k2 = BASE - 1;
                prod = multiplyInteger(yd2, k2);
                prodL = prod.length;
                remL = rem.length;
                cmp = compare(prod, rem, prodL, remL);
                if (cmp == 1) {
                  k2--;
                  subtract2(prod, yL < prodL ? yz : yd2, prodL);
                }
              } else {
                if (k2 == 0)
                  cmp = k2 = 1;
                prod = yd2.slice();
              }
              prodL = prod.length;
              if (prodL < remL)
                prod.unshift(0);
              subtract2(rem, prod, remL);
              if (cmp == -1) {
                remL = rem.length;
                cmp = compare(yd2, rem, yL, remL);
                if (cmp < 1) {
                  k2++;
                  subtract2(rem, yL < remL ? yz : yd2, remL);
                }
              }
              remL = rem.length;
            } else if (cmp === 0) {
              k2++;
              rem = [0];
            }
            qd2[i2++] = k2;
            if (cmp && rem[0]) {
              rem[remL++] = xd2[xi2] || 0;
            } else {
              rem = [xd2[xi2]];
              remL = 1;
            }
          } while ((xi2++ < xL || rem[0] !== void 0) && sd2--);
        }
        if (!qd2[0])
          qd2.shift();
        q2.e = e3;
        return round(q2, dp ? pr + getBase10Exponent(q2) + 1 : pr);
      };
    }();
    function exp(x2, sd2) {
      var denominator, guard, pow2, sum, t2, wpr, i2 = 0, k2 = 0, Ctor = x2.constructor, pr = Ctor.precision;
      if (getBase10Exponent(x2) > 16)
        throw Error(exponentOutOfRange + getBase10Exponent(x2));
      if (!x2.s)
        return new Ctor(ONE);
      if (sd2 == null) {
        external = false;
        wpr = pr;
      } else {
        wpr = sd2;
      }
      t2 = new Ctor(0.03125);
      while (x2.abs().gte(0.1)) {
        x2 = x2.times(t2);
        k2 += 5;
      }
      guard = Math.log(mathpow(2, k2)) / Math.LN10 * 2 + 5 | 0;
      wpr += guard;
      denominator = pow2 = sum = new Ctor(ONE);
      Ctor.precision = wpr;
      for (; ; ) {
        pow2 = round(pow2.times(x2), wpr);
        denominator = denominator.times(++i2);
        t2 = sum.plus(divide(pow2, denominator, wpr));
        if (digitsToString(t2.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {
          while (k2--)
            sum = round(sum.times(sum), wpr);
          Ctor.precision = pr;
          return sd2 == null ? (external = true, round(sum, pr)) : sum;
        }
        sum = t2;
      }
    }
    function getBase10Exponent(x2) {
      var e3 = x2.e * LOG_BASE, w2 = x2.d[0];
      for (; w2 >= 10; w2 /= 10)
        e3++;
      return e3;
    }
    function getLn10(Ctor, sd2, pr) {
      if (sd2 > Ctor.LN10.sd()) {
        external = true;
        if (pr)
          Ctor.precision = pr;
        throw Error(decimalError + "LN10 precision limit exceeded");
      }
      return round(new Ctor(Ctor.LN10), sd2);
    }
    function getZeroString(k2) {
      var zs = "";
      for (; k2--; )
        zs += "0";
      return zs;
    }
    function ln(y2, sd2) {
      var c2, c0, denominator, e3, numerator, sum, t2, wpr, x2, n2 = 1, guard = 10, x3 = y2, xd2 = x3.d, Ctor = x3.constructor, pr = Ctor.precision;
      if (x3.s < 1)
        throw Error(decimalError + (x3.s ? "NaN" : "-Infinity"));
      if (x3.eq(ONE))
        return new Ctor(0);
      if (sd2 == null) {
        external = false;
        wpr = pr;
      } else {
        wpr = sd2;
      }
      if (x3.eq(10)) {
        if (sd2 == null)
          external = true;
        return getLn10(Ctor, wpr);
      }
      wpr += guard;
      Ctor.precision = wpr;
      c2 = digitsToString(xd2);
      c0 = c2.charAt(0);
      e3 = getBase10Exponent(x3);
      if (Math.abs(e3) < 15e14) {
        while (c0 < 7 && c0 != 1 || c0 == 1 && c2.charAt(1) > 3) {
          x3 = x3.times(y2);
          c2 = digitsToString(x3.d);
          c0 = c2.charAt(0);
          n2++;
        }
        e3 = getBase10Exponent(x3);
        if (c0 > 1) {
          x3 = new Ctor("0." + c2);
          e3++;
        } else {
          x3 = new Ctor(c0 + "." + c2.slice(1));
        }
      } else {
        t2 = getLn10(Ctor, wpr + 2, pr).times(e3 + "");
        x3 = ln(new Ctor(c0 + "." + c2.slice(1)), wpr - guard).plus(t2);
        Ctor.precision = pr;
        return sd2 == null ? (external = true, round(x3, pr)) : x3;
      }
      sum = numerator = x3 = divide(x3.minus(ONE), x3.plus(ONE), wpr);
      x2 = round(x3.times(x3), wpr);
      denominator = 3;
      for (; ; ) {
        numerator = round(numerator.times(x2), wpr);
        t2 = sum.plus(divide(numerator, new Ctor(denominator), wpr));
        if (digitsToString(t2.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {
          sum = sum.times(2);
          if (e3 !== 0)
            sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e3 + ""));
          sum = divide(sum, new Ctor(n2), wpr);
          Ctor.precision = pr;
          return sd2 == null ? (external = true, round(sum, pr)) : sum;
        }
        sum = t2;
        denominator += 2;
      }
    }
    function parseDecimal(x2, str) {
      var e3, i2, len;
      if ((e3 = str.indexOf(".")) > -1)
        str = str.replace(".", "");
      if ((i2 = str.search(/e/i)) > 0) {
        if (e3 < 0)
          e3 = i2;
        e3 += +str.slice(i2 + 1);
        str = str.substring(0, i2);
      } else if (e3 < 0) {
        e3 = str.length;
      }
      for (i2 = 0; str.charCodeAt(i2) === 48; )
        ++i2;
      for (len = str.length; str.charCodeAt(len - 1) === 48; )
        --len;
      str = str.slice(i2, len);
      if (str) {
        len -= i2;
        e3 = e3 - i2 - 1;
        x2.e = mathfloor(e3 / LOG_BASE);
        x2.d = [];
        i2 = (e3 + 1) % LOG_BASE;
        if (e3 < 0)
          i2 += LOG_BASE;
        if (i2 < len) {
          if (i2)
            x2.d.push(+str.slice(0, i2));
          for (len -= LOG_BASE; i2 < len; )
            x2.d.push(+str.slice(i2, i2 += LOG_BASE));
          str = str.slice(i2);
          i2 = LOG_BASE - str.length;
        } else {
          i2 -= len;
        }
        for (; i2--; )
          str += "0";
        x2.d.push(+str);
        if (external && (x2.e > MAX_E || x2.e < -MAX_E))
          throw Error(exponentOutOfRange + e3);
      } else {
        x2.s = 0;
        x2.e = 0;
        x2.d = [0];
      }
      return x2;
    }
    function round(x2, sd2, rm) {
      var i2, j2, k2, n2, rd2, doRound, w2, xdi, xd2 = x2.d;
      for (n2 = 1, k2 = xd2[0]; k2 >= 10; k2 /= 10)
        n2++;
      i2 = sd2 - n2;
      if (i2 < 0) {
        i2 += LOG_BASE;
        j2 = sd2;
        w2 = xd2[xdi = 0];
      } else {
        xdi = Math.ceil((i2 + 1) / LOG_BASE);
        k2 = xd2.length;
        if (xdi >= k2)
          return x2;
        w2 = k2 = xd2[xdi];
        for (n2 = 1; k2 >= 10; k2 /= 10)
          n2++;
        i2 %= LOG_BASE;
        j2 = i2 - LOG_BASE + n2;
      }
      if (rm !== void 0) {
        k2 = mathpow(10, n2 - j2 - 1);
        rd2 = w2 / k2 % 10 | 0;
        doRound = sd2 < 0 || xd2[xdi + 1] !== void 0 || w2 % k2;
        doRound = rm < 4 ? (rd2 || doRound) && (rm == 0 || rm == (x2.s < 0 ? 3 : 2)) : rd2 > 5 || rd2 == 5 && (rm == 4 || doRound || rm == 6 && // Check whether the digit to the left of the rounding digit is odd.
        (i2 > 0 ? j2 > 0 ? w2 / mathpow(10, n2 - j2) : 0 : xd2[xdi - 1]) % 10 & 1 || rm == (x2.s < 0 ? 8 : 7));
      }
      if (sd2 < 1 || !xd2[0]) {
        if (doRound) {
          k2 = getBase10Exponent(x2);
          xd2.length = 1;
          sd2 = sd2 - k2 - 1;
          xd2[0] = mathpow(10, (LOG_BASE - sd2 % LOG_BASE) % LOG_BASE);
          x2.e = mathfloor(-sd2 / LOG_BASE) || 0;
        } else {
          xd2.length = 1;
          xd2[0] = x2.e = x2.s = 0;
        }
        return x2;
      }
      if (i2 == 0) {
        xd2.length = xdi;
        k2 = 1;
        xdi--;
      } else {
        xd2.length = xdi + 1;
        k2 = mathpow(10, LOG_BASE - i2);
        xd2[xdi] = j2 > 0 ? (w2 / mathpow(10, n2 - j2) % mathpow(10, j2) | 0) * k2 : 0;
      }
      if (doRound) {
        for (; ; ) {
          if (xdi == 0) {
            if ((xd2[0] += k2) == BASE) {
              xd2[0] = 1;
              ++x2.e;
            }
            break;
          } else {
            xd2[xdi] += k2;
            if (xd2[xdi] != BASE)
              break;
            xd2[xdi--] = 0;
            k2 = 1;
          }
        }
      }
      for (i2 = xd2.length; xd2[--i2] === 0; )
        xd2.pop();
      if (external && (x2.e > MAX_E || x2.e < -MAX_E)) {
        throw Error(exponentOutOfRange + getBase10Exponent(x2));
      }
      return x2;
    }
    function subtract(x2, y2) {
      var d2, e3, i2, j2, k2, len, xd2, xe2, xLTy, yd2, Ctor = x2.constructor, pr = Ctor.precision;
      if (!x2.s || !y2.s) {
        if (y2.s)
          y2.s = -y2.s;
        else
          y2 = new Ctor(x2);
        return external ? round(y2, pr) : y2;
      }
      xd2 = x2.d;
      yd2 = y2.d;
      e3 = y2.e;
      xe2 = x2.e;
      xd2 = xd2.slice();
      k2 = xe2 - e3;
      if (k2) {
        xLTy = k2 < 0;
        if (xLTy) {
          d2 = xd2;
          k2 = -k2;
          len = yd2.length;
        } else {
          d2 = yd2;
          e3 = xe2;
          len = xd2.length;
        }
        i2 = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;
        if (k2 > i2) {
          k2 = i2;
          d2.length = 1;
        }
        d2.reverse();
        for (i2 = k2; i2--; )
          d2.push(0);
        d2.reverse();
      } else {
        i2 = xd2.length;
        len = yd2.length;
        xLTy = i2 < len;
        if (xLTy)
          len = i2;
        for (i2 = 0; i2 < len; i2++) {
          if (xd2[i2] != yd2[i2]) {
            xLTy = xd2[i2] < yd2[i2];
            break;
          }
        }
        k2 = 0;
      }
      if (xLTy) {
        d2 = xd2;
        xd2 = yd2;
        yd2 = d2;
        y2.s = -y2.s;
      }
      len = xd2.length;
      for (i2 = yd2.length - len; i2 > 0; --i2)
        xd2[len++] = 0;
      for (i2 = yd2.length; i2 > k2; ) {
        if (xd2[--i2] < yd2[i2]) {
          for (j2 = i2; j2 && xd2[--j2] === 0; )
            xd2[j2] = BASE - 1;
          --xd2[j2];
          xd2[i2] += BASE;
        }
        xd2[i2] -= yd2[i2];
      }
      for (; xd2[--len] === 0; )
        xd2.pop();
      for (; xd2[0] === 0; xd2.shift())
        --e3;
      if (!xd2[0])
        return new Ctor(0);
      y2.d = xd2;
      y2.e = e3;
      return external ? round(y2, pr) : y2;
    }
    function toString(x2, isExp, sd2) {
      var k2, e3 = getBase10Exponent(x2), str = digitsToString(x2.d), len = str.length;
      if (isExp) {
        if (sd2 && (k2 = sd2 - len) > 0) {
          str = str.charAt(0) + "." + str.slice(1) + getZeroString(k2);
        } else if (len > 1) {
          str = str.charAt(0) + "." + str.slice(1);
        }
        str = str + (e3 < 0 ? "e" : "e+") + e3;
      } else if (e3 < 0) {
        str = "0." + getZeroString(-e3 - 1) + str;
        if (sd2 && (k2 = sd2 - len) > 0)
          str += getZeroString(k2);
      } else if (e3 >= len) {
        str += getZeroString(e3 + 1 - len);
        if (sd2 && (k2 = sd2 - e3 - 1) > 0)
          str = str + "." + getZeroString(k2);
      } else {
        if ((k2 = e3 + 1) < len)
          str = str.slice(0, k2) + "." + str.slice(k2);
        if (sd2 && (k2 = sd2 - len) > 0) {
          if (e3 + 1 === len)
            str += ".";
          str += getZeroString(k2);
        }
      }
      return x2.s < 0 ? "-" + str : str;
    }
    function truncate(arr, len) {
      if (arr.length > len) {
        arr.length = len;
        return true;
      }
    }
    function clone(obj) {
      var i2, p2, ps;
      function Decimal2(value2) {
        var x2 = this;
        if (!(x2 instanceof Decimal2))
          return new Decimal2(value2);
        x2.constructor = Decimal2;
        if (value2 instanceof Decimal2) {
          x2.s = value2.s;
          x2.e = value2.e;
          x2.d = (value2 = value2.d) ? value2.slice() : value2;
          return;
        }
        if (typeof value2 === "number") {
          if (value2 * 0 !== 0) {
            throw Error(invalidArgument + value2);
          }
          if (value2 > 0) {
            x2.s = 1;
          } else if (value2 < 0) {
            value2 = -value2;
            x2.s = -1;
          } else {
            x2.s = 0;
            x2.e = 0;
            x2.d = [0];
            return;
          }
          if (value2 === ~~value2 && value2 < 1e7) {
            x2.e = 0;
            x2.d = [value2];
            return;
          }
          return parseDecimal(x2, value2.toString());
        } else if (typeof value2 !== "string") {
          throw Error(invalidArgument + value2);
        }
        if (value2.charCodeAt(0) === 45) {
          value2 = value2.slice(1);
          x2.s = -1;
        } else {
          x2.s = 1;
        }
        if (isDecimal.test(value2))
          parseDecimal(x2, value2);
        else
          throw Error(invalidArgument + value2);
      }
      Decimal2.prototype = P;
      Decimal2.ROUND_UP = 0;
      Decimal2.ROUND_DOWN = 1;
      Decimal2.ROUND_CEIL = 2;
      Decimal2.ROUND_FLOOR = 3;
      Decimal2.ROUND_HALF_UP = 4;
      Decimal2.ROUND_HALF_DOWN = 5;
      Decimal2.ROUND_HALF_EVEN = 6;
      Decimal2.ROUND_HALF_CEIL = 7;
      Decimal2.ROUND_HALF_FLOOR = 8;
      Decimal2.clone = clone;
      Decimal2.config = Decimal2.set = config;
      if (obj === void 0)
        obj = {};
      if (obj) {
        ps = ["precision", "rounding", "toExpNeg", "toExpPos", "LN10"];
        for (i2 = 0; i2 < ps.length; )
          if (!obj.hasOwnProperty(p2 = ps[i2++]))
            obj[p2] = this[p2];
      }
      Decimal2.config(obj);
      return Decimal2;
    }
    function config(obj) {
      if (!obj || typeof obj !== "object") {
        throw Error(decimalError + "Object expected");
      }
      var i2, p2, v2, ps = [
        "precision",
        1,
        MAX_DIGITS,
        "rounding",
        0,
        8,
        "toExpNeg",
        -1 / 0,
        0,
        "toExpPos",
        0,
        1 / 0
      ];
      for (i2 = 0; i2 < ps.length; i2 += 3) {
        if ((v2 = obj[p2 = ps[i2]]) !== void 0) {
          if (mathfloor(v2) === v2 && v2 >= ps[i2 + 1] && v2 <= ps[i2 + 2])
            this[p2] = v2;
          else
            throw Error(invalidArgument + p2 + ": " + v2);
        }
      }
      if ((v2 = obj[p2 = "LN10"]) !== void 0) {
        if (v2 == Math.LN10)
          this[p2] = new this(v2);
        else
          throw Error(invalidArgument + p2 + ": " + v2);
      }
      return this;
    }
    var Decimal = clone(defaults);
    ONE = new Decimal(1);
    const Decimal$1 = Decimal;
    function _toConsumableArray$9(arr) {
      return _arrayWithoutHoles$9(arr) || _iterableToArray$a(arr) || _unsupportedIterableToArray$e(arr) || _nonIterableSpread$9();
    }
    function _nonIterableSpread$9() {
      throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray$e(o2, minLen) {
      if (!o2)
        return;
      if (typeof o2 === "string")
        return _arrayLikeToArray$e(o2, minLen);
      var n2 = Object.prototype.toString.call(o2).slice(8, -1);
      if (n2 === "Object" && o2.constructor)
        n2 = o2.constructor.name;
      if (n2 === "Map" || n2 === "Set")
        return Array.from(o2);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
        return _arrayLikeToArray$e(o2, minLen);
    }
    function _iterableToArray$a(iter) {
      if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter))
        return Array.from(iter);
    }
    function _arrayWithoutHoles$9(arr) {
      if (Array.isArray(arr))
        return _arrayLikeToArray$e(arr);
    }
    function _arrayLikeToArray$e(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) {
        arr2[i2] = arr[i2];
      }
      return arr2;
    }
    var identity$1 = function identity2(i2) {
      return i2;
    };
    var PLACE_HOLDER = {
      "@@functional/placeholder": true
    };
    var isPlaceHolder = function isPlaceHolder2(val) {
      return val === PLACE_HOLDER;
    };
    var curry0 = function curry02(fn) {
      return function _curried() {
        if (arguments.length === 0 || arguments.length === 1 && isPlaceHolder(arguments.length <= 0 ? void 0 : arguments[0])) {
          return _curried;
        }
        return fn.apply(void 0, arguments);
      };
    };
    var curryN = function curryN2(n2, fn) {
      if (n2 === 1) {
        return fn;
      }
      return curry0(function() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        var argsLength = args.filter(function(arg) {
          return arg !== PLACE_HOLDER;
        }).length;
        if (argsLength >= n2) {
          return fn.apply(void 0, args);
        }
        return curryN2(n2 - argsLength, curry0(function() {
          for (var _len2 = arguments.length, restArgs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            restArgs[_key2] = arguments[_key2];
          }
          var newArgs = args.map(function(arg) {
            return isPlaceHolder(arg) ? restArgs.shift() : arg;
          });
          return fn.apply(void 0, _toConsumableArray$9(newArgs).concat(restArgs));
        }));
      });
    };
    var curry = function curry2(fn) {
      return curryN(fn.length, fn);
    };
    var range$2 = function range2(begin, end) {
      var arr = [];
      for (var i2 = begin; i2 < end; ++i2) {
        arr[i2 - begin] = i2;
      }
      return arr;
    };
    var map = curry(function(fn, arr) {
      if (Array.isArray(arr)) {
        return arr.map(fn);
      }
      return Object.keys(arr).map(function(key) {
        return arr[key];
      }).map(fn);
    });
    var compose = function compose2() {
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }
      if (!args.length) {
        return identity$1;
      }
      var fns = args.reverse();
      var firstFn = fns[0];
      var tailsFn = fns.slice(1);
      return function() {
        return tailsFn.reduce(function(res, fn) {
          return fn(res);
        }, firstFn.apply(void 0, arguments));
      };
    };
    var reverse = function reverse2(arr) {
      if (Array.isArray(arr)) {
        return arr.reverse();
      }
      return arr.split("").reverse.join("");
    };
    var memoize = function memoize2(fn) {
      var lastArgs = null;
      var lastResult2 = null;
      return function() {
        for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
          args[_key4] = arguments[_key4];
        }
        if (lastArgs && args.every(function(val, i2) {
          return val === lastArgs[i2];
        })) {
          return lastResult2;
        }
        lastArgs = args;
        lastResult2 = fn.apply(void 0, args);
        return lastResult2;
      };
    };
    function getDigitCount(value2) {
      var result;
      if (value2 === 0) {
        result = 1;
      } else {
        result = Math.floor(new Decimal$1(value2).abs().log(10).toNumber()) + 1;
      }
      return result;
    }
    function rangeStep(start, end, step) {
      var num = new Decimal$1(start);
      var i2 = 0;
      var result = [];
      while (num.lt(end) && i2 < 1e5) {
        result.push(num.toNumber());
        num = num.add(step);
        i2++;
      }
      return result;
    }
    var interpolateNumber = curry(function(a2, b2, t2) {
      var newA = +a2;
      var newB = +b2;
      return newA + t2 * (newB - newA);
    });
    var uninterpolateNumber = curry(function(a2, b2, x2) {
      var diff2 = b2 - +a2;
      diff2 = diff2 || Infinity;
      return (x2 - a2) / diff2;
    });
    var uninterpolateTruncation = curry(function(a2, b2, x2) {
      var diff2 = b2 - +a2;
      diff2 = diff2 || Infinity;
      return Math.max(0, Math.min(1, (x2 - a2) / diff2));
    });
    const Arithmetic = {
      rangeStep,
      getDigitCount,
      interpolateNumber,
      uninterpolateNumber,
      uninterpolateTruncation
    };
    function _toConsumableArray$8(arr) {
      return _arrayWithoutHoles$8(arr) || _iterableToArray$9(arr) || _unsupportedIterableToArray$d(arr) || _nonIterableSpread$8();
    }
    function _nonIterableSpread$8() {
      throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _iterableToArray$9(iter) {
      if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter))
        return Array.from(iter);
    }
    function _arrayWithoutHoles$8(arr) {
      if (Array.isArray(arr))
        return _arrayLikeToArray$d(arr);
    }
    function _slicedToArray$7(arr, i2) {
      return _arrayWithHoles$8(arr) || _iterableToArrayLimit$7(arr, i2) || _unsupportedIterableToArray$d(arr, i2) || _nonIterableRest$8();
    }
    function _nonIterableRest$8() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray$d(o2, minLen) {
      if (!o2)
        return;
      if (typeof o2 === "string")
        return _arrayLikeToArray$d(o2, minLen);
      var n2 = Object.prototype.toString.call(o2).slice(8, -1);
      if (n2 === "Object" && o2.constructor)
        n2 = o2.constructor.name;
      if (n2 === "Map" || n2 === "Set")
        return Array.from(o2);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
        return _arrayLikeToArray$d(o2, minLen);
    }
    function _arrayLikeToArray$d(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) {
        arr2[i2] = arr[i2];
      }
      return arr2;
    }
    function _iterableToArrayLimit$7(arr, i2) {
      if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr)))
        return;
      var _arr = [];
      var _n = true;
      var _d2 = false;
      var _e3 = void 0;
      try {
        for (var _i2 = arr[Symbol.iterator](), _s; !(_n = (_s = _i2.next()).done); _n = true) {
          _arr.push(_s.value);
          if (i2 && _arr.length === i2)
            break;
        }
      } catch (err) {
        _d2 = true;
        _e3 = err;
      } finally {
        try {
          if (!_n && _i2["return"] != null)
            _i2["return"]();
        } finally {
          if (_d2)
            throw _e3;
        }
      }
      return _arr;
    }
    function _arrayWithHoles$8(arr) {
      if (Array.isArray(arr))
        return arr;
    }
    function getValidInterval(_ref) {
      var _ref2 = _slicedToArray$7(_ref, 2), min2 = _ref2[0], max2 = _ref2[1];
      var validMin = min2, validMax = max2;
      if (min2 > max2) {
        validMin = max2;
        validMax = min2;
      }
      return [validMin, validMax];
    }
    function getFormatStep(roughStep, allowDecimals, correctionFactor) {
      if (roughStep.lte(0)) {
        return new Decimal$1(0);
      }
      var digitCount = Arithmetic.getDigitCount(roughStep.toNumber());
      var digitCountValue = new Decimal$1(10).pow(digitCount);
      var stepRatio = roughStep.div(digitCountValue);
      var stepRatioScale = digitCount !== 1 ? 0.05 : 0.1;
      var amendStepRatio = new Decimal$1(Math.ceil(stepRatio.div(stepRatioScale).toNumber())).add(correctionFactor).mul(stepRatioScale);
      var formatStep = amendStepRatio.mul(digitCountValue);
      return allowDecimals ? formatStep : new Decimal$1(Math.ceil(formatStep));
    }
    function getTickOfSingleValue(value2, tickCount, allowDecimals) {
      var step = 1;
      var middle = new Decimal$1(value2);
      if (!middle.isint() && allowDecimals) {
        var absVal = Math.abs(value2);
        if (absVal < 1) {
          step = new Decimal$1(10).pow(Arithmetic.getDigitCount(value2) - 1);
          middle = new Decimal$1(Math.floor(middle.div(step).toNumber())).mul(step);
        } else if (absVal > 1) {
          middle = new Decimal$1(Math.floor(value2));
        }
      } else if (value2 === 0) {
        middle = new Decimal$1(Math.floor((tickCount - 1) / 2));
      } else if (!allowDecimals) {
        middle = new Decimal$1(Math.floor(value2));
      }
      var middleIndex = Math.floor((tickCount - 1) / 2);
      var fn = compose(map(function(n2) {
        return middle.add(new Decimal$1(n2 - middleIndex).mul(step)).toNumber();
      }), range$2);
      return fn(0, tickCount);
    }
    function calculateStep(min2, max2, tickCount, allowDecimals) {
      var correctionFactor = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 0;
      if (!Number.isFinite((max2 - min2) / (tickCount - 1))) {
        return {
          step: new Decimal$1(0),
          tickMin: new Decimal$1(0),
          tickMax: new Decimal$1(0)
        };
      }
      var step = getFormatStep(new Decimal$1(max2).sub(min2).div(tickCount - 1), allowDecimals, correctionFactor);
      var middle;
      if (min2 <= 0 && max2 >= 0) {
        middle = new Decimal$1(0);
      } else {
        middle = new Decimal$1(min2).add(max2).div(2);
        middle = middle.sub(new Decimal$1(middle).mod(step));
      }
      var belowCount = Math.ceil(middle.sub(min2).div(step).toNumber());
      var upCount = Math.ceil(new Decimal$1(max2).sub(middle).div(step).toNumber());
      var scaleCount = belowCount + upCount + 1;
      if (scaleCount > tickCount) {
        return calculateStep(min2, max2, tickCount, allowDecimals, correctionFactor + 1);
      }
      if (scaleCount < tickCount) {
        upCount = max2 > 0 ? upCount + (tickCount - scaleCount) : upCount;
        belowCount = max2 > 0 ? belowCount : belowCount + (tickCount - scaleCount);
      }
      return {
        step,
        tickMin: middle.sub(new Decimal$1(belowCount).mul(step)),
        tickMax: middle.add(new Decimal$1(upCount).mul(step))
      };
    }
    function getNiceTickValuesFn(_ref3) {
      var _ref4 = _slicedToArray$7(_ref3, 2), min2 = _ref4[0], max2 = _ref4[1];
      var tickCount = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 6;
      var allowDecimals = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
      var count = Math.max(tickCount, 2);
      var _getValidInterval = getValidInterval([min2, max2]), _getValidInterval2 = _slicedToArray$7(_getValidInterval, 2), cormin = _getValidInterval2[0], cormax = _getValidInterval2[1];
      if (cormin === -Infinity || cormax === Infinity) {
        var _values = cormax === Infinity ? [cormin].concat(_toConsumableArray$8(range$2(0, tickCount - 1).map(function() {
          return Infinity;
        }))) : [].concat(_toConsumableArray$8(range$2(0, tickCount - 1).map(function() {
          return -Infinity;
        })), [cormax]);
        return min2 > max2 ? reverse(_values) : _values;
      }
      if (cormin === cormax) {
        return getTickOfSingleValue(cormin, tickCount, allowDecimals);
      }
      var _calculateStep = calculateStep(cormin, cormax, count, allowDecimals), step = _calculateStep.step, tickMin = _calculateStep.tickMin, tickMax = _calculateStep.tickMax;
      var values = Arithmetic.rangeStep(tickMin, tickMax.add(new Decimal$1(0.1).mul(step)), step);
      return min2 > max2 ? reverse(values) : values;
    }
    function getTickValuesFixedDomainFn(_ref7, tickCount) {
      var _ref8 = _slicedToArray$7(_ref7, 2), min2 = _ref8[0], max2 = _ref8[1];
      var allowDecimals = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
      var _getValidInterval5 = getValidInterval([min2, max2]), _getValidInterval6 = _slicedToArray$7(_getValidInterval5, 2), cormin = _getValidInterval6[0], cormax = _getValidInterval6[1];
      if (cormin === -Infinity || cormax === Infinity) {
        return [min2, max2];
      }
      if (cormin === cormax) {
        return [cormin];
      }
      var count = Math.max(tickCount, 2);
      var step = getFormatStep(new Decimal$1(cormax).sub(cormin).div(count - 1), allowDecimals, 0);
      var values = [].concat(_toConsumableArray$8(Arithmetic.rangeStep(new Decimal$1(cormin), new Decimal$1(cormax).sub(new Decimal$1(0.99).mul(step)), step)), [cormax]);
      return min2 > max2 ? reverse(values) : values;
    }
    var getNiceTickValues = memoize(getNiceTickValuesFn);
    var getTickValuesFixedDomain = memoize(getTickValuesFixedDomainFn);
    var prefix = "Invariant failed";
    function invariant(condition, message) {
      if (condition) {
        return;
      }
      {
        throw new Error(prefix);
      }
    }
    var _excluded$a = ["offset", "layout", "width", "dataKey", "data", "dataPointFormatter", "xAxis", "yAxis"];
    function _extends$j() {
      _extends$j = Object.assign ? Object.assign.bind() : function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends$j.apply(this, arguments);
    }
    function _slicedToArray$6(arr, i2) {
      return _arrayWithHoles$7(arr) || _iterableToArrayLimit$6(arr, i2) || _unsupportedIterableToArray$c(arr, i2) || _nonIterableRest$7();
    }
    function _nonIterableRest$7() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray$c(o2, minLen) {
      if (!o2)
        return;
      if (typeof o2 === "string")
        return _arrayLikeToArray$c(o2, minLen);
      var n2 = Object.prototype.toString.call(o2).slice(8, -1);
      if (n2 === "Object" && o2.constructor)
        n2 = o2.constructor.name;
      if (n2 === "Map" || n2 === "Set")
        return Array.from(o2);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
        return _arrayLikeToArray$c(o2, minLen);
    }
    function _arrayLikeToArray$c(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++)
        arr2[i2] = arr[i2];
      return arr2;
    }
    function _iterableToArrayLimit$6(r2, l2) {
      var t2 = null == r2 ? null : "undefined" != typeof Symbol && r2[Symbol.iterator] || r2["@@iterator"];
      if (null != t2) {
        var e3, n2, i2, u2, a2 = [], f2 = true, o2 = false;
        try {
          if (i2 = (t2 = t2.call(r2)).next, 0 === l2) {
            if (Object(t2) !== t2)
              return;
            f2 = false;
          } else
            for (; !(f2 = (e3 = i2.call(t2)).done) && (a2.push(e3.value), a2.length !== l2); f2 = true)
              ;
        } catch (r22) {
          o2 = true, n2 = r22;
        } finally {
          try {
            if (!f2 && null != t2["return"] && (u2 = t2["return"](), Object(u2) !== u2))
              return;
          } finally {
            if (o2)
              throw n2;
          }
        }
        return a2;
      }
    }
    function _arrayWithHoles$7(arr) {
      if (Array.isArray(arr))
        return arr;
    }
    function _objectWithoutProperties$a(source, excluded) {
      if (source == null)
        return {};
      var target = _objectWithoutPropertiesLoose$a(source, excluded);
      var key, i2;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i2 = 0; i2 < sourceSymbolKeys.length; i2++) {
          key = sourceSymbolKeys[i2];
          if (excluded.indexOf(key) >= 0)
            continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key))
            continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose$a(source, excluded) {
      if (source == null)
        return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i2;
      for (i2 = 0; i2 < sourceKeys.length; i2++) {
        key = sourceKeys[i2];
        if (excluded.indexOf(key) >= 0)
          continue;
        target[key] = source[key];
      }
      return target;
    }
    function ErrorBar(props) {
      var offset2 = props.offset, layout = props.layout, width = props.width, dataKey = props.dataKey, data = props.data, dataPointFormatter = props.dataPointFormatter, xAxis = props.xAxis, yAxis = props.yAxis, others = _objectWithoutProperties$a(props, _excluded$a);
      var svgProps = filterProps(others, false);
      !!(props.direction === "x" && xAxis.type !== "number") ? invariant(false) : void 0;
      var errorBars = data.map(function(entry) {
        var _dataPointFormatter = dataPointFormatter(entry, dataKey), x2 = _dataPointFormatter.x, y2 = _dataPointFormatter.y, value2 = _dataPointFormatter.value, errorVal = _dataPointFormatter.errorVal;
        if (!errorVal) {
          return null;
        }
        var lineCoordinates = [];
        var lowBound, highBound;
        if (Array.isArray(errorVal)) {
          var _errorVal = _slicedToArray$6(errorVal, 2);
          lowBound = _errorVal[0];
          highBound = _errorVal[1];
        } else {
          lowBound = highBound = errorVal;
        }
        if (layout === "vertical") {
          var scale = xAxis.scale;
          var yMid = y2 + offset2;
          var yMin = yMid + width;
          var yMax = yMid - width;
          var xMin = scale(value2 - lowBound);
          var xMax = scale(value2 + highBound);
          lineCoordinates.push({
            x1: xMax,
            y1: yMin,
            x2: xMax,
            y2: yMax
          });
          lineCoordinates.push({
            x1: xMin,
            y1: yMid,
            x2: xMax,
            y2: yMid
          });
          lineCoordinates.push({
            x1: xMin,
            y1: yMin,
            x2: xMin,
            y2: yMax
          });
        } else if (layout === "horizontal") {
          var _scale = yAxis.scale;
          var xMid = x2 + offset2;
          var _xMin = xMid - width;
          var _xMax = xMid + width;
          var _yMin = _scale(value2 - lowBound);
          var _yMax = _scale(value2 + highBound);
          lineCoordinates.push({
            x1: _xMin,
            y1: _yMax,
            x2: _xMax,
            y2: _yMax
          });
          lineCoordinates.push({
            x1: xMid,
            y1: _yMin,
            x2: xMid,
            y2: _yMax
          });
          lineCoordinates.push({
            x1: _xMin,
            y1: _yMin,
            x2: _xMax,
            y2: _yMin
          });
        }
        return /* @__PURE__ */ React$1.createElement(Layer, _extends$j({
          className: "recharts-errorBar",
          key: "bar-".concat(lineCoordinates.map(function(c2) {
            return "".concat(c2.x1, "-").concat(c2.x2, "-").concat(c2.y1, "-").concat(c2.y2);
          }))
        }, svgProps), lineCoordinates.map(function(coordinates) {
          return /* @__PURE__ */ React$1.createElement("line", _extends$j({}, coordinates, {
            key: "line-".concat(coordinates.x1, "-").concat(coordinates.x2, "-").concat(coordinates.y1, "-").concat(coordinates.y2)
          }));
        }));
      });
      return /* @__PURE__ */ React$1.createElement(Layer, {
        className: "recharts-errorBars"
      }, errorBars);
    }
    ErrorBar.defaultProps = {
      stroke: "black",
      strokeWidth: 1.5,
      width: 5,
      offset: 0,
      layout: "horizontal"
    };
    ErrorBar.displayName = "ErrorBar";
    function _typeof$s(o2) {
      "@babel/helpers - typeof";
      return _typeof$s = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
        return typeof o3;
      } : function(o3) {
        return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
      }, _typeof$s(o2);
    }
    function ownKeys$q(e3, r2) {
      var t2 = Object.keys(e3);
      if (Object.getOwnPropertySymbols) {
        var o2 = Object.getOwnPropertySymbols(e3);
        r2 && (o2 = o2.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e3, r3).enumerable;
        })), t2.push.apply(t2, o2);
      }
      return t2;
    }
    function _objectSpread$q(e3) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t2 = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$q(Object(t2), true).forEach(function(r3) {
          _defineProperty$r(e3, r3, t2[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$q(Object(t2)).forEach(function(r3) {
          Object.defineProperty(e3, r3, Object.getOwnPropertyDescriptor(t2, r3));
        });
      }
      return e3;
    }
    function _defineProperty$r(obj, key, value2) {
      key = _toPropertyKey$r(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value: value2, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value2;
      }
      return obj;
    }
    function _toPropertyKey$r(t2) {
      var i2 = _toPrimitive$r(t2, "string");
      return "symbol" == _typeof$s(i2) ? i2 : String(i2);
    }
    function _toPrimitive$r(t2, r2) {
      if ("object" != _typeof$s(t2) || !t2)
        return t2;
      var e3 = t2[Symbol.toPrimitive];
      if (void 0 !== e3) {
        var i2 = e3.call(t2, r2 || "default");
        if ("object" != _typeof$s(i2))
          return i2;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r2 ? String : Number)(t2);
    }
    var getLegendProps = function getLegendProps2(_ref) {
      var children = _ref.children, formattedGraphicalItems = _ref.formattedGraphicalItems, legendWidth = _ref.legendWidth, legendContent = _ref.legendContent;
      var legendItem = findChildByType(children, Legend);
      if (!legendItem) {
        return null;
      }
      var legendData;
      if (legendItem.props && legendItem.props.payload) {
        legendData = legendItem.props && legendItem.props.payload;
      } else if (legendContent === "children") {
        legendData = (formattedGraphicalItems || []).reduce(function(result, _ref2) {
          var item = _ref2.item, props = _ref2.props;
          var data = props.sectors || props.data || [];
          return result.concat(data.map(function(entry) {
            return {
              type: legendItem.props.iconType || item.props.legendType,
              value: entry.name,
              color: entry.fill,
              payload: entry
            };
          }));
        }, []);
      } else {
        legendData = (formattedGraphicalItems || []).map(function(_ref3) {
          var item = _ref3.item;
          var _item$props = item.props, dataKey = _item$props.dataKey, name = _item$props.name, legendType = _item$props.legendType, hide = _item$props.hide;
          return {
            inactive: hide,
            dataKey,
            type: legendItem.props.iconType || legendType || "square",
            color: getMainColorOfGraphicItem(item),
            value: name || dataKey,
            // @ts-expect-error property strokeDasharray is required in Payload but optional in props
            payload: item.props
          };
        });
      }
      return _objectSpread$q(_objectSpread$q(_objectSpread$q({}, legendItem.props), Legend.getWithHeight(legendItem, legendWidth)), {}, {
        payload: legendData,
        item: legendItem
      });
    };
    function _typeof$r(o2) {
      "@babel/helpers - typeof";
      return _typeof$r = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
        return typeof o3;
      } : function(o3) {
        return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
      }, _typeof$r(o2);
    }
    function ownKeys$p(e3, r2) {
      var t2 = Object.keys(e3);
      if (Object.getOwnPropertySymbols) {
        var o2 = Object.getOwnPropertySymbols(e3);
        r2 && (o2 = o2.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e3, r3).enumerable;
        })), t2.push.apply(t2, o2);
      }
      return t2;
    }
    function _objectSpread$p(e3) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t2 = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$p(Object(t2), true).forEach(function(r3) {
          _defineProperty$q(e3, r3, t2[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$p(Object(t2)).forEach(function(r3) {
          Object.defineProperty(e3, r3, Object.getOwnPropertyDescriptor(t2, r3));
        });
      }
      return e3;
    }
    function _defineProperty$q(obj, key, value2) {
      key = _toPropertyKey$q(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value: value2, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value2;
      }
      return obj;
    }
    function _toPropertyKey$q(t2) {
      var i2 = _toPrimitive$q(t2, "string");
      return "symbol" == _typeof$r(i2) ? i2 : String(i2);
    }
    function _toPrimitive$q(t2, r2) {
      if ("object" != _typeof$r(t2) || !t2)
        return t2;
      var e3 = t2[Symbol.toPrimitive];
      if (void 0 !== e3) {
        var i2 = e3.call(t2, r2 || "default");
        if ("object" != _typeof$r(i2))
          return i2;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r2 ? String : Number)(t2);
    }
    function _toConsumableArray$7(arr) {
      return _arrayWithoutHoles$7(arr) || _iterableToArray$8(arr) || _unsupportedIterableToArray$b(arr) || _nonIterableSpread$7();
    }
    function _nonIterableSpread$7() {
      throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray$b(o2, minLen) {
      if (!o2)
        return;
      if (typeof o2 === "string")
        return _arrayLikeToArray$b(o2, minLen);
      var n2 = Object.prototype.toString.call(o2).slice(8, -1);
      if (n2 === "Object" && o2.constructor)
        n2 = o2.constructor.name;
      if (n2 === "Map" || n2 === "Set")
        return Array.from(o2);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
        return _arrayLikeToArray$b(o2, minLen);
    }
    function _iterableToArray$8(iter) {
      if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
        return Array.from(iter);
    }
    function _arrayWithoutHoles$7(arr) {
      if (Array.isArray(arr))
        return _arrayLikeToArray$b(arr);
    }
    function _arrayLikeToArray$b(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++)
        arr2[i2] = arr[i2];
      return arr2;
    }
    function getValueByDataKey(obj, dataKey, defaultValue2) {
      if (isNil$1(obj) || isNil$1(dataKey)) {
        return defaultValue2;
      }
      if (isNumOrStr(dataKey)) {
        return get$2(obj, dataKey, defaultValue2);
      }
      if (isFunction$4(dataKey)) {
        return dataKey(obj);
      }
      return defaultValue2;
    }
    function getDomainOfDataByKey(data, key, type, filterNil) {
      var flattenData = flatMap$1(data, function(entry) {
        return getValueByDataKey(entry, key);
      });
      if (type === "number") {
        var domain = flattenData.filter(function(entry) {
          return isNumber(entry) || parseFloat(entry);
        });
        return domain.length ? [min$1(domain), max$1(domain)] : [Infinity, -Infinity];
      }
      var validateData = filterNil ? flattenData.filter(function(entry) {
        return !isNil$1(entry);
      }) : flattenData;
      return validateData.map(function(entry) {
        return isNumOrStr(entry) || entry instanceof Date ? entry : "";
      });
    }
    var calculateActiveTickIndex = function calculateActiveTickIndex2(coordinate) {
      var _ticks$length;
      var ticks2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
      var unsortedTicks = arguments.length > 2 ? arguments[2] : void 0;
      var axis = arguments.length > 3 ? arguments[3] : void 0;
      var index = -1;
      var len = (_ticks$length = ticks2 === null || ticks2 === void 0 ? void 0 : ticks2.length) !== null && _ticks$length !== void 0 ? _ticks$length : 0;
      if (len <= 1) {
        return 0;
      }
      if (axis && axis.axisType === "angleAxis" && Math.abs(Math.abs(axis.range[1] - axis.range[0]) - 360) <= 1e-6) {
        var range2 = axis.range;
        for (var i2 = 0; i2 < len; i2++) {
          var before = i2 > 0 ? unsortedTicks[i2 - 1].coordinate : unsortedTicks[len - 1].coordinate;
          var cur = unsortedTicks[i2].coordinate;
          var after = i2 >= len - 1 ? unsortedTicks[0].coordinate : unsortedTicks[i2 + 1].coordinate;
          var sameDirectionCoord = void 0;
          if (mathSign(cur - before) !== mathSign(after - cur)) {
            var diffInterval = [];
            if (mathSign(after - cur) === mathSign(range2[1] - range2[0])) {
              sameDirectionCoord = after;
              var curInRange = cur + range2[1] - range2[0];
              diffInterval[0] = Math.min(curInRange, (curInRange + before) / 2);
              diffInterval[1] = Math.max(curInRange, (curInRange + before) / 2);
            } else {
              sameDirectionCoord = before;
              var afterInRange = after + range2[1] - range2[0];
              diffInterval[0] = Math.min(cur, (afterInRange + cur) / 2);
              diffInterval[1] = Math.max(cur, (afterInRange + cur) / 2);
            }
            var sameInterval = [Math.min(cur, (sameDirectionCoord + cur) / 2), Math.max(cur, (sameDirectionCoord + cur) / 2)];
            if (coordinate > sameInterval[0] && coordinate <= sameInterval[1] || coordinate >= diffInterval[0] && coordinate <= diffInterval[1]) {
              index = unsortedTicks[i2].index;
              break;
            }
          } else {
            var minValue = Math.min(before, after);
            var maxValue = Math.max(before, after);
            if (coordinate > (minValue + cur) / 2 && coordinate <= (maxValue + cur) / 2) {
              index = unsortedTicks[i2].index;
              break;
            }
          }
        }
      } else {
        for (var _i2 = 0; _i2 < len; _i2++) {
          if (_i2 === 0 && coordinate <= (ticks2[_i2].coordinate + ticks2[_i2 + 1].coordinate) / 2 || _i2 > 0 && _i2 < len - 1 && coordinate > (ticks2[_i2].coordinate + ticks2[_i2 - 1].coordinate) / 2 && coordinate <= (ticks2[_i2].coordinate + ticks2[_i2 + 1].coordinate) / 2 || _i2 === len - 1 && coordinate > (ticks2[_i2].coordinate + ticks2[_i2 - 1].coordinate) / 2) {
            index = ticks2[_i2].index;
            break;
          }
        }
      }
      return index;
    };
    var getMainColorOfGraphicItem = function getMainColorOfGraphicItem2(item) {
      var _ref = item, displayName = _ref.type.displayName;
      var _item$props = item.props, stroke = _item$props.stroke, fill = _item$props.fill;
      var result;
      switch (displayName) {
        case "Line":
          result = stroke;
          break;
        case "Area":
        case "Radar":
          result = stroke && stroke !== "none" ? stroke : fill;
          break;
        default:
          result = fill;
          break;
      }
      return result;
    };
    var getBarSizeList = function getBarSizeList2(_ref2) {
      var globalSize = _ref2.barSize, _ref2$stackGroups = _ref2.stackGroups, stackGroups = _ref2$stackGroups === void 0 ? {} : _ref2$stackGroups;
      if (!stackGroups) {
        return {};
      }
      var result = {};
      var numericAxisIds = Object.keys(stackGroups);
      for (var i2 = 0, len = numericAxisIds.length; i2 < len; i2++) {
        var sgs = stackGroups[numericAxisIds[i2]].stackGroups;
        var stackIds = Object.keys(sgs);
        for (var j2 = 0, sLen = stackIds.length; j2 < sLen; j2++) {
          var _sgs$stackIds$j = sgs[stackIds[j2]], items = _sgs$stackIds$j.items, cateAxisId = _sgs$stackIds$j.cateAxisId;
          var barItems = items.filter(function(item) {
            return getDisplayName(item.type).indexOf("Bar") >= 0;
          });
          if (barItems && barItems.length) {
            var selfSize = barItems[0].props.barSize;
            var cateId = barItems[0].props[cateAxisId];
            if (!result[cateId]) {
              result[cateId] = [];
            }
            result[cateId].push({
              item: barItems[0],
              stackList: barItems.slice(1),
              barSize: isNil$1(selfSize) ? globalSize : selfSize
            });
          }
        }
      }
      return result;
    };
    var getBarPosition = function getBarPosition2(_ref3) {
      var barGap = _ref3.barGap, barCategoryGap = _ref3.barCategoryGap, bandSize = _ref3.bandSize, _ref3$sizeList = _ref3.sizeList, sizeList = _ref3$sizeList === void 0 ? [] : _ref3$sizeList, maxBarSize = _ref3.maxBarSize;
      var len = sizeList.length;
      if (len < 1)
        return null;
      var realBarGap = getPercentValue(barGap, bandSize, 0, true);
      var result;
      var initialValue = [];
      if (sizeList[0].barSize === +sizeList[0].barSize) {
        var useFull = false;
        var fullBarSize = bandSize / len;
        var sum = sizeList.reduce(function(res, entry) {
          return res + entry.barSize || 0;
        }, 0);
        sum += (len - 1) * realBarGap;
        if (sum >= bandSize) {
          sum -= (len - 1) * realBarGap;
          realBarGap = 0;
        }
        if (sum >= bandSize && fullBarSize > 0) {
          useFull = true;
          fullBarSize *= 0.9;
          sum = len * fullBarSize;
        }
        var offset2 = (bandSize - sum) / 2 >> 0;
        var prev = {
          offset: offset2 - realBarGap,
          size: 0
        };
        result = sizeList.reduce(function(res, entry) {
          var newPosition = {
            item: entry.item,
            position: {
              offset: prev.offset + prev.size + realBarGap,
              // @ts-expect-error the type check above does not check for type number explicitly
              size: useFull ? fullBarSize : entry.barSize
            }
          };
          var newRes = [].concat(_toConsumableArray$7(res), [newPosition]);
          prev = newRes[newRes.length - 1].position;
          if (entry.stackList && entry.stackList.length) {
            entry.stackList.forEach(function(item) {
              newRes.push({
                item,
                position: prev
              });
            });
          }
          return newRes;
        }, initialValue);
      } else {
        var _offset = getPercentValue(barCategoryGap, bandSize, 0, true);
        if (bandSize - 2 * _offset - (len - 1) * realBarGap <= 0) {
          realBarGap = 0;
        }
        var originalSize = (bandSize - 2 * _offset - (len - 1) * realBarGap) / len;
        if (originalSize > 1) {
          originalSize >>= 0;
        }
        var size = maxBarSize === +maxBarSize ? Math.min(originalSize, maxBarSize) : originalSize;
        result = sizeList.reduce(function(res, entry, i2) {
          var newRes = [].concat(_toConsumableArray$7(res), [{
            item: entry.item,
            position: {
              offset: _offset + (originalSize + realBarGap) * i2 + (originalSize - size) / 2,
              size
            }
          }]);
          if (entry.stackList && entry.stackList.length) {
            entry.stackList.forEach(function(item) {
              newRes.push({
                item,
                position: newRes[newRes.length - 1].position
              });
            });
          }
          return newRes;
        }, initialValue);
      }
      return result;
    };
    var appendOffsetOfLegend = function appendOffsetOfLegend2(offset2, _unused, props, legendBox) {
      var children = props.children, width = props.width, margin = props.margin;
      var legendWidth = width - (margin.left || 0) - (margin.right || 0);
      var legendProps = getLegendProps({
        children,
        legendWidth
      });
      if (legendProps) {
        var _ref4 = legendBox || {}, boxWidth = _ref4.width, boxHeight = _ref4.height;
        var align = legendProps.align, verticalAlign = legendProps.verticalAlign, layout = legendProps.layout;
        if ((layout === "vertical" || layout === "horizontal" && verticalAlign === "middle") && align !== "center" && isNumber(offset2[align])) {
          return _objectSpread$p(_objectSpread$p({}, offset2), {}, _defineProperty$q({}, align, offset2[align] + (boxWidth || 0)));
        }
        if ((layout === "horizontal" || layout === "vertical" && align === "center") && verticalAlign !== "middle" && isNumber(offset2[verticalAlign])) {
          return _objectSpread$p(_objectSpread$p({}, offset2), {}, _defineProperty$q({}, verticalAlign, offset2[verticalAlign] + (boxHeight || 0)));
        }
      }
      return offset2;
    };
    var isErrorBarRelevantForAxis = function isErrorBarRelevantForAxis2(layout, axisType, direction) {
      if (isNil$1(axisType)) {
        return true;
      }
      if (layout === "horizontal") {
        return axisType === "yAxis";
      }
      if (layout === "vertical") {
        return axisType === "xAxis";
      }
      if (direction === "x") {
        return axisType === "xAxis";
      }
      if (direction === "y") {
        return axisType === "yAxis";
      }
      return true;
    };
    var getDomainOfErrorBars = function getDomainOfErrorBars2(data, item, dataKey, layout, axisType) {
      var children = item.props.children;
      var errorBars = findAllByType(children, ErrorBar).filter(function(errorBarChild) {
        return isErrorBarRelevantForAxis(layout, axisType, errorBarChild.props.direction);
      });
      if (errorBars && errorBars.length) {
        var keys2 = errorBars.map(function(errorBarChild) {
          return errorBarChild.props.dataKey;
        });
        return data.reduce(function(result, entry) {
          var entryValue = getValueByDataKey(entry, dataKey, 0);
          var mainValue = Array.isArray(entryValue) ? [min$1(entryValue), max$1(entryValue)] : [entryValue, entryValue];
          var errorDomain = keys2.reduce(function(prevErrorArr, k2) {
            var errorValue = getValueByDataKey(entry, k2, 0);
            var lowerValue = mainValue[0] - Math.abs(Array.isArray(errorValue) ? errorValue[0] : errorValue);
            var upperValue = mainValue[1] + Math.abs(Array.isArray(errorValue) ? errorValue[1] : errorValue);
            return [Math.min(lowerValue, prevErrorArr[0]), Math.max(upperValue, prevErrorArr[1])];
          }, [Infinity, -Infinity]);
          return [Math.min(errorDomain[0], result[0]), Math.max(errorDomain[1], result[1])];
        }, [Infinity, -Infinity]);
      }
      return null;
    };
    var parseErrorBarsOfAxis = function parseErrorBarsOfAxis2(data, items, dataKey, axisType, layout) {
      var domains = items.map(function(item) {
        return getDomainOfErrorBars(data, item, dataKey, layout, axisType);
      }).filter(function(entry) {
        return !isNil$1(entry);
      });
      if (domains && domains.length) {
        return domains.reduce(function(result, entry) {
          return [Math.min(result[0], entry[0]), Math.max(result[1], entry[1])];
        }, [Infinity, -Infinity]);
      }
      return null;
    };
    var getDomainOfItemsWithSameAxis = function getDomainOfItemsWithSameAxis2(data, items, type, layout, filterNil) {
      var domains = items.map(function(item) {
        var dataKey = item.props.dataKey;
        if (type === "number" && dataKey) {
          return getDomainOfErrorBars(data, item, dataKey, layout) || getDomainOfDataByKey(data, dataKey, type, filterNil);
        }
        return getDomainOfDataByKey(data, dataKey, type, filterNil);
      });
      if (type === "number") {
        return domains.reduce(
          // @ts-expect-error if (type === number) means that the domain is numerical type
          // - but this link is missing in the type definition
          function(result, entry) {
            return [Math.min(result[0], entry[0]), Math.max(result[1], entry[1])];
          },
          [Infinity, -Infinity]
        );
      }
      var tag = {};
      return domains.reduce(function(result, entry) {
        for (var i2 = 0, len = entry.length; i2 < len; i2++) {
          if (!tag[entry[i2]]) {
            tag[entry[i2]] = true;
            result.push(entry[i2]);
          }
        }
        return result;
      }, []);
    };
    var isCategoricalAxis = function isCategoricalAxis2(layout, axisType) {
      return layout === "horizontal" && axisType === "xAxis" || layout === "vertical" && axisType === "yAxis" || layout === "centric" && axisType === "angleAxis" || layout === "radial" && axisType === "radiusAxis";
    };
    var getCoordinatesOfGrid = function getCoordinatesOfGrid2(ticks2, minValue, maxValue, syncWithTicks) {
      if (syncWithTicks) {
        return ticks2.map(function(entry) {
          return entry.coordinate;
        });
      }
      var hasMin, hasMax;
      var values = ticks2.map(function(entry) {
        if (entry.coordinate === minValue) {
          hasMin = true;
        }
        if (entry.coordinate === maxValue) {
          hasMax = true;
        }
        return entry.coordinate;
      });
      if (!hasMin) {
        values.push(minValue);
      }
      if (!hasMax) {
        values.push(maxValue);
      }
      return values;
    };
    var getTicksOfAxis = function getTicksOfAxis2(axis, isGrid, isAll) {
      if (!axis)
        return null;
      var scale = axis.scale;
      var duplicateDomain = axis.duplicateDomain, type = axis.type, range2 = axis.range;
      var offsetForBand = axis.realScaleType === "scaleBand" ? scale.bandwidth() / 2 : 2;
      var offset2 = (isGrid || isAll) && type === "category" && scale.bandwidth ? scale.bandwidth() / offsetForBand : 0;
      offset2 = axis.axisType === "angleAxis" && (range2 === null || range2 === void 0 ? void 0 : range2.length) >= 2 ? mathSign(range2[0] - range2[1]) * 2 * offset2 : offset2;
      if (isGrid && (axis.ticks || axis.niceTicks)) {
        var result = (axis.ticks || axis.niceTicks).map(function(entry) {
          var scaleContent = duplicateDomain ? duplicateDomain.indexOf(entry) : entry;
          return {
            // If the scaleContent is not a number, the coordinate will be NaN.
            // That could be the case for example with a PointScale and a string as domain.
            coordinate: scale(scaleContent) + offset2,
            value: entry,
            offset: offset2
          };
        });
        return result.filter(function(row) {
          return !isNan(row.coordinate);
        });
      }
      if (axis.isCategorical && axis.categoricalDomain) {
        return axis.categoricalDomain.map(function(entry, index) {
          return {
            coordinate: scale(entry) + offset2,
            value: entry,
            index,
            offset: offset2
          };
        });
      }
      if (scale.ticks && !isAll) {
        return scale.ticks(axis.tickCount).map(function(entry) {
          return {
            coordinate: scale(entry) + offset2,
            value: entry,
            offset: offset2
          };
        });
      }
      return scale.domain().map(function(entry, index) {
        return {
          coordinate: scale(entry) + offset2,
          value: duplicateDomain ? duplicateDomain[entry] : entry,
          index,
          offset: offset2
        };
      });
    };
    var handlerWeakMap = /* @__PURE__ */ new WeakMap();
    var combineEventHandlers = function combineEventHandlers2(defaultHandler, childHandler) {
      if (typeof childHandler !== "function") {
        return defaultHandler;
      }
      if (!handlerWeakMap.has(defaultHandler)) {
        handlerWeakMap.set(defaultHandler, /* @__PURE__ */ new WeakMap());
      }
      var childWeakMap = handlerWeakMap.get(defaultHandler);
      if (childWeakMap.has(childHandler)) {
        return childWeakMap.get(childHandler);
      }
      var combineHandler = function combineHandler2() {
        defaultHandler.apply(void 0, arguments);
        childHandler.apply(void 0, arguments);
      };
      childWeakMap.set(childHandler, combineHandler);
      return combineHandler;
    };
    var parseScale = function parseScale2(axis, chartType, hasBar) {
      var scale = axis.scale, type = axis.type, layout = axis.layout, axisType = axis.axisType;
      if (scale === "auto") {
        if (layout === "radial" && axisType === "radiusAxis") {
          return {
            scale: band(),
            realScaleType: "band"
          };
        }
        if (layout === "radial" && axisType === "angleAxis") {
          return {
            scale: linear(),
            realScaleType: "linear"
          };
        }
        if (type === "category" && chartType && (chartType.indexOf("LineChart") >= 0 || chartType.indexOf("AreaChart") >= 0 || chartType.indexOf("ComposedChart") >= 0 && !hasBar)) {
          return {
            scale: point(),
            realScaleType: "point"
          };
        }
        if (type === "category") {
          return {
            scale: band(),
            realScaleType: "band"
          };
        }
        return {
          scale: linear(),
          realScaleType: "linear"
        };
      }
      if (isString$1(scale)) {
        var name = "scale".concat(upperFirst$1(scale));
        return {
          scale: (d3Scales[name] || point)(),
          realScaleType: d3Scales[name] ? name : "point"
        };
      }
      return isFunction$4(scale) ? {
        scale
      } : {
        scale: point(),
        realScaleType: "point"
      };
    };
    var EPS = 1e-4;
    var checkDomainOfScale = function checkDomainOfScale2(scale) {
      var domain = scale.domain();
      if (!domain || domain.length <= 2) {
        return;
      }
      var len = domain.length;
      var range2 = scale.range();
      var minValue = Math.min(range2[0], range2[1]) - EPS;
      var maxValue = Math.max(range2[0], range2[1]) + EPS;
      var first = scale(domain[0]);
      var last2 = scale(domain[len - 1]);
      if (first < minValue || first > maxValue || last2 < minValue || last2 > maxValue) {
        scale.domain([domain[0], domain[len - 1]]);
      }
    };
    var findPositionOfBar = function findPositionOfBar2(barPosition, child) {
      if (!barPosition) {
        return null;
      }
      for (var i2 = 0, len = barPosition.length; i2 < len; i2++) {
        if (barPosition[i2].item === child) {
          return barPosition[i2].position;
        }
      }
      return null;
    };
    var truncateByDomain = function truncateByDomain2(value2, domain) {
      if (!domain || domain.length !== 2 || !isNumber(domain[0]) || !isNumber(domain[1])) {
        return value2;
      }
      var minValue = Math.min(domain[0], domain[1]);
      var maxValue = Math.max(domain[0], domain[1]);
      var result = [value2[0], value2[1]];
      if (!isNumber(value2[0]) || value2[0] < minValue) {
        result[0] = minValue;
      }
      if (!isNumber(value2[1]) || value2[1] > maxValue) {
        result[1] = maxValue;
      }
      if (result[0] > maxValue) {
        result[0] = maxValue;
      }
      if (result[1] < minValue) {
        result[1] = minValue;
      }
      return result;
    };
    var offsetSign = function offsetSign2(series) {
      var n2 = series.length;
      if (n2 <= 0) {
        return;
      }
      for (var j2 = 0, m2 = series[0].length; j2 < m2; ++j2) {
        var positive = 0;
        var negative = 0;
        for (var i2 = 0; i2 < n2; ++i2) {
          var value2 = isNan(series[i2][j2][1]) ? series[i2][j2][0] : series[i2][j2][1];
          if (value2 >= 0) {
            series[i2][j2][0] = positive;
            series[i2][j2][1] = positive + value2;
            positive = series[i2][j2][1];
          } else {
            series[i2][j2][0] = negative;
            series[i2][j2][1] = negative + value2;
            negative = series[i2][j2][1];
          }
        }
      }
    };
    var offsetPositive = function offsetPositive2(series) {
      var n2 = series.length;
      if (n2 <= 0) {
        return;
      }
      for (var j2 = 0, m2 = series[0].length; j2 < m2; ++j2) {
        var positive = 0;
        for (var i2 = 0; i2 < n2; ++i2) {
          var value2 = isNan(series[i2][j2][1]) ? series[i2][j2][0] : series[i2][j2][1];
          if (value2 >= 0) {
            series[i2][j2][0] = positive;
            series[i2][j2][1] = positive + value2;
            positive = series[i2][j2][1];
          } else {
            series[i2][j2][0] = 0;
            series[i2][j2][1] = 0;
          }
        }
      }
    };
    var STACK_OFFSET_MAP = {
      sign: offsetSign,
      // @ts-expect-error definitelytyped types are incorrect
      expand: stackOffsetExpand,
      // @ts-expect-error definitelytyped types are incorrect
      none: stackOffsetNone,
      // @ts-expect-error definitelytyped types are incorrect
      silhouette: stackOffsetSilhouette,
      // @ts-expect-error definitelytyped types are incorrect
      wiggle: stackOffsetWiggle,
      positive: offsetPositive
    };
    var getStackedData = function getStackedData2(data, stackItems, offsetType) {
      var dataKeys = stackItems.map(function(item) {
        return item.props.dataKey;
      });
      var offsetAccessor = STACK_OFFSET_MAP[offsetType];
      var stack = shapeStack().keys(dataKeys).value(function(d2, key) {
        return +getValueByDataKey(d2, key, 0);
      }).order(stackOrderNone).offset(offsetAccessor);
      return stack(data);
    };
    var getStackGroupsByAxisId = function getStackGroupsByAxisId2(data, _items, numericAxisId, cateAxisId, offsetType, reverseStackOrder) {
      if (!data) {
        return null;
      }
      var items = reverseStackOrder ? _items.reverse() : _items;
      var parentStackGroupsInitialValue = {};
      var stackGroups = items.reduce(function(result, item) {
        var _item$props2 = item.props, stackId = _item$props2.stackId, hide = _item$props2.hide;
        if (hide) {
          return result;
        }
        var axisId = item.props[numericAxisId];
        var parentGroup = result[axisId] || {
          hasStack: false,
          stackGroups: {}
        };
        if (isNumOrStr(stackId)) {
          var childGroup = parentGroup.stackGroups[stackId] || {
            numericAxisId,
            cateAxisId,
            items: []
          };
          childGroup.items.push(item);
          parentGroup.hasStack = true;
          parentGroup.stackGroups[stackId] = childGroup;
        } else {
          parentGroup.stackGroups[uniqueId("_stackId_")] = {
            numericAxisId,
            cateAxisId,
            items: [item]
          };
        }
        return _objectSpread$p(_objectSpread$p({}, result), {}, _defineProperty$q({}, axisId, parentGroup));
      }, parentStackGroupsInitialValue);
      var axisStackGroupsInitialValue = {};
      return Object.keys(stackGroups).reduce(function(result, axisId) {
        var group = stackGroups[axisId];
        if (group.hasStack) {
          var stackGroupsInitialValue = {};
          group.stackGroups = Object.keys(group.stackGroups).reduce(function(res, stackId) {
            var g2 = group.stackGroups[stackId];
            return _objectSpread$p(_objectSpread$p({}, res), {}, _defineProperty$q({}, stackId, {
              numericAxisId,
              cateAxisId,
              items: g2.items,
              stackedData: getStackedData(data, g2.items, offsetType)
            }));
          }, stackGroupsInitialValue);
        }
        return _objectSpread$p(_objectSpread$p({}, result), {}, _defineProperty$q({}, axisId, group));
      }, axisStackGroupsInitialValue);
    };
    var getTicksOfScale = function getTicksOfScale2(scale, opts) {
      var realScaleType = opts.realScaleType, type = opts.type, tickCount = opts.tickCount, originalDomain = opts.originalDomain, allowDecimals = opts.allowDecimals;
      var scaleType = realScaleType || opts.scale;
      if (scaleType !== "auto" && scaleType !== "linear") {
        return null;
      }
      if (tickCount && type === "number" && originalDomain && (originalDomain[0] === "auto" || originalDomain[1] === "auto")) {
        var domain = scale.domain();
        if (!domain.length) {
          return null;
        }
        var tickValues = getNiceTickValues(domain, tickCount, allowDecimals);
        scale.domain([min$1(tickValues), max$1(tickValues)]);
        return {
          niceTicks: tickValues
        };
      }
      if (tickCount && type === "number") {
        var _domain = scale.domain();
        var _tickValues = getTickValuesFixedDomain(_domain, tickCount, allowDecimals);
        return {
          niceTicks: _tickValues
        };
      }
      return null;
    };
    var getCateCoordinateOfBar = function getCateCoordinateOfBar2(_ref6) {
      var axis = _ref6.axis, ticks2 = _ref6.ticks, offset2 = _ref6.offset, bandSize = _ref6.bandSize, entry = _ref6.entry, index = _ref6.index;
      if (axis.type === "category") {
        return ticks2[index] ? ticks2[index].coordinate + offset2 : null;
      }
      var value2 = getValueByDataKey(entry, axis.dataKey, axis.domain[index]);
      return !isNil$1(value2) ? axis.scale(value2) - bandSize / 2 + offset2 : null;
    };
    var getBaseValueOfBar = function getBaseValueOfBar2(_ref7) {
      var numericAxis = _ref7.numericAxis;
      var domain = numericAxis.scale.domain();
      if (numericAxis.type === "number") {
        var minValue = Math.min(domain[0], domain[1]);
        var maxValue = Math.max(domain[0], domain[1]);
        if (minValue <= 0 && maxValue >= 0) {
          return 0;
        }
        if (maxValue < 0) {
          return maxValue;
        }
        return minValue;
      }
      return domain[0];
    };
    var getStackedDataOfItem = function getStackedDataOfItem2(item, stackGroups) {
      var stackId = item.props.stackId;
      if (isNumOrStr(stackId)) {
        var group = stackGroups[stackId];
        if (group) {
          var itemIndex = group.items.indexOf(item);
          return itemIndex >= 0 ? group.stackedData[itemIndex] : null;
        }
      }
      return null;
    };
    var getDomainOfSingle = function getDomainOfSingle2(data) {
      return data.reduce(function(result, entry) {
        return [min$1(entry.concat([result[0]]).filter(isNumber)), max$1(entry.concat([result[1]]).filter(isNumber))];
      }, [Infinity, -Infinity]);
    };
    var getDomainOfStackGroups = function getDomainOfStackGroups2(stackGroups, startIndex, endIndex) {
      return Object.keys(stackGroups).reduce(function(result, stackId) {
        var group = stackGroups[stackId];
        var stackedData = group.stackedData;
        var domain = stackedData.reduce(function(res, entry) {
          var s2 = getDomainOfSingle(entry.slice(startIndex, endIndex + 1));
          return [Math.min(res[0], s2[0]), Math.max(res[1], s2[1])];
        }, [Infinity, -Infinity]);
        return [Math.min(domain[0], result[0]), Math.max(domain[1], result[1])];
      }, [Infinity, -Infinity]).map(function(result) {
        return result === Infinity || result === -Infinity ? 0 : result;
      });
    };
    var MIN_VALUE_REG = /^dataMin[\s]*-[\s]*([0-9]+([.]{1}[0-9]+){0,1})$/;
    var MAX_VALUE_REG = /^dataMax[\s]*\+[\s]*([0-9]+([.]{1}[0-9]+){0,1})$/;
    var parseSpecifiedDomain = function parseSpecifiedDomain2(specifiedDomain, dataDomain, allowDataOverflow) {
      if (isFunction$4(specifiedDomain)) {
        return specifiedDomain(dataDomain, allowDataOverflow);
      }
      if (!Array.isArray(specifiedDomain)) {
        return dataDomain;
      }
      var domain = [];
      if (isNumber(specifiedDomain[0])) {
        domain[0] = allowDataOverflow ? specifiedDomain[0] : Math.min(specifiedDomain[0], dataDomain[0]);
      } else if (MIN_VALUE_REG.test(specifiedDomain[0])) {
        var value2 = +MIN_VALUE_REG.exec(specifiedDomain[0])[1];
        domain[0] = dataDomain[0] - value2;
      } else if (isFunction$4(specifiedDomain[0])) {
        domain[0] = specifiedDomain[0](dataDomain[0]);
      } else {
        domain[0] = dataDomain[0];
      }
      if (isNumber(specifiedDomain[1])) {
        domain[1] = allowDataOverflow ? specifiedDomain[1] : Math.max(specifiedDomain[1], dataDomain[1]);
      } else if (MAX_VALUE_REG.test(specifiedDomain[1])) {
        var _value = +MAX_VALUE_REG.exec(specifiedDomain[1])[1];
        domain[1] = dataDomain[1] + _value;
      } else if (isFunction$4(specifiedDomain[1])) {
        domain[1] = specifiedDomain[1](dataDomain[1]);
      } else {
        domain[1] = dataDomain[1];
      }
      return domain;
    };
    var getBandSizeOfAxis = function getBandSizeOfAxis2(axis, ticks2, isBar) {
      if (axis && axis.scale && axis.scale.bandwidth) {
        var bandWidth = axis.scale.bandwidth();
        if (!isBar || bandWidth > 0) {
          return bandWidth;
        }
      }
      if (axis && ticks2 && ticks2.length >= 2) {
        var orderedTicks = sortBy$1(ticks2, function(o2) {
          return o2.coordinate;
        });
        var bandSize = Infinity;
        for (var i2 = 1, len = orderedTicks.length; i2 < len; i2++) {
          var cur = orderedTicks[i2];
          var prev = orderedTicks[i2 - 1];
          bandSize = Math.min((cur.coordinate || 0) - (prev.coordinate || 0), bandSize);
        }
        return bandSize === Infinity ? 0 : bandSize;
      }
      return isBar ? void 0 : 0;
    };
    var parseDomainOfCategoryAxis = function parseDomainOfCategoryAxis2(specifiedDomain, calculatedDomain, axisChild) {
      if (!specifiedDomain || !specifiedDomain.length) {
        return calculatedDomain;
      }
      if (isEqual$1(specifiedDomain, get$2(axisChild, "type.defaultProps.domain"))) {
        return calculatedDomain;
      }
      return specifiedDomain;
    };
    var getTooltipItem = function getTooltipItem2(graphicalItem, payload) {
      var _graphicalItem$props = graphicalItem.props, dataKey = _graphicalItem$props.dataKey, name = _graphicalItem$props.name, unit2 = _graphicalItem$props.unit, formatter = _graphicalItem$props.formatter, tooltipType = _graphicalItem$props.tooltipType, chartType = _graphicalItem$props.chartType, hide = _graphicalItem$props.hide;
      return _objectSpread$p(_objectSpread$p({}, filterProps(graphicalItem, false)), {}, {
        dataKey,
        unit: unit2,
        formatter,
        name: name || dataKey,
        color: getMainColorOfGraphicItem(graphicalItem),
        value: getValueByDataKey(payload, dataKey),
        type: tooltipType,
        payload,
        chartType,
        hide
      });
    };
    function _typeof$q(o2) {
      "@babel/helpers - typeof";
      return _typeof$q = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
        return typeof o3;
      } : function(o3) {
        return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
      }, _typeof$q(o2);
    }
    function ownKeys$o(e3, r2) {
      var t2 = Object.keys(e3);
      if (Object.getOwnPropertySymbols) {
        var o2 = Object.getOwnPropertySymbols(e3);
        r2 && (o2 = o2.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e3, r3).enumerable;
        })), t2.push.apply(t2, o2);
      }
      return t2;
    }
    function _objectSpread$o(e3) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t2 = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$o(Object(t2), true).forEach(function(r3) {
          _defineProperty$p(e3, r3, t2[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$o(Object(t2)).forEach(function(r3) {
          Object.defineProperty(e3, r3, Object.getOwnPropertyDescriptor(t2, r3));
        });
      }
      return e3;
    }
    function _defineProperty$p(obj, key, value2) {
      key = _toPropertyKey$p(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value: value2, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value2;
      }
      return obj;
    }
    function _toPropertyKey$p(t2) {
      var i2 = _toPrimitive$p(t2, "string");
      return "symbol" == _typeof$q(i2) ? i2 : String(i2);
    }
    function _toPrimitive$p(t2, r2) {
      if ("object" != _typeof$q(t2) || !t2)
        return t2;
      var e3 = t2[Symbol.toPrimitive];
      if (void 0 !== e3) {
        var i2 = e3.call(t2, r2 || "default");
        if ("object" != _typeof$q(i2))
          return i2;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r2 ? String : Number)(t2);
    }
    var RADIAN = Math.PI / 180;
    var radianToDegree = function radianToDegree2(angleInRadian) {
      return angleInRadian * 180 / Math.PI;
    };
    var polarToCartesian = function polarToCartesian2(cx, cy, radius, angle) {
      return {
        x: cx + Math.cos(-RADIAN * angle) * radius,
        y: cy + Math.sin(-RADIAN * angle) * radius
      };
    };
    var distanceBetweenPoints = function distanceBetweenPoints2(point2, anotherPoint) {
      var x1 = point2.x, y1 = point2.y;
      var x2 = anotherPoint.x, y2 = anotherPoint.y;
      return Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));
    };
    var getAngleOfPoint = function getAngleOfPoint2(_ref, _ref2) {
      var x2 = _ref.x, y2 = _ref.y;
      var cx = _ref2.cx, cy = _ref2.cy;
      var radius = distanceBetweenPoints({
        x: x2,
        y: y2
      }, {
        x: cx,
        y: cy
      });
      if (radius <= 0) {
        return {
          radius
        };
      }
      var cos2 = (x2 - cx) / radius;
      var angleInRadian = Math.acos(cos2);
      if (y2 > cy) {
        angleInRadian = 2 * Math.PI - angleInRadian;
      }
      return {
        radius,
        angle: radianToDegree(angleInRadian),
        angleInRadian
      };
    };
    var formatAngleOfSector = function formatAngleOfSector2(_ref3) {
      var startAngle = _ref3.startAngle, endAngle = _ref3.endAngle;
      var startCnt = Math.floor(startAngle / 360);
      var endCnt = Math.floor(endAngle / 360);
      var min2 = Math.min(startCnt, endCnt);
      return {
        startAngle: startAngle - min2 * 360,
        endAngle: endAngle - min2 * 360
      };
    };
    var reverseFormatAngleOfSetor = function reverseFormatAngleOfSetor2(angle, _ref4) {
      var startAngle = _ref4.startAngle, endAngle = _ref4.endAngle;
      var startCnt = Math.floor(startAngle / 360);
      var endCnt = Math.floor(endAngle / 360);
      var min2 = Math.min(startCnt, endCnt);
      return angle + min2 * 360;
    };
    var inRangeOfSector = function inRangeOfSector2(_ref5, sector) {
      var x2 = _ref5.x, y2 = _ref5.y;
      var _getAngleOfPoint = getAngleOfPoint({
        x: x2,
        y: y2
      }, sector), radius = _getAngleOfPoint.radius, angle = _getAngleOfPoint.angle;
      var innerRadius = sector.innerRadius, outerRadius = sector.outerRadius;
      if (radius < innerRadius || radius > outerRadius) {
        return false;
      }
      if (radius === 0) {
        return true;
      }
      var _formatAngleOfSector = formatAngleOfSector(sector), startAngle = _formatAngleOfSector.startAngle, endAngle = _formatAngleOfSector.endAngle;
      var formatAngle = angle;
      var inRange;
      if (startAngle <= endAngle) {
        while (formatAngle > endAngle) {
          formatAngle -= 360;
        }
        while (formatAngle < startAngle) {
          formatAngle += 360;
        }
        inRange = formatAngle >= startAngle && formatAngle <= endAngle;
      } else {
        while (formatAngle > startAngle) {
          formatAngle -= 360;
        }
        while (formatAngle < endAngle) {
          formatAngle += 360;
        }
        inRange = formatAngle >= endAngle && formatAngle <= startAngle;
      }
      if (inRange) {
        return _objectSpread$o(_objectSpread$o({}, sector), {}, {
          radius,
          angle: reverseFormatAngleOfSetor(formatAngle, sector)
        });
      }
      return null;
    };
    function _typeof$p(o2) {
      "@babel/helpers - typeof";
      return _typeof$p = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
        return typeof o3;
      } : function(o3) {
        return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
      }, _typeof$p(o2);
    }
    var _excluded$9 = ["offset"];
    function _toConsumableArray$6(arr) {
      return _arrayWithoutHoles$6(arr) || _iterableToArray$7(arr) || _unsupportedIterableToArray$a(arr) || _nonIterableSpread$6();
    }
    function _nonIterableSpread$6() {
      throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray$a(o2, minLen) {
      if (!o2)
        return;
      if (typeof o2 === "string")
        return _arrayLikeToArray$a(o2, minLen);
      var n2 = Object.prototype.toString.call(o2).slice(8, -1);
      if (n2 === "Object" && o2.constructor)
        n2 = o2.constructor.name;
      if (n2 === "Map" || n2 === "Set")
        return Array.from(o2);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
        return _arrayLikeToArray$a(o2, minLen);
    }
    function _iterableToArray$7(iter) {
      if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
        return Array.from(iter);
    }
    function _arrayWithoutHoles$6(arr) {
      if (Array.isArray(arr))
        return _arrayLikeToArray$a(arr);
    }
    function _arrayLikeToArray$a(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++)
        arr2[i2] = arr[i2];
      return arr2;
    }
    function _objectWithoutProperties$9(source, excluded) {
      if (source == null)
        return {};
      var target = _objectWithoutPropertiesLoose$9(source, excluded);
      var key, i2;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i2 = 0; i2 < sourceSymbolKeys.length; i2++) {
          key = sourceSymbolKeys[i2];
          if (excluded.indexOf(key) >= 0)
            continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key))
            continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose$9(source, excluded) {
      if (source == null)
        return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i2;
      for (i2 = 0; i2 < sourceKeys.length; i2++) {
        key = sourceKeys[i2];
        if (excluded.indexOf(key) >= 0)
          continue;
        target[key] = source[key];
      }
      return target;
    }
    function ownKeys$n(e3, r2) {
      var t2 = Object.keys(e3);
      if (Object.getOwnPropertySymbols) {
        var o2 = Object.getOwnPropertySymbols(e3);
        r2 && (o2 = o2.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e3, r3).enumerable;
        })), t2.push.apply(t2, o2);
      }
      return t2;
    }
    function _objectSpread$n(e3) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t2 = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$n(Object(t2), true).forEach(function(r3) {
          _defineProperty$o(e3, r3, t2[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$n(Object(t2)).forEach(function(r3) {
          Object.defineProperty(e3, r3, Object.getOwnPropertyDescriptor(t2, r3));
        });
      }
      return e3;
    }
    function _defineProperty$o(obj, key, value2) {
      key = _toPropertyKey$o(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value: value2, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value2;
      }
      return obj;
    }
    function _toPropertyKey$o(t2) {
      var i2 = _toPrimitive$o(t2, "string");
      return "symbol" == _typeof$p(i2) ? i2 : String(i2);
    }
    function _toPrimitive$o(t2, r2) {
      if ("object" != _typeof$p(t2) || !t2)
        return t2;
      var e3 = t2[Symbol.toPrimitive];
      if (void 0 !== e3) {
        var i2 = e3.call(t2, r2 || "default");
        if ("object" != _typeof$p(i2))
          return i2;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r2 ? String : Number)(t2);
    }
    function _extends$i() {
      _extends$i = Object.assign ? Object.assign.bind() : function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends$i.apply(this, arguments);
    }
    var getLabel = function getLabel2(props) {
      var value2 = props.value, formatter = props.formatter;
      var label = isNil$1(props.children) ? value2 : props.children;
      if (isFunction$4(formatter)) {
        return formatter(label);
      }
      return label;
    };
    var getDeltaAngle$1 = function getDeltaAngle2(startAngle, endAngle) {
      var sign2 = mathSign(endAngle - startAngle);
      var deltaAngle = Math.min(Math.abs(endAngle - startAngle), 360);
      return sign2 * deltaAngle;
    };
    var renderRadialLabel = function renderRadialLabel2(labelProps, label, attrs) {
      var position = labelProps.position, viewBox = labelProps.viewBox, offset2 = labelProps.offset, className = labelProps.className;
      var _ref = viewBox, cx = _ref.cx, cy = _ref.cy, innerRadius = _ref.innerRadius, outerRadius = _ref.outerRadius, startAngle = _ref.startAngle, endAngle = _ref.endAngle, clockWise = _ref.clockWise;
      var radius = (innerRadius + outerRadius) / 2;
      var deltaAngle = getDeltaAngle$1(startAngle, endAngle);
      var sign2 = deltaAngle >= 0 ? 1 : -1;
      var labelAngle, direction;
      if (position === "insideStart") {
        labelAngle = startAngle + sign2 * offset2;
        direction = clockWise;
      } else if (position === "insideEnd") {
        labelAngle = endAngle - sign2 * offset2;
        direction = !clockWise;
      } else if (position === "end") {
        labelAngle = endAngle + sign2 * offset2;
        direction = clockWise;
      }
      direction = deltaAngle <= 0 ? direction : !direction;
      var startPoint = polarToCartesian(cx, cy, radius, labelAngle);
      var endPoint = polarToCartesian(cx, cy, radius, labelAngle + (direction ? 1 : -1) * 359);
      var path = "M".concat(startPoint.x, ",").concat(startPoint.y, "\n    A").concat(radius, ",").concat(radius, ",0,1,").concat(direction ? 0 : 1, ",\n    ").concat(endPoint.x, ",").concat(endPoint.y);
      var id2 = isNil$1(labelProps.id) ? uniqueId("recharts-radial-line-") : labelProps.id;
      return /* @__PURE__ */ React$1.createElement("text", _extends$i({}, attrs, {
        dominantBaseline: "central",
        className: clsx("recharts-radial-bar-label", className)
      }), /* @__PURE__ */ React$1.createElement("defs", null, /* @__PURE__ */ React$1.createElement("path", {
        id: id2,
        d: path
      })), /* @__PURE__ */ React$1.createElement("textPath", {
        xlinkHref: "#".concat(id2)
      }, label));
    };
    var getAttrsOfPolarLabel = function getAttrsOfPolarLabel2(props) {
      var viewBox = props.viewBox, offset2 = props.offset, position = props.position;
      var _ref2 = viewBox, cx = _ref2.cx, cy = _ref2.cy, innerRadius = _ref2.innerRadius, outerRadius = _ref2.outerRadius, startAngle = _ref2.startAngle, endAngle = _ref2.endAngle;
      var midAngle = (startAngle + endAngle) / 2;
      if (position === "outside") {
        var _polarToCartesian = polarToCartesian(cx, cy, outerRadius + offset2, midAngle), _x = _polarToCartesian.x, _y = _polarToCartesian.y;
        return {
          x: _x,
          y: _y,
          textAnchor: _x >= cx ? "start" : "end",
          verticalAnchor: "middle"
        };
      }
      if (position === "center") {
        return {
          x: cx,
          y: cy,
          textAnchor: "middle",
          verticalAnchor: "middle"
        };
      }
      if (position === "centerTop") {
        return {
          x: cx,
          y: cy,
          textAnchor: "middle",
          verticalAnchor: "start"
        };
      }
      if (position === "centerBottom") {
        return {
          x: cx,
          y: cy,
          textAnchor: "middle",
          verticalAnchor: "end"
        };
      }
      var r2 = (innerRadius + outerRadius) / 2;
      var _polarToCartesian2 = polarToCartesian(cx, cy, r2, midAngle), x2 = _polarToCartesian2.x, y2 = _polarToCartesian2.y;
      return {
        x: x2,
        y: y2,
        textAnchor: "middle",
        verticalAnchor: "middle"
      };
    };
    var getAttrsOfCartesianLabel = function getAttrsOfCartesianLabel2(props) {
      var viewBox = props.viewBox, parentViewBox = props.parentViewBox, offset2 = props.offset, position = props.position;
      var _ref3 = viewBox, x2 = _ref3.x, y2 = _ref3.y, width = _ref3.width, height = _ref3.height;
      var verticalSign = height >= 0 ? 1 : -1;
      var verticalOffset = verticalSign * offset2;
      var verticalEnd = verticalSign > 0 ? "end" : "start";
      var verticalStart = verticalSign > 0 ? "start" : "end";
      var horizontalSign = width >= 0 ? 1 : -1;
      var horizontalOffset = horizontalSign * offset2;
      var horizontalEnd = horizontalSign > 0 ? "end" : "start";
      var horizontalStart = horizontalSign > 0 ? "start" : "end";
      if (position === "top") {
        var attrs = {
          x: x2 + width / 2,
          y: y2 - verticalSign * offset2,
          textAnchor: "middle",
          verticalAnchor: verticalEnd
        };
        return _objectSpread$n(_objectSpread$n({}, attrs), parentViewBox ? {
          height: Math.max(y2 - parentViewBox.y, 0),
          width
        } : {});
      }
      if (position === "bottom") {
        var _attrs = {
          x: x2 + width / 2,
          y: y2 + height + verticalOffset,
          textAnchor: "middle",
          verticalAnchor: verticalStart
        };
        return _objectSpread$n(_objectSpread$n({}, _attrs), parentViewBox ? {
          height: Math.max(parentViewBox.y + parentViewBox.height - (y2 + height), 0),
          width
        } : {});
      }
      if (position === "left") {
        var _attrs2 = {
          x: x2 - horizontalOffset,
          y: y2 + height / 2,
          textAnchor: horizontalEnd,
          verticalAnchor: "middle"
        };
        return _objectSpread$n(_objectSpread$n({}, _attrs2), parentViewBox ? {
          width: Math.max(_attrs2.x - parentViewBox.x, 0),
          height
        } : {});
      }
      if (position === "right") {
        var _attrs3 = {
          x: x2 + width + horizontalOffset,
          y: y2 + height / 2,
          textAnchor: horizontalStart,
          verticalAnchor: "middle"
        };
        return _objectSpread$n(_objectSpread$n({}, _attrs3), parentViewBox ? {
          width: Math.max(parentViewBox.x + parentViewBox.width - _attrs3.x, 0),
          height
        } : {});
      }
      var sizeAttrs = parentViewBox ? {
        width,
        height
      } : {};
      if (position === "insideLeft") {
        return _objectSpread$n({
          x: x2 + horizontalOffset,
          y: y2 + height / 2,
          textAnchor: horizontalStart,
          verticalAnchor: "middle"
        }, sizeAttrs);
      }
      if (position === "insideRight") {
        return _objectSpread$n({
          x: x2 + width - horizontalOffset,
          y: y2 + height / 2,
          textAnchor: horizontalEnd,
          verticalAnchor: "middle"
        }, sizeAttrs);
      }
      if (position === "insideTop") {
        return _objectSpread$n({
          x: x2 + width / 2,
          y: y2 + verticalOffset,
          textAnchor: "middle",
          verticalAnchor: verticalStart
        }, sizeAttrs);
      }
      if (position === "insideBottom") {
        return _objectSpread$n({
          x: x2 + width / 2,
          y: y2 + height - verticalOffset,
          textAnchor: "middle",
          verticalAnchor: verticalEnd
        }, sizeAttrs);
      }
      if (position === "insideTopLeft") {
        return _objectSpread$n({
          x: x2 + horizontalOffset,
          y: y2 + verticalOffset,
          textAnchor: horizontalStart,
          verticalAnchor: verticalStart
        }, sizeAttrs);
      }
      if (position === "insideTopRight") {
        return _objectSpread$n({
          x: x2 + width - horizontalOffset,
          y: y2 + verticalOffset,
          textAnchor: horizontalEnd,
          verticalAnchor: verticalStart
        }, sizeAttrs);
      }
      if (position === "insideBottomLeft") {
        return _objectSpread$n({
          x: x2 + horizontalOffset,
          y: y2 + height - verticalOffset,
          textAnchor: horizontalStart,
          verticalAnchor: verticalEnd
        }, sizeAttrs);
      }
      if (position === "insideBottomRight") {
        return _objectSpread$n({
          x: x2 + width - horizontalOffset,
          y: y2 + height - verticalOffset,
          textAnchor: horizontalEnd,
          verticalAnchor: verticalEnd
        }, sizeAttrs);
      }
      if (isObject$8(position) && (isNumber(position.x) || isPercent(position.x)) && (isNumber(position.y) || isPercent(position.y))) {
        return _objectSpread$n({
          x: x2 + getPercentValue(position.x, width),
          y: y2 + getPercentValue(position.y, height),
          textAnchor: "end",
          verticalAnchor: "end"
        }, sizeAttrs);
      }
      return _objectSpread$n({
        x: x2 + width / 2,
        y: y2 + height / 2,
        textAnchor: "middle",
        verticalAnchor: "middle"
      }, sizeAttrs);
    };
    var isPolar = function isPolar2(viewBox) {
      return "cx" in viewBox && isNumber(viewBox.cx);
    };
    function Label(_ref4) {
      var _ref4$offset = _ref4.offset, offset2 = _ref4$offset === void 0 ? 5 : _ref4$offset, restProps = _objectWithoutProperties$9(_ref4, _excluded$9);
      var props = _objectSpread$n({
        offset: offset2
      }, restProps);
      var viewBox = props.viewBox, position = props.position, value2 = props.value, children = props.children, content = props.content, _props$className = props.className, className = _props$className === void 0 ? "" : _props$className, textBreakAll = props.textBreakAll;
      if (!viewBox || isNil$1(value2) && isNil$1(children) && !/* @__PURE__ */ reactExports.isValidElement(content) && !isFunction$4(content)) {
        return null;
      }
      if (/* @__PURE__ */ reactExports.isValidElement(content)) {
        return /* @__PURE__ */ reactExports.cloneElement(content, props);
      }
      var label;
      if (isFunction$4(content)) {
        label = /* @__PURE__ */ reactExports.createElement(content, props);
        if (/* @__PURE__ */ reactExports.isValidElement(label)) {
          return label;
        }
      } else {
        label = getLabel(props);
      }
      var isPolarLabel = isPolar(viewBox);
      var attrs = filterProps(props, true);
      if (isPolarLabel && (position === "insideStart" || position === "insideEnd" || position === "end")) {
        return renderRadialLabel(props, label, attrs);
      }
      var positionAttrs = isPolarLabel ? getAttrsOfPolarLabel(props) : getAttrsOfCartesianLabel(props);
      return /* @__PURE__ */ React$1.createElement(Text, _extends$i({
        className: clsx("recharts-label", className)
      }, attrs, positionAttrs, {
        breakAll: textBreakAll
      }), label);
    }
    Label.displayName = "Label";
    var parseViewBox = function parseViewBox2(props) {
      var cx = props.cx, cy = props.cy, angle = props.angle, startAngle = props.startAngle, endAngle = props.endAngle, r2 = props.r, radius = props.radius, innerRadius = props.innerRadius, outerRadius = props.outerRadius, x2 = props.x, y2 = props.y, top = props.top, left = props.left, width = props.width, height = props.height, clockWise = props.clockWise, labelViewBox = props.labelViewBox;
      if (labelViewBox) {
        return labelViewBox;
      }
      if (isNumber(width) && isNumber(height)) {
        if (isNumber(x2) && isNumber(y2)) {
          return {
            x: x2,
            y: y2,
            width,
            height
          };
        }
        if (isNumber(top) && isNumber(left)) {
          return {
            x: top,
            y: left,
            width,
            height
          };
        }
      }
      if (isNumber(x2) && isNumber(y2)) {
        return {
          x: x2,
          y: y2,
          width: 0,
          height: 0
        };
      }
      if (isNumber(cx) && isNumber(cy)) {
        return {
          cx,
          cy,
          startAngle: startAngle || angle || 0,
          endAngle: endAngle || angle || 0,
          innerRadius: innerRadius || 0,
          outerRadius: outerRadius || radius || r2 || 0,
          clockWise
        };
      }
      if (props.viewBox) {
        return props.viewBox;
      }
      return {};
    };
    var parseLabel = function parseLabel2(label, viewBox) {
      if (!label) {
        return null;
      }
      if (label === true) {
        return /* @__PURE__ */ React$1.createElement(Label, {
          key: "label-implicit",
          viewBox
        });
      }
      if (isNumOrStr(label)) {
        return /* @__PURE__ */ React$1.createElement(Label, {
          key: "label-implicit",
          viewBox,
          value: label
        });
      }
      if (/* @__PURE__ */ reactExports.isValidElement(label)) {
        if (label.type === Label) {
          return /* @__PURE__ */ reactExports.cloneElement(label, {
            key: "label-implicit",
            viewBox
          });
        }
        return /* @__PURE__ */ React$1.createElement(Label, {
          key: "label-implicit",
          content: label,
          viewBox
        });
      }
      if (isFunction$4(label)) {
        return /* @__PURE__ */ React$1.createElement(Label, {
          key: "label-implicit",
          content: label,
          viewBox
        });
      }
      if (isObject$8(label)) {
        return /* @__PURE__ */ React$1.createElement(Label, _extends$i({
          viewBox
        }, label, {
          key: "label-implicit"
        }));
      }
      return null;
    };
    var renderCallByParent$1 = function renderCallByParent2(parentProps, viewBox) {
      var checkPropsLabel = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
      if (!parentProps || !parentProps.children && checkPropsLabel && !parentProps.label) {
        return null;
      }
      var children = parentProps.children;
      var parentViewBox = parseViewBox(parentProps);
      var explicitChildren = findAllByType(children, Label).map(function(child, index) {
        return /* @__PURE__ */ reactExports.cloneElement(child, {
          viewBox: viewBox || parentViewBox,
          // eslint-disable-next-line react/no-array-index-key
          key: "label-".concat(index)
        });
      });
      if (!checkPropsLabel) {
        return explicitChildren;
      }
      var implicitLabel = parseLabel(parentProps.label, viewBox || parentViewBox);
      return [implicitLabel].concat(_toConsumableArray$6(explicitChildren));
    };
    Label.parseViewBox = parseViewBox;
    Label.renderCallByParent = renderCallByParent$1;
    function last(array2) {
      var length = array2 == null ? 0 : array2.length;
      return length ? array2[length - 1] : void 0;
    }
    var last_1 = last;
    const last$1 = /* @__PURE__ */ getDefaultExportFromCjs(last_1);
    function _typeof$o(o2) {
      "@babel/helpers - typeof";
      return _typeof$o = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
        return typeof o3;
      } : function(o3) {
        return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
      }, _typeof$o(o2);
    }
    var _excluded$8 = ["valueAccessor"], _excluded2$3 = ["data", "dataKey", "clockWise", "id", "textBreakAll"];
    function _toConsumableArray$5(arr) {
      return _arrayWithoutHoles$5(arr) || _iterableToArray$6(arr) || _unsupportedIterableToArray$9(arr) || _nonIterableSpread$5();
    }
    function _nonIterableSpread$5() {
      throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray$9(o2, minLen) {
      if (!o2)
        return;
      if (typeof o2 === "string")
        return _arrayLikeToArray$9(o2, minLen);
      var n2 = Object.prototype.toString.call(o2).slice(8, -1);
      if (n2 === "Object" && o2.constructor)
        n2 = o2.constructor.name;
      if (n2 === "Map" || n2 === "Set")
        return Array.from(o2);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
        return _arrayLikeToArray$9(o2, minLen);
    }
    function _iterableToArray$6(iter) {
      if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
        return Array.from(iter);
    }
    function _arrayWithoutHoles$5(arr) {
      if (Array.isArray(arr))
        return _arrayLikeToArray$9(arr);
    }
    function _arrayLikeToArray$9(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++)
        arr2[i2] = arr[i2];
      return arr2;
    }
    function _extends$h() {
      _extends$h = Object.assign ? Object.assign.bind() : function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends$h.apply(this, arguments);
    }
    function ownKeys$m(e3, r2) {
      var t2 = Object.keys(e3);
      if (Object.getOwnPropertySymbols) {
        var o2 = Object.getOwnPropertySymbols(e3);
        r2 && (o2 = o2.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e3, r3).enumerable;
        })), t2.push.apply(t2, o2);
      }
      return t2;
    }
    function _objectSpread$m(e3) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t2 = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$m(Object(t2), true).forEach(function(r3) {
          _defineProperty$n(e3, r3, t2[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$m(Object(t2)).forEach(function(r3) {
          Object.defineProperty(e3, r3, Object.getOwnPropertyDescriptor(t2, r3));
        });
      }
      return e3;
    }
    function _defineProperty$n(obj, key, value2) {
      key = _toPropertyKey$n(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value: value2, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value2;
      }
      return obj;
    }
    function _toPropertyKey$n(t2) {
      var i2 = _toPrimitive$n(t2, "string");
      return "symbol" == _typeof$o(i2) ? i2 : String(i2);
    }
    function _toPrimitive$n(t2, r2) {
      if ("object" != _typeof$o(t2) || !t2)
        return t2;
      var e3 = t2[Symbol.toPrimitive];
      if (void 0 !== e3) {
        var i2 = e3.call(t2, r2 || "default");
        if ("object" != _typeof$o(i2))
          return i2;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r2 ? String : Number)(t2);
    }
    function _objectWithoutProperties$8(source, excluded) {
      if (source == null)
        return {};
      var target = _objectWithoutPropertiesLoose$8(source, excluded);
      var key, i2;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i2 = 0; i2 < sourceSymbolKeys.length; i2++) {
          key = sourceSymbolKeys[i2];
          if (excluded.indexOf(key) >= 0)
            continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key))
            continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose$8(source, excluded) {
      if (source == null)
        return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i2;
      for (i2 = 0; i2 < sourceKeys.length; i2++) {
        key = sourceKeys[i2];
        if (excluded.indexOf(key) >= 0)
          continue;
        target[key] = source[key];
      }
      return target;
    }
    var defaultAccessor = function defaultAccessor2(entry) {
      return Array.isArray(entry.value) ? last$1(entry.value) : entry.value;
    };
    function LabelList(_ref) {
      var _ref$valueAccessor = _ref.valueAccessor, valueAccessor = _ref$valueAccessor === void 0 ? defaultAccessor : _ref$valueAccessor, restProps = _objectWithoutProperties$8(_ref, _excluded$8);
      var data = restProps.data, dataKey = restProps.dataKey, clockWise = restProps.clockWise, id2 = restProps.id, textBreakAll = restProps.textBreakAll, others = _objectWithoutProperties$8(restProps, _excluded2$3);
      if (!data || !data.length) {
        return null;
      }
      return /* @__PURE__ */ React$1.createElement(Layer, {
        className: "recharts-label-list"
      }, data.map(function(entry, index) {
        var value2 = isNil$1(dataKey) ? valueAccessor(entry, index) : getValueByDataKey(entry && entry.payload, dataKey);
        var idProps = isNil$1(id2) ? {} : {
          id: "".concat(id2, "-").concat(index)
        };
        return /* @__PURE__ */ React$1.createElement(Label, _extends$h({}, filterProps(entry, true), others, idProps, {
          parentViewBox: entry.parentViewBox,
          value: value2,
          textBreakAll,
          viewBox: Label.parseViewBox(isNil$1(clockWise) ? entry : _objectSpread$m(_objectSpread$m({}, entry), {}, {
            clockWise
          })),
          key: "label-".concat(index),
          index
        }));
      }));
    }
    LabelList.displayName = "LabelList";
    function parseLabelList(label, data) {
      if (!label) {
        return null;
      }
      if (label === true) {
        return /* @__PURE__ */ React$1.createElement(LabelList, {
          key: "labelList-implicit",
          data
        });
      }
      if (/* @__PURE__ */ React$1.isValidElement(label) || isFunction$4(label)) {
        return /* @__PURE__ */ React$1.createElement(LabelList, {
          key: "labelList-implicit",
          data,
          content: label
        });
      }
      if (isObject$8(label)) {
        return /* @__PURE__ */ React$1.createElement(LabelList, _extends$h({
          data
        }, label, {
          key: "labelList-implicit"
        }));
      }
      return null;
    }
    function renderCallByParent(parentProps, data) {
      var checkPropsLabel = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
      if (!parentProps || !parentProps.children && checkPropsLabel && !parentProps.label) {
        return null;
      }
      var children = parentProps.children;
      var explicitChildren = findAllByType(children, LabelList).map(function(child, index) {
        return /* @__PURE__ */ reactExports.cloneElement(child, {
          data,
          // eslint-disable-next-line react/no-array-index-key
          key: "labelList-".concat(index)
        });
      });
      if (!checkPropsLabel) {
        return explicitChildren;
      }
      var implicitLabelList = parseLabelList(parentProps.label, data);
      return [implicitLabelList].concat(_toConsumableArray$5(explicitChildren));
    }
    LabelList.renderCallByParent = renderCallByParent;
    function _typeof$n(o2) {
      "@babel/helpers - typeof";
      return _typeof$n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
        return typeof o3;
      } : function(o3) {
        return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
      }, _typeof$n(o2);
    }
    function _extends$g() {
      _extends$g = Object.assign ? Object.assign.bind() : function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends$g.apply(this, arguments);
    }
    function ownKeys$l(e3, r2) {
      var t2 = Object.keys(e3);
      if (Object.getOwnPropertySymbols) {
        var o2 = Object.getOwnPropertySymbols(e3);
        r2 && (o2 = o2.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e3, r3).enumerable;
        })), t2.push.apply(t2, o2);
      }
      return t2;
    }
    function _objectSpread$l(e3) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t2 = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$l(Object(t2), true).forEach(function(r3) {
          _defineProperty$m(e3, r3, t2[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$l(Object(t2)).forEach(function(r3) {
          Object.defineProperty(e3, r3, Object.getOwnPropertyDescriptor(t2, r3));
        });
      }
      return e3;
    }
    function _defineProperty$m(obj, key, value2) {
      key = _toPropertyKey$m(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value: value2, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value2;
      }
      return obj;
    }
    function _toPropertyKey$m(t2) {
      var i2 = _toPrimitive$m(t2, "string");
      return "symbol" == _typeof$n(i2) ? i2 : String(i2);
    }
    function _toPrimitive$m(t2, r2) {
      if ("object" != _typeof$n(t2) || !t2)
        return t2;
      var e3 = t2[Symbol.toPrimitive];
      if (void 0 !== e3) {
        var i2 = e3.call(t2, r2 || "default");
        if ("object" != _typeof$n(i2))
          return i2;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r2 ? String : Number)(t2);
    }
    var getDeltaAngle = function getDeltaAngle2(startAngle, endAngle) {
      var sign2 = mathSign(endAngle - startAngle);
      var deltaAngle = Math.min(Math.abs(endAngle - startAngle), 359.999);
      return sign2 * deltaAngle;
    };
    var getTangentCircle = function getTangentCircle2(_ref) {
      var cx = _ref.cx, cy = _ref.cy, radius = _ref.radius, angle = _ref.angle, sign2 = _ref.sign, isExternal = _ref.isExternal, cornerRadius = _ref.cornerRadius, cornerIsExternal = _ref.cornerIsExternal;
      var centerRadius = cornerRadius * (isExternal ? 1 : -1) + radius;
      var theta = Math.asin(cornerRadius / centerRadius) / RADIAN;
      var centerAngle = cornerIsExternal ? angle : angle + sign2 * theta;
      var center = polarToCartesian(cx, cy, centerRadius, centerAngle);
      var circleTangency = polarToCartesian(cx, cy, radius, centerAngle);
      var lineTangencyAngle = cornerIsExternal ? angle - sign2 * theta : angle;
      var lineTangency = polarToCartesian(cx, cy, centerRadius * Math.cos(theta * RADIAN), lineTangencyAngle);
      return {
        center,
        circleTangency,
        lineTangency,
        theta
      };
    };
    var getSectorPath = function getSectorPath2(_ref2) {
      var cx = _ref2.cx, cy = _ref2.cy, innerRadius = _ref2.innerRadius, outerRadius = _ref2.outerRadius, startAngle = _ref2.startAngle, endAngle = _ref2.endAngle;
      var angle = getDeltaAngle(startAngle, endAngle);
      var tempEndAngle = startAngle + angle;
      var outerStartPoint = polarToCartesian(cx, cy, outerRadius, startAngle);
      var outerEndPoint = polarToCartesian(cx, cy, outerRadius, tempEndAngle);
      var path = "M ".concat(outerStartPoint.x, ",").concat(outerStartPoint.y, "\n    A ").concat(outerRadius, ",").concat(outerRadius, ",0,\n    ").concat(+(Math.abs(angle) > 180), ",").concat(+(startAngle > tempEndAngle), ",\n    ").concat(outerEndPoint.x, ",").concat(outerEndPoint.y, "\n  ");
      if (innerRadius > 0) {
        var innerStartPoint = polarToCartesian(cx, cy, innerRadius, startAngle);
        var innerEndPoint = polarToCartesian(cx, cy, innerRadius, tempEndAngle);
        path += "L ".concat(innerEndPoint.x, ",").concat(innerEndPoint.y, "\n            A ").concat(innerRadius, ",").concat(innerRadius, ",0,\n            ").concat(+(Math.abs(angle) > 180), ",").concat(+(startAngle <= tempEndAngle), ",\n            ").concat(innerStartPoint.x, ",").concat(innerStartPoint.y, " Z");
      } else {
        path += "L ".concat(cx, ",").concat(cy, " Z");
      }
      return path;
    };
    var getSectorWithCorner = function getSectorWithCorner2(_ref3) {
      var cx = _ref3.cx, cy = _ref3.cy, innerRadius = _ref3.innerRadius, outerRadius = _ref3.outerRadius, cornerRadius = _ref3.cornerRadius, forceCornerRadius = _ref3.forceCornerRadius, cornerIsExternal = _ref3.cornerIsExternal, startAngle = _ref3.startAngle, endAngle = _ref3.endAngle;
      var sign2 = mathSign(endAngle - startAngle);
      var _getTangentCircle = getTangentCircle({
        cx,
        cy,
        radius: outerRadius,
        angle: startAngle,
        sign: sign2,
        cornerRadius,
        cornerIsExternal
      }), soct = _getTangentCircle.circleTangency, solt = _getTangentCircle.lineTangency, sot = _getTangentCircle.theta;
      var _getTangentCircle2 = getTangentCircle({
        cx,
        cy,
        radius: outerRadius,
        angle: endAngle,
        sign: -sign2,
        cornerRadius,
        cornerIsExternal
      }), eoct = _getTangentCircle2.circleTangency, eolt = _getTangentCircle2.lineTangency, eot = _getTangentCircle2.theta;
      var outerArcAngle = cornerIsExternal ? Math.abs(startAngle - endAngle) : Math.abs(startAngle - endAngle) - sot - eot;
      if (outerArcAngle < 0) {
        if (forceCornerRadius) {
          return "M ".concat(solt.x, ",").concat(solt.y, "\n        a").concat(cornerRadius, ",").concat(cornerRadius, ",0,0,1,").concat(cornerRadius * 2, ",0\n        a").concat(cornerRadius, ",").concat(cornerRadius, ",0,0,1,").concat(-cornerRadius * 2, ",0\n      ");
        }
        return getSectorPath({
          cx,
          cy,
          innerRadius,
          outerRadius,
          startAngle,
          endAngle
        });
      }
      var path = "M ".concat(solt.x, ",").concat(solt.y, "\n    A").concat(cornerRadius, ",").concat(cornerRadius, ",0,0,").concat(+(sign2 < 0), ",").concat(soct.x, ",").concat(soct.y, "\n    A").concat(outerRadius, ",").concat(outerRadius, ",0,").concat(+(outerArcAngle > 180), ",").concat(+(sign2 < 0), ",").concat(eoct.x, ",").concat(eoct.y, "\n    A").concat(cornerRadius, ",").concat(cornerRadius, ",0,0,").concat(+(sign2 < 0), ",").concat(eolt.x, ",").concat(eolt.y, "\n  ");
      if (innerRadius > 0) {
        var _getTangentCircle3 = getTangentCircle({
          cx,
          cy,
          radius: innerRadius,
          angle: startAngle,
          sign: sign2,
          isExternal: true,
          cornerRadius,
          cornerIsExternal
        }), sict = _getTangentCircle3.circleTangency, silt = _getTangentCircle3.lineTangency, sit = _getTangentCircle3.theta;
        var _getTangentCircle4 = getTangentCircle({
          cx,
          cy,
          radius: innerRadius,
          angle: endAngle,
          sign: -sign2,
          isExternal: true,
          cornerRadius,
          cornerIsExternal
        }), eict = _getTangentCircle4.circleTangency, eilt = _getTangentCircle4.lineTangency, eit = _getTangentCircle4.theta;
        var innerArcAngle = cornerIsExternal ? Math.abs(startAngle - endAngle) : Math.abs(startAngle - endAngle) - sit - eit;
        if (innerArcAngle < 0 && cornerRadius === 0) {
          return "".concat(path, "L").concat(cx, ",").concat(cy, "Z");
        }
        path += "L".concat(eilt.x, ",").concat(eilt.y, "\n      A").concat(cornerRadius, ",").concat(cornerRadius, ",0,0,").concat(+(sign2 < 0), ",").concat(eict.x, ",").concat(eict.y, "\n      A").concat(innerRadius, ",").concat(innerRadius, ",0,").concat(+(innerArcAngle > 180), ",").concat(+(sign2 > 0), ",").concat(sict.x, ",").concat(sict.y, "\n      A").concat(cornerRadius, ",").concat(cornerRadius, ",0,0,").concat(+(sign2 < 0), ",").concat(silt.x, ",").concat(silt.y, "Z");
      } else {
        path += "L".concat(cx, ",").concat(cy, "Z");
      }
      return path;
    };
    var defaultProps$3 = {
      cx: 0,
      cy: 0,
      innerRadius: 0,
      outerRadius: 0,
      startAngle: 0,
      endAngle: 0,
      cornerRadius: 0,
      forceCornerRadius: false,
      cornerIsExternal: false
    };
    var Sector = function Sector2(sectorProps) {
      var props = _objectSpread$l(_objectSpread$l({}, defaultProps$3), sectorProps);
      var cx = props.cx, cy = props.cy, innerRadius = props.innerRadius, outerRadius = props.outerRadius, cornerRadius = props.cornerRadius, forceCornerRadius = props.forceCornerRadius, cornerIsExternal = props.cornerIsExternal, startAngle = props.startAngle, endAngle = props.endAngle, className = props.className;
      if (outerRadius < innerRadius || startAngle === endAngle) {
        return null;
      }
      var layerClass = clsx("recharts-sector", className);
      var deltaRadius = outerRadius - innerRadius;
      var cr = getPercentValue(cornerRadius, deltaRadius, 0, true);
      var path;
      if (cr > 0 && Math.abs(startAngle - endAngle) < 360) {
        path = getSectorWithCorner({
          cx,
          cy,
          innerRadius,
          outerRadius,
          cornerRadius: Math.min(cr, deltaRadius / 2),
          forceCornerRadius,
          cornerIsExternal,
          startAngle,
          endAngle
        });
      } else {
        path = getSectorPath({
          cx,
          cy,
          innerRadius,
          outerRadius,
          startAngle,
          endAngle
        });
      }
      return /* @__PURE__ */ React$1.createElement("path", _extends$g({}, filterProps(props, true), {
        className: layerClass,
        d: path,
        role: "img"
      }));
    };
    function _typeof$m(o2) {
      "@babel/helpers - typeof";
      return _typeof$m = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
        return typeof o3;
      } : function(o3) {
        return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
      }, _typeof$m(o2);
    }
    function _extends$f() {
      _extends$f = Object.assign ? Object.assign.bind() : function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends$f.apply(this, arguments);
    }
    function ownKeys$k(e3, r2) {
      var t2 = Object.keys(e3);
      if (Object.getOwnPropertySymbols) {
        var o2 = Object.getOwnPropertySymbols(e3);
        r2 && (o2 = o2.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e3, r3).enumerable;
        })), t2.push.apply(t2, o2);
      }
      return t2;
    }
    function _objectSpread$k(e3) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t2 = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$k(Object(t2), true).forEach(function(r3) {
          _defineProperty$l(e3, r3, t2[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$k(Object(t2)).forEach(function(r3) {
          Object.defineProperty(e3, r3, Object.getOwnPropertyDescriptor(t2, r3));
        });
      }
      return e3;
    }
    function _defineProperty$l(obj, key, value2) {
      key = _toPropertyKey$l(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value: value2, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value2;
      }
      return obj;
    }
    function _toPropertyKey$l(t2) {
      var i2 = _toPrimitive$l(t2, "string");
      return "symbol" == _typeof$m(i2) ? i2 : String(i2);
    }
    function _toPrimitive$l(t2, r2) {
      if ("object" != _typeof$m(t2) || !t2)
        return t2;
      var e3 = t2[Symbol.toPrimitive];
      if (void 0 !== e3) {
        var i2 = e3.call(t2, r2 || "default");
        if ("object" != _typeof$m(i2))
          return i2;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r2 ? String : Number)(t2);
    }
    var CURVE_FACTORIES = {
      curveBasisClosed,
      curveBasisOpen,
      curveBasis,
      curveBumpX: bumpX,
      curveBumpY: bumpY,
      curveLinearClosed,
      curveLinear,
      curveMonotoneX: monotoneX,
      curveMonotoneY: monotoneY,
      curveNatural,
      curveStep,
      curveStepAfter: stepAfter,
      curveStepBefore: stepBefore
    };
    var defined = function defined2(p2) {
      return p2.x === +p2.x && p2.y === +p2.y;
    };
    var getX = function getX2(p2) {
      return p2.x;
    };
    var getY = function getY2(p2) {
      return p2.y;
    };
    var getCurveFactory = function getCurveFactory2(type, layout) {
      if (isFunction$4(type)) {
        return type;
      }
      var name = "curve".concat(upperFirst$1(type));
      if ((name === "curveMonotone" || name === "curveBump") && layout) {
        return CURVE_FACTORIES["".concat(name).concat(layout === "vertical" ? "Y" : "X")];
      }
      return CURVE_FACTORIES[name] || curveLinear;
    };
    var getPath$1 = function getPath2(_ref) {
      var _ref$type = _ref.type, type = _ref$type === void 0 ? "linear" : _ref$type, _ref$points = _ref.points, points = _ref$points === void 0 ? [] : _ref$points, baseLine = _ref.baseLine, layout = _ref.layout, _ref$connectNulls = _ref.connectNulls, connectNulls = _ref$connectNulls === void 0 ? false : _ref$connectNulls;
      var curveFactory = getCurveFactory(type, layout);
      var formatPoints = connectNulls ? points.filter(function(entry) {
        return defined(entry);
      }) : points;
      var lineFunction;
      if (Array.isArray(baseLine)) {
        var formatBaseLine = connectNulls ? baseLine.filter(function(base) {
          return defined(base);
        }) : baseLine;
        var areaPoints = formatPoints.map(function(entry, index) {
          return _objectSpread$k(_objectSpread$k({}, entry), {}, {
            base: formatBaseLine[index]
          });
        });
        if (layout === "vertical") {
          lineFunction = shapeArea().y(getY).x1(getX).x0(function(d2) {
            return d2.base.x;
          });
        } else {
          lineFunction = shapeArea().x(getX).y1(getY).y0(function(d2) {
            return d2.base.y;
          });
        }
        lineFunction.defined(defined).curve(curveFactory);
        return lineFunction(areaPoints);
      }
      if (layout === "vertical" && isNumber(baseLine)) {
        lineFunction = shapeArea().y(getY).x1(getX).x0(baseLine);
      } else if (isNumber(baseLine)) {
        lineFunction = shapeArea().x(getX).y1(getY).y0(baseLine);
      } else {
        lineFunction = shapeLine().x(getX).y(getY);
      }
      lineFunction.defined(defined).curve(curveFactory);
      return lineFunction(formatPoints);
    };
    var Curve = function Curve2(props) {
      var className = props.className, points = props.points, path = props.path, pathRef = props.pathRef;
      if ((!points || !points.length) && !path) {
        return null;
      }
      var realPath = points && points.length ? getPath$1(props) : path;
      return /* @__PURE__ */ React$1.createElement("path", _extends$f({}, filterProps(props, false), adaptEventHandlers(props), {
        className: clsx("recharts-curve", className),
        d: realPath,
        ref: pathRef
      }));
    };
    var propTypes = { exports: {} };
    var ReactPropTypesSecret$1 = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
    var ReactPropTypesSecret_1 = ReactPropTypesSecret$1;
    var ReactPropTypesSecret = ReactPropTypesSecret_1;
    function emptyFunction() {
    }
    function emptyFunctionWithReset() {
    }
    emptyFunctionWithReset.resetWarningCache = emptyFunction;
    var factoryWithThrowingShims = function() {
      function shim(props, propName, componentName, location2, propFullName, secret) {
        if (secret === ReactPropTypesSecret) {
          return;
        }
        var err = new Error(
          "Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types"
        );
        err.name = "Invariant Violation";
        throw err;
      }
      shim.isRequired = shim;
      function getShim() {
        return shim;
      }
      var ReactPropTypes = {
        array: shim,
        bigint: shim,
        bool: shim,
        func: shim,
        number: shim,
        object: shim,
        string: shim,
        symbol: shim,
        any: shim,
        arrayOf: getShim,
        element: shim,
        elementType: shim,
        instanceOf: getShim,
        node: shim,
        objectOf: getShim,
        oneOf: getShim,
        oneOfType: getShim,
        shape: getShim,
        exact: getShim,
        checkPropTypes: emptyFunctionWithReset,
        resetWarningCache: emptyFunction
      };
      ReactPropTypes.PropTypes = ReactPropTypes;
      return ReactPropTypes;
    };
    {
      propTypes.exports = factoryWithThrowingShims();
    }
    var propTypesExports = propTypes.exports;
    const PropTypes = /* @__PURE__ */ getDefaultExportFromCjs(propTypesExports);
    var getOwnPropertyNames = Object.getOwnPropertyNames, getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var hasOwnProperty$1 = Object.prototype.hasOwnProperty;
    function combineComparators(comparatorA, comparatorB) {
      return function isEqual2(a2, b2, state) {
        return comparatorA(a2, b2, state) && comparatorB(a2, b2, state);
      };
    }
    function createIsCircular(areItemsEqual) {
      return function isCircular(a2, b2, state) {
        if (!a2 || !b2 || typeof a2 !== "object" || typeof b2 !== "object") {
          return areItemsEqual(a2, b2, state);
        }
        var cache2 = state.cache;
        var cachedA = cache2.get(a2);
        var cachedB = cache2.get(b2);
        if (cachedA && cachedB) {
          return cachedA === b2 && cachedB === a2;
        }
        cache2.set(a2, b2);
        cache2.set(b2, a2);
        var result = areItemsEqual(a2, b2, state);
        cache2.delete(a2);
        cache2.delete(b2);
        return result;
      };
    }
    function getStrictProperties(object2) {
      return getOwnPropertyNames(object2).concat(getOwnPropertySymbols(object2));
    }
    var hasOwn = Object.hasOwn || function(object2, property2) {
      return hasOwnProperty$1.call(object2, property2);
    };
    function sameValueZeroEqual(a2, b2) {
      return a2 || b2 ? a2 === b2 : a2 === b2 || a2 !== a2 && b2 !== b2;
    }
    var OWNER = "_owner";
    var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor, keys$1 = Object.keys;
    function areArraysEqual(a2, b2, state) {
      var index = a2.length;
      if (b2.length !== index) {
        return false;
      }
      while (index-- > 0) {
        if (!state.equals(a2[index], b2[index], index, index, a2, b2, state)) {
          return false;
        }
      }
      return true;
    }
    function areDatesEqual(a2, b2) {
      return sameValueZeroEqual(a2.getTime(), b2.getTime());
    }
    function areMapsEqual(a2, b2, state) {
      if (a2.size !== b2.size) {
        return false;
      }
      var matchedIndices = {};
      var aIterable = a2.entries();
      var index = 0;
      var aResult;
      var bResult;
      while (aResult = aIterable.next()) {
        if (aResult.done) {
          break;
        }
        var bIterable = b2.entries();
        var hasMatch = false;
        var matchIndex = 0;
        while (bResult = bIterable.next()) {
          if (bResult.done) {
            break;
          }
          var _a2 = aResult.value, aKey = _a2[0], aValue = _a2[1];
          var _b2 = bResult.value, bKey = _b2[0], bValue = _b2[1];
          if (!hasMatch && !matchedIndices[matchIndex] && (hasMatch = state.equals(aKey, bKey, index, matchIndex, a2, b2, state) && state.equals(aValue, bValue, aKey, bKey, a2, b2, state))) {
            matchedIndices[matchIndex] = true;
          }
          matchIndex++;
        }
        if (!hasMatch) {
          return false;
        }
        index++;
      }
      return true;
    }
    function areObjectsEqual(a2, b2, state) {
      var properties2 = keys$1(a2);
      var index = properties2.length;
      if (keys$1(b2).length !== index) {
        return false;
      }
      var property2;
      while (index-- > 0) {
        property2 = properties2[index];
        if (property2 === OWNER && (a2.$$typeof || b2.$$typeof) && a2.$$typeof !== b2.$$typeof) {
          return false;
        }
        if (!hasOwn(b2, property2) || !state.equals(a2[property2], b2[property2], property2, property2, a2, b2, state)) {
          return false;
        }
      }
      return true;
    }
    function areObjectsEqualStrict(a2, b2, state) {
      var properties2 = getStrictProperties(a2);
      var index = properties2.length;
      if (getStrictProperties(b2).length !== index) {
        return false;
      }
      var property2;
      var descriptorA;
      var descriptorB;
      while (index-- > 0) {
        property2 = properties2[index];
        if (property2 === OWNER && (a2.$$typeof || b2.$$typeof) && a2.$$typeof !== b2.$$typeof) {
          return false;
        }
        if (!hasOwn(b2, property2)) {
          return false;
        }
        if (!state.equals(a2[property2], b2[property2], property2, property2, a2, b2, state)) {
          return false;
        }
        descriptorA = getOwnPropertyDescriptor(a2, property2);
        descriptorB = getOwnPropertyDescriptor(b2, property2);
        if ((descriptorA || descriptorB) && (!descriptorA || !descriptorB || descriptorA.configurable !== descriptorB.configurable || descriptorA.enumerable !== descriptorB.enumerable || descriptorA.writable !== descriptorB.writable)) {
          return false;
        }
      }
      return true;
    }
    function arePrimitiveWrappersEqual(a2, b2) {
      return sameValueZeroEqual(a2.valueOf(), b2.valueOf());
    }
    function areRegExpsEqual(a2, b2) {
      return a2.source === b2.source && a2.flags === b2.flags;
    }
    function areSetsEqual(a2, b2, state) {
      if (a2.size !== b2.size) {
        return false;
      }
      var matchedIndices = {};
      var aIterable = a2.values();
      var aResult;
      var bResult;
      while (aResult = aIterable.next()) {
        if (aResult.done) {
          break;
        }
        var bIterable = b2.values();
        var hasMatch = false;
        var matchIndex = 0;
        while (bResult = bIterable.next()) {
          if (bResult.done) {
            break;
          }
          if (!hasMatch && !matchedIndices[matchIndex] && (hasMatch = state.equals(aResult.value, bResult.value, aResult.value, bResult.value, a2, b2, state))) {
            matchedIndices[matchIndex] = true;
          }
          matchIndex++;
        }
        if (!hasMatch) {
          return false;
        }
      }
      return true;
    }
    function areTypedArraysEqual(a2, b2) {
      var index = a2.length;
      if (b2.length !== index) {
        return false;
      }
      while (index-- > 0) {
        if (a2[index] !== b2[index]) {
          return false;
        }
      }
      return true;
    }
    var ARGUMENTS_TAG = "[object Arguments]";
    var BOOLEAN_TAG = "[object Boolean]";
    var DATE_TAG = "[object Date]";
    var MAP_TAG = "[object Map]";
    var NUMBER_TAG = "[object Number]";
    var OBJECT_TAG = "[object Object]";
    var REG_EXP_TAG = "[object RegExp]";
    var SET_TAG = "[object Set]";
    var STRING_TAG = "[object String]";
    var isArray$2 = Array.isArray;
    var isTypedArray = typeof ArrayBuffer === "function" && ArrayBuffer.isView ? ArrayBuffer.isView : null;
    var assign = Object.assign;
    var getTag = Object.prototype.toString.call.bind(Object.prototype.toString);
    function createEqualityComparator(_a2) {
      var areArraysEqual2 = _a2.areArraysEqual, areDatesEqual2 = _a2.areDatesEqual, areMapsEqual2 = _a2.areMapsEqual, areObjectsEqual2 = _a2.areObjectsEqual, arePrimitiveWrappersEqual2 = _a2.arePrimitiveWrappersEqual, areRegExpsEqual2 = _a2.areRegExpsEqual, areSetsEqual2 = _a2.areSetsEqual, areTypedArraysEqual2 = _a2.areTypedArraysEqual;
      return function comparator(a2, b2, state) {
        if (a2 === b2) {
          return true;
        }
        if (a2 == null || b2 == null || typeof a2 !== "object" || typeof b2 !== "object") {
          return a2 !== a2 && b2 !== b2;
        }
        var constructor = a2.constructor;
        if (constructor !== b2.constructor) {
          return false;
        }
        if (constructor === Object) {
          return areObjectsEqual2(a2, b2, state);
        }
        if (isArray$2(a2)) {
          return areArraysEqual2(a2, b2, state);
        }
        if (isTypedArray != null && isTypedArray(a2)) {
          return areTypedArraysEqual2(a2, b2, state);
        }
        if (constructor === Date) {
          return areDatesEqual2(a2, b2, state);
        }
        if (constructor === RegExp) {
          return areRegExpsEqual2(a2, b2, state);
        }
        if (constructor === Map) {
          return areMapsEqual2(a2, b2, state);
        }
        if (constructor === Set) {
          return areSetsEqual2(a2, b2, state);
        }
        var tag = getTag(a2);
        if (tag === DATE_TAG) {
          return areDatesEqual2(a2, b2, state);
        }
        if (tag === REG_EXP_TAG) {
          return areRegExpsEqual2(a2, b2, state);
        }
        if (tag === MAP_TAG) {
          return areMapsEqual2(a2, b2, state);
        }
        if (tag === SET_TAG) {
          return areSetsEqual2(a2, b2, state);
        }
        if (tag === OBJECT_TAG) {
          return typeof a2.then !== "function" && typeof b2.then !== "function" && areObjectsEqual2(a2, b2, state);
        }
        if (tag === ARGUMENTS_TAG) {
          return areObjectsEqual2(a2, b2, state);
        }
        if (tag === BOOLEAN_TAG || tag === NUMBER_TAG || tag === STRING_TAG) {
          return arePrimitiveWrappersEqual2(a2, b2, state);
        }
        return false;
      };
    }
    function createEqualityComparatorConfig(_a2) {
      var circular = _a2.circular, createCustomConfig = _a2.createCustomConfig, strict = _a2.strict;
      var config2 = {
        areArraysEqual: strict ? areObjectsEqualStrict : areArraysEqual,
        areDatesEqual,
        areMapsEqual: strict ? combineComparators(areMapsEqual, areObjectsEqualStrict) : areMapsEqual,
        areObjectsEqual: strict ? areObjectsEqualStrict : areObjectsEqual,
        arePrimitiveWrappersEqual,
        areRegExpsEqual,
        areSetsEqual: strict ? combineComparators(areSetsEqual, areObjectsEqualStrict) : areSetsEqual,
        areTypedArraysEqual: strict ? areObjectsEqualStrict : areTypedArraysEqual
      };
      if (createCustomConfig) {
        config2 = assign({}, config2, createCustomConfig(config2));
      }
      if (circular) {
        var areArraysEqual$1 = createIsCircular(config2.areArraysEqual);
        var areMapsEqual$1 = createIsCircular(config2.areMapsEqual);
        var areObjectsEqual$1 = createIsCircular(config2.areObjectsEqual);
        var areSetsEqual$1 = createIsCircular(config2.areSetsEqual);
        config2 = assign({}, config2, {
          areArraysEqual: areArraysEqual$1,
          areMapsEqual: areMapsEqual$1,
          areObjectsEqual: areObjectsEqual$1,
          areSetsEqual: areSetsEqual$1
        });
      }
      return config2;
    }
    function createInternalEqualityComparator(compare) {
      return function(a2, b2, _indexOrKeyA, _indexOrKeyB, _parentA, _parentB, state) {
        return compare(a2, b2, state);
      };
    }
    function createIsEqual(_a2) {
      var circular = _a2.circular, comparator = _a2.comparator, createState = _a2.createState, equals = _a2.equals, strict = _a2.strict;
      if (createState) {
        return function isEqual2(a2, b2) {
          var _a3 = createState(), _b2 = _a3.cache, cache2 = _b2 === void 0 ? circular ? /* @__PURE__ */ new WeakMap() : void 0 : _b2, meta = _a3.meta;
          return comparator(a2, b2, {
            cache: cache2,
            equals,
            meta,
            strict
          });
        };
      }
      if (circular) {
        return function isEqual2(a2, b2) {
          return comparator(a2, b2, {
            cache: /* @__PURE__ */ new WeakMap(),
            equals,
            meta: void 0,
            strict
          });
        };
      }
      var state = {
        cache: void 0,
        equals,
        meta: void 0,
        strict
      };
      return function isEqual2(a2, b2) {
        return comparator(a2, b2, state);
      };
    }
    var deepEqual = createCustomEqual();
    createCustomEqual({ strict: true });
    createCustomEqual({ circular: true });
    createCustomEqual({
      circular: true,
      strict: true
    });
    createCustomEqual({
      createInternalComparator: function() {
        return sameValueZeroEqual;
      }
    });
    createCustomEqual({
      strict: true,
      createInternalComparator: function() {
        return sameValueZeroEqual;
      }
    });
    createCustomEqual({
      circular: true,
      createInternalComparator: function() {
        return sameValueZeroEqual;
      }
    });
    createCustomEqual({
      circular: true,
      createInternalComparator: function() {
        return sameValueZeroEqual;
      },
      strict: true
    });
    function createCustomEqual(options) {
      if (options === void 0) {
        options = {};
      }
      var _a2 = options.circular, circular = _a2 === void 0 ? false : _a2, createCustomInternalComparator = options.createInternalComparator, createState = options.createState, _b2 = options.strict, strict = _b2 === void 0 ? false : _b2;
      var config2 = createEqualityComparatorConfig(options);
      var comparator = createEqualityComparator(config2);
      var equals = createCustomInternalComparator ? createCustomInternalComparator(comparator) : createInternalEqualityComparator(comparator);
      return createIsEqual({ circular, comparator, createState, equals, strict });
    }
    function safeRequestAnimationFrame(callback) {
      if (typeof requestAnimationFrame !== "undefined")
        requestAnimationFrame(callback);
    }
    function setRafTimeout(callback) {
      var timeout = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
      var currTime = -1;
      var shouldUpdate = function shouldUpdate2(now2) {
        if (currTime < 0) {
          currTime = now2;
        }
        if (now2 - currTime > timeout) {
          callback(now2);
          currTime = -1;
        } else {
          safeRequestAnimationFrame(shouldUpdate2);
        }
      };
      requestAnimationFrame(shouldUpdate);
    }
    function _typeof$l(o2) {
      "@babel/helpers - typeof";
      return _typeof$l = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
        return typeof o3;
      } : function(o3) {
        return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
      }, _typeof$l(o2);
    }
    function _toArray(arr) {
      return _arrayWithHoles$6(arr) || _iterableToArray$5(arr) || _unsupportedIterableToArray$8(arr) || _nonIterableRest$6();
    }
    function _nonIterableRest$6() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray$8(o2, minLen) {
      if (!o2)
        return;
      if (typeof o2 === "string")
        return _arrayLikeToArray$8(o2, minLen);
      var n2 = Object.prototype.toString.call(o2).slice(8, -1);
      if (n2 === "Object" && o2.constructor)
        n2 = o2.constructor.name;
      if (n2 === "Map" || n2 === "Set")
        return Array.from(o2);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
        return _arrayLikeToArray$8(o2, minLen);
    }
    function _arrayLikeToArray$8(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++)
        arr2[i2] = arr[i2];
      return arr2;
    }
    function _iterableToArray$5(iter) {
      if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
        return Array.from(iter);
    }
    function _arrayWithHoles$6(arr) {
      if (Array.isArray(arr))
        return arr;
    }
    function createAnimateManager() {
      var currStyle = {};
      var handleChange = function handleChange2() {
        return null;
      };
      var shouldStop = false;
      var setStyle = function setStyle2(_style) {
        if (shouldStop) {
          return;
        }
        if (Array.isArray(_style)) {
          if (!_style.length) {
            return;
          }
          var styles = _style;
          var _styles = _toArray(styles), curr = _styles[0], restStyles = _styles.slice(1);
          if (typeof curr === "number") {
            setRafTimeout(setStyle2.bind(null, restStyles), curr);
            return;
          }
          setStyle2(curr);
          setRafTimeout(setStyle2.bind(null, restStyles));
          return;
        }
        if (_typeof$l(_style) === "object") {
          currStyle = _style;
          handleChange(currStyle);
        }
        if (typeof _style === "function") {
          _style();
        }
      };
      return {
        stop: function stop() {
          shouldStop = true;
        },
        start: function start(style) {
          shouldStop = false;
          setStyle(style);
        },
        subscribe: function subscribe(_handleChange) {
          handleChange = _handleChange;
          return function() {
            handleChange = function handleChange2() {
              return null;
            };
          };
        }
      };
    }
    function _typeof$k(o2) {
      "@babel/helpers - typeof";
      return _typeof$k = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o22) {
        return typeof o22;
      } : function(o22) {
        return o22 && "function" == typeof Symbol && o22.constructor === Symbol && o22 !== Symbol.prototype ? "symbol" : typeof o22;
      }, _typeof$k(o2);
    }
    function ownKeys$j(e3, r2) {
      var t2 = Object.keys(e3);
      if (Object.getOwnPropertySymbols) {
        var o2 = Object.getOwnPropertySymbols(e3);
        r2 && (o2 = o2.filter(function(r22) {
          return Object.getOwnPropertyDescriptor(e3, r22).enumerable;
        })), t2.push.apply(t2, o2);
      }
      return t2;
    }
    function _objectSpread$j(e3) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t2 = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$j(Object(t2), true).forEach(function(r22) {
          _defineProperty$k(e3, r22, t2[r22]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$j(Object(t2)).forEach(function(r22) {
          Object.defineProperty(e3, r22, Object.getOwnPropertyDescriptor(t2, r22));
        });
      }
      return e3;
    }
    function _defineProperty$k(obj, key, value2) {
      key = _toPropertyKey$k(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value: value2, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value2;
      }
      return obj;
    }
    function _toPropertyKey$k(arg) {
      var key = _toPrimitive$k(arg, "string");
      return _typeof$k(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive$k(input, hint) {
      if (_typeof$k(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof$k(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var getIntersectionKeys = function getIntersectionKeys2(preObj, nextObj) {
      return [Object.keys(preObj), Object.keys(nextObj)].reduce(function(a2, b2) {
        return a2.filter(function(c2) {
          return b2.includes(c2);
        });
      });
    };
    var identity = function identity2(param) {
      return param;
    };
    var getDashCase = function getDashCase2(name) {
      return name.replace(/([A-Z])/g, function(v2) {
        return "-".concat(v2.toLowerCase());
      });
    };
    var mapObject = function mapObject2(fn, obj) {
      return Object.keys(obj).reduce(function(res, key) {
        return _objectSpread$j(_objectSpread$j({}, res), {}, _defineProperty$k({}, key, fn(key, obj[key])));
      }, {});
    };
    var getTransitionVal = function getTransitionVal2(props, duration, easing) {
      return props.map(function(prop) {
        return "".concat(getDashCase(prop), " ").concat(duration, "ms ").concat(easing);
      }).join(",");
    };
    function _slicedToArray$5(arr, i2) {
      return _arrayWithHoles$5(arr) || _iterableToArrayLimit$5(arr, i2) || _unsupportedIterableToArray$7(arr, i2) || _nonIterableRest$5();
    }
    function _nonIterableRest$5() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _iterableToArrayLimit$5(r2, l2) {
      var t2 = null == r2 ? null : "undefined" != typeof Symbol && r2[Symbol.iterator] || r2["@@iterator"];
      if (null != t2) {
        var e3, n2, i2, u2, a2 = [], f2 = true, o2 = false;
        try {
          if (i2 = (t2 = t2.call(r2)).next, 0 === l2) {
            if (Object(t2) !== t2)
              return;
            f2 = false;
          } else
            for (; !(f2 = (e3 = i2.call(t2)).done) && (a2.push(e3.value), a2.length !== l2); f2 = true)
              ;
        } catch (r3) {
          o2 = true, n2 = r3;
        } finally {
          try {
            if (!f2 && null != t2.return && (u2 = t2.return(), Object(u2) !== u2))
              return;
          } finally {
            if (o2)
              throw n2;
          }
        }
        return a2;
      }
    }
    function _arrayWithHoles$5(arr) {
      if (Array.isArray(arr))
        return arr;
    }
    function _toConsumableArray$4(arr) {
      return _arrayWithoutHoles$4(arr) || _iterableToArray$4(arr) || _unsupportedIterableToArray$7(arr) || _nonIterableSpread$4();
    }
    function _nonIterableSpread$4() {
      throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray$7(o2, minLen) {
      if (!o2)
        return;
      if (typeof o2 === "string")
        return _arrayLikeToArray$7(o2, minLen);
      var n2 = Object.prototype.toString.call(o2).slice(8, -1);
      if (n2 === "Object" && o2.constructor)
        n2 = o2.constructor.name;
      if (n2 === "Map" || n2 === "Set")
        return Array.from(o2);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
        return _arrayLikeToArray$7(o2, minLen);
    }
    function _iterableToArray$4(iter) {
      if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
        return Array.from(iter);
    }
    function _arrayWithoutHoles$4(arr) {
      if (Array.isArray(arr))
        return _arrayLikeToArray$7(arr);
    }
    function _arrayLikeToArray$7(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++)
        arr2[i2] = arr[i2];
      return arr2;
    }
    var ACCURACY = 1e-4;
    var cubicBezierFactor = function cubicBezierFactor2(c1, c2) {
      return [0, 3 * c1, 3 * c2 - 6 * c1, 3 * c1 - 3 * c2 + 1];
    };
    var multyTime = function multyTime2(params, t2) {
      return params.map(function(param, i2) {
        return param * Math.pow(t2, i2);
      }).reduce(function(pre, curr) {
        return pre + curr;
      });
    };
    var cubicBezier = function cubicBezier2(c1, c2) {
      return function(t2) {
        var params = cubicBezierFactor(c1, c2);
        return multyTime(params, t2);
      };
    };
    var derivativeCubicBezier = function derivativeCubicBezier2(c1, c2) {
      return function(t2) {
        var params = cubicBezierFactor(c1, c2);
        var newParams = [].concat(_toConsumableArray$4(params.map(function(param, i2) {
          return param * i2;
        }).slice(1)), [0]);
        return multyTime(newParams, t2);
      };
    };
    var configBezier = function configBezier2() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      var x1 = args[0], y1 = args[1], x2 = args[2], y2 = args[3];
      if (args.length === 1) {
        switch (args[0]) {
          case "linear":
            x1 = 0;
            y1 = 0;
            x2 = 1;
            y2 = 1;
            break;
          case "ease":
            x1 = 0.25;
            y1 = 0.1;
            x2 = 0.25;
            y2 = 1;
            break;
          case "ease-in":
            x1 = 0.42;
            y1 = 0;
            x2 = 1;
            y2 = 1;
            break;
          case "ease-out":
            x1 = 0.42;
            y1 = 0;
            x2 = 0.58;
            y2 = 1;
            break;
          case "ease-in-out":
            x1 = 0;
            y1 = 0;
            x2 = 0.58;
            y2 = 1;
            break;
          default: {
            var easing = args[0].split("(");
            if (easing[0] === "cubic-bezier" && easing[1].split(")")[0].split(",").length === 4) {
              var _easing$1$split$0$spl = easing[1].split(")")[0].split(",").map(function(x3) {
                return parseFloat(x3);
              });
              var _easing$1$split$0$spl2 = _slicedToArray$5(_easing$1$split$0$spl, 4);
              x1 = _easing$1$split$0$spl2[0];
              y1 = _easing$1$split$0$spl2[1];
              x2 = _easing$1$split$0$spl2[2];
              y2 = _easing$1$split$0$spl2[3];
            }
          }
        }
      }
      var curveX = cubicBezier(x1, x2);
      var curveY = cubicBezier(y1, y2);
      var derCurveX = derivativeCubicBezier(x1, x2);
      var rangeValue = function rangeValue2(value2) {
        if (value2 > 1) {
          return 1;
        }
        if (value2 < 0) {
          return 0;
        }
        return value2;
      };
      var bezier = function bezier2(_t2) {
        var t2 = _t2 > 1 ? 1 : _t2;
        var x3 = t2;
        for (var i2 = 0; i2 < 8; ++i2) {
          var evalT = curveX(x3) - t2;
          var derVal = derCurveX(x3);
          if (Math.abs(evalT - t2) < ACCURACY || derVal < ACCURACY) {
            return curveY(x3);
          }
          x3 = rangeValue(x3 - evalT / derVal);
        }
        return curveY(x3);
      };
      bezier.isStepper = false;
      return bezier;
    };
    var configSpring = function configSpring2() {
      var config2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      var _config$stiff = config2.stiff, stiff = _config$stiff === void 0 ? 100 : _config$stiff, _config$damping = config2.damping, damping = _config$damping === void 0 ? 8 : _config$damping, _config$dt = config2.dt, dt2 = _config$dt === void 0 ? 17 : _config$dt;
      var stepper = function stepper2(currX, destX, currV) {
        var FSpring = -(currX - destX) * stiff;
        var FDamping = currV * damping;
        var newV = currV + (FSpring - FDamping) * dt2 / 1e3;
        var newX = currV * dt2 / 1e3 + currX;
        if (Math.abs(newX - destX) < ACCURACY && Math.abs(newV) < ACCURACY) {
          return [destX, 0];
        }
        return [newX, newV];
      };
      stepper.isStepper = true;
      stepper.dt = dt2;
      return stepper;
    };
    var configEasing = function configEasing2() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
      var easing = args[0];
      if (typeof easing === "string") {
        switch (easing) {
          case "ease":
          case "ease-in-out":
          case "ease-out":
          case "ease-in":
          case "linear":
            return configBezier(easing);
          case "spring":
            return configSpring();
          default:
            if (easing.split("(")[0] === "cubic-bezier") {
              return configBezier(easing);
            }
        }
      }
      if (typeof easing === "function") {
        return easing;
      }
      return null;
    };
    function _typeof$j(o2) {
      "@babel/helpers - typeof";
      return _typeof$j = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
        return typeof o3;
      } : function(o3) {
        return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
      }, _typeof$j(o2);
    }
    function _toConsumableArray$3(arr) {
      return _arrayWithoutHoles$3(arr) || _iterableToArray$3(arr) || _unsupportedIterableToArray$6(arr) || _nonIterableSpread$3();
    }
    function _nonIterableSpread$3() {
      throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _iterableToArray$3(iter) {
      if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
        return Array.from(iter);
    }
    function _arrayWithoutHoles$3(arr) {
      if (Array.isArray(arr))
        return _arrayLikeToArray$6(arr);
    }
    function ownKeys$i(e3, r2) {
      var t2 = Object.keys(e3);
      if (Object.getOwnPropertySymbols) {
        var o2 = Object.getOwnPropertySymbols(e3);
        r2 && (o2 = o2.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e3, r3).enumerable;
        })), t2.push.apply(t2, o2);
      }
      return t2;
    }
    function _objectSpread$i(e3) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t2 = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$i(Object(t2), true).forEach(function(r3) {
          _defineProperty$j(e3, r3, t2[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$i(Object(t2)).forEach(function(r3) {
          Object.defineProperty(e3, r3, Object.getOwnPropertyDescriptor(t2, r3));
        });
      }
      return e3;
    }
    function _defineProperty$j(obj, key, value2) {
      key = _toPropertyKey$j(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value: value2, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value2;
      }
      return obj;
    }
    function _toPropertyKey$j(arg) {
      var key = _toPrimitive$j(arg, "string");
      return _typeof$j(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive$j(input, hint) {
      if (_typeof$j(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof$j(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    function _slicedToArray$4(arr, i2) {
      return _arrayWithHoles$4(arr) || _iterableToArrayLimit$4(arr, i2) || _unsupportedIterableToArray$6(arr, i2) || _nonIterableRest$4();
    }
    function _nonIterableRest$4() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray$6(o2, minLen) {
      if (!o2)
        return;
      if (typeof o2 === "string")
        return _arrayLikeToArray$6(o2, minLen);
      var n2 = Object.prototype.toString.call(o2).slice(8, -1);
      if (n2 === "Object" && o2.constructor)
        n2 = o2.constructor.name;
      if (n2 === "Map" || n2 === "Set")
        return Array.from(o2);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
        return _arrayLikeToArray$6(o2, minLen);
    }
    function _arrayLikeToArray$6(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++)
        arr2[i2] = arr[i2];
      return arr2;
    }
    function _iterableToArrayLimit$4(r2, l2) {
      var t2 = null == r2 ? null : "undefined" != typeof Symbol && r2[Symbol.iterator] || r2["@@iterator"];
      if (null != t2) {
        var e3, n2, i2, u2, a2 = [], f2 = true, o2 = false;
        try {
          if (i2 = (t2 = t2.call(r2)).next, 0 === l2) {
            if (Object(t2) !== t2)
              return;
            f2 = false;
          } else
            for (; !(f2 = (e3 = i2.call(t2)).done) && (a2.push(e3.value), a2.length !== l2); f2 = true)
              ;
        } catch (r3) {
          o2 = true, n2 = r3;
        } finally {
          try {
            if (!f2 && null != t2.return && (u2 = t2.return(), Object(u2) !== u2))
              return;
          } finally {
            if (o2)
              throw n2;
          }
        }
        return a2;
      }
    }
    function _arrayWithHoles$4(arr) {
      if (Array.isArray(arr))
        return arr;
    }
    var alpha = function alpha2(begin, end, k2) {
      return begin + (end - begin) * k2;
    };
    var needContinue = function needContinue2(_ref) {
      var from2 = _ref.from, to2 = _ref.to;
      return from2 !== to2;
    };
    var calStepperVals = function calStepperVals2(easing, preVals, steps) {
      var nextStepVals = mapObject(function(key, val) {
        if (needContinue(val)) {
          var _easing = easing(val.from, val.to, val.velocity), _easing2 = _slicedToArray$4(_easing, 2), newX = _easing2[0], newV = _easing2[1];
          return _objectSpread$i(_objectSpread$i({}, val), {}, {
            from: newX,
            velocity: newV
          });
        }
        return val;
      }, preVals);
      if (steps < 1) {
        return mapObject(function(key, val) {
          if (needContinue(val)) {
            return _objectSpread$i(_objectSpread$i({}, val), {}, {
              velocity: alpha(val.velocity, nextStepVals[key].velocity, steps),
              from: alpha(val.from, nextStepVals[key].from, steps)
            });
          }
          return val;
        }, preVals);
      }
      return calStepperVals2(easing, nextStepVals, steps - 1);
    };
    const configUpdate = function(from2, to2, easing, duration, render) {
      var interKeys = getIntersectionKeys(from2, to2);
      var timingStyle = interKeys.reduce(function(res, key) {
        return _objectSpread$i(_objectSpread$i({}, res), {}, _defineProperty$j({}, key, [from2[key], to2[key]]));
      }, {});
      var stepperStyle = interKeys.reduce(function(res, key) {
        return _objectSpread$i(_objectSpread$i({}, res), {}, _defineProperty$j({}, key, {
          from: from2[key],
          velocity: 0,
          to: to2[key]
        }));
      }, {});
      var cafId = -1;
      var preTime;
      var beginTime;
      var update = function update2() {
        return null;
      };
      var getCurrStyle = function getCurrStyle2() {
        return mapObject(function(key, val) {
          return val.from;
        }, stepperStyle);
      };
      var shouldStopAnimation = function shouldStopAnimation2() {
        return !Object.values(stepperStyle).filter(needContinue).length;
      };
      var stepperUpdate = function stepperUpdate2(now2) {
        if (!preTime) {
          preTime = now2;
        }
        var deltaTime = now2 - preTime;
        var steps = deltaTime / easing.dt;
        stepperStyle = calStepperVals(easing, stepperStyle, steps);
        render(_objectSpread$i(_objectSpread$i(_objectSpread$i({}, from2), to2), getCurrStyle()));
        preTime = now2;
        if (!shouldStopAnimation()) {
          cafId = requestAnimationFrame(update);
        }
      };
      var timingUpdate = function timingUpdate2(now2) {
        if (!beginTime) {
          beginTime = now2;
        }
        var t2 = (now2 - beginTime) / duration;
        var currStyle = mapObject(function(key, val) {
          return alpha.apply(void 0, _toConsumableArray$3(val).concat([easing(t2)]));
        }, timingStyle);
        render(_objectSpread$i(_objectSpread$i(_objectSpread$i({}, from2), to2), currStyle));
        if (t2 < 1) {
          cafId = requestAnimationFrame(update);
        } else {
          var finalStyle = mapObject(function(key, val) {
            return alpha.apply(void 0, _toConsumableArray$3(val).concat([easing(1)]));
          }, timingStyle);
          render(_objectSpread$i(_objectSpread$i(_objectSpread$i({}, from2), to2), finalStyle));
        }
      };
      update = easing.isStepper ? stepperUpdate : timingUpdate;
      return function() {
        requestAnimationFrame(update);
        return function() {
          cancelAnimationFrame(cafId);
        };
      };
    };
    function _typeof$i(o2) {
      "@babel/helpers - typeof";
      return _typeof$i = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
        return typeof o3;
      } : function(o3) {
        return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
      }, _typeof$i(o2);
    }
    var _excluded$7 = ["children", "begin", "duration", "attributeName", "easing", "isActive", "steps", "from", "to", "canBegin", "onAnimationEnd", "shouldReAnimate", "onAnimationReStart"];
    function _objectWithoutProperties$7(source, excluded) {
      if (source == null)
        return {};
      var target = _objectWithoutPropertiesLoose$7(source, excluded);
      var key, i2;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i2 = 0; i2 < sourceSymbolKeys.length; i2++) {
          key = sourceSymbolKeys[i2];
          if (excluded.indexOf(key) >= 0)
            continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key))
            continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose$7(source, excluded) {
      if (source == null)
        return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i2;
      for (i2 = 0; i2 < sourceKeys.length; i2++) {
        key = sourceKeys[i2];
        if (excluded.indexOf(key) >= 0)
          continue;
        target[key] = source[key];
      }
      return target;
    }
    function _toConsumableArray$2(arr) {
      return _arrayWithoutHoles$2(arr) || _iterableToArray$2(arr) || _unsupportedIterableToArray$5(arr) || _nonIterableSpread$2();
    }
    function _nonIterableSpread$2() {
      throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray$5(o2, minLen) {
      if (!o2)
        return;
      if (typeof o2 === "string")
        return _arrayLikeToArray$5(o2, minLen);
      var n2 = Object.prototype.toString.call(o2).slice(8, -1);
      if (n2 === "Object" && o2.constructor)
        n2 = o2.constructor.name;
      if (n2 === "Map" || n2 === "Set")
        return Array.from(o2);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
        return _arrayLikeToArray$5(o2, minLen);
    }
    function _iterableToArray$2(iter) {
      if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
        return Array.from(iter);
    }
    function _arrayWithoutHoles$2(arr) {
      if (Array.isArray(arr))
        return _arrayLikeToArray$5(arr);
    }
    function _arrayLikeToArray$5(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++)
        arr2[i2] = arr[i2];
      return arr2;
    }
    function ownKeys$h(e3, r2) {
      var t2 = Object.keys(e3);
      if (Object.getOwnPropertySymbols) {
        var o2 = Object.getOwnPropertySymbols(e3);
        r2 && (o2 = o2.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e3, r3).enumerable;
        })), t2.push.apply(t2, o2);
      }
      return t2;
    }
    function _objectSpread$h(e3) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t2 = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$h(Object(t2), true).forEach(function(r3) {
          _defineProperty$i(e3, r3, t2[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$h(Object(t2)).forEach(function(r3) {
          Object.defineProperty(e3, r3, Object.getOwnPropertyDescriptor(t2, r3));
        });
      }
      return e3;
    }
    function _defineProperty$i(obj, key, value2) {
      key = _toPropertyKey$i(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value: value2, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value2;
      }
      return obj;
    }
    function _classCallCheck$6(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties$6(target, props) {
      for (var i2 = 0; i2 < props.length; i2++) {
        var descriptor = props[i2];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey$i(descriptor.key), descriptor);
      }
    }
    function _createClass$6(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties$6(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties$6(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey$i(arg) {
      var key = _toPrimitive$i(arg, "string");
      return _typeof$i(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive$i(input, hint) {
      if (_typeof$i(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof$i(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    function _inherits$4(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      Object.defineProperty(subClass, "prototype", { writable: false });
      if (superClass)
        _setPrototypeOf$4(subClass, superClass);
    }
    function _setPrototypeOf$4(o2, p2) {
      _setPrototypeOf$4 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o3, p3) {
        o3.__proto__ = p3;
        return o3;
      };
      return _setPrototypeOf$4(o2, p2);
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$4();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf$4(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf$4(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn$4(this, result);
      };
    }
    function _possibleConstructorReturn$4(self2, call) {
      if (call && (_typeof$i(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }
      return _assertThisInitialized$4(self2);
    }
    function _assertThisInitialized$4(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _isNativeReflectConstruct$4() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e3) {
        return false;
      }
    }
    function _getPrototypeOf$4(o2) {
      _getPrototypeOf$4 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o3) {
        return o3.__proto__ || Object.getPrototypeOf(o3);
      };
      return _getPrototypeOf$4(o2);
    }
    var Animate = /* @__PURE__ */ function(_PureComponent) {
      _inherits$4(Animate2, _PureComponent);
      var _super = _createSuper(Animate2);
      function Animate2(props, context) {
        var _this;
        _classCallCheck$6(this, Animate2);
        _this = _super.call(this, props, context);
        var _this$props = _this.props, isActive = _this$props.isActive, attributeName = _this$props.attributeName, from2 = _this$props.from, to2 = _this$props.to, steps = _this$props.steps, children = _this$props.children, duration = _this$props.duration;
        _this.handleStyleChange = _this.handleStyleChange.bind(_assertThisInitialized$4(_this));
        _this.changeStyle = _this.changeStyle.bind(_assertThisInitialized$4(_this));
        if (!isActive || duration <= 0) {
          _this.state = {
            style: {}
          };
          if (typeof children === "function") {
            _this.state = {
              style: to2
            };
          }
          return _possibleConstructorReturn$4(_this);
        }
        if (steps && steps.length) {
          _this.state = {
            style: steps[0].style
          };
        } else if (from2) {
          if (typeof children === "function") {
            _this.state = {
              style: from2
            };
            return _possibleConstructorReturn$4(_this);
          }
          _this.state = {
            style: attributeName ? _defineProperty$i({}, attributeName, from2) : from2
          };
        } else {
          _this.state = {
            style: {}
          };
        }
        return _this;
      }
      _createClass$6(Animate2, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          var _this$props2 = this.props, isActive = _this$props2.isActive, canBegin = _this$props2.canBegin;
          this.mounted = true;
          if (!isActive || !canBegin) {
            return;
          }
          this.runAnimation(this.props);
        }
      }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate(prevProps) {
          var _this$props3 = this.props, isActive = _this$props3.isActive, canBegin = _this$props3.canBegin, attributeName = _this$props3.attributeName, shouldReAnimate = _this$props3.shouldReAnimate, to2 = _this$props3.to, currentFrom = _this$props3.from;
          var style = this.state.style;
          if (!canBegin) {
            return;
          }
          if (!isActive) {
            var newState = {
              style: attributeName ? _defineProperty$i({}, attributeName, to2) : to2
            };
            if (this.state && style) {
              if (attributeName && style[attributeName] !== to2 || !attributeName && style !== to2) {
                this.setState(newState);
              }
            }
            return;
          }
          if (deepEqual(prevProps.to, to2) && prevProps.canBegin && prevProps.isActive) {
            return;
          }
          var isTriggered = !prevProps.canBegin || !prevProps.isActive;
          if (this.manager) {
            this.manager.stop();
          }
          if (this.stopJSAnimation) {
            this.stopJSAnimation();
          }
          var from2 = isTriggered || shouldReAnimate ? currentFrom : prevProps.to;
          if (this.state && style) {
            var _newState = {
              style: attributeName ? _defineProperty$i({}, attributeName, from2) : from2
            };
            if (attributeName && [attributeName] !== from2 || !attributeName && style !== from2) {
              this.setState(_newState);
            }
          }
          this.runAnimation(_objectSpread$h(_objectSpread$h({}, this.props), {}, {
            from: from2,
            begin: 0
          }));
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          this.mounted = false;
          var onAnimationEnd = this.props.onAnimationEnd;
          if (this.unSubscribe) {
            this.unSubscribe();
          }
          if (this.manager) {
            this.manager.stop();
            this.manager = null;
          }
          if (this.stopJSAnimation) {
            this.stopJSAnimation();
          }
          if (onAnimationEnd) {
            onAnimationEnd();
          }
        }
      }, {
        key: "handleStyleChange",
        value: function handleStyleChange(style) {
          this.changeStyle(style);
        }
      }, {
        key: "changeStyle",
        value: function changeStyle(style) {
          if (this.mounted) {
            this.setState({
              style
            });
          }
        }
      }, {
        key: "runJSAnimation",
        value: function runJSAnimation(props) {
          var _this2 = this;
          var from2 = props.from, to2 = props.to, duration = props.duration, easing = props.easing, begin = props.begin, onAnimationEnd = props.onAnimationEnd, onAnimationStart = props.onAnimationStart;
          var startAnimation = configUpdate(from2, to2, configEasing(easing), duration, this.changeStyle);
          var finalStartAnimation = function finalStartAnimation2() {
            _this2.stopJSAnimation = startAnimation();
          };
          this.manager.start([onAnimationStart, begin, finalStartAnimation, duration, onAnimationEnd]);
        }
      }, {
        key: "runStepAnimation",
        value: function runStepAnimation(props) {
          var _this3 = this;
          var steps = props.steps, begin = props.begin, onAnimationStart = props.onAnimationStart;
          var _steps$ = steps[0], initialStyle = _steps$.style, _steps$$duration = _steps$.duration, initialTime = _steps$$duration === void 0 ? 0 : _steps$$duration;
          var addStyle = function addStyle2(sequence, nextItem, index) {
            if (index === 0) {
              return sequence;
            }
            var duration = nextItem.duration, _nextItem$easing = nextItem.easing, easing = _nextItem$easing === void 0 ? "ease" : _nextItem$easing, style = nextItem.style, nextProperties = nextItem.properties, onAnimationEnd = nextItem.onAnimationEnd;
            var preItem = index > 0 ? steps[index - 1] : nextItem;
            var properties2 = nextProperties || Object.keys(style);
            if (typeof easing === "function" || easing === "spring") {
              return [].concat(_toConsumableArray$2(sequence), [_this3.runJSAnimation.bind(_this3, {
                from: preItem.style,
                to: style,
                duration,
                easing
              }), duration]);
            }
            var transition = getTransitionVal(properties2, duration, easing);
            var newStyle = _objectSpread$h(_objectSpread$h(_objectSpread$h({}, preItem.style), style), {}, {
              transition
            });
            return [].concat(_toConsumableArray$2(sequence), [newStyle, duration, onAnimationEnd]).filter(identity);
          };
          return this.manager.start([onAnimationStart].concat(_toConsumableArray$2(steps.reduce(addStyle, [initialStyle, Math.max(initialTime, begin)])), [props.onAnimationEnd]));
        }
      }, {
        key: "runAnimation",
        value: function runAnimation(props) {
          if (!this.manager) {
            this.manager = createAnimateManager();
          }
          var begin = props.begin, duration = props.duration, attributeName = props.attributeName, propsTo = props.to, easing = props.easing, onAnimationStart = props.onAnimationStart, onAnimationEnd = props.onAnimationEnd, steps = props.steps, children = props.children;
          var manager = this.manager;
          this.unSubscribe = manager.subscribe(this.handleStyleChange);
          if (typeof easing === "function" || typeof children === "function" || easing === "spring") {
            this.runJSAnimation(props);
            return;
          }
          if (steps.length > 1) {
            this.runStepAnimation(props);
            return;
          }
          var to2 = attributeName ? _defineProperty$i({}, attributeName, propsTo) : propsTo;
          var transition = getTransitionVal(Object.keys(to2), duration, easing);
          manager.start([onAnimationStart, begin, _objectSpread$h(_objectSpread$h({}, to2), {}, {
            transition
          }), duration, onAnimationEnd]);
        }
      }, {
        key: "render",
        value: function render() {
          var _this$props4 = this.props, children = _this$props4.children;
          _this$props4.begin;
          var duration = _this$props4.duration;
          _this$props4.attributeName;
          _this$props4.easing;
          var isActive = _this$props4.isActive;
          _this$props4.steps;
          _this$props4.from;
          _this$props4.to;
          _this$props4.canBegin;
          _this$props4.onAnimationEnd;
          _this$props4.shouldReAnimate;
          _this$props4.onAnimationReStart;
          var others = _objectWithoutProperties$7(_this$props4, _excluded$7);
          var count = reactExports.Children.count(children);
          var stateStyle = this.state.style;
          if (typeof children === "function") {
            return children(stateStyle);
          }
          if (!isActive || count === 0 || duration <= 0) {
            return children;
          }
          var cloneContainer = function cloneContainer2(container) {
            var _container$props = container.props, _container$props$styl = _container$props.style, style = _container$props$styl === void 0 ? {} : _container$props$styl, className = _container$props.className;
            var res = /* @__PURE__ */ reactExports.cloneElement(container, _objectSpread$h(_objectSpread$h({}, others), {}, {
              style: _objectSpread$h(_objectSpread$h({}, style), stateStyle),
              className
            }));
            return res;
          };
          if (count === 1) {
            return cloneContainer(reactExports.Children.only(children));
          }
          return /* @__PURE__ */ React$1.createElement("div", null, reactExports.Children.map(children, function(child) {
            return cloneContainer(child);
          }));
        }
      }]);
      return Animate2;
    }(reactExports.PureComponent);
    Animate.displayName = "Animate";
    Animate.defaultProps = {
      begin: 0,
      duration: 1e3,
      from: "",
      to: "",
      attributeName: "",
      easing: "ease",
      isActive: true,
      canBegin: true,
      steps: [],
      onAnimationEnd: function onAnimationEnd() {
      },
      onAnimationStart: function onAnimationStart() {
      }
    };
    Animate.propTypes = {
      from: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),
      to: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),
      attributeName: PropTypes.string,
      // animation duration
      duration: PropTypes.number,
      begin: PropTypes.number,
      easing: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),
      steps: PropTypes.arrayOf(PropTypes.shape({
        duration: PropTypes.number.isRequired,
        style: PropTypes.object.isRequired,
        easing: PropTypes.oneOfType([PropTypes.oneOf(["ease", "ease-in", "ease-out", "ease-in-out", "linear"]), PropTypes.func]),
        // transition css properties(dash case), optional
        properties: PropTypes.arrayOf("string"),
        onAnimationEnd: PropTypes.func
      })),
      children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),
      isActive: PropTypes.bool,
      canBegin: PropTypes.bool,
      onAnimationEnd: PropTypes.func,
      // decide if it should reanimate with initial from style when props change
      shouldReAnimate: PropTypes.bool,
      onAnimationStart: PropTypes.func,
      onAnimationReStart: PropTypes.func
    };
    ({
      appearOptions: PropTypes.object,
      enterOptions: PropTypes.object,
      leaveOptions: PropTypes.object,
      children: PropTypes.element
    });
    ({
      appear: PropTypes.object,
      enter: PropTypes.object,
      leave: PropTypes.object,
      children: PropTypes.oneOfType([PropTypes.array, PropTypes.element]),
      component: PropTypes.any
    });
    function _typeof$h(o2) {
      "@babel/helpers - typeof";
      return _typeof$h = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
        return typeof o3;
      } : function(o3) {
        return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
      }, _typeof$h(o2);
    }
    function _extends$e() {
      _extends$e = Object.assign ? Object.assign.bind() : function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends$e.apply(this, arguments);
    }
    function _slicedToArray$3(arr, i2) {
      return _arrayWithHoles$3(arr) || _iterableToArrayLimit$3(arr, i2) || _unsupportedIterableToArray$4(arr, i2) || _nonIterableRest$3();
    }
    function _nonIterableRest$3() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray$4(o2, minLen) {
      if (!o2)
        return;
      if (typeof o2 === "string")
        return _arrayLikeToArray$4(o2, minLen);
      var n2 = Object.prototype.toString.call(o2).slice(8, -1);
      if (n2 === "Object" && o2.constructor)
        n2 = o2.constructor.name;
      if (n2 === "Map" || n2 === "Set")
        return Array.from(o2);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
        return _arrayLikeToArray$4(o2, minLen);
    }
    function _arrayLikeToArray$4(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++)
        arr2[i2] = arr[i2];
      return arr2;
    }
    function _iterableToArrayLimit$3(r2, l2) {
      var t2 = null == r2 ? null : "undefined" != typeof Symbol && r2[Symbol.iterator] || r2["@@iterator"];
      if (null != t2) {
        var e3, n2, i2, u2, a2 = [], f2 = true, o2 = false;
        try {
          if (i2 = (t2 = t2.call(r2)).next, 0 === l2) {
            if (Object(t2) !== t2)
              return;
            f2 = false;
          } else
            for (; !(f2 = (e3 = i2.call(t2)).done) && (a2.push(e3.value), a2.length !== l2); f2 = true)
              ;
        } catch (r3) {
          o2 = true, n2 = r3;
        } finally {
          try {
            if (!f2 && null != t2["return"] && (u2 = t2["return"](), Object(u2) !== u2))
              return;
          } finally {
            if (o2)
              throw n2;
          }
        }
        return a2;
      }
    }
    function _arrayWithHoles$3(arr) {
      if (Array.isArray(arr))
        return arr;
    }
    function ownKeys$g(e3, r2) {
      var t2 = Object.keys(e3);
      if (Object.getOwnPropertySymbols) {
        var o2 = Object.getOwnPropertySymbols(e3);
        r2 && (o2 = o2.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e3, r3).enumerable;
        })), t2.push.apply(t2, o2);
      }
      return t2;
    }
    function _objectSpread$g(e3) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t2 = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$g(Object(t2), true).forEach(function(r3) {
          _defineProperty$h(e3, r3, t2[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$g(Object(t2)).forEach(function(r3) {
          Object.defineProperty(e3, r3, Object.getOwnPropertyDescriptor(t2, r3));
        });
      }
      return e3;
    }
    function _defineProperty$h(obj, key, value2) {
      key = _toPropertyKey$h(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value: value2, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value2;
      }
      return obj;
    }
    function _toPropertyKey$h(t2) {
      var i2 = _toPrimitive$h(t2, "string");
      return "symbol" == _typeof$h(i2) ? i2 : String(i2);
    }
    function _toPrimitive$h(t2, r2) {
      if ("object" != _typeof$h(t2) || !t2)
        return t2;
      var e3 = t2[Symbol.toPrimitive];
      if (void 0 !== e3) {
        var i2 = e3.call(t2, r2 || "default");
        if ("object" != _typeof$h(i2))
          return i2;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r2 ? String : Number)(t2);
    }
    var getRectanglePath = function getRectanglePath2(x2, y2, width, height, radius) {
      var maxRadius = Math.min(Math.abs(width) / 2, Math.abs(height) / 2);
      var ySign = height >= 0 ? 1 : -1;
      var xSign = width >= 0 ? 1 : -1;
      var clockWise = height >= 0 && width >= 0 || height < 0 && width < 0 ? 1 : 0;
      var path;
      if (maxRadius > 0 && radius instanceof Array) {
        var newRadius = [0, 0, 0, 0];
        for (var i2 = 0, len = 4; i2 < len; i2++) {
          newRadius[i2] = radius[i2] > maxRadius ? maxRadius : radius[i2];
        }
        path = "M".concat(x2, ",").concat(y2 + ySign * newRadius[0]);
        if (newRadius[0] > 0) {
          path += "A ".concat(newRadius[0], ",").concat(newRadius[0], ",0,0,").concat(clockWise, ",").concat(x2 + xSign * newRadius[0], ",").concat(y2);
        }
        path += "L ".concat(x2 + width - xSign * newRadius[1], ",").concat(y2);
        if (newRadius[1] > 0) {
          path += "A ".concat(newRadius[1], ",").concat(newRadius[1], ",0,0,").concat(clockWise, ",\n        ").concat(x2 + width, ",").concat(y2 + ySign * newRadius[1]);
        }
        path += "L ".concat(x2 + width, ",").concat(y2 + height - ySign * newRadius[2]);
        if (newRadius[2] > 0) {
          path += "A ".concat(newRadius[2], ",").concat(newRadius[2], ",0,0,").concat(clockWise, ",\n        ").concat(x2 + width - xSign * newRadius[2], ",").concat(y2 + height);
        }
        path += "L ".concat(x2 + xSign * newRadius[3], ",").concat(y2 + height);
        if (newRadius[3] > 0) {
          path += "A ".concat(newRadius[3], ",").concat(newRadius[3], ",0,0,").concat(clockWise, ",\n        ").concat(x2, ",").concat(y2 + height - ySign * newRadius[3]);
        }
        path += "Z";
      } else if (maxRadius > 0 && radius === +radius && radius > 0) {
        var _newRadius = Math.min(maxRadius, radius);
        path = "M ".concat(x2, ",").concat(y2 + ySign * _newRadius, "\n            A ").concat(_newRadius, ",").concat(_newRadius, ",0,0,").concat(clockWise, ",").concat(x2 + xSign * _newRadius, ",").concat(y2, "\n            L ").concat(x2 + width - xSign * _newRadius, ",").concat(y2, "\n            A ").concat(_newRadius, ",").concat(_newRadius, ",0,0,").concat(clockWise, ",").concat(x2 + width, ",").concat(y2 + ySign * _newRadius, "\n            L ").concat(x2 + width, ",").concat(y2 + height - ySign * _newRadius, "\n            A ").concat(_newRadius, ",").concat(_newRadius, ",0,0,").concat(clockWise, ",").concat(x2 + width - xSign * _newRadius, ",").concat(y2 + height, "\n            L ").concat(x2 + xSign * _newRadius, ",").concat(y2 + height, "\n            A ").concat(_newRadius, ",").concat(_newRadius, ",0,0,").concat(clockWise, ",").concat(x2, ",").concat(y2 + height - ySign * _newRadius, " Z");
      } else {
        path = "M ".concat(x2, ",").concat(y2, " h ").concat(width, " v ").concat(height, " h ").concat(-width, " Z");
      }
      return path;
    };
    var isInRectangle = function isInRectangle2(point2, rect) {
      if (!point2 || !rect) {
        return false;
      }
      var px = point2.x, py = point2.y;
      var x2 = rect.x, y2 = rect.y, width = rect.width, height = rect.height;
      if (Math.abs(width) > 0 && Math.abs(height) > 0) {
        var minX = Math.min(x2, x2 + width);
        var maxX = Math.max(x2, x2 + width);
        var minY = Math.min(y2, y2 + height);
        var maxY = Math.max(y2, y2 + height);
        return px >= minX && px <= maxX && py >= minY && py <= maxY;
      }
      return false;
    };
    var defaultProps$2 = {
      x: 0,
      y: 0,
      width: 0,
      height: 0,
      // The radius of border
      // The radius of four corners when radius is a number
      // The radius of left-top, right-top, right-bottom, left-bottom when radius is an array
      radius: 0,
      isAnimationActive: false,
      isUpdateAnimationActive: false,
      animationBegin: 0,
      animationDuration: 1500,
      animationEasing: "ease"
    };
    var Rectangle = function Rectangle2(rectangleProps) {
      var props = _objectSpread$g(_objectSpread$g({}, defaultProps$2), rectangleProps);
      var pathRef = reactExports.useRef();
      var _useState = reactExports.useState(-1), _useState2 = _slicedToArray$3(_useState, 2), totalLength2 = _useState2[0], setTotalLength = _useState2[1];
      reactExports.useEffect(function() {
        if (pathRef.current && pathRef.current.getTotalLength) {
          try {
            var pathTotalLength = pathRef.current.getTotalLength();
            if (pathTotalLength) {
              setTotalLength(pathTotalLength);
            }
          } catch (err) {
          }
        }
      }, []);
      var x2 = props.x, y2 = props.y, width = props.width, height = props.height, radius = props.radius, className = props.className;
      var animationEasing = props.animationEasing, animationDuration = props.animationDuration, animationBegin = props.animationBegin, isAnimationActive = props.isAnimationActive, isUpdateAnimationActive = props.isUpdateAnimationActive;
      if (x2 !== +x2 || y2 !== +y2 || width !== +width || height !== +height || width === 0 || height === 0) {
        return null;
      }
      var layerClass = clsx("recharts-rectangle", className);
      if (!isUpdateAnimationActive) {
        return /* @__PURE__ */ React$1.createElement("path", _extends$e({}, filterProps(props, true), {
          className: layerClass,
          d: getRectanglePath(x2, y2, width, height, radius)
        }));
      }
      return /* @__PURE__ */ React$1.createElement(Animate, {
        canBegin: totalLength2 > 0,
        from: {
          width,
          height,
          x: x2,
          y: y2
        },
        to: {
          width,
          height,
          x: x2,
          y: y2
        },
        duration: animationDuration,
        animationEasing,
        isActive: isUpdateAnimationActive
      }, function(_ref) {
        var currWidth = _ref.width, currHeight = _ref.height, currX = _ref.x, currY = _ref.y;
        return /* @__PURE__ */ React$1.createElement(Animate, {
          canBegin: totalLength2 > 0,
          from: "0px ".concat(totalLength2 === -1 ? 1 : totalLength2, "px"),
          to: "".concat(totalLength2, "px 0px"),
          attributeName: "strokeDasharray",
          begin: animationBegin,
          duration: animationDuration,
          isActive: isAnimationActive,
          easing: animationEasing
        }, /* @__PURE__ */ React$1.createElement("path", _extends$e({}, filterProps(props, true), {
          className: layerClass,
          d: getRectanglePath(currX, currY, currWidth, currHeight, radius),
          ref: pathRef
        })));
      });
    };
    function _extends$d() {
      _extends$d = Object.assign ? Object.assign.bind() : function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends$d.apply(this, arguments);
    }
    var Dot = function Dot2(props) {
      var cx = props.cx, cy = props.cy, r2 = props.r, className = props.className;
      var layerClass = clsx("recharts-dot", className);
      if (cx === +cx && cy === +cy && r2 === +r2) {
        return /* @__PURE__ */ React$1.createElement("circle", _extends$d({}, filterProps(props, false), adaptEventHandlers(props), {
          className: layerClass,
          cx,
          cy,
          r: r2
        }));
      }
      return null;
    };
    function _typeof$g(o2) {
      "@babel/helpers - typeof";
      return _typeof$g = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
        return typeof o3;
      } : function(o3) {
        return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
      }, _typeof$g(o2);
    }
    var _excluded$6 = ["x", "y", "top", "left", "width", "height", "className"];
    function _extends$c() {
      _extends$c = Object.assign ? Object.assign.bind() : function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends$c.apply(this, arguments);
    }
    function ownKeys$f(e3, r2) {
      var t2 = Object.keys(e3);
      if (Object.getOwnPropertySymbols) {
        var o2 = Object.getOwnPropertySymbols(e3);
        r2 && (o2 = o2.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e3, r3).enumerable;
        })), t2.push.apply(t2, o2);
      }
      return t2;
    }
    function _objectSpread$f(e3) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t2 = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$f(Object(t2), true).forEach(function(r3) {
          _defineProperty$g(e3, r3, t2[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$f(Object(t2)).forEach(function(r3) {
          Object.defineProperty(e3, r3, Object.getOwnPropertyDescriptor(t2, r3));
        });
      }
      return e3;
    }
    function _defineProperty$g(obj, key, value2) {
      key = _toPropertyKey$g(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value: value2, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value2;
      }
      return obj;
    }
    function _toPropertyKey$g(t2) {
      var i2 = _toPrimitive$g(t2, "string");
      return "symbol" == _typeof$g(i2) ? i2 : String(i2);
    }
    function _toPrimitive$g(t2, r2) {
      if ("object" != _typeof$g(t2) || !t2)
        return t2;
      var e3 = t2[Symbol.toPrimitive];
      if (void 0 !== e3) {
        var i2 = e3.call(t2, r2 || "default");
        if ("object" != _typeof$g(i2))
          return i2;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r2 ? String : Number)(t2);
    }
    function _objectWithoutProperties$6(source, excluded) {
      if (source == null)
        return {};
      var target = _objectWithoutPropertiesLoose$6(source, excluded);
      var key, i2;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i2 = 0; i2 < sourceSymbolKeys.length; i2++) {
          key = sourceSymbolKeys[i2];
          if (excluded.indexOf(key) >= 0)
            continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key))
            continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose$6(source, excluded) {
      if (source == null)
        return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i2;
      for (i2 = 0; i2 < sourceKeys.length; i2++) {
        key = sourceKeys[i2];
        if (excluded.indexOf(key) >= 0)
          continue;
        target[key] = source[key];
      }
      return target;
    }
    var getPath = function getPath2(x2, y2, width, height, top, left) {
      return "M".concat(x2, ",").concat(top, "v").concat(height, "M").concat(left, ",").concat(y2, "h").concat(width);
    };
    var Cross = function Cross2(_ref) {
      var _ref$x = _ref.x, x2 = _ref$x === void 0 ? 0 : _ref$x, _ref$y = _ref.y, y2 = _ref$y === void 0 ? 0 : _ref$y, _ref$top = _ref.top, top = _ref$top === void 0 ? 0 : _ref$top, _ref$left = _ref.left, left = _ref$left === void 0 ? 0 : _ref$left, _ref$width = _ref.width, width = _ref$width === void 0 ? 0 : _ref$width, _ref$height = _ref.height, height = _ref$height === void 0 ? 0 : _ref$height, className = _ref.className, rest = _objectWithoutProperties$6(_ref, _excluded$6);
      var props = _objectSpread$f({
        x: x2,
        y: y2,
        top,
        left,
        width,
        height
      }, rest);
      if (!isNumber(x2) || !isNumber(y2) || !isNumber(width) || !isNumber(height) || !isNumber(top) || !isNumber(left)) {
        return null;
      }
      return /* @__PURE__ */ React$1.createElement("path", _extends$c({}, filterProps(props, true), {
        className: clsx("recharts-cross", className),
        d: getPath(x2, y2, width, height, top, left)
      }));
    };
    var overArg = _overArg;
    var getPrototype$1 = overArg(Object.getPrototypeOf, Object);
    var _getPrototype = getPrototype$1;
    var baseGetTag$1 = _baseGetTag, getPrototype = _getPrototype, isObjectLike$1 = isObjectLike_1;
    var objectTag = "[object Object]";
    var funcProto = Function.prototype, objectProto = Object.prototype;
    var funcToString = funcProto.toString;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var objectCtorString = funcToString.call(Object);
    function isPlainObject(value2) {
      if (!isObjectLike$1(value2) || baseGetTag$1(value2) != objectTag) {
        return false;
      }
      var proto2 = getPrototype(value2);
      if (proto2 === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto2, "constructor") && proto2.constructor;
      return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
    }
    var isPlainObject_1 = isPlainObject;
    const isPlainObject$1 = /* @__PURE__ */ getDefaultExportFromCjs(isPlainObject_1);
    var baseGetTag = _baseGetTag, isObjectLike = isObjectLike_1;
    var boolTag = "[object Boolean]";
    function isBoolean(value2) {
      return value2 === true || value2 === false || isObjectLike(value2) && baseGetTag(value2) == boolTag;
    }
    var isBoolean_1 = isBoolean;
    const isBoolean$1 = /* @__PURE__ */ getDefaultExportFromCjs(isBoolean_1);
    function _typeof$f(o2) {
      "@babel/helpers - typeof";
      return _typeof$f = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
        return typeof o3;
      } : function(o3) {
        return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
      }, _typeof$f(o2);
    }
    function _extends$b() {
      _extends$b = Object.assign ? Object.assign.bind() : function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends$b.apply(this, arguments);
    }
    function _slicedToArray$2(arr, i2) {
      return _arrayWithHoles$2(arr) || _iterableToArrayLimit$2(arr, i2) || _unsupportedIterableToArray$3(arr, i2) || _nonIterableRest$2();
    }
    function _nonIterableRest$2() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray$3(o2, minLen) {
      if (!o2)
        return;
      if (typeof o2 === "string")
        return _arrayLikeToArray$3(o2, minLen);
      var n2 = Object.prototype.toString.call(o2).slice(8, -1);
      if (n2 === "Object" && o2.constructor)
        n2 = o2.constructor.name;
      if (n2 === "Map" || n2 === "Set")
        return Array.from(o2);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
        return _arrayLikeToArray$3(o2, minLen);
    }
    function _arrayLikeToArray$3(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++)
        arr2[i2] = arr[i2];
      return arr2;
    }
    function _iterableToArrayLimit$2(r2, l2) {
      var t2 = null == r2 ? null : "undefined" != typeof Symbol && r2[Symbol.iterator] || r2["@@iterator"];
      if (null != t2) {
        var e3, n2, i2, u2, a2 = [], f2 = true, o2 = false;
        try {
          if (i2 = (t2 = t2.call(r2)).next, 0 === l2) {
            if (Object(t2) !== t2)
              return;
            f2 = false;
          } else
            for (; !(f2 = (e3 = i2.call(t2)).done) && (a2.push(e3.value), a2.length !== l2); f2 = true)
              ;
        } catch (r3) {
          o2 = true, n2 = r3;
        } finally {
          try {
            if (!f2 && null != t2["return"] && (u2 = t2["return"](), Object(u2) !== u2))
              return;
          } finally {
            if (o2)
              throw n2;
          }
        }
        return a2;
      }
    }
    function _arrayWithHoles$2(arr) {
      if (Array.isArray(arr))
        return arr;
    }
    function ownKeys$e(e3, r2) {
      var t2 = Object.keys(e3);
      if (Object.getOwnPropertySymbols) {
        var o2 = Object.getOwnPropertySymbols(e3);
        r2 && (o2 = o2.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e3, r3).enumerable;
        })), t2.push.apply(t2, o2);
      }
      return t2;
    }
    function _objectSpread$e(e3) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t2 = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$e(Object(t2), true).forEach(function(r3) {
          _defineProperty$f(e3, r3, t2[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$e(Object(t2)).forEach(function(r3) {
          Object.defineProperty(e3, r3, Object.getOwnPropertyDescriptor(t2, r3));
        });
      }
      return e3;
    }
    function _defineProperty$f(obj, key, value2) {
      key = _toPropertyKey$f(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value: value2, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value2;
      }
      return obj;
    }
    function _toPropertyKey$f(t2) {
      var i2 = _toPrimitive$f(t2, "string");
      return "symbol" == _typeof$f(i2) ? i2 : String(i2);
    }
    function _toPrimitive$f(t2, r2) {
      if ("object" != _typeof$f(t2) || !t2)
        return t2;
      var e3 = t2[Symbol.toPrimitive];
      if (void 0 !== e3) {
        var i2 = e3.call(t2, r2 || "default");
        if ("object" != _typeof$f(i2))
          return i2;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r2 ? String : Number)(t2);
    }
    var getTrapezoidPath = function getTrapezoidPath2(x2, y2, upperWidth, lowerWidth, height) {
      var widthGap = upperWidth - lowerWidth;
      var path;
      path = "M ".concat(x2, ",").concat(y2);
      path += "L ".concat(x2 + upperWidth, ",").concat(y2);
      path += "L ".concat(x2 + upperWidth - widthGap / 2, ",").concat(y2 + height);
      path += "L ".concat(x2 + upperWidth - widthGap / 2 - lowerWidth, ",").concat(y2 + height);
      path += "L ".concat(x2, ",").concat(y2, " Z");
      return path;
    };
    var defaultProps$1 = {
      x: 0,
      y: 0,
      upperWidth: 0,
      lowerWidth: 0,
      height: 0,
      isUpdateAnimationActive: false,
      animationBegin: 0,
      animationDuration: 1500,
      animationEasing: "ease"
    };
    var Trapezoid = function Trapezoid2(props) {
      var trapezoidProps = _objectSpread$e(_objectSpread$e({}, defaultProps$1), props);
      var pathRef = reactExports.useRef();
      var _useState = reactExports.useState(-1), _useState2 = _slicedToArray$2(_useState, 2), totalLength2 = _useState2[0], setTotalLength = _useState2[1];
      reactExports.useEffect(function() {
        if (pathRef.current && pathRef.current.getTotalLength) {
          try {
            var pathTotalLength = pathRef.current.getTotalLength();
            if (pathTotalLength) {
              setTotalLength(pathTotalLength);
            }
          } catch (err) {
          }
        }
      }, []);
      var x2 = trapezoidProps.x, y2 = trapezoidProps.y, upperWidth = trapezoidProps.upperWidth, lowerWidth = trapezoidProps.lowerWidth, height = trapezoidProps.height, className = trapezoidProps.className;
      var animationEasing = trapezoidProps.animationEasing, animationDuration = trapezoidProps.animationDuration, animationBegin = trapezoidProps.animationBegin, isUpdateAnimationActive = trapezoidProps.isUpdateAnimationActive;
      if (x2 !== +x2 || y2 !== +y2 || upperWidth !== +upperWidth || lowerWidth !== +lowerWidth || height !== +height || upperWidth === 0 && lowerWidth === 0 || height === 0) {
        return null;
      }
      var layerClass = clsx("recharts-trapezoid", className);
      if (!isUpdateAnimationActive) {
        return /* @__PURE__ */ React$1.createElement("g", null, /* @__PURE__ */ React$1.createElement("path", _extends$b({}, filterProps(trapezoidProps, true), {
          className: layerClass,
          d: getTrapezoidPath(x2, y2, upperWidth, lowerWidth, height)
        })));
      }
      return /* @__PURE__ */ React$1.createElement(Animate, {
        canBegin: totalLength2 > 0,
        from: {
          upperWidth: 0,
          lowerWidth: 0,
          height,
          x: x2,
          y: y2
        },
        to: {
          upperWidth,
          lowerWidth,
          height,
          x: x2,
          y: y2
        },
        duration: animationDuration,
        animationEasing,
        isActive: isUpdateAnimationActive
      }, function(_ref) {
        var currUpperWidth = _ref.upperWidth, currLowerWidth = _ref.lowerWidth, currHeight = _ref.height, currX = _ref.x, currY = _ref.y;
        return /* @__PURE__ */ React$1.createElement(Animate, {
          canBegin: totalLength2 > 0,
          from: "0px ".concat(totalLength2 === -1 ? 1 : totalLength2, "px"),
          to: "".concat(totalLength2, "px 0px"),
          attributeName: "strokeDasharray",
          begin: animationBegin,
          duration: animationDuration,
          easing: animationEasing
        }, /* @__PURE__ */ React$1.createElement("path", _extends$b({}, filterProps(trapezoidProps, true), {
          className: layerClass,
          d: getTrapezoidPath(currX, currY, currUpperWidth, currLowerWidth, currHeight),
          ref: pathRef
        })));
      });
    };
    var _excluded$5 = ["option", "shapeType", "propTransformer", "activeClassName", "isActive"];
    function _typeof$e(o2) {
      "@babel/helpers - typeof";
      return _typeof$e = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
        return typeof o3;
      } : function(o3) {
        return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
      }, _typeof$e(o2);
    }
    function _objectWithoutProperties$5(source, excluded) {
      if (source == null)
        return {};
      var target = _objectWithoutPropertiesLoose$5(source, excluded);
      var key, i2;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i2 = 0; i2 < sourceSymbolKeys.length; i2++) {
          key = sourceSymbolKeys[i2];
          if (excluded.indexOf(key) >= 0)
            continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key))
            continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose$5(source, excluded) {
      if (source == null)
        return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i2;
      for (i2 = 0; i2 < sourceKeys.length; i2++) {
        key = sourceKeys[i2];
        if (excluded.indexOf(key) >= 0)
          continue;
        target[key] = source[key];
      }
      return target;
    }
    function ownKeys$d(e3, r2) {
      var t2 = Object.keys(e3);
      if (Object.getOwnPropertySymbols) {
        var o2 = Object.getOwnPropertySymbols(e3);
        r2 && (o2 = o2.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e3, r3).enumerable;
        })), t2.push.apply(t2, o2);
      }
      return t2;
    }
    function _objectSpread$d(e3) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t2 = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$d(Object(t2), true).forEach(function(r3) {
          _defineProperty$e(e3, r3, t2[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$d(Object(t2)).forEach(function(r3) {
          Object.defineProperty(e3, r3, Object.getOwnPropertyDescriptor(t2, r3));
        });
      }
      return e3;
    }
    function _defineProperty$e(obj, key, value2) {
      key = _toPropertyKey$e(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value: value2, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value2;
      }
      return obj;
    }
    function _toPropertyKey$e(t2) {
      var i2 = _toPrimitive$e(t2, "string");
      return "symbol" == _typeof$e(i2) ? i2 : String(i2);
    }
    function _toPrimitive$e(t2, r2) {
      if ("object" != _typeof$e(t2) || !t2)
        return t2;
      var e3 = t2[Symbol.toPrimitive];
      if (void 0 !== e3) {
        var i2 = e3.call(t2, r2 || "default");
        if ("object" != _typeof$e(i2))
          return i2;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r2 ? String : Number)(t2);
    }
    function defaultPropTransformer(option, props) {
      return _objectSpread$d(_objectSpread$d({}, props), option);
    }
    function isSymbolsProps(shapeType, _elementProps) {
      return shapeType === "symbols";
    }
    function ShapeSelector(_ref) {
      var shapeType = _ref.shapeType, elementProps = _ref.elementProps;
      switch (shapeType) {
        case "rectangle":
          return /* @__PURE__ */ React$1.createElement(Rectangle, elementProps);
        case "trapezoid":
          return /* @__PURE__ */ React$1.createElement(Trapezoid, elementProps);
        case "sector":
          return /* @__PURE__ */ React$1.createElement(Sector, elementProps);
        case "symbols":
          if (isSymbolsProps(shapeType)) {
            return /* @__PURE__ */ React$1.createElement(Symbols, elementProps);
          }
          break;
        default:
          return null;
      }
    }
    function getPropsFromShapeOption(option) {
      if (/* @__PURE__ */ reactExports.isValidElement(option)) {
        return option.props;
      }
      return option;
    }
    function Shape(_ref2) {
      var option = _ref2.option, shapeType = _ref2.shapeType, _ref2$propTransformer = _ref2.propTransformer, propTransformer = _ref2$propTransformer === void 0 ? defaultPropTransformer : _ref2$propTransformer, _ref2$activeClassName = _ref2.activeClassName, activeClassName = _ref2$activeClassName === void 0 ? "recharts-active-shape" : _ref2$activeClassName, isActive = _ref2.isActive, props = _objectWithoutProperties$5(_ref2, _excluded$5);
      var shape;
      if (/* @__PURE__ */ reactExports.isValidElement(option)) {
        shape = /* @__PURE__ */ reactExports.cloneElement(option, _objectSpread$d(_objectSpread$d({}, props), getPropsFromShapeOption(option)));
      } else if (isFunction$4(option)) {
        shape = option(props);
      } else if (isPlainObject$1(option) && !isBoolean$1(option)) {
        var nextProps = propTransformer(option, props);
        shape = /* @__PURE__ */ React$1.createElement(ShapeSelector, {
          shapeType,
          elementProps: nextProps
        });
      } else {
        var elementProps = props;
        shape = /* @__PURE__ */ React$1.createElement(ShapeSelector, {
          shapeType,
          elementProps
        });
      }
      if (isActive) {
        return /* @__PURE__ */ React$1.createElement(Layer, {
          className: activeClassName
        }, shape);
      }
      return shape;
    }
    function isFunnel(graphicalItem, _item) {
      return _item != null && "trapezoids" in graphicalItem.props;
    }
    function isPie(graphicalItem, _item) {
      return _item != null && "sectors" in graphicalItem.props;
    }
    function isScatter(graphicalItem, _item) {
      return _item != null && "points" in graphicalItem.props;
    }
    function compareFunnel(shapeData, activeTooltipItem) {
      var _activeTooltipItem$la, _activeTooltipItem$la2;
      var xMatches = shapeData.x === (activeTooltipItem === null || activeTooltipItem === void 0 || (_activeTooltipItem$la = activeTooltipItem.labelViewBox) === null || _activeTooltipItem$la === void 0 ? void 0 : _activeTooltipItem$la.x) || shapeData.x === activeTooltipItem.x;
      var yMatches = shapeData.y === (activeTooltipItem === null || activeTooltipItem === void 0 || (_activeTooltipItem$la2 = activeTooltipItem.labelViewBox) === null || _activeTooltipItem$la2 === void 0 ? void 0 : _activeTooltipItem$la2.y) || shapeData.y === activeTooltipItem.y;
      return xMatches && yMatches;
    }
    function comparePie(shapeData, activeTooltipItem) {
      var startAngleMatches = shapeData.endAngle === activeTooltipItem.endAngle;
      var endAngleMatches = shapeData.startAngle === activeTooltipItem.startAngle;
      return startAngleMatches && endAngleMatches;
    }
    function compareScatter(shapeData, activeTooltipItem) {
      var xMatches = shapeData.x === activeTooltipItem.x;
      var yMatches = shapeData.y === activeTooltipItem.y;
      var zMatches = shapeData.z === activeTooltipItem.z;
      return xMatches && yMatches && zMatches;
    }
    function getComparisonFn(graphicalItem, activeItem) {
      var comparison;
      if (isFunnel(graphicalItem, activeItem)) {
        comparison = compareFunnel;
      } else if (isPie(graphicalItem, activeItem)) {
        comparison = comparePie;
      } else if (isScatter(graphicalItem, activeItem)) {
        comparison = compareScatter;
      }
      return comparison;
    }
    function getShapeDataKey(graphicalItem, activeItem) {
      var shapeKey;
      if (isFunnel(graphicalItem, activeItem)) {
        shapeKey = "trapezoids";
      } else if (isPie(graphicalItem, activeItem)) {
        shapeKey = "sectors";
      } else if (isScatter(graphicalItem, activeItem)) {
        shapeKey = "points";
      }
      return shapeKey;
    }
    function getActiveShapeTooltipPayload(graphicalItem, activeItem) {
      if (isFunnel(graphicalItem, activeItem)) {
        var _activeItem$tooltipPa;
        return (_activeItem$tooltipPa = activeItem.tooltipPayload) === null || _activeItem$tooltipPa === void 0 || (_activeItem$tooltipPa = _activeItem$tooltipPa[0]) === null || _activeItem$tooltipPa === void 0 || (_activeItem$tooltipPa = _activeItem$tooltipPa.payload) === null || _activeItem$tooltipPa === void 0 ? void 0 : _activeItem$tooltipPa.payload;
      }
      if (isPie(graphicalItem, activeItem)) {
        var _activeItem$tooltipPa2;
        return (_activeItem$tooltipPa2 = activeItem.tooltipPayload) === null || _activeItem$tooltipPa2 === void 0 || (_activeItem$tooltipPa2 = _activeItem$tooltipPa2[0]) === null || _activeItem$tooltipPa2 === void 0 || (_activeItem$tooltipPa2 = _activeItem$tooltipPa2.payload) === null || _activeItem$tooltipPa2 === void 0 ? void 0 : _activeItem$tooltipPa2.payload;
      }
      if (isScatter(graphicalItem, activeItem)) {
        return activeItem.payload;
      }
      return {};
    }
    function getActiveShapeIndexForTooltip(_ref3) {
      var activeTooltipItem = _ref3.activeTooltipItem, graphicalItem = _ref3.graphicalItem, itemData = _ref3.itemData;
      var shapeKey = getShapeDataKey(graphicalItem, activeTooltipItem);
      var tooltipPayload = getActiveShapeTooltipPayload(graphicalItem, activeTooltipItem);
      var activeItemMatches = itemData.filter(function(datum, dataIndex) {
        var valuesMatch = isEqual$1(tooltipPayload, datum);
        var mouseCoordinateMatches = graphicalItem.props[shapeKey].filter(function(shapeData) {
          var comparison = getComparisonFn(graphicalItem, activeTooltipItem);
          return comparison(shapeData, activeTooltipItem);
        });
        var indexOfMouseCoordinates = graphicalItem.props[shapeKey].indexOf(mouseCoordinateMatches[mouseCoordinateMatches.length - 1]);
        var coordinatesMatch = dataIndex === indexOfMouseCoordinates;
        return valuesMatch && coordinatesMatch;
      });
      var activeIndex = itemData.indexOf(activeItemMatches[activeItemMatches.length - 1]);
      return activeIndex;
    }
    var nativeCeil = Math.ceil, nativeMax$1 = Math.max;
    function baseRange$1(start, end, step, fromRight) {
      var index = -1, length = nativeMax$1(nativeCeil((end - start) / (step || 1)), 0), result = Array(length);
      while (length--) {
        result[fromRight ? length : ++index] = start;
        start += step;
      }
      return result;
    }
    var _baseRange = baseRange$1;
    var toNumber = toNumber_1;
    var INFINITY = 1 / 0, MAX_INTEGER = 17976931348623157e292;
    function toFinite$2(value2) {
      if (!value2) {
        return value2 === 0 ? value2 : 0;
      }
      value2 = toNumber(value2);
      if (value2 === INFINITY || value2 === -INFINITY) {
        var sign2 = value2 < 0 ? -1 : 1;
        return sign2 * MAX_INTEGER;
      }
      return value2 === value2 ? value2 : 0;
    }
    var toFinite_1 = toFinite$2;
    var baseRange = _baseRange, isIterateeCall$2 = _isIterateeCall, toFinite$1 = toFinite_1;
    function createRange$1(fromRight) {
      return function(start, end, step) {
        if (step && typeof step != "number" && isIterateeCall$2(start, end, step)) {
          end = step = void 0;
        }
        start = toFinite$1(start);
        if (end === void 0) {
          end = start;
          start = 0;
        } else {
          end = toFinite$1(end);
        }
        step = step === void 0 ? start < end ? 1 : -1 : toFinite$1(step);
        return baseRange(start, end, step, fromRight);
      };
    }
    var _createRange = createRange$1;
    var createRange = _createRange;
    var range = createRange();
    var range_1 = range;
    const range$1 = /* @__PURE__ */ getDefaultExportFromCjs(range_1);
    function _typeof$d(o2) {
      "@babel/helpers - typeof";
      return _typeof$d = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
        return typeof o3;
      } : function(o3) {
        return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
      }, _typeof$d(o2);
    }
    function ownKeys$c(e3, r2) {
      var t2 = Object.keys(e3);
      if (Object.getOwnPropertySymbols) {
        var o2 = Object.getOwnPropertySymbols(e3);
        r2 && (o2 = o2.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e3, r3).enumerable;
        })), t2.push.apply(t2, o2);
      }
      return t2;
    }
    function _objectSpread$c(e3) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t2 = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$c(Object(t2), true).forEach(function(r3) {
          _defineProperty$d(e3, r3, t2[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$c(Object(t2)).forEach(function(r3) {
          Object.defineProperty(e3, r3, Object.getOwnPropertyDescriptor(t2, r3));
        });
      }
      return e3;
    }
    function _defineProperty$d(obj, key, value2) {
      key = _toPropertyKey$d(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value: value2, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value2;
      }
      return obj;
    }
    function _toPropertyKey$d(t2) {
      var i2 = _toPrimitive$d(t2, "string");
      return "symbol" == _typeof$d(i2) ? i2 : String(i2);
    }
    function _toPrimitive$d(t2, r2) {
      if ("object" != _typeof$d(t2) || !t2)
        return t2;
      var e3 = t2[Symbol.toPrimitive];
      if (void 0 !== e3) {
        var i2 = e3.call(t2, r2 || "default");
        if ("object" != _typeof$d(i2))
          return i2;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r2 ? String : Number)(t2);
    }
    var PREFIX_LIST = ["Webkit", "Moz", "O", "ms"];
    var generatePrefixStyle = function generatePrefixStyle2(name, value2) {
      if (!name) {
        return null;
      }
      var camelName = name.replace(/(\w)/, function(v2) {
        return v2.toUpperCase();
      });
      var result = PREFIX_LIST.reduce(function(res, entry) {
        return _objectSpread$c(_objectSpread$c({}, res), {}, _defineProperty$d({}, entry + camelName, value2));
      }, {});
      result[name] = value2;
      return result;
    };
    function _typeof$c(o2) {
      "@babel/helpers - typeof";
      return _typeof$c = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
        return typeof o3;
      } : function(o3) {
        return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
      }, _typeof$c(o2);
    }
    function _extends$a() {
      _extends$a = Object.assign ? Object.assign.bind() : function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends$a.apply(this, arguments);
    }
    function ownKeys$b(e3, r2) {
      var t2 = Object.keys(e3);
      if (Object.getOwnPropertySymbols) {
        var o2 = Object.getOwnPropertySymbols(e3);
        r2 && (o2 = o2.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e3, r3).enumerable;
        })), t2.push.apply(t2, o2);
      }
      return t2;
    }
    function _objectSpread$b(e3) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t2 = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$b(Object(t2), true).forEach(function(r3) {
          _defineProperty$c(e3, r3, t2[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$b(Object(t2)).forEach(function(r3) {
          Object.defineProperty(e3, r3, Object.getOwnPropertyDescriptor(t2, r3));
        });
      }
      return e3;
    }
    function _classCallCheck$5(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties$5(target, props) {
      for (var i2 = 0; i2 < props.length; i2++) {
        var descriptor = props[i2];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey$c(descriptor.key), descriptor);
      }
    }
    function _createClass$5(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties$5(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties$5(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _callSuper$3(t2, o2, e3) {
      return o2 = _getPrototypeOf$3(o2), _possibleConstructorReturn$3(t2, _isNativeReflectConstruct$3() ? Reflect.construct(o2, e3 || [], _getPrototypeOf$3(t2).constructor) : o2.apply(t2, e3));
    }
    function _possibleConstructorReturn$3(self2, call) {
      if (call && (_typeof$c(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }
      return _assertThisInitialized$3(self2);
    }
    function _isNativeReflectConstruct$3() {
      try {
        var t2 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
      } catch (t3) {
      }
      return (_isNativeReflectConstruct$3 = function _isNativeReflectConstruct2() {
        return !!t2;
      })();
    }
    function _getPrototypeOf$3(o2) {
      _getPrototypeOf$3 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o3) {
        return o3.__proto__ || Object.getPrototypeOf(o3);
      };
      return _getPrototypeOf$3(o2);
    }
    function _assertThisInitialized$3(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _inherits$3(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      Object.defineProperty(subClass, "prototype", { writable: false });
      if (superClass)
        _setPrototypeOf$3(subClass, superClass);
    }
    function _setPrototypeOf$3(o2, p2) {
      _setPrototypeOf$3 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o3, p3) {
        o3.__proto__ = p3;
        return o3;
      };
      return _setPrototypeOf$3(o2, p2);
    }
    function _defineProperty$c(obj, key, value2) {
      key = _toPropertyKey$c(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value: value2, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value2;
      }
      return obj;
    }
    function _toPropertyKey$c(t2) {
      var i2 = _toPrimitive$c(t2, "string");
      return "symbol" == _typeof$c(i2) ? i2 : String(i2);
    }
    function _toPrimitive$c(t2, r2) {
      if ("object" != _typeof$c(t2) || !t2)
        return t2;
      var e3 = t2[Symbol.toPrimitive];
      if (void 0 !== e3) {
        var i2 = e3.call(t2, r2 || "default");
        if ("object" != _typeof$c(i2))
          return i2;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r2 ? String : Number)(t2);
    }
    var createScale = function createScale2(_ref) {
      var data = _ref.data, startIndex = _ref.startIndex, endIndex = _ref.endIndex, x2 = _ref.x, width = _ref.width, travellerWidth = _ref.travellerWidth;
      if (!data || !data.length) {
        return {};
      }
      var len = data.length;
      var scale = point().domain(range$1(0, len)).range([x2, x2 + width - travellerWidth]);
      var scaleValues = scale.domain().map(function(entry) {
        return scale(entry);
      });
      return {
        isTextActive: false,
        isSlideMoving: false,
        isTravellerMoving: false,
        isTravellerFocused: false,
        startX: scale(startIndex),
        endX: scale(endIndex),
        scale,
        scaleValues
      };
    };
    var isTouch = function isTouch2(e3) {
      return e3.changedTouches && !!e3.changedTouches.length;
    };
    var Brush = /* @__PURE__ */ function(_PureComponent) {
      _inherits$3(Brush2, _PureComponent);
      function Brush2(props) {
        var _this;
        _classCallCheck$5(this, Brush2);
        _this = _callSuper$3(this, Brush2, [props]);
        _defineProperty$c(_assertThisInitialized$3(_this), "handleDrag", function(e3) {
          if (_this.leaveTimer) {
            clearTimeout(_this.leaveTimer);
            _this.leaveTimer = null;
          }
          if (_this.state.isTravellerMoving) {
            _this.handleTravellerMove(e3);
          } else if (_this.state.isSlideMoving) {
            _this.handleSlideDrag(e3);
          }
        });
        _defineProperty$c(_assertThisInitialized$3(_this), "handleTouchMove", function(e3) {
          if (e3.changedTouches != null && e3.changedTouches.length > 0) {
            _this.handleDrag(e3.changedTouches[0]);
          }
        });
        _defineProperty$c(_assertThisInitialized$3(_this), "handleDragEnd", function() {
          _this.setState({
            isTravellerMoving: false,
            isSlideMoving: false
          }, function() {
            var _this$props = _this.props, endIndex = _this$props.endIndex, onDragEnd = _this$props.onDragEnd, startIndex = _this$props.startIndex;
            onDragEnd === null || onDragEnd === void 0 || onDragEnd({
              endIndex,
              startIndex
            });
          });
          _this.detachDragEndListener();
        });
        _defineProperty$c(_assertThisInitialized$3(_this), "handleLeaveWrapper", function() {
          if (_this.state.isTravellerMoving || _this.state.isSlideMoving) {
            _this.leaveTimer = window.setTimeout(_this.handleDragEnd, _this.props.leaveTimeOut);
          }
        });
        _defineProperty$c(_assertThisInitialized$3(_this), "handleEnterSlideOrTraveller", function() {
          _this.setState({
            isTextActive: true
          });
        });
        _defineProperty$c(_assertThisInitialized$3(_this), "handleLeaveSlideOrTraveller", function() {
          _this.setState({
            isTextActive: false
          });
        });
        _defineProperty$c(_assertThisInitialized$3(_this), "handleSlideDragStart", function(e3) {
          var event = isTouch(e3) ? e3.changedTouches[0] : e3;
          _this.setState({
            isTravellerMoving: false,
            isSlideMoving: true,
            slideMoveStartX: event.pageX
          });
          _this.attachDragEndListener();
        });
        _this.travellerDragStartHandlers = {
          startX: _this.handleTravellerDragStart.bind(_assertThisInitialized$3(_this), "startX"),
          endX: _this.handleTravellerDragStart.bind(_assertThisInitialized$3(_this), "endX")
        };
        _this.state = {};
        return _this;
      }
      _createClass$5(Brush2, [{
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          if (this.leaveTimer) {
            clearTimeout(this.leaveTimer);
            this.leaveTimer = null;
          }
          this.detachDragEndListener();
        }
      }, {
        key: "getIndex",
        value: function getIndex(_ref2) {
          var startX = _ref2.startX, endX = _ref2.endX;
          var scaleValues = this.state.scaleValues;
          var _this$props2 = this.props, gap = _this$props2.gap, data = _this$props2.data;
          var lastIndex = data.length - 1;
          var min2 = Math.min(startX, endX);
          var max2 = Math.max(startX, endX);
          var minIndex = Brush2.getIndexInRange(scaleValues, min2);
          var maxIndex = Brush2.getIndexInRange(scaleValues, max2);
          return {
            startIndex: minIndex - minIndex % gap,
            endIndex: maxIndex === lastIndex ? lastIndex : maxIndex - maxIndex % gap
          };
        }
      }, {
        key: "getTextOfTick",
        value: function getTextOfTick(index) {
          var _this$props3 = this.props, data = _this$props3.data, tickFormatter = _this$props3.tickFormatter, dataKey = _this$props3.dataKey;
          var text = getValueByDataKey(data[index], dataKey, index);
          return isFunction$4(tickFormatter) ? tickFormatter(text, index) : text;
        }
      }, {
        key: "attachDragEndListener",
        value: function attachDragEndListener() {
          window.addEventListener("mouseup", this.handleDragEnd, true);
          window.addEventListener("touchend", this.handleDragEnd, true);
          window.addEventListener("mousemove", this.handleDrag, true);
        }
      }, {
        key: "detachDragEndListener",
        value: function detachDragEndListener() {
          window.removeEventListener("mouseup", this.handleDragEnd, true);
          window.removeEventListener("touchend", this.handleDragEnd, true);
          window.removeEventListener("mousemove", this.handleDrag, true);
        }
      }, {
        key: "handleSlideDrag",
        value: function handleSlideDrag(e3) {
          var _this$state = this.state, slideMoveStartX = _this$state.slideMoveStartX, startX = _this$state.startX, endX = _this$state.endX;
          var _this$props4 = this.props, x2 = _this$props4.x, width = _this$props4.width, travellerWidth = _this$props4.travellerWidth, startIndex = _this$props4.startIndex, endIndex = _this$props4.endIndex, onChange = _this$props4.onChange;
          var delta = e3.pageX - slideMoveStartX;
          if (delta > 0) {
            delta = Math.min(delta, x2 + width - travellerWidth - endX, x2 + width - travellerWidth - startX);
          } else if (delta < 0) {
            delta = Math.max(delta, x2 - startX, x2 - endX);
          }
          var newIndex = this.getIndex({
            startX: startX + delta,
            endX: endX + delta
          });
          if ((newIndex.startIndex !== startIndex || newIndex.endIndex !== endIndex) && onChange) {
            onChange(newIndex);
          }
          this.setState({
            startX: startX + delta,
            endX: endX + delta,
            slideMoveStartX: e3.pageX
          });
        }
      }, {
        key: "handleTravellerDragStart",
        value: function handleTravellerDragStart(id2, e3) {
          var event = isTouch(e3) ? e3.changedTouches[0] : e3;
          this.setState({
            isSlideMoving: false,
            isTravellerMoving: true,
            movingTravellerId: id2,
            brushMoveStartX: event.pageX
          });
          this.attachDragEndListener();
        }
      }, {
        key: "handleTravellerMove",
        value: function handleTravellerMove(e3) {
          var _this$state2 = this.state, brushMoveStartX = _this$state2.brushMoveStartX, movingTravellerId = _this$state2.movingTravellerId, endX = _this$state2.endX, startX = _this$state2.startX;
          var prevValue = this.state[movingTravellerId];
          var _this$props5 = this.props, x2 = _this$props5.x, width = _this$props5.width, travellerWidth = _this$props5.travellerWidth, onChange = _this$props5.onChange, gap = _this$props5.gap, data = _this$props5.data;
          var params = {
            startX: this.state.startX,
            endX: this.state.endX
          };
          var delta = e3.pageX - brushMoveStartX;
          if (delta > 0) {
            delta = Math.min(delta, x2 + width - travellerWidth - prevValue);
          } else if (delta < 0) {
            delta = Math.max(delta, x2 - prevValue);
          }
          params[movingTravellerId] = prevValue + delta;
          var newIndex = this.getIndex(params);
          var startIndex = newIndex.startIndex, endIndex = newIndex.endIndex;
          var isFullGap = function isFullGap2() {
            var lastIndex = data.length - 1;
            if (movingTravellerId === "startX" && (endX > startX ? startIndex % gap === 0 : endIndex % gap === 0) || endX < startX && endIndex === lastIndex || movingTravellerId === "endX" && (endX > startX ? endIndex % gap === 0 : startIndex % gap === 0) || endX > startX && endIndex === lastIndex) {
              return true;
            }
            return false;
          };
          this.setState(_defineProperty$c(_defineProperty$c({}, movingTravellerId, prevValue + delta), "brushMoveStartX", e3.pageX), function() {
            if (onChange) {
              if (isFullGap()) {
                onChange(newIndex);
              }
            }
          });
        }
      }, {
        key: "handleTravellerMoveKeyboard",
        value: function handleTravellerMoveKeyboard(direction, id2) {
          var _this2 = this;
          var _this$state3 = this.state, scaleValues = _this$state3.scaleValues, startX = _this$state3.startX, endX = _this$state3.endX;
          var currentScaleValue = this.state[id2];
          var currentIndex = scaleValues.indexOf(currentScaleValue);
          if (currentIndex === -1) {
            return;
          }
          var newIndex = currentIndex + direction;
          if (newIndex === -1 || newIndex >= scaleValues.length) {
            return;
          }
          var newScaleValue = scaleValues[newIndex];
          if (id2 === "startX" && newScaleValue >= endX || id2 === "endX" && newScaleValue <= startX) {
            return;
          }
          this.setState(_defineProperty$c({}, id2, newScaleValue), function() {
            _this2.props.onChange(_this2.getIndex({
              startX: _this2.state.startX,
              endX: _this2.state.endX
            }));
          });
        }
      }, {
        key: "renderBackground",
        value: function renderBackground() {
          var _this$props6 = this.props, x2 = _this$props6.x, y2 = _this$props6.y, width = _this$props6.width, height = _this$props6.height, fill = _this$props6.fill, stroke = _this$props6.stroke;
          return /* @__PURE__ */ React$1.createElement("rect", {
            stroke,
            fill,
            x: x2,
            y: y2,
            width,
            height
          });
        }
      }, {
        key: "renderPanorama",
        value: function renderPanorama() {
          var _this$props7 = this.props, x2 = _this$props7.x, y2 = _this$props7.y, width = _this$props7.width, height = _this$props7.height, data = _this$props7.data, children = _this$props7.children, padding = _this$props7.padding;
          var chartElement = reactExports.Children.only(children);
          if (!chartElement) {
            return null;
          }
          return /* @__PURE__ */ React$1.cloneElement(chartElement, {
            x: x2,
            y: y2,
            width,
            height,
            margin: padding,
            compact: true,
            data
          });
        }
      }, {
        key: "renderTravellerLayer",
        value: function renderTravellerLayer(travellerX, id2) {
          var _this3 = this;
          var _this$props8 = this.props, y2 = _this$props8.y, travellerWidth = _this$props8.travellerWidth, height = _this$props8.height, traveller = _this$props8.traveller, ariaLabel = _this$props8.ariaLabel, data = _this$props8.data, startIndex = _this$props8.startIndex, endIndex = _this$props8.endIndex;
          var x2 = Math.max(travellerX, this.props.x);
          var travellerProps = _objectSpread$b(_objectSpread$b({}, filterProps(this.props, false)), {}, {
            x: x2,
            y: y2,
            width: travellerWidth,
            height
          });
          var ariaLabelBrush = ariaLabel || "Min value: ".concat(data[startIndex].name, ", Max value: ").concat(data[endIndex].name);
          return /* @__PURE__ */ React$1.createElement(Layer, {
            tabIndex: 0,
            role: "slider",
            "aria-label": ariaLabelBrush,
            "aria-valuenow": travellerX,
            className: "recharts-brush-traveller",
            onMouseEnter: this.handleEnterSlideOrTraveller,
            onMouseLeave: this.handleLeaveSlideOrTraveller,
            onMouseDown: this.travellerDragStartHandlers[id2],
            onTouchStart: this.travellerDragStartHandlers[id2],
            onKeyDown: function onKeyDown(e3) {
              if (!["ArrowLeft", "ArrowRight"].includes(e3.key)) {
                return;
              }
              e3.preventDefault();
              e3.stopPropagation();
              _this3.handleTravellerMoveKeyboard(e3.key === "ArrowRight" ? 1 : -1, id2);
            },
            onFocus: function onFocus2() {
              _this3.setState({
                isTravellerFocused: true
              });
            },
            onBlur: function onBlur() {
              _this3.setState({
                isTravellerFocused: false
              });
            },
            style: {
              cursor: "col-resize"
            }
          }, Brush2.renderTraveller(traveller, travellerProps));
        }
      }, {
        key: "renderSlide",
        value: function renderSlide(startX, endX) {
          var _this$props9 = this.props, y2 = _this$props9.y, height = _this$props9.height, stroke = _this$props9.stroke, travellerWidth = _this$props9.travellerWidth;
          var x2 = Math.min(startX, endX) + travellerWidth;
          var width = Math.max(Math.abs(endX - startX) - travellerWidth, 0);
          return /* @__PURE__ */ React$1.createElement("rect", {
            className: "recharts-brush-slide",
            onMouseEnter: this.handleEnterSlideOrTraveller,
            onMouseLeave: this.handleLeaveSlideOrTraveller,
            onMouseDown: this.handleSlideDragStart,
            onTouchStart: this.handleSlideDragStart,
            style: {
              cursor: "move"
            },
            stroke: "none",
            fill: stroke,
            fillOpacity: 0.2,
            x: x2,
            y: y2,
            width,
            height
          });
        }
      }, {
        key: "renderText",
        value: function renderText() {
          var _this$props10 = this.props, startIndex = _this$props10.startIndex, endIndex = _this$props10.endIndex, y2 = _this$props10.y, height = _this$props10.height, travellerWidth = _this$props10.travellerWidth, stroke = _this$props10.stroke;
          var _this$state4 = this.state, startX = _this$state4.startX, endX = _this$state4.endX;
          var offset2 = 5;
          var attrs = {
            pointerEvents: "none",
            fill: stroke
          };
          return /* @__PURE__ */ React$1.createElement(Layer, {
            className: "recharts-brush-texts"
          }, /* @__PURE__ */ React$1.createElement(Text, _extends$a({
            textAnchor: "end",
            verticalAnchor: "middle",
            x: Math.min(startX, endX) - offset2,
            y: y2 + height / 2
          }, attrs), this.getTextOfTick(startIndex)), /* @__PURE__ */ React$1.createElement(Text, _extends$a({
            textAnchor: "start",
            verticalAnchor: "middle",
            x: Math.max(startX, endX) + travellerWidth + offset2,
            y: y2 + height / 2
          }, attrs), this.getTextOfTick(endIndex)));
        }
      }, {
        key: "render",
        value: function render() {
          var _this$props11 = this.props, data = _this$props11.data, className = _this$props11.className, children = _this$props11.children, x2 = _this$props11.x, y2 = _this$props11.y, width = _this$props11.width, height = _this$props11.height, alwaysShowText = _this$props11.alwaysShowText;
          var _this$state5 = this.state, startX = _this$state5.startX, endX = _this$state5.endX, isTextActive = _this$state5.isTextActive, isSlideMoving = _this$state5.isSlideMoving, isTravellerMoving = _this$state5.isTravellerMoving, isTravellerFocused = _this$state5.isTravellerFocused;
          if (!data || !data.length || !isNumber(x2) || !isNumber(y2) || !isNumber(width) || !isNumber(height) || width <= 0 || height <= 0) {
            return null;
          }
          var layerClass = clsx("recharts-brush", className);
          var isPanoramic = React$1.Children.count(children) === 1;
          var style = generatePrefixStyle("userSelect", "none");
          return /* @__PURE__ */ React$1.createElement(Layer, {
            className: layerClass,
            onMouseLeave: this.handleLeaveWrapper,
            onTouchMove: this.handleTouchMove,
            style
          }, this.renderBackground(), isPanoramic && this.renderPanorama(), this.renderSlide(startX, endX), this.renderTravellerLayer(startX, "startX"), this.renderTravellerLayer(endX, "endX"), (isTextActive || isSlideMoving || isTravellerMoving || isTravellerFocused || alwaysShowText) && this.renderText());
        }
      }], [{
        key: "renderDefaultTraveller",
        value: function renderDefaultTraveller(props) {
          var x2 = props.x, y2 = props.y, width = props.width, height = props.height, stroke = props.stroke;
          var lineY = Math.floor(y2 + height / 2) - 1;
          return /* @__PURE__ */ React$1.createElement(React$1.Fragment, null, /* @__PURE__ */ React$1.createElement("rect", {
            x: x2,
            y: y2,
            width,
            height,
            fill: stroke,
            stroke: "none"
          }), /* @__PURE__ */ React$1.createElement("line", {
            x1: x2 + 1,
            y1: lineY,
            x2: x2 + width - 1,
            y2: lineY,
            fill: "none",
            stroke: "#fff"
          }), /* @__PURE__ */ React$1.createElement("line", {
            x1: x2 + 1,
            y1: lineY + 2,
            x2: x2 + width - 1,
            y2: lineY + 2,
            fill: "none",
            stroke: "#fff"
          }));
        }
      }, {
        key: "renderTraveller",
        value: function renderTraveller(option, props) {
          var rectangle;
          if (/* @__PURE__ */ React$1.isValidElement(option)) {
            rectangle = /* @__PURE__ */ React$1.cloneElement(option, props);
          } else if (isFunction$4(option)) {
            rectangle = option(props);
          } else {
            rectangle = Brush2.renderDefaultTraveller(props);
          }
          return rectangle;
        }
      }, {
        key: "getDerivedStateFromProps",
        value: function getDerivedStateFromProps(nextProps, prevState) {
          var data = nextProps.data, width = nextProps.width, x2 = nextProps.x, travellerWidth = nextProps.travellerWidth, updateId = nextProps.updateId, startIndex = nextProps.startIndex, endIndex = nextProps.endIndex;
          if (data !== prevState.prevData || updateId !== prevState.prevUpdateId) {
            return _objectSpread$b({
              prevData: data,
              prevTravellerWidth: travellerWidth,
              prevUpdateId: updateId,
              prevX: x2,
              prevWidth: width
            }, data && data.length ? createScale({
              data,
              width,
              x: x2,
              travellerWidth,
              startIndex,
              endIndex
            }) : {
              scale: null,
              scaleValues: null
            });
          }
          if (prevState.scale && (width !== prevState.prevWidth || x2 !== prevState.prevX || travellerWidth !== prevState.prevTravellerWidth)) {
            prevState.scale.range([x2, x2 + width - travellerWidth]);
            var scaleValues = prevState.scale.domain().map(function(entry) {
              return prevState.scale(entry);
            });
            return {
              prevData: data,
              prevTravellerWidth: travellerWidth,
              prevUpdateId: updateId,
              prevX: x2,
              prevWidth: width,
              startX: prevState.scale(nextProps.startIndex),
              endX: prevState.scale(nextProps.endIndex),
              scaleValues
            };
          }
          return null;
        }
      }, {
        key: "getIndexInRange",
        value: function getIndexInRange(valueRange, x2) {
          var len = valueRange.length;
          var start = 0;
          var end = len - 1;
          while (end - start > 1) {
            var middle = Math.floor((start + end) / 2);
            if (valueRange[middle] > x2) {
              end = middle;
            } else {
              start = middle;
            }
          }
          return x2 >= valueRange[end] ? end : start;
        }
      }]);
      return Brush2;
    }(reactExports.PureComponent);
    _defineProperty$c(Brush, "displayName", "Brush");
    _defineProperty$c(Brush, "defaultProps", {
      height: 40,
      travellerWidth: 5,
      gap: 1,
      fill: "#fff",
      stroke: "#666",
      padding: {
        top: 1,
        right: 1,
        bottom: 1,
        left: 1
      },
      leaveTimeOut: 1e3,
      alwaysShowText: false
    });
    var baseEach$1 = _baseEach;
    function baseSome$1(collection, predicate) {
      var result;
      baseEach$1(collection, function(value2, index, collection2) {
        result = predicate(value2, index, collection2);
        return !result;
      });
      return !!result;
    }
    var _baseSome = baseSome$1;
    var arraySome = _arraySome, baseIteratee$4 = _baseIteratee, baseSome = _baseSome, isArray$1 = isArray_1, isIterateeCall$1 = _isIterateeCall;
    function some(collection, predicate, guard) {
      var func = isArray$1(collection) ? arraySome : baseSome;
      if (guard && isIterateeCall$1(collection, predicate, guard)) {
        predicate = void 0;
      }
      return func(collection, baseIteratee$4(predicate));
    }
    var some_1 = some;
    const some$1 = /* @__PURE__ */ getDefaultExportFromCjs(some_1);
    var ifOverflowMatches = function ifOverflowMatches2(props, value2) {
      var alwaysShow = props.alwaysShow;
      var ifOverflow = props.ifOverflow;
      if (alwaysShow) {
        ifOverflow = "extendDomain";
      }
      return ifOverflow === value2;
    };
    var defineProperty = _defineProperty$y;
    function baseAssignValue$1(object2, key, value2) {
      if (key == "__proto__" && defineProperty) {
        defineProperty(object2, key, {
          "configurable": true,
          "enumerable": true,
          "value": value2,
          "writable": true
        });
      } else {
        object2[key] = value2;
      }
    }
    var _baseAssignValue = baseAssignValue$1;
    var baseAssignValue = _baseAssignValue, baseForOwn = _baseForOwn, baseIteratee$3 = _baseIteratee;
    function mapValues(object2, iteratee) {
      var result = {};
      iteratee = baseIteratee$3(iteratee);
      baseForOwn(object2, function(value2, key, object3) {
        baseAssignValue(result, key, iteratee(value2, key, object3));
      });
      return result;
    }
    var mapValues_1 = mapValues;
    const mapValues$1 = /* @__PURE__ */ getDefaultExportFromCjs(mapValues_1);
    function arrayEvery$1(array2, predicate) {
      var index = -1, length = array2 == null ? 0 : array2.length;
      while (++index < length) {
        if (!predicate(array2[index], index, array2)) {
          return false;
        }
      }
      return true;
    }
    var _arrayEvery = arrayEvery$1;
    var baseEach = _baseEach;
    function baseEvery$1(collection, predicate) {
      var result = true;
      baseEach(collection, function(value2, index, collection2) {
        result = !!predicate(value2, index, collection2);
        return result;
      });
      return result;
    }
    var _baseEvery = baseEvery$1;
    var arrayEvery = _arrayEvery, baseEvery = _baseEvery, baseIteratee$2 = _baseIteratee, isArray = isArray_1, isIterateeCall = _isIterateeCall;
    function every(collection, predicate, guard) {
      var func = isArray(collection) ? arrayEvery : baseEvery;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = void 0;
      }
      return func(collection, baseIteratee$2(predicate));
    }
    var every_1 = every;
    const every$1 = /* @__PURE__ */ getDefaultExportFromCjs(every_1);
    var _excluded$4 = ["x", "y"];
    function _typeof$b(o2) {
      "@babel/helpers - typeof";
      return _typeof$b = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o22) {
        return typeof o22;
      } : function(o22) {
        return o22 && "function" == typeof Symbol && o22.constructor === Symbol && o22 !== Symbol.prototype ? "symbol" : typeof o22;
      }, _typeof$b(o2);
    }
    function _extends$9() {
      _extends$9 = Object.assign ? Object.assign.bind() : function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends$9.apply(this, arguments);
    }
    function ownKeys$a(e3, r2) {
      var t2 = Object.keys(e3);
      if (Object.getOwnPropertySymbols) {
        var o2 = Object.getOwnPropertySymbols(e3);
        r2 && (o2 = o2.filter(function(r22) {
          return Object.getOwnPropertyDescriptor(e3, r22).enumerable;
        })), t2.push.apply(t2, o2);
      }
      return t2;
    }
    function _objectSpread$a(e3) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t2 = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$a(Object(t2), true).forEach(function(r22) {
          _defineProperty$b(e3, r22, t2[r22]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$a(Object(t2)).forEach(function(r22) {
          Object.defineProperty(e3, r22, Object.getOwnPropertyDescriptor(t2, r22));
        });
      }
      return e3;
    }
    function _defineProperty$b(obj, key, value2) {
      key = _toPropertyKey$b(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value: value2, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value2;
      }
      return obj;
    }
    function _toPropertyKey$b(t2) {
      var i2 = _toPrimitive$b(t2, "string");
      return "symbol" == _typeof$b(i2) ? i2 : String(i2);
    }
    function _toPrimitive$b(t2, r2) {
      if ("object" != _typeof$b(t2) || !t2)
        return t2;
      var e3 = t2[Symbol.toPrimitive];
      if (void 0 !== e3) {
        var i2 = e3.call(t2, r2 || "default");
        if ("object" != _typeof$b(i2))
          return i2;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r2 ? String : Number)(t2);
    }
    function _objectWithoutProperties$4(source, excluded) {
      if (source == null)
        return {};
      var target = _objectWithoutPropertiesLoose$4(source, excluded);
      var key, i2;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i2 = 0; i2 < sourceSymbolKeys.length; i2++) {
          key = sourceSymbolKeys[i2];
          if (excluded.indexOf(key) >= 0)
            continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key))
            continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose$4(source, excluded) {
      if (source == null)
        return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i2;
      for (i2 = 0; i2 < sourceKeys.length; i2++) {
        key = sourceKeys[i2];
        if (excluded.indexOf(key) >= 0)
          continue;
        target[key] = source[key];
      }
      return target;
    }
    function typeguardBarRectangleProps(_ref, props) {
      var xProp = _ref.x, yProp = _ref.y, option = _objectWithoutProperties$4(_ref, _excluded$4);
      var xValue = "".concat(xProp);
      var x2 = parseInt(xValue, 10);
      var yValue = "".concat(yProp);
      var y2 = parseInt(yValue, 10);
      var heightValue = "".concat(props.height || option.height);
      var height = parseInt(heightValue, 10);
      var widthValue = "".concat(props.width || option.width);
      var width = parseInt(widthValue, 10);
      return _objectSpread$a(_objectSpread$a(_objectSpread$a(_objectSpread$a(_objectSpread$a({}, props), option), x2 ? {
        x: x2
      } : {}), y2 ? {
        y: y2
      } : {}), {}, {
        height,
        width,
        name: props.name,
        radius: props.radius
      });
    }
    function BarRectangle(props) {
      return /* @__PURE__ */ React$1.createElement(Shape, _extends$9({
        shapeType: "rectangle",
        propTransformer: typeguardBarRectangleProps,
        activeClassName: "recharts-active-bar"
      }, props));
    }
    var minPointSizeCallback = function minPointSizeCallback2(minPointSize) {
      var defaultValue2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
      return function(value2, index) {
        if (typeof minPointSize === "number")
          return minPointSize;
        var isValueNumber = typeof value2 === "number";
        if (isValueNumber) {
          return minPointSize(value2, index);
        }
        !isValueNumber ? invariant(false) : void 0;
        return defaultValue2;
      };
    };
    var _excluded$3 = ["value", "background"];
    var _Bar;
    function _typeof$a(o2) {
      "@babel/helpers - typeof";
      return _typeof$a = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
        return typeof o3;
      } : function(o3) {
        return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
      }, _typeof$a(o2);
    }
    function _objectWithoutProperties$3(source, excluded) {
      if (source == null)
        return {};
      var target = _objectWithoutPropertiesLoose$3(source, excluded);
      var key, i2;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i2 = 0; i2 < sourceSymbolKeys.length; i2++) {
          key = sourceSymbolKeys[i2];
          if (excluded.indexOf(key) >= 0)
            continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key))
            continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose$3(source, excluded) {
      if (source == null)
        return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i2;
      for (i2 = 0; i2 < sourceKeys.length; i2++) {
        key = sourceKeys[i2];
        if (excluded.indexOf(key) >= 0)
          continue;
        target[key] = source[key];
      }
      return target;
    }
    function _extends$8() {
      _extends$8 = Object.assign ? Object.assign.bind() : function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends$8.apply(this, arguments);
    }
    function ownKeys$9(e3, r2) {
      var t2 = Object.keys(e3);
      if (Object.getOwnPropertySymbols) {
        var o2 = Object.getOwnPropertySymbols(e3);
        r2 && (o2 = o2.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e3, r3).enumerable;
        })), t2.push.apply(t2, o2);
      }
      return t2;
    }
    function _objectSpread$9(e3) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t2 = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$9(Object(t2), true).forEach(function(r3) {
          _defineProperty$a(e3, r3, t2[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$9(Object(t2)).forEach(function(r3) {
          Object.defineProperty(e3, r3, Object.getOwnPropertyDescriptor(t2, r3));
        });
      }
      return e3;
    }
    function _classCallCheck$4(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties$4(target, props) {
      for (var i2 = 0; i2 < props.length; i2++) {
        var descriptor = props[i2];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey$a(descriptor.key), descriptor);
      }
    }
    function _createClass$4(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties$4(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties$4(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _callSuper$2(t2, o2, e3) {
      return o2 = _getPrototypeOf$2(o2), _possibleConstructorReturn$2(t2, _isNativeReflectConstruct$2() ? Reflect.construct(o2, e3 || [], _getPrototypeOf$2(t2).constructor) : o2.apply(t2, e3));
    }
    function _possibleConstructorReturn$2(self2, call) {
      if (call && (_typeof$a(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }
      return _assertThisInitialized$2(self2);
    }
    function _isNativeReflectConstruct$2() {
      try {
        var t2 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
      } catch (t3) {
      }
      return (_isNativeReflectConstruct$2 = function _isNativeReflectConstruct2() {
        return !!t2;
      })();
    }
    function _getPrototypeOf$2(o2) {
      _getPrototypeOf$2 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o3) {
        return o3.__proto__ || Object.getPrototypeOf(o3);
      };
      return _getPrototypeOf$2(o2);
    }
    function _assertThisInitialized$2(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _inherits$2(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      Object.defineProperty(subClass, "prototype", { writable: false });
      if (superClass)
        _setPrototypeOf$2(subClass, superClass);
    }
    function _setPrototypeOf$2(o2, p2) {
      _setPrototypeOf$2 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o3, p3) {
        o3.__proto__ = p3;
        return o3;
      };
      return _setPrototypeOf$2(o2, p2);
    }
    function _defineProperty$a(obj, key, value2) {
      key = _toPropertyKey$a(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value: value2, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value2;
      }
      return obj;
    }
    function _toPropertyKey$a(t2) {
      var i2 = _toPrimitive$a(t2, "string");
      return "symbol" == _typeof$a(i2) ? i2 : String(i2);
    }
    function _toPrimitive$a(t2, r2) {
      if ("object" != _typeof$a(t2) || !t2)
        return t2;
      var e3 = t2[Symbol.toPrimitive];
      if (void 0 !== e3) {
        var i2 = e3.call(t2, r2 || "default");
        if ("object" != _typeof$a(i2))
          return i2;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r2 ? String : Number)(t2);
    }
    var Bar = /* @__PURE__ */ function(_PureComponent) {
      _inherits$2(Bar2, _PureComponent);
      function Bar2() {
        var _this;
        _classCallCheck$4(this, Bar2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _callSuper$2(this, Bar2, [].concat(args));
        _defineProperty$a(_assertThisInitialized$2(_this), "state", {
          isAnimationFinished: false
        });
        _defineProperty$a(_assertThisInitialized$2(_this), "id", uniqueId("recharts-bar-"));
        _defineProperty$a(_assertThisInitialized$2(_this), "handleAnimationEnd", function() {
          var onAnimationEnd = _this.props.onAnimationEnd;
          _this.setState({
            isAnimationFinished: true
          });
          if (onAnimationEnd) {
            onAnimationEnd();
          }
        });
        _defineProperty$a(_assertThisInitialized$2(_this), "handleAnimationStart", function() {
          var onAnimationStart = _this.props.onAnimationStart;
          _this.setState({
            isAnimationFinished: false
          });
          if (onAnimationStart) {
            onAnimationStart();
          }
        });
        return _this;
      }
      _createClass$4(Bar2, [{
        key: "renderRectanglesStatically",
        value: function renderRectanglesStatically(data) {
          var _this2 = this;
          var _this$props = this.props, shape = _this$props.shape, dataKey = _this$props.dataKey, activeIndex = _this$props.activeIndex, activeBar = _this$props.activeBar;
          var baseProps = filterProps(this.props, false);
          return data && data.map(function(entry, i2) {
            var isActive = i2 === activeIndex;
            var option = isActive ? activeBar : shape;
            var props = _objectSpread$9(_objectSpread$9(_objectSpread$9({}, baseProps), entry), {}, {
              isActive,
              option,
              index: i2,
              dataKey,
              onAnimationStart: _this2.handleAnimationStart,
              onAnimationEnd: _this2.handleAnimationEnd
            });
            return /* @__PURE__ */ React$1.createElement(Layer, _extends$8({
              className: "recharts-bar-rectangle"
            }, adaptEventsOfChild(_this2.props, entry, i2), {
              key: "rectangle-".concat(entry === null || entry === void 0 ? void 0 : entry.x, "-").concat(entry === null || entry === void 0 ? void 0 : entry.y, "-").concat(entry === null || entry === void 0 ? void 0 : entry.value)
            }), /* @__PURE__ */ React$1.createElement(BarRectangle, props));
          });
        }
      }, {
        key: "renderRectanglesWithAnimation",
        value: function renderRectanglesWithAnimation() {
          var _this3 = this;
          var _this$props2 = this.props, data = _this$props2.data, layout = _this$props2.layout, isAnimationActive = _this$props2.isAnimationActive, animationBegin = _this$props2.animationBegin, animationDuration = _this$props2.animationDuration, animationEasing = _this$props2.animationEasing, animationId = _this$props2.animationId;
          var prevData = this.state.prevData;
          return /* @__PURE__ */ React$1.createElement(Animate, {
            begin: animationBegin,
            duration: animationDuration,
            isActive: isAnimationActive,
            easing: animationEasing,
            from: {
              t: 0
            },
            to: {
              t: 1
            },
            key: "bar-".concat(animationId),
            onAnimationEnd: this.handleAnimationEnd,
            onAnimationStart: this.handleAnimationStart
          }, function(_ref) {
            var t2 = _ref.t;
            var stepData = data.map(function(entry, index) {
              var prev = prevData && prevData[index];
              if (prev) {
                var interpolatorX = interpolateNumber$2(prev.x, entry.x);
                var interpolatorY = interpolateNumber$2(prev.y, entry.y);
                var interpolatorWidth = interpolateNumber$2(prev.width, entry.width);
                var interpolatorHeight = interpolateNumber$2(prev.height, entry.height);
                return _objectSpread$9(_objectSpread$9({}, entry), {}, {
                  x: interpolatorX(t2),
                  y: interpolatorY(t2),
                  width: interpolatorWidth(t2),
                  height: interpolatorHeight(t2)
                });
              }
              if (layout === "horizontal") {
                var _interpolatorHeight = interpolateNumber$2(0, entry.height);
                var h2 = _interpolatorHeight(t2);
                return _objectSpread$9(_objectSpread$9({}, entry), {}, {
                  y: entry.y + entry.height - h2,
                  height: h2
                });
              }
              var interpolator = interpolateNumber$2(0, entry.width);
              var w2 = interpolator(t2);
              return _objectSpread$9(_objectSpread$9({}, entry), {}, {
                width: w2
              });
            });
            return /* @__PURE__ */ React$1.createElement(Layer, null, _this3.renderRectanglesStatically(stepData));
          });
        }
      }, {
        key: "renderRectangles",
        value: function renderRectangles() {
          var _this$props3 = this.props, data = _this$props3.data, isAnimationActive = _this$props3.isAnimationActive;
          var prevData = this.state.prevData;
          if (isAnimationActive && data && data.length && (!prevData || !isEqual$1(prevData, data))) {
            return this.renderRectanglesWithAnimation();
          }
          return this.renderRectanglesStatically(data);
        }
      }, {
        key: "renderBackground",
        value: function renderBackground() {
          var _this4 = this;
          var _this$props4 = this.props, data = _this$props4.data, dataKey = _this$props4.dataKey, activeIndex = _this$props4.activeIndex;
          var backgroundProps = filterProps(this.props.background, false);
          return data.map(function(entry, i2) {
            entry.value;
            var background = entry.background, rest = _objectWithoutProperties$3(entry, _excluded$3);
            if (!background) {
              return null;
            }
            var props = _objectSpread$9(_objectSpread$9(_objectSpread$9(_objectSpread$9(_objectSpread$9({}, rest), {}, {
              fill: "#eee"
            }, background), backgroundProps), adaptEventsOfChild(_this4.props, entry, i2)), {}, {
              onAnimationStart: _this4.handleAnimationStart,
              onAnimationEnd: _this4.handleAnimationEnd,
              dataKey,
              index: i2,
              key: "background-bar-".concat(i2),
              className: "recharts-bar-background-rectangle"
            });
            return /* @__PURE__ */ React$1.createElement(BarRectangle, _extends$8({
              option: _this4.props.background,
              isActive: i2 === activeIndex
            }, props));
          });
        }
      }, {
        key: "renderErrorBar",
        value: function renderErrorBar(needClip, clipPathId) {
          if (this.props.isAnimationActive && !this.state.isAnimationFinished) {
            return null;
          }
          var _this$props5 = this.props, data = _this$props5.data, xAxis = _this$props5.xAxis, yAxis = _this$props5.yAxis, layout = _this$props5.layout, children = _this$props5.children;
          var errorBarItems = findAllByType(children, ErrorBar);
          if (!errorBarItems) {
            return null;
          }
          var offset2 = layout === "vertical" ? data[0].height / 2 : data[0].width / 2;
          var dataPointFormatter = function dataPointFormatter2(dataPoint, dataKey) {
            var value2 = Array.isArray(dataPoint.value) ? dataPoint.value[1] : dataPoint.value;
            return {
              x: dataPoint.x,
              y: dataPoint.y,
              value: value2,
              errorVal: getValueByDataKey(dataPoint, dataKey)
            };
          };
          var errorBarProps = {
            clipPath: needClip ? "url(#clipPath-".concat(clipPathId, ")") : null
          };
          return /* @__PURE__ */ React$1.createElement(Layer, errorBarProps, errorBarItems.map(function(item) {
            return /* @__PURE__ */ React$1.cloneElement(item, {
              key: "error-bar-".concat(clipPathId, "-").concat(item.props.dataKey),
              data,
              xAxis,
              yAxis,
              layout,
              offset: offset2,
              dataPointFormatter
            });
          }));
        }
      }, {
        key: "render",
        value: function render() {
          var _this$props6 = this.props, hide = _this$props6.hide, data = _this$props6.data, className = _this$props6.className, xAxis = _this$props6.xAxis, yAxis = _this$props6.yAxis, left = _this$props6.left, top = _this$props6.top, width = _this$props6.width, height = _this$props6.height, isAnimationActive = _this$props6.isAnimationActive, background = _this$props6.background, id2 = _this$props6.id;
          if (hide || !data || !data.length) {
            return null;
          }
          var isAnimationFinished = this.state.isAnimationFinished;
          var layerClass = clsx("recharts-bar", className);
          var needClipX = xAxis && xAxis.allowDataOverflow;
          var needClipY = yAxis && yAxis.allowDataOverflow;
          var needClip = needClipX || needClipY;
          var clipPathId = isNil$1(id2) ? this.id : id2;
          return /* @__PURE__ */ React$1.createElement(Layer, {
            className: layerClass
          }, needClipX || needClipY ? /* @__PURE__ */ React$1.createElement("defs", null, /* @__PURE__ */ React$1.createElement("clipPath", {
            id: "clipPath-".concat(clipPathId)
          }, /* @__PURE__ */ React$1.createElement("rect", {
            x: needClipX ? left : left - width / 2,
            y: needClipY ? top : top - height / 2,
            width: needClipX ? width : width * 2,
            height: needClipY ? height : height * 2
          }))) : null, /* @__PURE__ */ React$1.createElement(Layer, {
            className: "recharts-bar-rectangles",
            clipPath: needClip ? "url(#clipPath-".concat(clipPathId, ")") : null
          }, background ? this.renderBackground() : null, this.renderRectangles()), this.renderErrorBar(needClip, clipPathId), (!isAnimationActive || isAnimationFinished) && LabelList.renderCallByParent(this.props, data));
        }
      }], [{
        key: "getDerivedStateFromProps",
        value: function getDerivedStateFromProps(nextProps, prevState) {
          if (nextProps.animationId !== prevState.prevAnimationId) {
            return {
              prevAnimationId: nextProps.animationId,
              curData: nextProps.data,
              prevData: prevState.curData
            };
          }
          if (nextProps.data !== prevState.curData) {
            return {
              curData: nextProps.data
            };
          }
          return null;
        }
      }]);
      return Bar2;
    }(reactExports.PureComponent);
    _Bar = Bar;
    _defineProperty$a(Bar, "displayName", "Bar");
    _defineProperty$a(Bar, "defaultProps", {
      xAxisId: 0,
      yAxisId: 0,
      legendType: "rect",
      minPointSize: 0,
      hide: false,
      data: [],
      layout: "vertical",
      activeBar: false,
      isAnimationActive: !Global.isSsr,
      animationBegin: 0,
      animationDuration: 400,
      animationEasing: "ease"
    });
    _defineProperty$a(Bar, "getComposedData", function(_ref2) {
      var props = _ref2.props, item = _ref2.item, barPosition = _ref2.barPosition, bandSize = _ref2.bandSize, xAxis = _ref2.xAxis, yAxis = _ref2.yAxis, xAxisTicks = _ref2.xAxisTicks, yAxisTicks = _ref2.yAxisTicks, stackedData = _ref2.stackedData, dataStartIndex = _ref2.dataStartIndex, displayedData = _ref2.displayedData, offset2 = _ref2.offset;
      var pos = findPositionOfBar(barPosition, item);
      if (!pos) {
        return null;
      }
      var layout = props.layout;
      var _item$props = item.props, dataKey = _item$props.dataKey, children = _item$props.children, minPointSizeProp = _item$props.minPointSize;
      var numericAxis = layout === "horizontal" ? yAxis : xAxis;
      var stackedDomain = stackedData ? numericAxis.scale.domain() : null;
      var baseValue = getBaseValueOfBar({
        numericAxis
      });
      var cells = findAllByType(children, Cell);
      var rects = displayedData.map(function(entry, index) {
        var value2, x2, y2, width, height, background;
        if (stackedData) {
          value2 = truncateByDomain(stackedData[dataStartIndex + index], stackedDomain);
        } else {
          value2 = getValueByDataKey(entry, dataKey);
          if (!Array.isArray(value2)) {
            value2 = [baseValue, value2];
          }
        }
        var minPointSize = minPointSizeCallback(minPointSizeProp, _Bar.defaultProps.minPointSize)(value2[1], index);
        if (layout === "horizontal") {
          var _ref4;
          var _ref3 = [yAxis.scale(value2[0]), yAxis.scale(value2[1])], baseValueScale = _ref3[0], currentValueScale = _ref3[1];
          x2 = getCateCoordinateOfBar({
            axis: xAxis,
            ticks: xAxisTicks,
            bandSize,
            offset: pos.offset,
            entry,
            index
          });
          y2 = (_ref4 = currentValueScale !== null && currentValueScale !== void 0 ? currentValueScale : baseValueScale) !== null && _ref4 !== void 0 ? _ref4 : void 0;
          width = pos.size;
          var computedHeight = baseValueScale - currentValueScale;
          height = Number.isNaN(computedHeight) ? 0 : computedHeight;
          background = {
            x: x2,
            y: yAxis.y,
            width,
            height: yAxis.height
          };
          if (Math.abs(minPointSize) > 0 && Math.abs(height) < Math.abs(minPointSize)) {
            var delta = mathSign(height || minPointSize) * (Math.abs(minPointSize) - Math.abs(height));
            y2 -= delta;
            height += delta;
          }
        } else {
          var _ref5 = [xAxis.scale(value2[0]), xAxis.scale(value2[1])], _baseValueScale = _ref5[0], _currentValueScale = _ref5[1];
          x2 = _baseValueScale;
          y2 = getCateCoordinateOfBar({
            axis: yAxis,
            ticks: yAxisTicks,
            bandSize,
            offset: pos.offset,
            entry,
            index
          });
          width = _currentValueScale - _baseValueScale;
          height = pos.size;
          background = {
            x: xAxis.x,
            y: y2,
            width: xAxis.width,
            height
          };
          if (Math.abs(minPointSize) > 0 && Math.abs(width) < Math.abs(minPointSize)) {
            var _delta = mathSign(width || minPointSize) * (Math.abs(minPointSize) - Math.abs(width));
            width += _delta;
          }
        }
        return _objectSpread$9(_objectSpread$9(_objectSpread$9({}, entry), {}, {
          x: x2,
          y: y2,
          width,
          height,
          value: stackedData ? value2 : value2[1],
          payload: entry,
          background
        }, cells && cells[index] && cells[index].props), {}, {
          tooltipPayload: [getTooltipItem(item, entry)],
          tooltipPosition: {
            x: x2 + width / 2,
            y: y2 + height / 2
          }
        });
      });
      return _objectSpread$9({
        data: rects,
        layout
      }, offset2);
    });
    function _typeof$9(o2) {
      "@babel/helpers - typeof";
      return _typeof$9 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
        return typeof o3;
      } : function(o3) {
        return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
      }, _typeof$9(o2);
    }
    function _classCallCheck$3(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties$3(target, props) {
      for (var i2 = 0; i2 < props.length; i2++) {
        var descriptor = props[i2];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey$9(descriptor.key), descriptor);
      }
    }
    function _createClass$3(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties$3(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties$3(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function ownKeys$8(e3, r2) {
      var t2 = Object.keys(e3);
      if (Object.getOwnPropertySymbols) {
        var o2 = Object.getOwnPropertySymbols(e3);
        r2 && (o2 = o2.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e3, r3).enumerable;
        })), t2.push.apply(t2, o2);
      }
      return t2;
    }
    function _objectSpread$8(e3) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t2 = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$8(Object(t2), true).forEach(function(r3) {
          _defineProperty$9(e3, r3, t2[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$8(Object(t2)).forEach(function(r3) {
          Object.defineProperty(e3, r3, Object.getOwnPropertyDescriptor(t2, r3));
        });
      }
      return e3;
    }
    function _defineProperty$9(obj, key, value2) {
      key = _toPropertyKey$9(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value: value2, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value2;
      }
      return obj;
    }
    function _toPropertyKey$9(t2) {
      var i2 = _toPrimitive$9(t2, "string");
      return "symbol" == _typeof$9(i2) ? i2 : String(i2);
    }
    function _toPrimitive$9(t2, r2) {
      if ("object" != _typeof$9(t2) || !t2)
        return t2;
      var e3 = t2[Symbol.toPrimitive];
      if (void 0 !== e3) {
        var i2 = e3.call(t2, r2 || "default");
        if ("object" != _typeof$9(i2))
          return i2;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r2 ? String : Number)(t2);
    }
    var formatAxisMap = function formatAxisMap2(props, axisMap, offset2, axisType, chartName) {
      var width = props.width, height = props.height, layout = props.layout, children = props.children;
      var ids2 = Object.keys(axisMap);
      var steps = {
        left: offset2.left,
        leftMirror: offset2.left,
        right: width - offset2.right,
        rightMirror: width - offset2.right,
        top: offset2.top,
        topMirror: offset2.top,
        bottom: height - offset2.bottom,
        bottomMirror: height - offset2.bottom
      };
      var hasBar = !!findChildByType(children, Bar);
      return ids2.reduce(function(result, id2) {
        var axis = axisMap[id2];
        var orientation = axis.orientation, domain = axis.domain, _axis$padding = axis.padding, padding = _axis$padding === void 0 ? {} : _axis$padding, mirror = axis.mirror, reversed = axis.reversed;
        var offsetKey = "".concat(orientation).concat(mirror ? "Mirror" : "");
        var calculatedPadding, range2, x2, y2, needSpace;
        if (axis.type === "number" && (axis.padding === "gap" || axis.padding === "no-gap")) {
          var diff2 = domain[1] - domain[0];
          var smallestDistanceBetweenValues = Infinity;
          var sortedValues = axis.categoricalDomain.sort();
          sortedValues.forEach(function(value2, index) {
            if (index > 0) {
              smallestDistanceBetweenValues = Math.min((value2 || 0) - (sortedValues[index - 1] || 0), smallestDistanceBetweenValues);
            }
          });
          var smallestDistanceInPercent = smallestDistanceBetweenValues / diff2;
          var rangeWidth = axis.layout === "vertical" ? offset2.height : offset2.width;
          if (axis.padding === "gap") {
            calculatedPadding = smallestDistanceInPercent * rangeWidth / 2;
          }
          if (axis.padding === "no-gap") {
            var gap = getPercentValue(props.barCategoryGap, smallestDistanceInPercent * rangeWidth);
            var halfBand = smallestDistanceInPercent * rangeWidth / 2;
            calculatedPadding = halfBand - gap - (halfBand - gap) / rangeWidth * gap;
          }
        }
        if (axisType === "xAxis") {
          range2 = [offset2.left + (padding.left || 0) + (calculatedPadding || 0), offset2.left + offset2.width - (padding.right || 0) - (calculatedPadding || 0)];
        } else if (axisType === "yAxis") {
          range2 = layout === "horizontal" ? [offset2.top + offset2.height - (padding.bottom || 0), offset2.top + (padding.top || 0)] : [offset2.top + (padding.top || 0) + (calculatedPadding || 0), offset2.top + offset2.height - (padding.bottom || 0) - (calculatedPadding || 0)];
        } else {
          range2 = axis.range;
        }
        if (reversed) {
          range2 = [range2[1], range2[0]];
        }
        var _parseScale = parseScale(axis, chartName, hasBar), scale = _parseScale.scale, realScaleType = _parseScale.realScaleType;
        scale.domain(domain).range(range2);
        checkDomainOfScale(scale);
        var ticks2 = getTicksOfScale(scale, _objectSpread$8(_objectSpread$8({}, axis), {}, {
          realScaleType
        }));
        if (axisType === "xAxis") {
          needSpace = orientation === "top" && !mirror || orientation === "bottom" && mirror;
          x2 = offset2.left;
          y2 = steps[offsetKey] - needSpace * axis.height;
        } else if (axisType === "yAxis") {
          needSpace = orientation === "left" && !mirror || orientation === "right" && mirror;
          x2 = steps[offsetKey] - needSpace * axis.width;
          y2 = offset2.top;
        }
        var finalAxis = _objectSpread$8(_objectSpread$8(_objectSpread$8({}, axis), ticks2), {}, {
          realScaleType,
          x: x2,
          y: y2,
          scale,
          width: axisType === "xAxis" ? offset2.width : axis.width,
          height: axisType === "yAxis" ? offset2.height : axis.height
        });
        finalAxis.bandSize = getBandSizeOfAxis(finalAxis, ticks2);
        if (!axis.hide && axisType === "xAxis") {
          steps[offsetKey] += (needSpace ? -1 : 1) * finalAxis.height;
        } else if (!axis.hide) {
          steps[offsetKey] += (needSpace ? -1 : 1) * finalAxis.width;
        }
        return _objectSpread$8(_objectSpread$8({}, result), {}, _defineProperty$9({}, id2, finalAxis));
      }, {});
    };
    var rectWithPoints = function rectWithPoints2(_ref, _ref2) {
      var x1 = _ref.x, y1 = _ref.y;
      var x2 = _ref2.x, y2 = _ref2.y;
      return {
        x: Math.min(x1, x2),
        y: Math.min(y1, y2),
        width: Math.abs(x2 - x1),
        height: Math.abs(y2 - y1)
      };
    };
    var rectWithCoords = function rectWithCoords2(_ref3) {
      var x1 = _ref3.x1, y1 = _ref3.y1, x2 = _ref3.x2, y2 = _ref3.y2;
      return rectWithPoints({
        x: x1,
        y: y1
      }, {
        x: x2,
        y: y2
      });
    };
    var ScaleHelper = /* @__PURE__ */ function() {
      function ScaleHelper2(scale) {
        _classCallCheck$3(this, ScaleHelper2);
        this.scale = scale;
      }
      _createClass$3(ScaleHelper2, [{
        key: "domain",
        get: function get2() {
          return this.scale.domain;
        }
      }, {
        key: "range",
        get: function get2() {
          return this.scale.range;
        }
      }, {
        key: "rangeMin",
        get: function get2() {
          return this.range()[0];
        }
      }, {
        key: "rangeMax",
        get: function get2() {
          return this.range()[1];
        }
      }, {
        key: "bandwidth",
        get: function get2() {
          return this.scale.bandwidth;
        }
      }, {
        key: "apply",
        value: function apply2(value2) {
          var _ref4 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, bandAware = _ref4.bandAware, position = _ref4.position;
          if (value2 === void 0) {
            return void 0;
          }
          if (position) {
            switch (position) {
              case "start": {
                return this.scale(value2);
              }
              case "middle": {
                var offset2 = this.bandwidth ? this.bandwidth() / 2 : 0;
                return this.scale(value2) + offset2;
              }
              case "end": {
                var _offset = this.bandwidth ? this.bandwidth() : 0;
                return this.scale(value2) + _offset;
              }
              default: {
                return this.scale(value2);
              }
            }
          }
          if (bandAware) {
            var _offset2 = this.bandwidth ? this.bandwidth() / 2 : 0;
            return this.scale(value2) + _offset2;
          }
          return this.scale(value2);
        }
      }, {
        key: "isInRange",
        value: function isInRange(value2) {
          var range2 = this.range();
          var first = range2[0];
          var last2 = range2[range2.length - 1];
          return first <= last2 ? value2 >= first && value2 <= last2 : value2 >= last2 && value2 <= first;
        }
      }], [{
        key: "create",
        value: function create(obj) {
          return new ScaleHelper2(obj);
        }
      }]);
      return ScaleHelper2;
    }();
    _defineProperty$9(ScaleHelper, "EPS", 1e-4);
    var createLabeledScales = function createLabeledScales2(options) {
      var scales = Object.keys(options).reduce(function(res, key) {
        return _objectSpread$8(_objectSpread$8({}, res), {}, _defineProperty$9({}, key, ScaleHelper.create(options[key])));
      }, {});
      return _objectSpread$8(_objectSpread$8({}, scales), {}, {
        apply: function apply2(coord) {
          var _ref5 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, bandAware = _ref5.bandAware, position = _ref5.position;
          return mapValues$1(coord, function(value2, label) {
            return scales[label].apply(value2, {
              bandAware,
              position
            });
          });
        },
        isInRange: function isInRange(coord) {
          return every$1(coord, function(value2, label) {
            return scales[label].isInRange(value2);
          });
        }
      });
    };
    function normalizeAngle(angle) {
      return (angle % 180 + 180) % 180;
    }
    var getAngledRectangleWidth = function getAngledRectangleWidth2(_ref6) {
      var width = _ref6.width, height = _ref6.height;
      var angle = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
      var normalizedAngle = normalizeAngle(angle);
      var angleRadians = normalizedAngle * Math.PI / 180;
      var angleThreshold = Math.atan(height / width);
      var angledWidth = angleRadians > angleThreshold && angleRadians < Math.PI - angleThreshold ? height / Math.sin(angleRadians) : width / Math.cos(angleRadians);
      return Math.abs(angledWidth);
    };
    var baseIteratee$1 = _baseIteratee, isArrayLike = isArrayLike_1, keys = keys_1;
    function createFind$1(findIndexFunc) {
      return function(collection, predicate, fromIndex) {
        var iterable = Object(collection);
        if (!isArrayLike(collection)) {
          var iteratee = baseIteratee$1(predicate);
          collection = keys(collection);
          predicate = function(key) {
            return iteratee(iterable[key], key, iterable);
          };
        }
        var index = findIndexFunc(collection, predicate, fromIndex);
        return index > -1 ? iterable[iteratee ? collection[index] : index] : void 0;
      };
    }
    var _createFind = createFind$1;
    var toFinite = toFinite_1;
    function toInteger$1(value2) {
      var result = toFinite(value2), remainder = result % 1;
      return result === result ? remainder ? result - remainder : result : 0;
    }
    var toInteger_1 = toInteger$1;
    var baseFindIndex = _baseFindIndex, baseIteratee = _baseIteratee, toInteger = toInteger_1;
    var nativeMax = Math.max;
    function findIndex$1(array2, predicate, fromIndex) {
      var length = array2 == null ? 0 : array2.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseFindIndex(array2, baseIteratee(predicate), index);
    }
    var findIndex_1 = findIndex$1;
    var createFind = _createFind, findIndex = findIndex_1;
    var find = createFind(findIndex);
    var find_1 = find;
    const find$1 = /* @__PURE__ */ getDefaultExportFromCjs(find_1);
    var calculateViewBox = memoize$3(function(offset2) {
      return {
        x: offset2.left,
        y: offset2.top,
        width: offset2.width,
        height: offset2.height
      };
    }, function(offset2) {
      return ["l", offset2.left, "t", offset2.top, "w", offset2.width, "h", offset2.height].join("");
    });
    var XAxisContext = /* @__PURE__ */ reactExports.createContext(void 0);
    var YAxisContext = /* @__PURE__ */ reactExports.createContext(void 0);
    var ViewBoxContext = /* @__PURE__ */ reactExports.createContext(void 0);
    var OffsetContext = /* @__PURE__ */ reactExports.createContext({});
    var ClipPathIdContext = /* @__PURE__ */ reactExports.createContext(void 0);
    var ChartHeightContext = /* @__PURE__ */ reactExports.createContext(0);
    var ChartWidthContext = /* @__PURE__ */ reactExports.createContext(0);
    var ChartLayoutContextProvider = function ChartLayoutContextProvider2(props) {
      var _props$state = props.state, xAxisMap = _props$state.xAxisMap, yAxisMap = _props$state.yAxisMap, offset2 = _props$state.offset, clipPathId = props.clipPathId, children = props.children, width = props.width, height = props.height;
      var viewBox = calculateViewBox(offset2);
      return /* @__PURE__ */ React$1.createElement(XAxisContext.Provider, {
        value: xAxisMap
      }, /* @__PURE__ */ React$1.createElement(YAxisContext.Provider, {
        value: yAxisMap
      }, /* @__PURE__ */ React$1.createElement(OffsetContext.Provider, {
        value: offset2
      }, /* @__PURE__ */ React$1.createElement(ViewBoxContext.Provider, {
        value: viewBox
      }, /* @__PURE__ */ React$1.createElement(ClipPathIdContext.Provider, {
        value: clipPathId
      }, /* @__PURE__ */ React$1.createElement(ChartHeightContext.Provider, {
        value: height
      }, /* @__PURE__ */ React$1.createElement(ChartWidthContext.Provider, {
        value: width
      }, children)))))));
    };
    var useClipPathId = function useClipPathId2() {
      return reactExports.useContext(ClipPathIdContext);
    };
    var useXAxisOrThrow = function useXAxisOrThrow2(xAxisId) {
      var xAxisMap = reactExports.useContext(XAxisContext);
      !(xAxisMap != null) ? invariant(false) : void 0;
      var xAxis = xAxisMap[xAxisId];
      !(xAxis != null) ? invariant(false) : void 0;
      return xAxis;
    };
    var useArbitraryXAxis = function useArbitraryXAxis2() {
      var xAxisMap = reactExports.useContext(XAxisContext);
      return getAnyElementOfObject(xAxisMap);
    };
    var useYAxisWithFiniteDomainOrRandom = function useYAxisWithFiniteDomainOrRandom2() {
      var yAxisMap = reactExports.useContext(YAxisContext);
      var yAxisWithFiniteDomain = find$1(yAxisMap, function(axis) {
        return every$1(axis.domain, Number.isFinite);
      });
      return yAxisWithFiniteDomain || getAnyElementOfObject(yAxisMap);
    };
    var useYAxisOrThrow = function useYAxisOrThrow2(yAxisId) {
      var yAxisMap = reactExports.useContext(YAxisContext);
      !(yAxisMap != null) ? invariant(false) : void 0;
      var yAxis = yAxisMap[yAxisId];
      !(yAxis != null) ? invariant(false) : void 0;
      return yAxis;
    };
    var useViewBox = function useViewBox2() {
      var viewBox = reactExports.useContext(ViewBoxContext);
      return viewBox;
    };
    var useOffset = function useOffset2() {
      return reactExports.useContext(OffsetContext);
    };
    var useChartWidth = function useChartWidth2() {
      return reactExports.useContext(ChartWidthContext);
    };
    var useChartHeight = function useChartHeight2() {
      return reactExports.useContext(ChartHeightContext);
    };
    function _typeof$8(o2) {
      "@babel/helpers - typeof";
      return _typeof$8 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
        return typeof o3;
      } : function(o3) {
        return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
      }, _typeof$8(o2);
    }
    function ownKeys$7(e3, r2) {
      var t2 = Object.keys(e3);
      if (Object.getOwnPropertySymbols) {
        var o2 = Object.getOwnPropertySymbols(e3);
        r2 && (o2 = o2.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e3, r3).enumerable;
        })), t2.push.apply(t2, o2);
      }
      return t2;
    }
    function _objectSpread$7(e3) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t2 = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$7(Object(t2), true).forEach(function(r3) {
          _defineProperty$8(e3, r3, t2[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$7(Object(t2)).forEach(function(r3) {
          Object.defineProperty(e3, r3, Object.getOwnPropertyDescriptor(t2, r3));
        });
      }
      return e3;
    }
    function _defineProperty$8(obj, key, value2) {
      key = _toPropertyKey$8(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value: value2, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value2;
      }
      return obj;
    }
    function _toPropertyKey$8(t2) {
      var i2 = _toPrimitive$8(t2, "string");
      return "symbol" == _typeof$8(i2) ? i2 : String(i2);
    }
    function _toPrimitive$8(t2, r2) {
      if ("object" != _typeof$8(t2) || !t2)
        return t2;
      var e3 = t2[Symbol.toPrimitive];
      if (void 0 !== e3) {
        var i2 = e3.call(t2, r2 || "default");
        if ("object" != _typeof$8(i2))
          return i2;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r2 ? String : Number)(t2);
    }
    function _slicedToArray$1(arr, i2) {
      return _arrayWithHoles$1(arr) || _iterableToArrayLimit$1(arr, i2) || _unsupportedIterableToArray$2(arr, i2) || _nonIterableRest$1();
    }
    function _nonIterableRest$1() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray$2(o2, minLen) {
      if (!o2)
        return;
      if (typeof o2 === "string")
        return _arrayLikeToArray$2(o2, minLen);
      var n2 = Object.prototype.toString.call(o2).slice(8, -1);
      if (n2 === "Object" && o2.constructor)
        n2 = o2.constructor.name;
      if (n2 === "Map" || n2 === "Set")
        return Array.from(o2);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
        return _arrayLikeToArray$2(o2, minLen);
    }
    function _arrayLikeToArray$2(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++)
        arr2[i2] = arr[i2];
      return arr2;
    }
    function _iterableToArrayLimit$1(r2, l2) {
      var t2 = null == r2 ? null : "undefined" != typeof Symbol && r2[Symbol.iterator] || r2["@@iterator"];
      if (null != t2) {
        var e3, n2, i2, u2, a2 = [], f2 = true, o2 = false;
        try {
          if (i2 = (t2 = t2.call(r2)).next, 0 === l2) {
            if (Object(t2) !== t2)
              return;
            f2 = false;
          } else
            for (; !(f2 = (e3 = i2.call(t2)).done) && (a2.push(e3.value), a2.length !== l2); f2 = true)
              ;
        } catch (r3) {
          o2 = true, n2 = r3;
        } finally {
          try {
            if (!f2 && null != t2["return"] && (u2 = t2["return"](), Object(u2) !== u2))
              return;
          } finally {
            if (o2)
              throw n2;
          }
        }
        return a2;
      }
    }
    function _arrayWithHoles$1(arr) {
      if (Array.isArray(arr))
        return arr;
    }
    function _extends$7() {
      _extends$7 = Object.assign ? Object.assign.bind() : function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends$7.apply(this, arguments);
    }
    var renderLine = function renderLine2(option, props) {
      var line;
      if (/* @__PURE__ */ React$1.isValidElement(option)) {
        line = /* @__PURE__ */ React$1.cloneElement(option, props);
      } else if (isFunction$4(option)) {
        line = option(props);
      } else {
        line = /* @__PURE__ */ React$1.createElement("line", _extends$7({}, props, {
          className: "recharts-reference-line-line"
        }));
      }
      return line;
    };
    var getEndPoints = function getEndPoints2(scales, isFixedX, isFixedY, isSegment, viewBox, position, xAxisOrientation, yAxisOrientation, props) {
      var x2 = viewBox.x, y2 = viewBox.y, width = viewBox.width, height = viewBox.height;
      if (isFixedY) {
        var yCoord = props.y;
        var coord = scales.y.apply(yCoord, {
          position
        });
        if (ifOverflowMatches(props, "discard") && !scales.y.isInRange(coord)) {
          return null;
        }
        var points = [{
          x: x2 + width,
          y: coord
        }, {
          x: x2,
          y: coord
        }];
        return yAxisOrientation === "left" ? points.reverse() : points;
      }
      if (isFixedX) {
        var xCoord = props.x;
        var _coord = scales.x.apply(xCoord, {
          position
        });
        if (ifOverflowMatches(props, "discard") && !scales.x.isInRange(_coord)) {
          return null;
        }
        var _points = [{
          x: _coord,
          y: y2 + height
        }, {
          x: _coord,
          y: y2
        }];
        return xAxisOrientation === "top" ? _points.reverse() : _points;
      }
      if (isSegment) {
        var segment = props.segment;
        var _points2 = segment.map(function(p2) {
          return scales.apply(p2, {
            position
          });
        });
        if (ifOverflowMatches(props, "discard") && some$1(_points2, function(p2) {
          return !scales.isInRange(p2);
        })) {
          return null;
        }
        return _points2;
      }
      return null;
    };
    function ReferenceLine(props) {
      var fixedX = props.x, fixedY = props.y, segment = props.segment, xAxisId = props.xAxisId, yAxisId = props.yAxisId, shape = props.shape, className = props.className, alwaysShow = props.alwaysShow;
      var clipPathId = useClipPathId();
      var xAxis = useXAxisOrThrow(xAxisId);
      var yAxis = useYAxisOrThrow(yAxisId);
      var viewBox = useViewBox();
      if (!clipPathId || !viewBox) {
        return null;
      }
      warn(alwaysShow === void 0, 'The alwaysShow prop is deprecated. Please use ifOverflow="extendDomain" instead.');
      var scales = createLabeledScales({
        x: xAxis.scale,
        y: yAxis.scale
      });
      var isX = isNumOrStr(fixedX);
      var isY = isNumOrStr(fixedY);
      var isSegment = segment && segment.length === 2;
      var endPoints = getEndPoints(scales, isX, isY, isSegment, viewBox, props.position, xAxis.orientation, yAxis.orientation, props);
      if (!endPoints) {
        return null;
      }
      var _endPoints = _slicedToArray$1(endPoints, 2), _endPoints$ = _endPoints[0], x1 = _endPoints$.x, y1 = _endPoints$.y, _endPoints$2 = _endPoints[1], x2 = _endPoints$2.x, y2 = _endPoints$2.y;
      var clipPath = ifOverflowMatches(props, "hidden") ? "url(#".concat(clipPathId, ")") : void 0;
      var lineProps = _objectSpread$7(_objectSpread$7({
        clipPath
      }, filterProps(props, true)), {}, {
        x1,
        y1,
        x2,
        y2
      });
      return /* @__PURE__ */ React$1.createElement(Layer, {
        className: clsx("recharts-reference-line", className)
      }, renderLine(shape, lineProps), Label.renderCallByParent(props, rectWithCoords({
        x1,
        y1,
        x2,
        y2
      })));
    }
    ReferenceLine.displayName = "ReferenceLine";
    ReferenceLine.defaultProps = {
      isFront: false,
      ifOverflow: "discard",
      xAxisId: 0,
      yAxisId: 0,
      fill: "none",
      stroke: "#ccc",
      fillOpacity: 1,
      strokeWidth: 1,
      position: "middle"
    };
    function _typeof$7(o2) {
      "@babel/helpers - typeof";
      return _typeof$7 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
        return typeof o3;
      } : function(o3) {
        return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
      }, _typeof$7(o2);
    }
    function _extends$6() {
      _extends$6 = Object.assign ? Object.assign.bind() : function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends$6.apply(this, arguments);
    }
    function ownKeys$6(e3, r2) {
      var t2 = Object.keys(e3);
      if (Object.getOwnPropertySymbols) {
        var o2 = Object.getOwnPropertySymbols(e3);
        r2 && (o2 = o2.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e3, r3).enumerable;
        })), t2.push.apply(t2, o2);
      }
      return t2;
    }
    function _objectSpread$6(e3) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t2 = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$6(Object(t2), true).forEach(function(r3) {
          _defineProperty$7(e3, r3, t2[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$6(Object(t2)).forEach(function(r3) {
          Object.defineProperty(e3, r3, Object.getOwnPropertyDescriptor(t2, r3));
        });
      }
      return e3;
    }
    function _defineProperty$7(obj, key, value2) {
      key = _toPropertyKey$7(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value: value2, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value2;
      }
      return obj;
    }
    function _toPropertyKey$7(t2) {
      var i2 = _toPrimitive$7(t2, "string");
      return "symbol" == _typeof$7(i2) ? i2 : String(i2);
    }
    function _toPrimitive$7(t2, r2) {
      if ("object" != _typeof$7(t2) || !t2)
        return t2;
      var e3 = t2[Symbol.toPrimitive];
      if (void 0 !== e3) {
        var i2 = e3.call(t2, r2 || "default");
        if ("object" != _typeof$7(i2))
          return i2;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r2 ? String : Number)(t2);
    }
    var getCoordinate = function getCoordinate2(props) {
      var x2 = props.x, y2 = props.y, xAxis = props.xAxis, yAxis = props.yAxis;
      var scales = createLabeledScales({
        x: xAxis.scale,
        y: yAxis.scale
      });
      var result = scales.apply({
        x: x2,
        y: y2
      }, {
        bandAware: true
      });
      if (ifOverflowMatches(props, "discard") && !scales.isInRange(result)) {
        return null;
      }
      return result;
    };
    function ReferenceDot(props) {
      var x2 = props.x, y2 = props.y, r2 = props.r, alwaysShow = props.alwaysShow, clipPathId = props.clipPathId;
      var isX = isNumOrStr(x2);
      var isY = isNumOrStr(y2);
      warn(alwaysShow === void 0, 'The alwaysShow prop is deprecated. Please use ifOverflow="extendDomain" instead.');
      if (!isX || !isY) {
        return null;
      }
      var coordinate = getCoordinate(props);
      if (!coordinate) {
        return null;
      }
      var cx = coordinate.x, cy = coordinate.y;
      var shape = props.shape, className = props.className;
      var clipPath = ifOverflowMatches(props, "hidden") ? "url(#".concat(clipPathId, ")") : void 0;
      var dotProps = _objectSpread$6(_objectSpread$6({
        clipPath
      }, filterProps(props, true)), {}, {
        cx,
        cy
      });
      return /* @__PURE__ */ React$1.createElement(Layer, {
        className: clsx("recharts-reference-dot", className)
      }, ReferenceDot.renderDot(shape, dotProps), Label.renderCallByParent(props, {
        x: cx - r2,
        y: cy - r2,
        width: 2 * r2,
        height: 2 * r2
      }));
    }
    ReferenceDot.displayName = "ReferenceDot";
    ReferenceDot.defaultProps = {
      isFront: false,
      ifOverflow: "discard",
      xAxisId: 0,
      yAxisId: 0,
      r: 10,
      fill: "#fff",
      stroke: "#ccc",
      fillOpacity: 1,
      strokeWidth: 1
    };
    ReferenceDot.renderDot = function(option, props) {
      var dot;
      if (/* @__PURE__ */ React$1.isValidElement(option)) {
        dot = /* @__PURE__ */ React$1.cloneElement(option, props);
      } else if (isFunction$4(option)) {
        dot = option(props);
      } else {
        dot = /* @__PURE__ */ React$1.createElement(Dot, _extends$6({}, props, {
          cx: props.cx,
          cy: props.cy,
          className: "recharts-reference-dot-dot"
        }));
      }
      return dot;
    };
    function _typeof$6(o2) {
      "@babel/helpers - typeof";
      return _typeof$6 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
        return typeof o3;
      } : function(o3) {
        return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
      }, _typeof$6(o2);
    }
    function _extends$5() {
      _extends$5 = Object.assign ? Object.assign.bind() : function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends$5.apply(this, arguments);
    }
    function ownKeys$5(e3, r2) {
      var t2 = Object.keys(e3);
      if (Object.getOwnPropertySymbols) {
        var o2 = Object.getOwnPropertySymbols(e3);
        r2 && (o2 = o2.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e3, r3).enumerable;
        })), t2.push.apply(t2, o2);
      }
      return t2;
    }
    function _objectSpread$5(e3) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t2 = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$5(Object(t2), true).forEach(function(r3) {
          _defineProperty$6(e3, r3, t2[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$5(Object(t2)).forEach(function(r3) {
          Object.defineProperty(e3, r3, Object.getOwnPropertyDescriptor(t2, r3));
        });
      }
      return e3;
    }
    function _defineProperty$6(obj, key, value2) {
      key = _toPropertyKey$6(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value: value2, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value2;
      }
      return obj;
    }
    function _toPropertyKey$6(t2) {
      var i2 = _toPrimitive$6(t2, "string");
      return "symbol" == _typeof$6(i2) ? i2 : String(i2);
    }
    function _toPrimitive$6(t2, r2) {
      if ("object" != _typeof$6(t2) || !t2)
        return t2;
      var e3 = t2[Symbol.toPrimitive];
      if (void 0 !== e3) {
        var i2 = e3.call(t2, r2 || "default");
        if ("object" != _typeof$6(i2))
          return i2;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r2 ? String : Number)(t2);
    }
    var getRect = function getRect2(hasX1, hasX2, hasY1, hasY2, props) {
      var xValue1 = props.x1, xValue2 = props.x2, yValue1 = props.y1, yValue2 = props.y2, xAxis = props.xAxis, yAxis = props.yAxis;
      if (!xAxis || !yAxis)
        return null;
      var scales = createLabeledScales({
        x: xAxis.scale,
        y: yAxis.scale
      });
      var p1 = {
        x: hasX1 ? scales.x.apply(xValue1, {
          position: "start"
        }) : scales.x.rangeMin,
        y: hasY1 ? scales.y.apply(yValue1, {
          position: "start"
        }) : scales.y.rangeMin
      };
      var p2 = {
        x: hasX2 ? scales.x.apply(xValue2, {
          position: "end"
        }) : scales.x.rangeMax,
        y: hasY2 ? scales.y.apply(yValue2, {
          position: "end"
        }) : scales.y.rangeMax
      };
      if (ifOverflowMatches(props, "discard") && (!scales.isInRange(p1) || !scales.isInRange(p2))) {
        return null;
      }
      return rectWithPoints(p1, p2);
    };
    function ReferenceArea(props) {
      var x1 = props.x1, x2 = props.x2, y1 = props.y1, y2 = props.y2, className = props.className, alwaysShow = props.alwaysShow, clipPathId = props.clipPathId;
      warn(alwaysShow === void 0, 'The alwaysShow prop is deprecated. Please use ifOverflow="extendDomain" instead.');
      var hasX1 = isNumOrStr(x1);
      var hasX2 = isNumOrStr(x2);
      var hasY1 = isNumOrStr(y1);
      var hasY2 = isNumOrStr(y2);
      var shape = props.shape;
      if (!hasX1 && !hasX2 && !hasY1 && !hasY2 && !shape) {
        return null;
      }
      var rect = getRect(hasX1, hasX2, hasY1, hasY2, props);
      if (!rect && !shape) {
        return null;
      }
      var clipPath = ifOverflowMatches(props, "hidden") ? "url(#".concat(clipPathId, ")") : void 0;
      return /* @__PURE__ */ React$1.createElement(Layer, {
        className: clsx("recharts-reference-area", className)
      }, ReferenceArea.renderRect(shape, _objectSpread$5(_objectSpread$5({
        clipPath
      }, filterProps(props, true)), rect)), Label.renderCallByParent(props, rect));
    }
    ReferenceArea.displayName = "ReferenceArea";
    ReferenceArea.defaultProps = {
      isFront: false,
      ifOverflow: "discard",
      xAxisId: 0,
      yAxisId: 0,
      r: 10,
      fill: "#ccc",
      fillOpacity: 0.5,
      stroke: "none",
      strokeWidth: 1
    };
    ReferenceArea.renderRect = function(option, props) {
      var rect;
      if (/* @__PURE__ */ React$1.isValidElement(option)) {
        rect = /* @__PURE__ */ React$1.cloneElement(option, props);
      } else if (isFunction$4(option)) {
        rect = option(props);
      } else {
        rect = /* @__PURE__ */ React$1.createElement(Rectangle, _extends$5({}, props, {
          className: "recharts-reference-area-rect"
        }));
      }
      return rect;
    };
    function getEveryNthWithCondition(array2, n2, isValid2) {
      if (n2 < 1) {
        return [];
      }
      if (n2 === 1 && isValid2 === void 0) {
        return array2;
      }
      var result = [];
      for (var i2 = 0; i2 < array2.length; i2 += n2) {
        if (isValid2 === void 0 || isValid2(array2[i2]) === true) {
          result.push(array2[i2]);
        } else {
          return void 0;
        }
      }
      return result;
    }
    function getAngledTickWidth(contentSize, unitSize, angle) {
      var size = {
        width: contentSize.width + unitSize.width,
        height: contentSize.height + unitSize.height
      };
      return getAngledRectangleWidth(size, angle);
    }
    function getTickBoundaries(viewBox, sign2, sizeKey) {
      var isWidth = sizeKey === "width";
      var x2 = viewBox.x, y2 = viewBox.y, width = viewBox.width, height = viewBox.height;
      if (sign2 === 1) {
        return {
          start: isWidth ? x2 : y2,
          end: isWidth ? x2 + width : y2 + height
        };
      }
      return {
        start: isWidth ? x2 + width : y2 + height,
        end: isWidth ? x2 : y2
      };
    }
    function isVisible(sign2, tickPosition, getSize, start, end) {
      if (sign2 * tickPosition < sign2 * start || sign2 * tickPosition > sign2 * end) {
        return false;
      }
      var size = getSize();
      return sign2 * (tickPosition - sign2 * size / 2 - start) >= 0 && sign2 * (tickPosition + sign2 * size / 2 - end) <= 0;
    }
    function getNumberIntervalTicks(ticks2, interval) {
      return getEveryNthWithCondition(ticks2, interval + 1);
    }
    function getEquidistantTicks(sign2, boundaries, getTickSize, ticks2, minTickGap) {
      var result = (ticks2 || []).slice();
      var initialStart = boundaries.start, end = boundaries.end;
      var index = 0;
      var stepsize = 1;
      var start = initialStart;
      var _loop = function _loop2() {
        var entry = ticks2 === null || ticks2 === void 0 ? void 0 : ticks2[index];
        if (entry === void 0) {
          return {
            v: getEveryNthWithCondition(ticks2, stepsize)
          };
        }
        var i2 = index;
        var size;
        var getSize = function getSize2() {
          if (size === void 0) {
            size = getTickSize(entry, i2);
          }
          return size;
        };
        var tickCoord = entry.coordinate;
        var isShow = index === 0 || isVisible(sign2, tickCoord, getSize, start, end);
        if (!isShow) {
          index = 0;
          start = initialStart;
          stepsize += 1;
        }
        if (isShow) {
          start = tickCoord + sign2 * (getSize() / 2 + minTickGap);
          index += stepsize;
        }
      }, _ret;
      while (stepsize <= result.length) {
        _ret = _loop();
        if (_ret)
          return _ret.v;
      }
      return [];
    }
    function _typeof$5(o2) {
      "@babel/helpers - typeof";
      return _typeof$5 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
        return typeof o3;
      } : function(o3) {
        return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
      }, _typeof$5(o2);
    }
    function ownKeys$4(e3, r2) {
      var t2 = Object.keys(e3);
      if (Object.getOwnPropertySymbols) {
        var o2 = Object.getOwnPropertySymbols(e3);
        r2 && (o2 = o2.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e3, r3).enumerable;
        })), t2.push.apply(t2, o2);
      }
      return t2;
    }
    function _objectSpread$4(e3) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t2 = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$4(Object(t2), true).forEach(function(r3) {
          _defineProperty$5(e3, r3, t2[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$4(Object(t2)).forEach(function(r3) {
          Object.defineProperty(e3, r3, Object.getOwnPropertyDescriptor(t2, r3));
        });
      }
      return e3;
    }
    function _defineProperty$5(obj, key, value2) {
      key = _toPropertyKey$5(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value: value2, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value2;
      }
      return obj;
    }
    function _toPropertyKey$5(t2) {
      var i2 = _toPrimitive$5(t2, "string");
      return "symbol" == _typeof$5(i2) ? i2 : String(i2);
    }
    function _toPrimitive$5(t2, r2) {
      if ("object" != _typeof$5(t2) || !t2)
        return t2;
      var e3 = t2[Symbol.toPrimitive];
      if (void 0 !== e3) {
        var i2 = e3.call(t2, r2 || "default");
        if ("object" != _typeof$5(i2))
          return i2;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r2 ? String : Number)(t2);
    }
    function getTicksEnd(sign2, boundaries, getTickSize, ticks2, minTickGap) {
      var result = (ticks2 || []).slice();
      var len = result.length;
      var start = boundaries.start;
      var end = boundaries.end;
      var _loop = function _loop2(i3) {
        var entry = result[i3];
        var size;
        var getSize = function getSize2() {
          if (size === void 0) {
            size = getTickSize(entry, i3);
          }
          return size;
        };
        if (i3 === len - 1) {
          var gap = sign2 * (entry.coordinate + sign2 * getSize() / 2 - end);
          result[i3] = entry = _objectSpread$4(_objectSpread$4({}, entry), {}, {
            tickCoord: gap > 0 ? entry.coordinate - gap * sign2 : entry.coordinate
          });
        } else {
          result[i3] = entry = _objectSpread$4(_objectSpread$4({}, entry), {}, {
            tickCoord: entry.coordinate
          });
        }
        var isShow = isVisible(sign2, entry.tickCoord, getSize, start, end);
        if (isShow) {
          end = entry.tickCoord - sign2 * (getSize() / 2 + minTickGap);
          result[i3] = _objectSpread$4(_objectSpread$4({}, entry), {}, {
            isShow: true
          });
        }
      };
      for (var i2 = len - 1; i2 >= 0; i2--) {
        _loop(i2);
      }
      return result;
    }
    function getTicksStart(sign2, boundaries, getTickSize, ticks2, minTickGap, preserveEnd) {
      var result = (ticks2 || []).slice();
      var len = result.length;
      var start = boundaries.start, end = boundaries.end;
      if (preserveEnd) {
        var tail = ticks2[len - 1];
        var tailSize = getTickSize(tail, len - 1);
        var tailGap = sign2 * (tail.coordinate + sign2 * tailSize / 2 - end);
        result[len - 1] = tail = _objectSpread$4(_objectSpread$4({}, tail), {}, {
          tickCoord: tailGap > 0 ? tail.coordinate - tailGap * sign2 : tail.coordinate
        });
        var isTailShow = isVisible(sign2, tail.tickCoord, function() {
          return tailSize;
        }, start, end);
        if (isTailShow) {
          end = tail.tickCoord - sign2 * (tailSize / 2 + minTickGap);
          result[len - 1] = _objectSpread$4(_objectSpread$4({}, tail), {}, {
            isShow: true
          });
        }
      }
      var count = preserveEnd ? len - 1 : len;
      var _loop2 = function _loop22(i3) {
        var entry = result[i3];
        var size;
        var getSize = function getSize2() {
          if (size === void 0) {
            size = getTickSize(entry, i3);
          }
          return size;
        };
        if (i3 === 0) {
          var gap = sign2 * (entry.coordinate - sign2 * getSize() / 2 - start);
          result[i3] = entry = _objectSpread$4(_objectSpread$4({}, entry), {}, {
            tickCoord: gap < 0 ? entry.coordinate - gap * sign2 : entry.coordinate
          });
        } else {
          result[i3] = entry = _objectSpread$4(_objectSpread$4({}, entry), {}, {
            tickCoord: entry.coordinate
          });
        }
        var isShow = isVisible(sign2, entry.tickCoord, getSize, start, end);
        if (isShow) {
          start = entry.tickCoord + sign2 * (getSize() / 2 + minTickGap);
          result[i3] = _objectSpread$4(_objectSpread$4({}, entry), {}, {
            isShow: true
          });
        }
      };
      for (var i2 = 0; i2 < count; i2++) {
        _loop2(i2);
      }
      return result;
    }
    function getTicks(props, fontSize, letterSpacing) {
      var tick = props.tick, ticks2 = props.ticks, viewBox = props.viewBox, minTickGap = props.minTickGap, orientation = props.orientation, interval = props.interval, tickFormatter = props.tickFormatter, unit2 = props.unit, angle = props.angle;
      if (!ticks2 || !ticks2.length || !tick) {
        return [];
      }
      if (isNumber(interval) || Global.isSsr) {
        return getNumberIntervalTicks(ticks2, typeof interval === "number" && isNumber(interval) ? interval : 0);
      }
      var candidates = [];
      var sizeKey = orientation === "top" || orientation === "bottom" ? "width" : "height";
      var unitSize = unit2 && sizeKey === "width" ? getStringSize(unit2, {
        fontSize,
        letterSpacing
      }) : {
        width: 0,
        height: 0
      };
      var getTickSize = function getTickSize2(content, index) {
        var value2 = isFunction$4(tickFormatter) ? tickFormatter(content.value, index) : content.value;
        return sizeKey === "width" ? getAngledTickWidth(getStringSize(value2, {
          fontSize,
          letterSpacing
        }), unitSize, angle) : getStringSize(value2, {
          fontSize,
          letterSpacing
        })[sizeKey];
      };
      var sign2 = ticks2.length >= 2 ? mathSign(ticks2[1].coordinate - ticks2[0].coordinate) : 1;
      var boundaries = getTickBoundaries(viewBox, sign2, sizeKey);
      if (interval === "equidistantPreserveStart") {
        return getEquidistantTicks(sign2, boundaries, getTickSize, ticks2, minTickGap);
      }
      if (interval === "preserveStart" || interval === "preserveStartEnd") {
        candidates = getTicksStart(sign2, boundaries, getTickSize, ticks2, minTickGap, interval === "preserveStartEnd");
      } else {
        candidates = getTicksEnd(sign2, boundaries, getTickSize, ticks2, minTickGap);
      }
      return candidates.filter(function(entry) {
        return entry.isShow;
      });
    }
    var _excluded$2 = ["viewBox"], _excluded2$2 = ["viewBox"], _excluded3 = ["ticks"];
    function _typeof$4(o2) {
      "@babel/helpers - typeof";
      return _typeof$4 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
        return typeof o3;
      } : function(o3) {
        return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
      }, _typeof$4(o2);
    }
    function _extends$4() {
      _extends$4 = Object.assign ? Object.assign.bind() : function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends$4.apply(this, arguments);
    }
    function ownKeys$3(e3, r2) {
      var t2 = Object.keys(e3);
      if (Object.getOwnPropertySymbols) {
        var o2 = Object.getOwnPropertySymbols(e3);
        r2 && (o2 = o2.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e3, r3).enumerable;
        })), t2.push.apply(t2, o2);
      }
      return t2;
    }
    function _objectSpread$3(e3) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t2 = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$3(Object(t2), true).forEach(function(r3) {
          _defineProperty$4(e3, r3, t2[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$3(Object(t2)).forEach(function(r3) {
          Object.defineProperty(e3, r3, Object.getOwnPropertyDescriptor(t2, r3));
        });
      }
      return e3;
    }
    function _objectWithoutProperties$2(source, excluded) {
      if (source == null)
        return {};
      var target = _objectWithoutPropertiesLoose$2(source, excluded);
      var key, i2;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i2 = 0; i2 < sourceSymbolKeys.length; i2++) {
          key = sourceSymbolKeys[i2];
          if (excluded.indexOf(key) >= 0)
            continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key))
            continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose$2(source, excluded) {
      if (source == null)
        return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i2;
      for (i2 = 0; i2 < sourceKeys.length; i2++) {
        key = sourceKeys[i2];
        if (excluded.indexOf(key) >= 0)
          continue;
        target[key] = source[key];
      }
      return target;
    }
    function _classCallCheck$2(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties$2(target, props) {
      for (var i2 = 0; i2 < props.length; i2++) {
        var descriptor = props[i2];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey$4(descriptor.key), descriptor);
      }
    }
    function _createClass$2(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties$2(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties$2(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _callSuper$1(t2, o2, e3) {
      return o2 = _getPrototypeOf$1(o2), _possibleConstructorReturn$1(t2, _isNativeReflectConstruct$1() ? Reflect.construct(o2, e3 || [], _getPrototypeOf$1(t2).constructor) : o2.apply(t2, e3));
    }
    function _possibleConstructorReturn$1(self2, call) {
      if (call && (_typeof$4(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }
      return _assertThisInitialized$1(self2);
    }
    function _assertThisInitialized$1(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _isNativeReflectConstruct$1() {
      try {
        var t2 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
      } catch (t3) {
      }
      return (_isNativeReflectConstruct$1 = function _isNativeReflectConstruct2() {
        return !!t2;
      })();
    }
    function _getPrototypeOf$1(o2) {
      _getPrototypeOf$1 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o3) {
        return o3.__proto__ || Object.getPrototypeOf(o3);
      };
      return _getPrototypeOf$1(o2);
    }
    function _inherits$1(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      Object.defineProperty(subClass, "prototype", { writable: false });
      if (superClass)
        _setPrototypeOf$1(subClass, superClass);
    }
    function _setPrototypeOf$1(o2, p2) {
      _setPrototypeOf$1 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o3, p3) {
        o3.__proto__ = p3;
        return o3;
      };
      return _setPrototypeOf$1(o2, p2);
    }
    function _defineProperty$4(obj, key, value2) {
      key = _toPropertyKey$4(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value: value2, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value2;
      }
      return obj;
    }
    function _toPropertyKey$4(t2) {
      var i2 = _toPrimitive$4(t2, "string");
      return "symbol" == _typeof$4(i2) ? i2 : String(i2);
    }
    function _toPrimitive$4(t2, r2) {
      if ("object" != _typeof$4(t2) || !t2)
        return t2;
      var e3 = t2[Symbol.toPrimitive];
      if (void 0 !== e3) {
        var i2 = e3.call(t2, r2 || "default");
        if ("object" != _typeof$4(i2))
          return i2;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r2 ? String : Number)(t2);
    }
    var CartesianAxis = /* @__PURE__ */ function(_Component) {
      _inherits$1(CartesianAxis2, _Component);
      function CartesianAxis2(props) {
        var _this;
        _classCallCheck$2(this, CartesianAxis2);
        _this = _callSuper$1(this, CartesianAxis2, [props]);
        _this.state = {
          fontSize: "",
          letterSpacing: ""
        };
        return _this;
      }
      _createClass$2(CartesianAxis2, [{
        key: "shouldComponentUpdate",
        value: function shouldComponentUpdate(_ref, nextState) {
          var viewBox = _ref.viewBox, restProps = _objectWithoutProperties$2(_ref, _excluded$2);
          var _this$props = this.props, viewBoxOld = _this$props.viewBox, restPropsOld = _objectWithoutProperties$2(_this$props, _excluded2$2);
          return !shallowEqual(viewBox, viewBoxOld) || !shallowEqual(restProps, restPropsOld) || !shallowEqual(nextState, this.state);
        }
      }, {
        key: "componentDidMount",
        value: function componentDidMount() {
          var htmlLayer = this.layerReference;
          if (!htmlLayer)
            return;
          var tick = htmlLayer.getElementsByClassName("recharts-cartesian-axis-tick-value")[0];
          if (tick) {
            this.setState({
              fontSize: window.getComputedStyle(tick).fontSize,
              letterSpacing: window.getComputedStyle(tick).letterSpacing
            });
          }
        }
        /**
         * Calculate the coordinates of endpoints in ticks
         * @param  {Object} data The data of a simple tick
         * @return {Object} (x1, y1): The coordinate of endpoint close to tick text
         *  (x2, y2): The coordinate of endpoint close to axis
         */
      }, {
        key: "getTickLineCoord",
        value: function getTickLineCoord(data) {
          var _this$props2 = this.props, x2 = _this$props2.x, y2 = _this$props2.y, width = _this$props2.width, height = _this$props2.height, orientation = _this$props2.orientation, tickSize = _this$props2.tickSize, mirror = _this$props2.mirror, tickMargin = _this$props2.tickMargin;
          var x1, x22, y1, y22, tx, ty;
          var sign2 = mirror ? -1 : 1;
          var finalTickSize = data.tickSize || tickSize;
          var tickCoord = isNumber(data.tickCoord) ? data.tickCoord : data.coordinate;
          switch (orientation) {
            case "top":
              x1 = x22 = data.coordinate;
              y22 = y2 + +!mirror * height;
              y1 = y22 - sign2 * finalTickSize;
              ty = y1 - sign2 * tickMargin;
              tx = tickCoord;
              break;
            case "left":
              y1 = y22 = data.coordinate;
              x22 = x2 + +!mirror * width;
              x1 = x22 - sign2 * finalTickSize;
              tx = x1 - sign2 * tickMargin;
              ty = tickCoord;
              break;
            case "right":
              y1 = y22 = data.coordinate;
              x22 = x2 + +mirror * width;
              x1 = x22 + sign2 * finalTickSize;
              tx = x1 + sign2 * tickMargin;
              ty = tickCoord;
              break;
            default:
              x1 = x22 = data.coordinate;
              y22 = y2 + +mirror * height;
              y1 = y22 + sign2 * finalTickSize;
              ty = y1 + sign2 * tickMargin;
              tx = tickCoord;
              break;
          }
          return {
            line: {
              x1,
              y1,
              x2: x22,
              y2: y22
            },
            tick: {
              x: tx,
              y: ty
            }
          };
        }
      }, {
        key: "getTickTextAnchor",
        value: function getTickTextAnchor() {
          var _this$props3 = this.props, orientation = _this$props3.orientation, mirror = _this$props3.mirror;
          var textAnchor;
          switch (orientation) {
            case "left":
              textAnchor = mirror ? "start" : "end";
              break;
            case "right":
              textAnchor = mirror ? "end" : "start";
              break;
            default:
              textAnchor = "middle";
              break;
          }
          return textAnchor;
        }
      }, {
        key: "getTickVerticalAnchor",
        value: function getTickVerticalAnchor() {
          var _this$props4 = this.props, orientation = _this$props4.orientation, mirror = _this$props4.mirror;
          var verticalAnchor = "end";
          switch (orientation) {
            case "left":
            case "right":
              verticalAnchor = "middle";
              break;
            case "top":
              verticalAnchor = mirror ? "start" : "end";
              break;
            default:
              verticalAnchor = mirror ? "end" : "start";
              break;
          }
          return verticalAnchor;
        }
      }, {
        key: "renderAxisLine",
        value: function renderAxisLine() {
          var _this$props5 = this.props, x2 = _this$props5.x, y2 = _this$props5.y, width = _this$props5.width, height = _this$props5.height, orientation = _this$props5.orientation, mirror = _this$props5.mirror, axisLine = _this$props5.axisLine;
          var props = _objectSpread$3(_objectSpread$3(_objectSpread$3({}, filterProps(this.props, false)), filterProps(axisLine, false)), {}, {
            fill: "none"
          });
          if (orientation === "top" || orientation === "bottom") {
            var needHeight = +(orientation === "top" && !mirror || orientation === "bottom" && mirror);
            props = _objectSpread$3(_objectSpread$3({}, props), {}, {
              x1: x2,
              y1: y2 + needHeight * height,
              x2: x2 + width,
              y2: y2 + needHeight * height
            });
          } else {
            var needWidth = +(orientation === "left" && !mirror || orientation === "right" && mirror);
            props = _objectSpread$3(_objectSpread$3({}, props), {}, {
              x1: x2 + needWidth * width,
              y1: y2,
              x2: x2 + needWidth * width,
              y2: y2 + height
            });
          }
          return /* @__PURE__ */ React$1.createElement("line", _extends$4({}, props, {
            className: clsx("recharts-cartesian-axis-line", get$2(axisLine, "className"))
          }));
        }
      }, {
        key: "renderTicks",
        value: (
          /**
           * render the ticks
           * @param {Array} ticks The ticks to actually render (overrides what was passed in props)
           * @param {string} fontSize Fontsize to consider for tick spacing
           * @param {string} letterSpacing Letterspacing to consider for tick spacing
           * @return {ReactComponent} renderedTicks
           */
          function renderTicks(ticks2, fontSize, letterSpacing) {
            var _this2 = this;
            var _this$props6 = this.props, tickLine = _this$props6.tickLine, stroke = _this$props6.stroke, tick = _this$props6.tick, tickFormatter = _this$props6.tickFormatter, unit2 = _this$props6.unit;
            var finalTicks = getTicks(_objectSpread$3(_objectSpread$3({}, this.props), {}, {
              ticks: ticks2
            }), fontSize, letterSpacing);
            var textAnchor = this.getTickTextAnchor();
            var verticalAnchor = this.getTickVerticalAnchor();
            var axisProps = filterProps(this.props, false);
            var customTickProps = filterProps(tick, false);
            var tickLineProps = _objectSpread$3(_objectSpread$3({}, axisProps), {}, {
              fill: "none"
            }, filterProps(tickLine, false));
            var items = finalTicks.map(function(entry, i2) {
              var _this2$getTickLineCoo = _this2.getTickLineCoord(entry), lineCoord = _this2$getTickLineCoo.line, tickCoord = _this2$getTickLineCoo.tick;
              var tickProps = _objectSpread$3(_objectSpread$3(_objectSpread$3(_objectSpread$3({
                textAnchor,
                verticalAnchor
              }, axisProps), {}, {
                stroke: "none",
                fill: stroke
              }, customTickProps), tickCoord), {}, {
                index: i2,
                payload: entry,
                visibleTicksCount: finalTicks.length,
                tickFormatter
              });
              return /* @__PURE__ */ React$1.createElement(Layer, _extends$4({
                className: "recharts-cartesian-axis-tick",
                key: "tick-".concat(entry.value, "-").concat(entry.coordinate, "-").concat(entry.tickCoord)
              }, adaptEventsOfChild(_this2.props, entry, i2)), tickLine && /* @__PURE__ */ React$1.createElement("line", _extends$4({}, tickLineProps, lineCoord, {
                className: clsx("recharts-cartesian-axis-tick-line", get$2(tickLine, "className"))
              })), tick && CartesianAxis2.renderTickItem(tick, tickProps, "".concat(isFunction$4(tickFormatter) ? tickFormatter(entry.value, i2) : entry.value).concat(unit2 || "")));
            });
            return /* @__PURE__ */ React$1.createElement("g", {
              className: "recharts-cartesian-axis-ticks"
            }, items);
          }
        )
      }, {
        key: "render",
        value: function render() {
          var _this3 = this;
          var _this$props7 = this.props, axisLine = _this$props7.axisLine, width = _this$props7.width, height = _this$props7.height, ticksGenerator = _this$props7.ticksGenerator, className = _this$props7.className, hide = _this$props7.hide;
          if (hide) {
            return null;
          }
          var _this$props8 = this.props, ticks2 = _this$props8.ticks, noTicksProps = _objectWithoutProperties$2(_this$props8, _excluded3);
          var finalTicks = ticks2;
          if (isFunction$4(ticksGenerator)) {
            finalTicks = ticks2 && ticks2.length > 0 ? ticksGenerator(this.props) : ticksGenerator(noTicksProps);
          }
          if (width <= 0 || height <= 0 || !finalTicks || !finalTicks.length) {
            return null;
          }
          return /* @__PURE__ */ React$1.createElement(Layer, {
            className: clsx("recharts-cartesian-axis", className),
            ref: function ref(_ref2) {
              _this3.layerReference = _ref2;
            }
          }, axisLine && this.renderAxisLine(), this.renderTicks(finalTicks, this.state.fontSize, this.state.letterSpacing), Label.renderCallByParent(this.props));
        }
      }], [{
        key: "renderTickItem",
        value: function renderTickItem(option, props, value2) {
          var tickItem;
          if (/* @__PURE__ */ React$1.isValidElement(option)) {
            tickItem = /* @__PURE__ */ React$1.cloneElement(option, props);
          } else if (isFunction$4(option)) {
            tickItem = option(props);
          } else {
            tickItem = /* @__PURE__ */ React$1.createElement(Text, _extends$4({}, props, {
              className: "recharts-cartesian-axis-tick-value"
            }), value2);
          }
          return tickItem;
        }
      }]);
      return CartesianAxis2;
    }(reactExports.Component);
    _defineProperty$4(CartesianAxis, "displayName", "CartesianAxis");
    _defineProperty$4(CartesianAxis, "defaultProps", {
      x: 0,
      y: 0,
      width: 0,
      height: 0,
      viewBox: {
        x: 0,
        y: 0,
        width: 0,
        height: 0
      },
      // The orientation of axis
      orientation: "bottom",
      // The ticks
      ticks: [],
      stroke: "#666",
      tickLine: true,
      axisLine: true,
      tick: true,
      mirror: false,
      minTickGap: 5,
      // The width or height of tick
      tickSize: 6,
      tickMargin: 2,
      interval: "preserveEnd"
    });
    var _excluded$1 = ["x1", "y1", "x2", "y2", "key"], _excluded2$1 = ["offset"];
    function _typeof$3(o2) {
      "@babel/helpers - typeof";
      return _typeof$3 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
        return typeof o3;
      } : function(o3) {
        return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
      }, _typeof$3(o2);
    }
    function ownKeys$2(e3, r2) {
      var t2 = Object.keys(e3);
      if (Object.getOwnPropertySymbols) {
        var o2 = Object.getOwnPropertySymbols(e3);
        r2 && (o2 = o2.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e3, r3).enumerable;
        })), t2.push.apply(t2, o2);
      }
      return t2;
    }
    function _objectSpread$2(e3) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t2 = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$2(Object(t2), true).forEach(function(r3) {
          _defineProperty$3(e3, r3, t2[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$2(Object(t2)).forEach(function(r3) {
          Object.defineProperty(e3, r3, Object.getOwnPropertyDescriptor(t2, r3));
        });
      }
      return e3;
    }
    function _defineProperty$3(obj, key, value2) {
      key = _toPropertyKey$3(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value: value2, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value2;
      }
      return obj;
    }
    function _toPropertyKey$3(t2) {
      var i2 = _toPrimitive$3(t2, "string");
      return "symbol" == _typeof$3(i2) ? i2 : String(i2);
    }
    function _toPrimitive$3(t2, r2) {
      if ("object" != _typeof$3(t2) || !t2)
        return t2;
      var e3 = t2[Symbol.toPrimitive];
      if (void 0 !== e3) {
        var i2 = e3.call(t2, r2 || "default");
        if ("object" != _typeof$3(i2))
          return i2;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r2 ? String : Number)(t2);
    }
    function _extends$3() {
      _extends$3 = Object.assign ? Object.assign.bind() : function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends$3.apply(this, arguments);
    }
    function _objectWithoutProperties$1(source, excluded) {
      if (source == null)
        return {};
      var target = _objectWithoutPropertiesLoose$1(source, excluded);
      var key, i2;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i2 = 0; i2 < sourceSymbolKeys.length; i2++) {
          key = sourceSymbolKeys[i2];
          if (excluded.indexOf(key) >= 0)
            continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key))
            continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose$1(source, excluded) {
      if (source == null)
        return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i2;
      for (i2 = 0; i2 < sourceKeys.length; i2++) {
        key = sourceKeys[i2];
        if (excluded.indexOf(key) >= 0)
          continue;
        target[key] = source[key];
      }
      return target;
    }
    var Background = function Background2(props) {
      var fill = props.fill;
      if (!fill || fill === "none") {
        return null;
      }
      var fillOpacity = props.fillOpacity, x2 = props.x, y2 = props.y, width = props.width, height = props.height;
      return /* @__PURE__ */ React$1.createElement("rect", {
        x: x2,
        y: y2,
        width,
        height,
        stroke: "none",
        fill,
        fillOpacity,
        className: "recharts-cartesian-grid-bg"
      });
    };
    function renderLineItem(option, props) {
      var lineItem;
      if (/* @__PURE__ */ React$1.isValidElement(option)) {
        lineItem = /* @__PURE__ */ React$1.cloneElement(option, props);
      } else if (isFunction$4(option)) {
        lineItem = option(props);
      } else {
        var x1 = props.x1, y1 = props.y1, x2 = props.x2, y2 = props.y2, key = props.key, others = _objectWithoutProperties$1(props, _excluded$1);
        var _filterProps = filterProps(others, false);
        _filterProps.offset;
        var restOfFilteredProps = _objectWithoutProperties$1(_filterProps, _excluded2$1);
        lineItem = /* @__PURE__ */ React$1.createElement("line", _extends$3({}, restOfFilteredProps, {
          x1,
          y1,
          x2,
          y2,
          fill: "none",
          key
        }));
      }
      return lineItem;
    }
    function HorizontalGridLines(props) {
      var x2 = props.x, width = props.width, _props$horizontal = props.horizontal, horizontal = _props$horizontal === void 0 ? true : _props$horizontal, horizontalPoints = props.horizontalPoints;
      if (!horizontal || !horizontalPoints || !horizontalPoints.length) {
        return null;
      }
      var items = horizontalPoints.map(function(entry, i2) {
        var lineItemProps = _objectSpread$2(_objectSpread$2({}, props), {}, {
          x1: x2,
          y1: entry,
          x2: x2 + width,
          y2: entry,
          key: "line-".concat(i2),
          index: i2
        });
        return renderLineItem(horizontal, lineItemProps);
      });
      return /* @__PURE__ */ React$1.createElement("g", {
        className: "recharts-cartesian-grid-horizontal"
      }, items);
    }
    function VerticalGridLines(props) {
      var y2 = props.y, height = props.height, _props$vertical = props.vertical, vertical = _props$vertical === void 0 ? true : _props$vertical, verticalPoints = props.verticalPoints;
      if (!vertical || !verticalPoints || !verticalPoints.length) {
        return null;
      }
      var items = verticalPoints.map(function(entry, i2) {
        var lineItemProps = _objectSpread$2(_objectSpread$2({}, props), {}, {
          x1: entry,
          y1: y2,
          x2: entry,
          y2: y2 + height,
          key: "line-".concat(i2),
          index: i2
        });
        return renderLineItem(vertical, lineItemProps);
      });
      return /* @__PURE__ */ React$1.createElement("g", {
        className: "recharts-cartesian-grid-vertical"
      }, items);
    }
    function HorizontalStripes(props) {
      var horizontalFill = props.horizontalFill, fillOpacity = props.fillOpacity, x2 = props.x, y2 = props.y, width = props.width, height = props.height, horizontalPoints = props.horizontalPoints, _props$horizontal2 = props.horizontal, horizontal = _props$horizontal2 === void 0 ? true : _props$horizontal2;
      if (!horizontal || !horizontalFill || !horizontalFill.length) {
        return null;
      }
      var roundedSortedHorizontalPoints = horizontalPoints.map(function(e3) {
        return Math.round(e3 + y2 - y2);
      }).sort(function(a2, b2) {
        return a2 - b2;
      });
      if (y2 !== roundedSortedHorizontalPoints[0]) {
        roundedSortedHorizontalPoints.unshift(0);
      }
      var items = roundedSortedHorizontalPoints.map(function(entry, i2) {
        var lastStripe = !roundedSortedHorizontalPoints[i2 + 1];
        var lineHeight = lastStripe ? y2 + height - entry : roundedSortedHorizontalPoints[i2 + 1] - entry;
        if (lineHeight <= 0) {
          return null;
        }
        var colorIndex = i2 % horizontalFill.length;
        return /* @__PURE__ */ React$1.createElement("rect", {
          key: "react-".concat(i2),
          y: entry,
          x: x2,
          height: lineHeight,
          width,
          stroke: "none",
          fill: horizontalFill[colorIndex],
          fillOpacity,
          className: "recharts-cartesian-grid-bg"
        });
      });
      return /* @__PURE__ */ React$1.createElement("g", {
        className: "recharts-cartesian-gridstripes-horizontal"
      }, items);
    }
    function VerticalStripes(props) {
      var _props$vertical2 = props.vertical, vertical = _props$vertical2 === void 0 ? true : _props$vertical2, verticalFill = props.verticalFill, fillOpacity = props.fillOpacity, x2 = props.x, y2 = props.y, width = props.width, height = props.height, verticalPoints = props.verticalPoints;
      if (!vertical || !verticalFill || !verticalFill.length) {
        return null;
      }
      var roundedSortedVerticalPoints = verticalPoints.map(function(e3) {
        return Math.round(e3 + x2 - x2);
      }).sort(function(a2, b2) {
        return a2 - b2;
      });
      if (x2 !== roundedSortedVerticalPoints[0]) {
        roundedSortedVerticalPoints.unshift(0);
      }
      var items = roundedSortedVerticalPoints.map(function(entry, i2) {
        var lastStripe = !roundedSortedVerticalPoints[i2 + 1];
        var lineWidth = lastStripe ? x2 + width - entry : roundedSortedVerticalPoints[i2 + 1] - entry;
        if (lineWidth <= 0) {
          return null;
        }
        var colorIndex = i2 % verticalFill.length;
        return /* @__PURE__ */ React$1.createElement("rect", {
          key: "react-".concat(i2),
          x: entry,
          y: y2,
          width: lineWidth,
          height,
          stroke: "none",
          fill: verticalFill[colorIndex],
          fillOpacity,
          className: "recharts-cartesian-grid-bg"
        });
      });
      return /* @__PURE__ */ React$1.createElement("g", {
        className: "recharts-cartesian-gridstripes-vertical"
      }, items);
    }
    var defaultVerticalCoordinatesGenerator = function defaultVerticalCoordinatesGenerator2(_ref, syncWithTicks) {
      var xAxis = _ref.xAxis, width = _ref.width, height = _ref.height, offset2 = _ref.offset;
      return getCoordinatesOfGrid(getTicks(_objectSpread$2(_objectSpread$2(_objectSpread$2({}, CartesianAxis.defaultProps), xAxis), {}, {
        ticks: getTicksOfAxis(xAxis, true),
        viewBox: {
          x: 0,
          y: 0,
          width,
          height
        }
      })), offset2.left, offset2.left + offset2.width, syncWithTicks);
    };
    var defaultHorizontalCoordinatesGenerator = function defaultHorizontalCoordinatesGenerator2(_ref2, syncWithTicks) {
      var yAxis = _ref2.yAxis, width = _ref2.width, height = _ref2.height, offset2 = _ref2.offset;
      return getCoordinatesOfGrid(getTicks(_objectSpread$2(_objectSpread$2(_objectSpread$2({}, CartesianAxis.defaultProps), yAxis), {}, {
        ticks: getTicksOfAxis(yAxis, true),
        viewBox: {
          x: 0,
          y: 0,
          width,
          height
        }
      })), offset2.top, offset2.top + offset2.height, syncWithTicks);
    };
    var defaultProps = {
      horizontal: true,
      vertical: true,
      // The ordinates of horizontal grid lines
      horizontalPoints: [],
      // The abscissas of vertical grid lines
      verticalPoints: [],
      stroke: "#ccc",
      fill: "none",
      // The fill of colors of grid lines
      verticalFill: [],
      horizontalFill: []
    };
    function CartesianGrid(props) {
      var _props$stroke, _props$fill, _props$horizontal3, _props$horizontalFill, _props$vertical3, _props$verticalFill;
      var chartWidth = useChartWidth();
      var chartHeight = useChartHeight();
      var offset2 = useOffset();
      var propsIncludingDefaults = _objectSpread$2(_objectSpread$2({}, props), {}, {
        stroke: (_props$stroke = props.stroke) !== null && _props$stroke !== void 0 ? _props$stroke : defaultProps.stroke,
        fill: (_props$fill = props.fill) !== null && _props$fill !== void 0 ? _props$fill : defaultProps.fill,
        horizontal: (_props$horizontal3 = props.horizontal) !== null && _props$horizontal3 !== void 0 ? _props$horizontal3 : defaultProps.horizontal,
        horizontalFill: (_props$horizontalFill = props.horizontalFill) !== null && _props$horizontalFill !== void 0 ? _props$horizontalFill : defaultProps.horizontalFill,
        vertical: (_props$vertical3 = props.vertical) !== null && _props$vertical3 !== void 0 ? _props$vertical3 : defaultProps.vertical,
        verticalFill: (_props$verticalFill = props.verticalFill) !== null && _props$verticalFill !== void 0 ? _props$verticalFill : defaultProps.verticalFill,
        x: isNumber(props.x) ? props.x : offset2.left,
        y: isNumber(props.y) ? props.y : offset2.top,
        width: isNumber(props.width) ? props.width : offset2.width,
        height: isNumber(props.height) ? props.height : offset2.height
      });
      var x2 = propsIncludingDefaults.x, y2 = propsIncludingDefaults.y, width = propsIncludingDefaults.width, height = propsIncludingDefaults.height, syncWithTicks = propsIncludingDefaults.syncWithTicks, horizontalValues = propsIncludingDefaults.horizontalValues, verticalValues = propsIncludingDefaults.verticalValues;
      var xAxis = useArbitraryXAxis();
      var yAxis = useYAxisWithFiniteDomainOrRandom();
      if (!isNumber(width) || width <= 0 || !isNumber(height) || height <= 0 || !isNumber(x2) || x2 !== +x2 || !isNumber(y2) || y2 !== +y2) {
        return null;
      }
      var verticalCoordinatesGenerator = propsIncludingDefaults.verticalCoordinatesGenerator || defaultVerticalCoordinatesGenerator;
      var horizontalCoordinatesGenerator = propsIncludingDefaults.horizontalCoordinatesGenerator || defaultHorizontalCoordinatesGenerator;
      var horizontalPoints = propsIncludingDefaults.horizontalPoints, verticalPoints = propsIncludingDefaults.verticalPoints;
      if ((!horizontalPoints || !horizontalPoints.length) && isFunction$4(horizontalCoordinatesGenerator)) {
        var isHorizontalValues = horizontalValues && horizontalValues.length;
        var generatorResult = horizontalCoordinatesGenerator({
          yAxis: yAxis ? _objectSpread$2(_objectSpread$2({}, yAxis), {}, {
            ticks: isHorizontalValues ? horizontalValues : yAxis.ticks
          }) : void 0,
          width: chartWidth,
          height: chartHeight,
          offset: offset2
        }, isHorizontalValues ? true : syncWithTicks);
        warn(Array.isArray(generatorResult), "horizontalCoordinatesGenerator should return Array but instead it returned [".concat(_typeof$3(generatorResult), "]"));
        if (Array.isArray(generatorResult)) {
          horizontalPoints = generatorResult;
        }
      }
      if ((!verticalPoints || !verticalPoints.length) && isFunction$4(verticalCoordinatesGenerator)) {
        var isVerticalValues = verticalValues && verticalValues.length;
        var _generatorResult = verticalCoordinatesGenerator({
          xAxis: xAxis ? _objectSpread$2(_objectSpread$2({}, xAxis), {}, {
            ticks: isVerticalValues ? verticalValues : xAxis.ticks
          }) : void 0,
          width: chartWidth,
          height: chartHeight,
          offset: offset2
        }, isVerticalValues ? true : syncWithTicks);
        warn(Array.isArray(_generatorResult), "verticalCoordinatesGenerator should return Array but instead it returned [".concat(_typeof$3(_generatorResult), "]"));
        if (Array.isArray(_generatorResult)) {
          verticalPoints = _generatorResult;
        }
      }
      return /* @__PURE__ */ React$1.createElement("g", {
        className: "recharts-cartesian-grid"
      }, /* @__PURE__ */ React$1.createElement(Background, {
        fill: propsIncludingDefaults.fill,
        fillOpacity: propsIncludingDefaults.fillOpacity,
        x: propsIncludingDefaults.x,
        y: propsIncludingDefaults.y,
        width: propsIncludingDefaults.width,
        height: propsIncludingDefaults.height
      }), /* @__PURE__ */ React$1.createElement(HorizontalGridLines, _extends$3({}, propsIncludingDefaults, {
        offset: offset2,
        horizontalPoints,
        xAxis,
        yAxis
      })), /* @__PURE__ */ React$1.createElement(VerticalGridLines, _extends$3({}, propsIncludingDefaults, {
        offset: offset2,
        verticalPoints,
        xAxis,
        yAxis
      })), /* @__PURE__ */ React$1.createElement(HorizontalStripes, _extends$3({}, propsIncludingDefaults, {
        horizontalPoints
      })), /* @__PURE__ */ React$1.createElement(VerticalStripes, _extends$3({}, propsIncludingDefaults, {
        verticalPoints
      })));
    }
    CartesianGrid.displayName = "CartesianGrid";
    function _extends$2() {
      _extends$2 = Object.assign ? Object.assign.bind() : function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends$2.apply(this, arguments);
    }
    var XAxis = function XAxis2(_ref) {
      var xAxisId = _ref.xAxisId;
      var width = useChartWidth();
      var height = useChartHeight();
      var axisOptions = useXAxisOrThrow(xAxisId);
      if (axisOptions == null) {
        return null;
      }
      return (
        // @ts-expect-error the axisOptions type is not exactly what CartesianAxis is expecting.
        /* @__PURE__ */ React$1.createElement(CartesianAxis, _extends$2({}, axisOptions, {
          className: clsx("recharts-".concat(axisOptions.axisType, " ").concat(axisOptions.axisType), axisOptions.className),
          viewBox: {
            x: 0,
            y: 0,
            width,
            height
          },
          ticksGenerator: function ticksGenerator(axis) {
            return getTicksOfAxis(axis, true);
          }
        }))
      );
    };
    XAxis.displayName = "XAxis";
    XAxis.defaultProps = {
      allowDecimals: true,
      hide: false,
      orientation: "bottom",
      width: 0,
      height: 30,
      mirror: false,
      xAxisId: 0,
      tickCount: 5,
      type: "category",
      padding: {
        left: 0,
        right: 0
      },
      allowDataOverflow: false,
      scale: "auto",
      reversed: false,
      allowDuplicatedCategory: true
    };
    function _extends$1() {
      _extends$1 = Object.assign ? Object.assign.bind() : function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends$1.apply(this, arguments);
    }
    var YAxis = function YAxis2(_ref) {
      var yAxisId = _ref.yAxisId;
      var width = useChartWidth();
      var height = useChartHeight();
      var axisOptions = useYAxisOrThrow(yAxisId);
      if (axisOptions == null) {
        return null;
      }
      return (
        // @ts-expect-error the axisOptions type is not exactly what CartesianAxis is expecting.
        /* @__PURE__ */ React$1.createElement(CartesianAxis, _extends$1({}, axisOptions, {
          className: clsx("recharts-".concat(axisOptions.axisType, " ").concat(axisOptions.axisType), axisOptions.className),
          viewBox: {
            x: 0,
            y: 0,
            width,
            height
          },
          ticksGenerator: function ticksGenerator(axis) {
            return getTicksOfAxis(axis, true);
          }
        }))
      );
    };
    YAxis.displayName = "YAxis";
    YAxis.defaultProps = {
      allowDuplicatedCategory: true,
      allowDecimals: true,
      hide: false,
      orientation: "left",
      width: 60,
      height: 0,
      mirror: false,
      yAxisId: 0,
      tickCount: 5,
      type: "number",
      padding: {
        top: 0,
        bottom: 0
      },
      allowDataOverflow: false,
      scale: "auto",
      reversed: false
    };
    function _toConsumableArray$1(arr) {
      return _arrayWithoutHoles$1(arr) || _iterableToArray$1(arr) || _unsupportedIterableToArray$1(arr) || _nonIterableSpread$1();
    }
    function _nonIterableSpread$1() {
      throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray$1(o2, minLen) {
      if (!o2)
        return;
      if (typeof o2 === "string")
        return _arrayLikeToArray$1(o2, minLen);
      var n2 = Object.prototype.toString.call(o2).slice(8, -1);
      if (n2 === "Object" && o2.constructor)
        n2 = o2.constructor.name;
      if (n2 === "Map" || n2 === "Set")
        return Array.from(o2);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
        return _arrayLikeToArray$1(o2, minLen);
    }
    function _iterableToArray$1(iter) {
      if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
        return Array.from(iter);
    }
    function _arrayWithoutHoles$1(arr) {
      if (Array.isArray(arr))
        return _arrayLikeToArray$1(arr);
    }
    function _arrayLikeToArray$1(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++)
        arr2[i2] = arr[i2];
      return arr2;
    }
    var detectReferenceElementsDomain = function detectReferenceElementsDomain2(children, domain, axisId, axisType, specifiedTicks) {
      var lines = findAllByType(children, ReferenceLine);
      var dots = findAllByType(children, ReferenceDot);
      var elements = [].concat(_toConsumableArray$1(lines), _toConsumableArray$1(dots));
      var areas = findAllByType(children, ReferenceArea);
      var idKey = "".concat(axisType, "Id");
      var valueKey = axisType[0];
      var finalDomain = domain;
      if (elements.length) {
        finalDomain = elements.reduce(function(result, el2) {
          if (el2.props[idKey] === axisId && ifOverflowMatches(el2.props, "extendDomain") && isNumber(el2.props[valueKey])) {
            var value2 = el2.props[valueKey];
            return [Math.min(result[0], value2), Math.max(result[1], value2)];
          }
          return result;
        }, finalDomain);
      }
      if (areas.length) {
        var key1 = "".concat(valueKey, "1");
        var key2 = "".concat(valueKey, "2");
        finalDomain = areas.reduce(function(result, el2) {
          if (el2.props[idKey] === axisId && ifOverflowMatches(el2.props, "extendDomain") && isNumber(el2.props[key1]) && isNumber(el2.props[key2])) {
            var value1 = el2.props[key1];
            var value2 = el2.props[key2];
            return [Math.min(result[0], value1, value2), Math.max(result[1], value1, value2)];
          }
          return result;
        }, finalDomain);
      }
      if (specifiedTicks && specifiedTicks.length) {
        finalDomain = specifiedTicks.reduce(function(result, tick) {
          if (isNumber(tick)) {
            return [Math.min(result[0], tick), Math.max(result[1], tick)];
          }
          return result;
        }, finalDomain);
      }
      return finalDomain;
    };
    var eventemitter3 = { exports: {} };
    (function(module2) {
      var has2 = Object.prototype.hasOwnProperty, prefix2 = "~";
      function Events() {
      }
      if (Object.create) {
        Events.prototype = /* @__PURE__ */ Object.create(null);
        if (!new Events().__proto__)
          prefix2 = false;
      }
      function EE(fn, context, once) {
        this.fn = fn;
        this.context = context;
        this.once = once || false;
      }
      function addListener(emitter, event, fn, context, once) {
        if (typeof fn !== "function") {
          throw new TypeError("The listener must be a function");
        }
        var listener = new EE(fn, context || emitter, once), evt = prefix2 ? prefix2 + event : event;
        if (!emitter._events[evt])
          emitter._events[evt] = listener, emitter._eventsCount++;
        else if (!emitter._events[evt].fn)
          emitter._events[evt].push(listener);
        else
          emitter._events[evt] = [emitter._events[evt], listener];
        return emitter;
      }
      function clearEvent(emitter, evt) {
        if (--emitter._eventsCount === 0)
          emitter._events = new Events();
        else
          delete emitter._events[evt];
      }
      function EventEmitter2() {
        this._events = new Events();
        this._eventsCount = 0;
      }
      EventEmitter2.prototype.eventNames = function eventNames() {
        var names = [], events2, name;
        if (this._eventsCount === 0)
          return names;
        for (name in events2 = this._events) {
          if (has2.call(events2, name))
            names.push(prefix2 ? name.slice(1) : name);
        }
        if (Object.getOwnPropertySymbols) {
          return names.concat(Object.getOwnPropertySymbols(events2));
        }
        return names;
      };
      EventEmitter2.prototype.listeners = function listeners(event) {
        var evt = prefix2 ? prefix2 + event : event, handlers = this._events[evt];
        if (!handlers)
          return [];
        if (handlers.fn)
          return [handlers.fn];
        for (var i2 = 0, l2 = handlers.length, ee2 = new Array(l2); i2 < l2; i2++) {
          ee2[i2] = handlers[i2].fn;
        }
        return ee2;
      };
      EventEmitter2.prototype.listenerCount = function listenerCount(event) {
        var evt = prefix2 ? prefix2 + event : event, listeners = this._events[evt];
        if (!listeners)
          return 0;
        if (listeners.fn)
          return 1;
        return listeners.length;
      };
      EventEmitter2.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
        var evt = prefix2 ? prefix2 + event : event;
        if (!this._events[evt])
          return false;
        var listeners = this._events[evt], len = arguments.length, args, i2;
        if (listeners.fn) {
          if (listeners.once)
            this.removeListener(event, listeners.fn, void 0, true);
          switch (len) {
            case 1:
              return listeners.fn.call(listeners.context), true;
            case 2:
              return listeners.fn.call(listeners.context, a1), true;
            case 3:
              return listeners.fn.call(listeners.context, a1, a2), true;
            case 4:
              return listeners.fn.call(listeners.context, a1, a2, a3), true;
            case 5:
              return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
            case 6:
              return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
          }
          for (i2 = 1, args = new Array(len - 1); i2 < len; i2++) {
            args[i2 - 1] = arguments[i2];
          }
          listeners.fn.apply(listeners.context, args);
        } else {
          var length = listeners.length, j2;
          for (i2 = 0; i2 < length; i2++) {
            if (listeners[i2].once)
              this.removeListener(event, listeners[i2].fn, void 0, true);
            switch (len) {
              case 1:
                listeners[i2].fn.call(listeners[i2].context);
                break;
              case 2:
                listeners[i2].fn.call(listeners[i2].context, a1);
                break;
              case 3:
                listeners[i2].fn.call(listeners[i2].context, a1, a2);
                break;
              case 4:
                listeners[i2].fn.call(listeners[i2].context, a1, a2, a3);
                break;
              default:
                if (!args)
                  for (j2 = 1, args = new Array(len - 1); j2 < len; j2++) {
                    args[j2 - 1] = arguments[j2];
                  }
                listeners[i2].fn.apply(listeners[i2].context, args);
            }
          }
        }
        return true;
      };
      EventEmitter2.prototype.on = function on2(event, fn, context) {
        return addListener(this, event, fn, context, false);
      };
      EventEmitter2.prototype.once = function once(event, fn, context) {
        return addListener(this, event, fn, context, true);
      };
      EventEmitter2.prototype.removeListener = function removeListener(event, fn, context, once) {
        var evt = prefix2 ? prefix2 + event : event;
        if (!this._events[evt])
          return this;
        if (!fn) {
          clearEvent(this, evt);
          return this;
        }
        var listeners = this._events[evt];
        if (listeners.fn) {
          if (listeners.fn === fn && (!once || listeners.once) && (!context || listeners.context === context)) {
            clearEvent(this, evt);
          }
        } else {
          for (var i2 = 0, events2 = [], length = listeners.length; i2 < length; i2++) {
            if (listeners[i2].fn !== fn || once && !listeners[i2].once || context && listeners[i2].context !== context) {
              events2.push(listeners[i2]);
            }
          }
          if (events2.length)
            this._events[evt] = events2.length === 1 ? events2[0] : events2;
          else
            clearEvent(this, evt);
        }
        return this;
      };
      EventEmitter2.prototype.removeAllListeners = function removeAllListeners(event) {
        var evt;
        if (event) {
          evt = prefix2 ? prefix2 + event : event;
          if (this._events[evt])
            clearEvent(this, evt);
        } else {
          this._events = new Events();
          this._eventsCount = 0;
        }
        return this;
      };
      EventEmitter2.prototype.off = EventEmitter2.prototype.removeListener;
      EventEmitter2.prototype.addListener = EventEmitter2.prototype.on;
      EventEmitter2.prefixed = prefix2;
      EventEmitter2.EventEmitter = EventEmitter2;
      {
        module2.exports = EventEmitter2;
      }
    })(eventemitter3);
    var eventemitter3Exports = eventemitter3.exports;
    const EventEmitter = /* @__PURE__ */ getDefaultExportFromCjs(eventemitter3Exports);
    var eventCenter = new EventEmitter();
    var SYNC_EVENT = "recharts.syncMouseEvents";
    function _typeof$2(o2) {
      "@babel/helpers - typeof";
      return _typeof$2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
        return typeof o3;
      } : function(o3) {
        return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
      }, _typeof$2(o2);
    }
    function _classCallCheck$1(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties$1(target, props) {
      for (var i2 = 0; i2 < props.length; i2++) {
        var descriptor = props[i2];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey$2(descriptor.key), descriptor);
      }
    }
    function _createClass$1(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties$1(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties$1(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _defineProperty$2(obj, key, value2) {
      key = _toPropertyKey$2(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value: value2, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value2;
      }
      return obj;
    }
    function _toPropertyKey$2(t2) {
      var i2 = _toPrimitive$2(t2, "string");
      return "symbol" == _typeof$2(i2) ? i2 : String(i2);
    }
    function _toPrimitive$2(t2, r2) {
      if ("object" != _typeof$2(t2) || !t2)
        return t2;
      var e3 = t2[Symbol.toPrimitive];
      if (void 0 !== e3) {
        var i2 = e3.call(t2, r2 || "default");
        if ("object" != _typeof$2(i2))
          return i2;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r2 ? String : Number)(t2);
    }
    var AccessibilityManager = /* @__PURE__ */ function() {
      function AccessibilityManager2() {
        _classCallCheck$1(this, AccessibilityManager2);
        _defineProperty$2(this, "activeIndex", 0);
        _defineProperty$2(this, "coordinateList", []);
        _defineProperty$2(this, "layout", "horizontal");
      }
      _createClass$1(AccessibilityManager2, [{
        key: "setDetails",
        value: function setDetails(_ref) {
          var _ref2;
          var _ref$coordinateList = _ref.coordinateList, coordinateList = _ref$coordinateList === void 0 ? null : _ref$coordinateList, _ref$container = _ref.container, container = _ref$container === void 0 ? null : _ref$container, _ref$layout = _ref.layout, layout = _ref$layout === void 0 ? null : _ref$layout, _ref$offset = _ref.offset, offset2 = _ref$offset === void 0 ? null : _ref$offset, _ref$mouseHandlerCall = _ref.mouseHandlerCallback, mouseHandlerCallback = _ref$mouseHandlerCall === void 0 ? null : _ref$mouseHandlerCall;
          this.coordinateList = (_ref2 = coordinateList !== null && coordinateList !== void 0 ? coordinateList : this.coordinateList) !== null && _ref2 !== void 0 ? _ref2 : [];
          this.container = container !== null && container !== void 0 ? container : this.container;
          this.layout = layout !== null && layout !== void 0 ? layout : this.layout;
          this.offset = offset2 !== null && offset2 !== void 0 ? offset2 : this.offset;
          this.mouseHandlerCallback = mouseHandlerCallback !== null && mouseHandlerCallback !== void 0 ? mouseHandlerCallback : this.mouseHandlerCallback;
          this.activeIndex = Math.min(Math.max(this.activeIndex, 0), this.coordinateList.length - 1);
        }
      }, {
        key: "focus",
        value: function focus() {
          this.spoofMouse();
        }
      }, {
        key: "keyboardEvent",
        value: function keyboardEvent(e3) {
          if (this.coordinateList.length === 0) {
            return;
          }
          switch (e3.key) {
            case "ArrowRight": {
              if (this.layout !== "horizontal") {
                return;
              }
              this.activeIndex = Math.min(this.activeIndex + 1, this.coordinateList.length - 1);
              this.spoofMouse();
              break;
            }
            case "ArrowLeft": {
              if (this.layout !== "horizontal") {
                return;
              }
              this.activeIndex = Math.max(this.activeIndex - 1, 0);
              this.spoofMouse();
              break;
            }
          }
        }
      }, {
        key: "setIndex",
        value: function setIndex(newIndex) {
          this.activeIndex = newIndex;
        }
      }, {
        key: "spoofMouse",
        value: function spoofMouse() {
          var _window, _window2;
          if (this.layout !== "horizontal") {
            return;
          }
          if (this.coordinateList.length === 0) {
            return;
          }
          var _this$container$getBo = this.container.getBoundingClientRect(), x2 = _this$container$getBo.x, y2 = _this$container$getBo.y, height = _this$container$getBo.height;
          var coordinate = this.coordinateList[this.activeIndex].coordinate;
          var scrollOffsetX = ((_window = window) === null || _window === void 0 ? void 0 : _window.scrollX) || 0;
          var scrollOffsetY = ((_window2 = window) === null || _window2 === void 0 ? void 0 : _window2.scrollY) || 0;
          var pageX = x2 + coordinate + scrollOffsetX;
          var pageY = y2 + this.offset.top + height / 2 + scrollOffsetY;
          this.mouseHandlerCallback({
            pageX,
            pageY
          });
        }
      }]);
      return AccessibilityManager2;
    }();
    function isDomainSpecifiedByUser(domain, allowDataOverflow, axisType) {
      if (axisType === "number" && allowDataOverflow === true && Array.isArray(domain)) {
        var domainStart = domain === null || domain === void 0 ? void 0 : domain[0];
        var domainEnd = domain === null || domain === void 0 ? void 0 : domain[1];
        if (!!domainStart && !!domainEnd && isNumber(domainStart) && isNumber(domainEnd)) {
          return true;
        }
      }
      return false;
    }
    function getCursorRectangle(layout, activeCoordinate, offset2, tooltipAxisBandSize) {
      var halfSize = tooltipAxisBandSize / 2;
      return {
        stroke: "none",
        fill: "#ccc",
        x: layout === "horizontal" ? activeCoordinate.x - halfSize : offset2.left + 0.5,
        y: layout === "horizontal" ? offset2.top + 0.5 : activeCoordinate.y - halfSize,
        width: layout === "horizontal" ? tooltipAxisBandSize : offset2.width - 1,
        height: layout === "horizontal" ? offset2.height - 1 : tooltipAxisBandSize
      };
    }
    function getRadialCursorPoints(activeCoordinate) {
      var cx = activeCoordinate.cx, cy = activeCoordinate.cy, radius = activeCoordinate.radius, startAngle = activeCoordinate.startAngle, endAngle = activeCoordinate.endAngle;
      var startPoint = polarToCartesian(cx, cy, radius, startAngle);
      var endPoint = polarToCartesian(cx, cy, radius, endAngle);
      return {
        points: [startPoint, endPoint],
        cx,
        cy,
        radius,
        startAngle,
        endAngle
      };
    }
    function getCursorPoints(layout, activeCoordinate, offset2) {
      var x1, y1, x2, y2;
      if (layout === "horizontal") {
        x1 = activeCoordinate.x;
        x2 = x1;
        y1 = offset2.top;
        y2 = offset2.top + offset2.height;
      } else if (layout === "vertical") {
        y1 = activeCoordinate.y;
        y2 = y1;
        x1 = offset2.left;
        x2 = offset2.left + offset2.width;
      } else if (activeCoordinate.cx != null && activeCoordinate.cy != null) {
        if (layout === "centric") {
          var cx = activeCoordinate.cx, cy = activeCoordinate.cy, innerRadius = activeCoordinate.innerRadius, outerRadius = activeCoordinate.outerRadius, angle = activeCoordinate.angle;
          var innerPoint = polarToCartesian(cx, cy, innerRadius, angle);
          var outerPoint = polarToCartesian(cx, cy, outerRadius, angle);
          x1 = innerPoint.x;
          y1 = innerPoint.y;
          x2 = outerPoint.x;
          y2 = outerPoint.y;
        } else {
          return getRadialCursorPoints(activeCoordinate);
        }
      }
      return [{
        x: x1,
        y: y1
      }, {
        x: x2,
        y: y2
      }];
    }
    function _typeof$1(o2) {
      "@babel/helpers - typeof";
      return _typeof$1 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
        return typeof o3;
      } : function(o3) {
        return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
      }, _typeof$1(o2);
    }
    function ownKeys$1(e3, r2) {
      var t2 = Object.keys(e3);
      if (Object.getOwnPropertySymbols) {
        var o2 = Object.getOwnPropertySymbols(e3);
        r2 && (o2 = o2.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e3, r3).enumerable;
        })), t2.push.apply(t2, o2);
      }
      return t2;
    }
    function _objectSpread$1(e3) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t2 = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys$1(Object(t2), true).forEach(function(r3) {
          _defineProperty$1(e3, r3, t2[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys$1(Object(t2)).forEach(function(r3) {
          Object.defineProperty(e3, r3, Object.getOwnPropertyDescriptor(t2, r3));
        });
      }
      return e3;
    }
    function _defineProperty$1(obj, key, value2) {
      key = _toPropertyKey$1(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value: value2, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value2;
      }
      return obj;
    }
    function _toPropertyKey$1(t2) {
      var i2 = _toPrimitive$1(t2, "string");
      return "symbol" == _typeof$1(i2) ? i2 : String(i2);
    }
    function _toPrimitive$1(t2, r2) {
      if ("object" != _typeof$1(t2) || !t2)
        return t2;
      var e3 = t2[Symbol.toPrimitive];
      if (void 0 !== e3) {
        var i2 = e3.call(t2, r2 || "default");
        if ("object" != _typeof$1(i2))
          return i2;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r2 ? String : Number)(t2);
    }
    function Cursor(props) {
      var element = props.element, tooltipEventType = props.tooltipEventType, isActive = props.isActive, activeCoordinate = props.activeCoordinate, activePayload = props.activePayload, offset2 = props.offset, activeTooltipIndex = props.activeTooltipIndex, tooltipAxisBandSize = props.tooltipAxisBandSize, layout = props.layout, chartName = props.chartName;
      if (!element || !element.props.cursor || !isActive || !activeCoordinate || chartName !== "ScatterChart" && tooltipEventType !== "axis") {
        return null;
      }
      var restProps;
      var cursorComp = Curve;
      if (chartName === "ScatterChart") {
        restProps = activeCoordinate;
        cursorComp = Cross;
      } else if (chartName === "BarChart") {
        restProps = getCursorRectangle(layout, activeCoordinate, offset2, tooltipAxisBandSize);
        cursorComp = Rectangle;
      } else if (layout === "radial") {
        var _getRadialCursorPoint = getRadialCursorPoints(activeCoordinate), cx = _getRadialCursorPoint.cx, cy = _getRadialCursorPoint.cy, radius = _getRadialCursorPoint.radius, startAngle = _getRadialCursorPoint.startAngle, endAngle = _getRadialCursorPoint.endAngle;
        restProps = {
          cx,
          cy,
          startAngle,
          endAngle,
          innerRadius: radius,
          outerRadius: radius
        };
        cursorComp = Sector;
      } else {
        restProps = {
          points: getCursorPoints(layout, activeCoordinate, offset2)
        };
        cursorComp = Curve;
      }
      var cursorProps = _objectSpread$1(_objectSpread$1(_objectSpread$1(_objectSpread$1({
        stroke: "#ccc",
        pointerEvents: "none"
      }, offset2), restProps), filterProps(element.props.cursor, false)), {}, {
        payload: activePayload,
        payloadIndex: activeTooltipIndex,
        className: "recharts-tooltip-cursor"
      });
      return /* @__PURE__ */ reactExports.isValidElement(element.props.cursor) ? /* @__PURE__ */ reactExports.cloneElement(element.props.cursor, cursorProps) : /* @__PURE__ */ reactExports.createElement(cursorComp, cursorProps);
    }
    var _excluded = ["item"], _excluded2 = ["children", "className", "width", "height", "style", "compact", "title", "desc"];
    function _typeof(o2) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o22) {
        return typeof o22;
      } : function(o22) {
        return o22 && "function" == typeof Symbol && o22.constructor === Symbol && o22 !== Symbol.prototype ? "symbol" : typeof o22;
      }, _typeof(o2);
    }
    function _extends() {
      _extends = Object.assign ? Object.assign.bind() : function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends.apply(this, arguments);
    }
    function _slicedToArray(arr, i2) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i2) || _unsupportedIterableToArray(arr, i2) || _nonIterableRest();
    }
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _iterableToArrayLimit(r2, l2) {
      var t2 = null == r2 ? null : "undefined" != typeof Symbol && r2[Symbol.iterator] || r2["@@iterator"];
      if (null != t2) {
        var e3, n2, i2, u2, a2 = [], f2 = true, o2 = false;
        try {
          if (i2 = (t2 = t2.call(r2)).next, 0 === l2) {
            if (Object(t2) !== t2)
              return;
            f2 = false;
          } else
            for (; !(f2 = (e3 = i2.call(t2)).done) && (a2.push(e3.value), a2.length !== l2); f2 = true)
              ;
        } catch (r22) {
          o2 = true, n2 = r22;
        } finally {
          try {
            if (!f2 && null != t2["return"] && (u2 = t2["return"](), Object(u2) !== u2))
              return;
          } finally {
            if (o2)
              throw n2;
          }
        }
        return a2;
      }
    }
    function _arrayWithHoles(arr) {
      if (Array.isArray(arr))
        return arr;
    }
    function _objectWithoutProperties(source, excluded) {
      if (source == null)
        return {};
      var target = _objectWithoutPropertiesLoose(source, excluded);
      var key, i2;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i2 = 0; i2 < sourceSymbolKeys.length; i2++) {
          key = sourceSymbolKeys[i2];
          if (excluded.indexOf(key) >= 0)
            continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key))
            continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null)
        return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i2;
      for (i2 = 0; i2 < sourceKeys.length; i2++) {
        key = sourceKeys[i2];
        if (excluded.indexOf(key) >= 0)
          continue;
        target[key] = source[key];
      }
      return target;
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i2 = 0; i2 < props.length; i2++) {
        var descriptor = props[i2];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _callSuper(t2, o2, e3) {
      return o2 = _getPrototypeOf(o2), _possibleConstructorReturn(t2, _isNativeReflectConstruct() ? Reflect.construct(o2, e3 || [], _getPrototypeOf(t2).constructor) : o2.apply(t2, e3));
    }
    function _possibleConstructorReturn(self2, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }
      return _assertThisInitialized(self2);
    }
    function _isNativeReflectConstruct() {
      try {
        var t2 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
      } catch (t22) {
      }
      return (_isNativeReflectConstruct = function _isNativeReflectConstruct2() {
        return !!t2;
      })();
    }
    function _getPrototypeOf(o2) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o22) {
        return o22.__proto__ || Object.getPrototypeOf(o22);
      };
      return _getPrototypeOf(o2);
    }
    function _assertThisInitialized(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      Object.defineProperty(subClass, "prototype", { writable: false });
      if (superClass)
        _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o2, p2) {
      _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o22, p22) {
        o22.__proto__ = p22;
        return o22;
      };
      return _setPrototypeOf(o2, p2);
    }
    function _toConsumableArray(arr) {
      return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
    }
    function _nonIterableSpread() {
      throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray(o2, minLen) {
      if (!o2)
        return;
      if (typeof o2 === "string")
        return _arrayLikeToArray(o2, minLen);
      var n2 = Object.prototype.toString.call(o2).slice(8, -1);
      if (n2 === "Object" && o2.constructor)
        n2 = o2.constructor.name;
      if (n2 === "Map" || n2 === "Set")
        return Array.from(o2);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
        return _arrayLikeToArray(o2, minLen);
    }
    function _iterableToArray(iter) {
      if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
        return Array.from(iter);
    }
    function _arrayWithoutHoles(arr) {
      if (Array.isArray(arr))
        return _arrayLikeToArray(arr);
    }
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++)
        arr2[i2] = arr[i2];
      return arr2;
    }
    function ownKeys(e3, r2) {
      var t2 = Object.keys(e3);
      if (Object.getOwnPropertySymbols) {
        var o2 = Object.getOwnPropertySymbols(e3);
        r2 && (o2 = o2.filter(function(r22) {
          return Object.getOwnPropertyDescriptor(e3, r22).enumerable;
        })), t2.push.apply(t2, o2);
      }
      return t2;
    }
    function _objectSpread(e3) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t2 = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys(Object(t2), true).forEach(function(r22) {
          _defineProperty(e3, r22, t2[r22]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t2)) : ownKeys(Object(t2)).forEach(function(r22) {
          Object.defineProperty(e3, r22, Object.getOwnPropertyDescriptor(t2, r22));
        });
      }
      return e3;
    }
    function _defineProperty(obj, key, value2) {
      key = _toPropertyKey(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value: value2, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value2;
      }
      return obj;
    }
    function _toPropertyKey(t2) {
      var i2 = _toPrimitive(t2, "string");
      return "symbol" == _typeof(i2) ? i2 : String(i2);
    }
    function _toPrimitive(t2, r2) {
      if ("object" != _typeof(t2) || !t2)
        return t2;
      var e3 = t2[Symbol.toPrimitive];
      if (void 0 !== e3) {
        var i2 = e3.call(t2, r2 || "default");
        if ("object" != _typeof(i2))
          return i2;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r2 ? String : Number)(t2);
    }
    var ORIENT_MAP = {
      xAxis: ["bottom", "top"],
      yAxis: ["left", "right"]
    };
    var FULL_WIDTH_AND_HEIGHT = {
      width: "100%",
      height: "100%"
    };
    var originCoordinate = {
      x: 0,
      y: 0
    };
    function renderAsIs(element) {
      return element;
    }
    var calculateTooltipPos = function calculateTooltipPos2(rangeObj, layout) {
      if (layout === "horizontal") {
        return rangeObj.x;
      }
      if (layout === "vertical") {
        return rangeObj.y;
      }
      if (layout === "centric") {
        return rangeObj.angle;
      }
      return rangeObj.radius;
    };
    var getActiveCoordinate = function getActiveCoordinate2(layout, tooltipTicks, activeIndex, rangeObj) {
      var entry = tooltipTicks.find(function(tick) {
        return tick && tick.index === activeIndex;
      });
      if (entry) {
        if (layout === "horizontal") {
          return {
            x: entry.coordinate,
            y: rangeObj.y
          };
        }
        if (layout === "vertical") {
          return {
            x: rangeObj.x,
            y: entry.coordinate
          };
        }
        if (layout === "centric") {
          var _angle = entry.coordinate;
          var _radius = rangeObj.radius;
          return _objectSpread(_objectSpread(_objectSpread({}, rangeObj), polarToCartesian(rangeObj.cx, rangeObj.cy, _radius, _angle)), {}, {
            angle: _angle,
            radius: _radius
          });
        }
        var radius = entry.coordinate;
        var angle = rangeObj.angle;
        return _objectSpread(_objectSpread(_objectSpread({}, rangeObj), polarToCartesian(rangeObj.cx, rangeObj.cy, radius, angle)), {}, {
          angle,
          radius
        });
      }
      return originCoordinate;
    };
    var getDisplayedData = function getDisplayedData2(data, _ref) {
      var graphicalItems = _ref.graphicalItems, dataStartIndex = _ref.dataStartIndex, dataEndIndex = _ref.dataEndIndex;
      var itemsData = (graphicalItems !== null && graphicalItems !== void 0 ? graphicalItems : []).reduce(function(result, child) {
        var itemData = child.props.data;
        if (itemData && itemData.length) {
          return [].concat(_toConsumableArray(result), _toConsumableArray(itemData));
        }
        return result;
      }, []);
      if (itemsData.length > 0) {
        return itemsData;
      }
      if (data && data.length && isNumber(dataStartIndex) && isNumber(dataEndIndex)) {
        return data.slice(dataStartIndex, dataEndIndex + 1);
      }
      return [];
    };
    function getDefaultDomainByAxisType(axisType) {
      return axisType === "number" ? [0, "auto"] : void 0;
    }
    var getTooltipContent = function getTooltipContent2(state, chartData, activeIndex, activeLabel) {
      var graphicalItems = state.graphicalItems, tooltipAxis = state.tooltipAxis;
      var displayedData = getDisplayedData(chartData, state);
      if (activeIndex < 0 || !graphicalItems || !graphicalItems.length || activeIndex >= displayedData.length) {
        return null;
      }
      return graphicalItems.reduce(function(result, child) {
        var _child$props$data;
        var data = (_child$props$data = child.props.data) !== null && _child$props$data !== void 0 ? _child$props$data : chartData;
        if (data && state.dataStartIndex + state.dataEndIndex !== 0) {
          data = data.slice(state.dataStartIndex, state.dataEndIndex + 1);
        }
        var payload;
        if (tooltipAxis.dataKey && !tooltipAxis.allowDuplicatedCategory) {
          var entries = data === void 0 ? displayedData : data;
          payload = findEntryInArray(entries, tooltipAxis.dataKey, activeLabel);
        } else {
          payload = data && data[activeIndex] || displayedData[activeIndex];
        }
        if (!payload) {
          return result;
        }
        return [].concat(_toConsumableArray(result), [getTooltipItem(child, payload)]);
      }, []);
    };
    var getTooltipData = function getTooltipData2(state, chartData, layout, rangeObj) {
      var rangeData = rangeObj || {
        x: state.chartX,
        y: state.chartY
      };
      var pos = calculateTooltipPos(rangeData, layout);
      var ticks2 = state.orderedTooltipTicks, axis = state.tooltipAxis, tooltipTicks = state.tooltipTicks;
      var activeIndex = calculateActiveTickIndex(pos, ticks2, tooltipTicks, axis);
      if (activeIndex >= 0 && tooltipTicks) {
        var activeLabel = tooltipTicks[activeIndex] && tooltipTicks[activeIndex].value;
        var activePayload = getTooltipContent(state, chartData, activeIndex, activeLabel);
        var activeCoordinate = getActiveCoordinate(layout, ticks2, activeIndex, rangeData);
        return {
          activeTooltipIndex: activeIndex,
          activeLabel,
          activePayload,
          activeCoordinate
        };
      }
      return null;
    };
    var getAxisMapByAxes = function getAxisMapByAxes2(props, _ref2) {
      var axes = _ref2.axes, graphicalItems = _ref2.graphicalItems, axisType = _ref2.axisType, axisIdKey = _ref2.axisIdKey, stackGroups = _ref2.stackGroups, dataStartIndex = _ref2.dataStartIndex, dataEndIndex = _ref2.dataEndIndex;
      var layout = props.layout, children = props.children, stackOffset = props.stackOffset;
      var isCategorical = isCategoricalAxis(layout, axisType);
      return axes.reduce(function(result, child) {
        var _child$props$domain2;
        var _child$props = child.props, type = _child$props.type, dataKey = _child$props.dataKey, allowDataOverflow = _child$props.allowDataOverflow, allowDuplicatedCategory = _child$props.allowDuplicatedCategory, scale = _child$props.scale, ticks2 = _child$props.ticks, includeHidden = _child$props.includeHidden;
        var axisId = child.props[axisIdKey];
        if (result[axisId]) {
          return result;
        }
        var displayedData = getDisplayedData(props.data, {
          graphicalItems: graphicalItems.filter(function(item) {
            return item.props[axisIdKey] === axisId;
          }),
          dataStartIndex,
          dataEndIndex
        });
        var len = displayedData.length;
        var domain, duplicateDomain, categoricalDomain;
        if (isDomainSpecifiedByUser(child.props.domain, allowDataOverflow, type)) {
          domain = parseSpecifiedDomain(child.props.domain, null, allowDataOverflow);
          if (isCategorical && (type === "number" || scale !== "auto")) {
            categoricalDomain = getDomainOfDataByKey(displayedData, dataKey, "category");
          }
        }
        var defaultDomain = getDefaultDomainByAxisType(type);
        if (!domain || domain.length === 0) {
          var _child$props$domain;
          var childDomain = (_child$props$domain = child.props.domain) !== null && _child$props$domain !== void 0 ? _child$props$domain : defaultDomain;
          if (dataKey) {
            domain = getDomainOfDataByKey(displayedData, dataKey, type);
            if (type === "category" && isCategorical) {
              var duplicate = hasDuplicate(domain);
              if (allowDuplicatedCategory && duplicate) {
                duplicateDomain = domain;
                domain = range$1(0, len);
              } else if (!allowDuplicatedCategory) {
                domain = parseDomainOfCategoryAxis(childDomain, domain, child).reduce(function(finalDomain, entry) {
                  return finalDomain.indexOf(entry) >= 0 ? finalDomain : [].concat(_toConsumableArray(finalDomain), [entry]);
                }, []);
              }
            } else if (type === "category") {
              if (!allowDuplicatedCategory) {
                domain = parseDomainOfCategoryAxis(childDomain, domain, child).reduce(function(finalDomain, entry) {
                  return finalDomain.indexOf(entry) >= 0 || entry === "" || isNil$1(entry) ? finalDomain : [].concat(_toConsumableArray(finalDomain), [entry]);
                }, []);
              } else {
                domain = domain.filter(function(entry) {
                  return entry !== "" && !isNil$1(entry);
                });
              }
            } else if (type === "number") {
              var errorBarsDomain = parseErrorBarsOfAxis(displayedData, graphicalItems.filter(function(item) {
                return item.props[axisIdKey] === axisId && (includeHidden || !item.props.hide);
              }), dataKey, axisType, layout);
              if (errorBarsDomain) {
                domain = errorBarsDomain;
              }
            }
            if (isCategorical && (type === "number" || scale !== "auto")) {
              categoricalDomain = getDomainOfDataByKey(displayedData, dataKey, "category");
            }
          } else if (isCategorical) {
            domain = range$1(0, len);
          } else if (stackGroups && stackGroups[axisId] && stackGroups[axisId].hasStack && type === "number") {
            domain = stackOffset === "expand" ? [0, 1] : getDomainOfStackGroups(stackGroups[axisId].stackGroups, dataStartIndex, dataEndIndex);
          } else {
            domain = getDomainOfItemsWithSameAxis(displayedData, graphicalItems.filter(function(item) {
              return item.props[axisIdKey] === axisId && (includeHidden || !item.props.hide);
            }), type, layout, true);
          }
          if (type === "number") {
            domain = detectReferenceElementsDomain(children, domain, axisId, axisType, ticks2);
            if (childDomain) {
              domain = parseSpecifiedDomain(childDomain, domain, allowDataOverflow);
            }
          } else if (type === "category" && childDomain) {
            var axisDomain = childDomain;
            var isDomainValid = domain.every(function(entry) {
              return axisDomain.indexOf(entry) >= 0;
            });
            if (isDomainValid) {
              domain = axisDomain;
            }
          }
        }
        return _objectSpread(_objectSpread({}, result), {}, _defineProperty({}, axisId, _objectSpread(_objectSpread({}, child.props), {}, {
          axisType,
          domain,
          categoricalDomain,
          duplicateDomain,
          originalDomain: (_child$props$domain2 = child.props.domain) !== null && _child$props$domain2 !== void 0 ? _child$props$domain2 : defaultDomain,
          isCategorical,
          layout
        })));
      }, {});
    };
    var getAxisMapByItems = function getAxisMapByItems2(props, _ref3) {
      var graphicalItems = _ref3.graphicalItems, Axis = _ref3.Axis, axisType = _ref3.axisType, axisIdKey = _ref3.axisIdKey, stackGroups = _ref3.stackGroups, dataStartIndex = _ref3.dataStartIndex, dataEndIndex = _ref3.dataEndIndex;
      var layout = props.layout, children = props.children;
      var displayedData = getDisplayedData(props.data, {
        graphicalItems,
        dataStartIndex,
        dataEndIndex
      });
      var len = displayedData.length;
      var isCategorical = isCategoricalAxis(layout, axisType);
      var index = -1;
      return graphicalItems.reduce(function(result, child) {
        var axisId = child.props[axisIdKey];
        var originalDomain = getDefaultDomainByAxisType("number");
        if (!result[axisId]) {
          index++;
          var domain;
          if (isCategorical) {
            domain = range$1(0, len);
          } else if (stackGroups && stackGroups[axisId] && stackGroups[axisId].hasStack) {
            domain = getDomainOfStackGroups(stackGroups[axisId].stackGroups, dataStartIndex, dataEndIndex);
            domain = detectReferenceElementsDomain(children, domain, axisId, axisType);
          } else {
            domain = parseSpecifiedDomain(originalDomain, getDomainOfItemsWithSameAxis(displayedData, graphicalItems.filter(function(item) {
              return item.props[axisIdKey] === axisId && !item.props.hide;
            }), "number", layout), Axis.defaultProps.allowDataOverflow);
            domain = detectReferenceElementsDomain(children, domain, axisId, axisType);
          }
          return _objectSpread(_objectSpread({}, result), {}, _defineProperty({}, axisId, _objectSpread(_objectSpread({
            axisType
          }, Axis.defaultProps), {}, {
            hide: true,
            orientation: get$2(ORIENT_MAP, "".concat(axisType, ".").concat(index % 2), null),
            domain,
            originalDomain,
            isCategorical,
            layout
            // specify scale when no Axis
            // scale: isCategorical ? 'band' : 'linear',
          })));
        }
        return result;
      }, {});
    };
    var getAxisMap = function getAxisMap2(props, _ref4) {
      var _ref4$axisType = _ref4.axisType, axisType = _ref4$axisType === void 0 ? "xAxis" : _ref4$axisType, AxisComp = _ref4.AxisComp, graphicalItems = _ref4.graphicalItems, stackGroups = _ref4.stackGroups, dataStartIndex = _ref4.dataStartIndex, dataEndIndex = _ref4.dataEndIndex;
      var children = props.children;
      var axisIdKey = "".concat(axisType, "Id");
      var axes = findAllByType(children, AxisComp);
      var axisMap = {};
      if (axes && axes.length) {
        axisMap = getAxisMapByAxes(props, {
          axes,
          graphicalItems,
          axisType,
          axisIdKey,
          stackGroups,
          dataStartIndex,
          dataEndIndex
        });
      } else if (graphicalItems && graphicalItems.length) {
        axisMap = getAxisMapByItems(props, {
          Axis: AxisComp,
          graphicalItems,
          axisType,
          axisIdKey,
          stackGroups,
          dataStartIndex,
          dataEndIndex
        });
      }
      return axisMap;
    };
    var tooltipTicksGenerator = function tooltipTicksGenerator2(axisMap) {
      var axis = getAnyElementOfObject(axisMap);
      var tooltipTicks = getTicksOfAxis(axis, false, true);
      return {
        tooltipTicks,
        orderedTooltipTicks: sortBy$1(tooltipTicks, function(o2) {
          return o2.coordinate;
        }),
        tooltipAxis: axis,
        tooltipAxisBandSize: getBandSizeOfAxis(axis, tooltipTicks)
      };
    };
    var createDefaultState = function createDefaultState2(props) {
      var children = props.children, defaultShowTooltip = props.defaultShowTooltip;
      var brushItem = findChildByType(children, Brush);
      var startIndex = 0;
      var endIndex = 0;
      if (props.data && props.data.length !== 0) {
        endIndex = props.data.length - 1;
      }
      if (brushItem && brushItem.props) {
        if (brushItem.props.startIndex >= 0) {
          startIndex = brushItem.props.startIndex;
        }
        if (brushItem.props.endIndex >= 0) {
          endIndex = brushItem.props.endIndex;
        }
      }
      return {
        chartX: 0,
        chartY: 0,
        dataStartIndex: startIndex,
        dataEndIndex: endIndex,
        activeTooltipIndex: -1,
        isTooltipActive: Boolean(defaultShowTooltip)
      };
    };
    var hasGraphicalBarItem = function hasGraphicalBarItem2(graphicalItems) {
      if (!graphicalItems || !graphicalItems.length) {
        return false;
      }
      return graphicalItems.some(function(item) {
        var name = getDisplayName(item && item.type);
        return name && name.indexOf("Bar") >= 0;
      });
    };
    var getAxisNameByLayout = function getAxisNameByLayout2(layout) {
      if (layout === "horizontal") {
        return {
          numericAxisName: "yAxis",
          cateAxisName: "xAxis"
        };
      }
      if (layout === "vertical") {
        return {
          numericAxisName: "xAxis",
          cateAxisName: "yAxis"
        };
      }
      if (layout === "centric") {
        return {
          numericAxisName: "radiusAxis",
          cateAxisName: "angleAxis"
        };
      }
      return {
        numericAxisName: "angleAxis",
        cateAxisName: "radiusAxis"
      };
    };
    var calculateOffset = function calculateOffset2(_ref5, prevLegendBBox) {
      var props = _ref5.props, graphicalItems = _ref5.graphicalItems, _ref5$xAxisMap = _ref5.xAxisMap, xAxisMap = _ref5$xAxisMap === void 0 ? {} : _ref5$xAxisMap, _ref5$yAxisMap = _ref5.yAxisMap, yAxisMap = _ref5$yAxisMap === void 0 ? {} : _ref5$yAxisMap;
      var width = props.width, height = props.height, children = props.children;
      var margin = props.margin || {};
      var brushItem = findChildByType(children, Brush);
      var legendItem = findChildByType(children, Legend);
      var offsetH = Object.keys(yAxisMap).reduce(function(result, id2) {
        var entry = yAxisMap[id2];
        var orientation = entry.orientation;
        if (!entry.mirror && !entry.hide) {
          return _objectSpread(_objectSpread({}, result), {}, _defineProperty({}, orientation, result[orientation] + entry.width));
        }
        return result;
      }, {
        left: margin.left || 0,
        right: margin.right || 0
      });
      var offsetV = Object.keys(xAxisMap).reduce(function(result, id2) {
        var entry = xAxisMap[id2];
        var orientation = entry.orientation;
        if (!entry.mirror && !entry.hide) {
          return _objectSpread(_objectSpread({}, result), {}, _defineProperty({}, orientation, get$2(result, "".concat(orientation)) + entry.height));
        }
        return result;
      }, {
        top: margin.top || 0,
        bottom: margin.bottom || 0
      });
      var offset2 = _objectSpread(_objectSpread({}, offsetV), offsetH);
      var brushBottom = offset2.bottom;
      if (brushItem) {
        offset2.bottom += brushItem.props.height || Brush.defaultProps.height;
      }
      if (legendItem && prevLegendBBox) {
        offset2 = appendOffsetOfLegend(offset2, graphicalItems, props, prevLegendBBox);
      }
      var offsetWidth = width - offset2.left - offset2.right;
      var offsetHeight = height - offset2.top - offset2.bottom;
      return _objectSpread(_objectSpread({
        brushBottom
      }, offset2), {}, {
        // never return negative values for height and width
        width: Math.max(offsetWidth, 0),
        height: Math.max(offsetHeight, 0)
      });
    };
    var generateCategoricalChart = function generateCategoricalChart2(_ref6) {
      var _CategoricalChartWrapper;
      var chartName = _ref6.chartName, GraphicalChild = _ref6.GraphicalChild, _ref6$defaultTooltipE = _ref6.defaultTooltipEventType, defaultTooltipEventType = _ref6$defaultTooltipE === void 0 ? "axis" : _ref6$defaultTooltipE, _ref6$validateTooltip = _ref6.validateTooltipEventTypes, validateTooltipEventTypes = _ref6$validateTooltip === void 0 ? ["axis"] : _ref6$validateTooltip, axisComponents = _ref6.axisComponents, legendContent = _ref6.legendContent, formatAxisMap2 = _ref6.formatAxisMap, defaultProps2 = _ref6.defaultProps;
      var getFormatItems = function getFormatItems2(props, currentState) {
        var graphicalItems = currentState.graphicalItems, stackGroups = currentState.stackGroups, offset2 = currentState.offset, updateId = currentState.updateId, dataStartIndex = currentState.dataStartIndex, dataEndIndex = currentState.dataEndIndex;
        var barSize = props.barSize, layout = props.layout, barGap = props.barGap, barCategoryGap = props.barCategoryGap, globalMaxBarSize = props.maxBarSize;
        var _getAxisNameByLayout = getAxisNameByLayout(layout), numericAxisName = _getAxisNameByLayout.numericAxisName, cateAxisName = _getAxisNameByLayout.cateAxisName;
        var hasBar = hasGraphicalBarItem(graphicalItems);
        var sizeList = hasBar && getBarSizeList({
          barSize,
          stackGroups
        });
        var formattedItems = [];
        graphicalItems.forEach(function(item, index) {
          var displayedData = getDisplayedData(props.data, {
            graphicalItems: [item],
            dataStartIndex,
            dataEndIndex
          });
          var _item$props = item.props, dataKey = _item$props.dataKey, childMaxBarSize = _item$props.maxBarSize;
          var numericAxisId = item.props["".concat(numericAxisName, "Id")];
          var cateAxisId = item.props["".concat(cateAxisName, "Id")];
          var axisObjInitialValue = {};
          var axisObj = axisComponents.reduce(function(result, entry) {
            var axisMap = currentState["".concat(entry.axisType, "Map")];
            var id2 = item.props["".concat(entry.axisType, "Id")];
            !(axisMap && axisMap[id2] || entry.axisType === "zAxis") ? invariant(false) : void 0;
            var axis = axisMap[id2];
            return _objectSpread(_objectSpread({}, result), {}, _defineProperty(_defineProperty({}, entry.axisType, axis), "".concat(entry.axisType, "Ticks"), getTicksOfAxis(axis)));
          }, axisObjInitialValue);
          var cateAxis = axisObj[cateAxisName];
          var cateTicks = axisObj["".concat(cateAxisName, "Ticks")];
          var stackedData = stackGroups && stackGroups[numericAxisId] && stackGroups[numericAxisId].hasStack && getStackedDataOfItem(item, stackGroups[numericAxisId].stackGroups);
          var itemIsBar = getDisplayName(item.type).indexOf("Bar") >= 0;
          var bandSize = getBandSizeOfAxis(cateAxis, cateTicks);
          var barPosition = [];
          if (itemIsBar) {
            var _ref7, _getBandSizeOfAxis;
            var maxBarSize = isNil$1(childMaxBarSize) ? globalMaxBarSize : childMaxBarSize;
            var barBandSize = (_ref7 = (_getBandSizeOfAxis = getBandSizeOfAxis(cateAxis, cateTicks, true)) !== null && _getBandSizeOfAxis !== void 0 ? _getBandSizeOfAxis : maxBarSize) !== null && _ref7 !== void 0 ? _ref7 : 0;
            barPosition = getBarPosition({
              barGap,
              barCategoryGap,
              bandSize: barBandSize !== bandSize ? barBandSize : bandSize,
              sizeList: sizeList[cateAxisId],
              maxBarSize
            });
            if (barBandSize !== bandSize) {
              barPosition = barPosition.map(function(pos) {
                return _objectSpread(_objectSpread({}, pos), {}, {
                  position: _objectSpread(_objectSpread({}, pos.position), {}, {
                    offset: pos.position.offset - barBandSize / 2
                  })
                });
              });
            }
          }
          var composedFn = item && item.type && item.type.getComposedData;
          if (composedFn) {
            formattedItems.push({
              props: _objectSpread(_objectSpread({}, composedFn(_objectSpread(_objectSpread({}, axisObj), {}, {
                displayedData,
                props,
                dataKey,
                item,
                bandSize,
                barPosition,
                offset: offset2,
                stackedData,
                layout,
                dataStartIndex,
                dataEndIndex
              }))), {}, _defineProperty(_defineProperty(_defineProperty({
                key: item.key || "item-".concat(index)
              }, numericAxisName, axisObj[numericAxisName]), cateAxisName, axisObj[cateAxisName]), "animationId", updateId)),
              childIndex: parseChildIndex(item, props.children),
              item
            });
          }
        });
        return formattedItems;
      };
      var updateStateOfAxisMapsOffsetAndStackGroups = function updateStateOfAxisMapsOffsetAndStackGroups2(_ref8, prevState) {
        var props = _ref8.props, dataStartIndex = _ref8.dataStartIndex, dataEndIndex = _ref8.dataEndIndex, updateId = _ref8.updateId;
        if (!validateWidthHeight({
          props
        })) {
          return null;
        }
        var children = props.children, layout = props.layout, stackOffset = props.stackOffset, data = props.data, reverseStackOrder = props.reverseStackOrder;
        var _getAxisNameByLayout2 = getAxisNameByLayout(layout), numericAxisName = _getAxisNameByLayout2.numericAxisName, cateAxisName = _getAxisNameByLayout2.cateAxisName;
        var graphicalItems = findAllByType(children, GraphicalChild);
        var stackGroups = getStackGroupsByAxisId(data, graphicalItems, "".concat(numericAxisName, "Id"), "".concat(cateAxisName, "Id"), stackOffset, reverseStackOrder);
        var axisObj = axisComponents.reduce(function(result, entry) {
          var name = "".concat(entry.axisType, "Map");
          return _objectSpread(_objectSpread({}, result), {}, _defineProperty({}, name, getAxisMap(props, _objectSpread(_objectSpread({}, entry), {}, {
            graphicalItems,
            stackGroups: entry.axisType === numericAxisName && stackGroups,
            dataStartIndex,
            dataEndIndex
          }))));
        }, {});
        var offset2 = calculateOffset(_objectSpread(_objectSpread({}, axisObj), {}, {
          props,
          graphicalItems
        }), prevState === null || prevState === void 0 ? void 0 : prevState.legendBBox);
        Object.keys(axisObj).forEach(function(key) {
          axisObj[key] = formatAxisMap2(props, axisObj[key], offset2, key.replace("Map", ""), chartName);
        });
        var cateAxisMap = axisObj["".concat(cateAxisName, "Map")];
        var ticksObj = tooltipTicksGenerator(cateAxisMap);
        var formattedGraphicalItems = getFormatItems(props, _objectSpread(_objectSpread({}, axisObj), {}, {
          dataStartIndex,
          dataEndIndex,
          updateId,
          graphicalItems,
          stackGroups,
          offset: offset2
        }));
        return _objectSpread(_objectSpread({
          formattedGraphicalItems,
          graphicalItems,
          offset: offset2,
          stackGroups
        }, ticksObj), axisObj);
      };
      return _CategoricalChartWrapper = /* @__PURE__ */ function(_Component) {
        _inherits(CategoricalChartWrapper, _Component);
        function CategoricalChartWrapper(_props) {
          var _props$id, _props$throttleDelay;
          var _this;
          _classCallCheck(this, CategoricalChartWrapper);
          _this = _callSuper(this, CategoricalChartWrapper, [_props]);
          _defineProperty(_assertThisInitialized(_this), "eventEmitterSymbol", Symbol("rechartsEventEmitter"));
          _defineProperty(_assertThisInitialized(_this), "accessibilityManager", new AccessibilityManager());
          _defineProperty(_assertThisInitialized(_this), "handleLegendBBoxUpdate", function(box) {
            if (box) {
              var _this$state = _this.state, dataStartIndex = _this$state.dataStartIndex, dataEndIndex = _this$state.dataEndIndex, updateId = _this$state.updateId;
              _this.setState(_objectSpread({
                legendBBox: box
              }, updateStateOfAxisMapsOffsetAndStackGroups({
                props: _this.props,
                dataStartIndex,
                dataEndIndex,
                updateId
              }, _objectSpread(_objectSpread({}, _this.state), {}, {
                legendBBox: box
              }))));
            }
          });
          _defineProperty(_assertThisInitialized(_this), "handleReceiveSyncEvent", function(cId, data, emitter) {
            if (_this.props.syncId === cId) {
              if (emitter === _this.eventEmitterSymbol && typeof _this.props.syncMethod !== "function") {
                return;
              }
              _this.applySyncEvent(data);
            }
          });
          _defineProperty(_assertThisInitialized(_this), "handleBrushChange", function(_ref9) {
            var startIndex = _ref9.startIndex, endIndex = _ref9.endIndex;
            if (startIndex !== _this.state.dataStartIndex || endIndex !== _this.state.dataEndIndex) {
              var updateId = _this.state.updateId;
              _this.setState(function() {
                return _objectSpread({
                  dataStartIndex: startIndex,
                  dataEndIndex: endIndex
                }, updateStateOfAxisMapsOffsetAndStackGroups({
                  props: _this.props,
                  dataStartIndex: startIndex,
                  dataEndIndex: endIndex,
                  updateId
                }, _this.state));
              });
              _this.triggerSyncEvent({
                dataStartIndex: startIndex,
                dataEndIndex: endIndex
              });
            }
          });
          _defineProperty(_assertThisInitialized(_this), "handleMouseEnter", function(e3) {
            var mouse = _this.getMouseInfo(e3);
            if (mouse) {
              var _nextState = _objectSpread(_objectSpread({}, mouse), {}, {
                isTooltipActive: true
              });
              _this.setState(_nextState);
              _this.triggerSyncEvent(_nextState);
              var onMouseEnter = _this.props.onMouseEnter;
              if (isFunction$4(onMouseEnter)) {
                onMouseEnter(_nextState, e3);
              }
            }
          });
          _defineProperty(_assertThisInitialized(_this), "triggeredAfterMouseMove", function(e3) {
            var mouse = _this.getMouseInfo(e3);
            var nextState = mouse ? _objectSpread(_objectSpread({}, mouse), {}, {
              isTooltipActive: true
            }) : {
              isTooltipActive: false
            };
            _this.setState(nextState);
            _this.triggerSyncEvent(nextState);
            var onMouseMove = _this.props.onMouseMove;
            if (isFunction$4(onMouseMove)) {
              onMouseMove(nextState, e3);
            }
          });
          _defineProperty(_assertThisInitialized(_this), "handleItemMouseEnter", function(el2) {
            _this.setState(function() {
              return {
                isTooltipActive: true,
                activeItem: el2,
                activePayload: el2.tooltipPayload,
                activeCoordinate: el2.tooltipPosition || {
                  x: el2.cx,
                  y: el2.cy
                }
              };
            });
          });
          _defineProperty(_assertThisInitialized(_this), "handleItemMouseLeave", function() {
            _this.setState(function() {
              return {
                isTooltipActive: false
              };
            });
          });
          _defineProperty(_assertThisInitialized(_this), "handleMouseMove", function(e3) {
            e3.persist();
            _this.throttleTriggeredAfterMouseMove(e3);
          });
          _defineProperty(_assertThisInitialized(_this), "handleMouseLeave", function(e3) {
            _this.throttleTriggeredAfterMouseMove.cancel();
            var nextState = {
              isTooltipActive: false
            };
            _this.setState(nextState);
            _this.triggerSyncEvent(nextState);
            var onMouseLeave = _this.props.onMouseLeave;
            if (isFunction$4(onMouseLeave)) {
              onMouseLeave(nextState, e3);
            }
          });
          _defineProperty(_assertThisInitialized(_this), "handleOuterEvent", function(e3) {
            var eventName = getReactEventByType(e3);
            var event = get$2(_this.props, "".concat(eventName));
            if (eventName && isFunction$4(event)) {
              var _mouse;
              var mouse;
              if (/.*touch.*/i.test(eventName)) {
                mouse = _this.getMouseInfo(e3.changedTouches[0]);
              } else {
                mouse = _this.getMouseInfo(e3);
              }
              event((_mouse = mouse) !== null && _mouse !== void 0 ? _mouse : {}, e3);
            }
          });
          _defineProperty(_assertThisInitialized(_this), "handleClick", function(e3) {
            var mouse = _this.getMouseInfo(e3);
            if (mouse) {
              var _nextState2 = _objectSpread(_objectSpread({}, mouse), {}, {
                isTooltipActive: true
              });
              _this.setState(_nextState2);
              _this.triggerSyncEvent(_nextState2);
              var onClick = _this.props.onClick;
              if (isFunction$4(onClick)) {
                onClick(_nextState2, e3);
              }
            }
          });
          _defineProperty(_assertThisInitialized(_this), "handleMouseDown", function(e3) {
            var onMouseDown = _this.props.onMouseDown;
            if (isFunction$4(onMouseDown)) {
              var _nextState3 = _this.getMouseInfo(e3);
              onMouseDown(_nextState3, e3);
            }
          });
          _defineProperty(_assertThisInitialized(_this), "handleMouseUp", function(e3) {
            var onMouseUp = _this.props.onMouseUp;
            if (isFunction$4(onMouseUp)) {
              var _nextState4 = _this.getMouseInfo(e3);
              onMouseUp(_nextState4, e3);
            }
          });
          _defineProperty(_assertThisInitialized(_this), "handleTouchMove", function(e3) {
            if (e3.changedTouches != null && e3.changedTouches.length > 0) {
              _this.throttleTriggeredAfterMouseMove(e3.changedTouches[0]);
            }
          });
          _defineProperty(_assertThisInitialized(_this), "handleTouchStart", function(e3) {
            if (e3.changedTouches != null && e3.changedTouches.length > 0) {
              _this.handleMouseDown(e3.changedTouches[0]);
            }
          });
          _defineProperty(_assertThisInitialized(_this), "handleTouchEnd", function(e3) {
            if (e3.changedTouches != null && e3.changedTouches.length > 0) {
              _this.handleMouseUp(e3.changedTouches[0]);
            }
          });
          _defineProperty(_assertThisInitialized(_this), "triggerSyncEvent", function(data) {
            if (_this.props.syncId !== void 0) {
              eventCenter.emit(SYNC_EVENT, _this.props.syncId, data, _this.eventEmitterSymbol);
            }
          });
          _defineProperty(_assertThisInitialized(_this), "applySyncEvent", function(data) {
            var _this$props = _this.props, layout = _this$props.layout, syncMethod = _this$props.syncMethod;
            var updateId = _this.state.updateId;
            var dataStartIndex = data.dataStartIndex, dataEndIndex = data.dataEndIndex;
            if (data.dataStartIndex !== void 0 || data.dataEndIndex !== void 0) {
              _this.setState(_objectSpread({
                dataStartIndex,
                dataEndIndex
              }, updateStateOfAxisMapsOffsetAndStackGroups({
                props: _this.props,
                dataStartIndex,
                dataEndIndex,
                updateId
              }, _this.state)));
            } else if (data.activeTooltipIndex !== void 0) {
              var chartX = data.chartX, chartY = data.chartY;
              var activeTooltipIndex = data.activeTooltipIndex;
              var _this$state2 = _this.state, offset2 = _this$state2.offset, tooltipTicks = _this$state2.tooltipTicks;
              if (!offset2) {
                return;
              }
              if (typeof syncMethod === "function") {
                activeTooltipIndex = syncMethod(tooltipTicks, data);
              } else if (syncMethod === "value") {
                activeTooltipIndex = -1;
                for (var i2 = 0; i2 < tooltipTicks.length; i2++) {
                  if (tooltipTicks[i2].value === data.activeLabel) {
                    activeTooltipIndex = i2;
                    break;
                  }
                }
              }
              var viewBox = _objectSpread(_objectSpread({}, offset2), {}, {
                x: offset2.left,
                y: offset2.top
              });
              var validateChartX = Math.min(chartX, viewBox.x + viewBox.width);
              var validateChartY = Math.min(chartY, viewBox.y + viewBox.height);
              var activeLabel = tooltipTicks[activeTooltipIndex] && tooltipTicks[activeTooltipIndex].value;
              var activePayload = getTooltipContent(_this.state, _this.props.data, activeTooltipIndex);
              var activeCoordinate = tooltipTicks[activeTooltipIndex] ? {
                x: layout === "horizontal" ? tooltipTicks[activeTooltipIndex].coordinate : validateChartX,
                y: layout === "horizontal" ? validateChartY : tooltipTicks[activeTooltipIndex].coordinate
              } : originCoordinate;
              _this.setState(_objectSpread(_objectSpread({}, data), {}, {
                activeLabel,
                activeCoordinate,
                activePayload,
                activeTooltipIndex
              }));
            } else {
              _this.setState(data);
            }
          });
          _defineProperty(_assertThisInitialized(_this), "renderCursor", function(element) {
            var _element$props$active;
            var _this$state3 = _this.state, isTooltipActive = _this$state3.isTooltipActive, activeCoordinate = _this$state3.activeCoordinate, activePayload = _this$state3.activePayload, offset2 = _this$state3.offset, activeTooltipIndex = _this$state3.activeTooltipIndex, tooltipAxisBandSize = _this$state3.tooltipAxisBandSize;
            var tooltipEventType = _this.getTooltipEventType();
            var isActive = (_element$props$active = element.props.active) !== null && _element$props$active !== void 0 ? _element$props$active : isTooltipActive;
            var layout = _this.props.layout;
            var key = element.key || "_recharts-cursor";
            return /* @__PURE__ */ React$1.createElement(Cursor, {
              key,
              activeCoordinate,
              activePayload,
              activeTooltipIndex,
              chartName,
              element,
              isActive,
              layout,
              offset: offset2,
              tooltipAxisBandSize,
              tooltipEventType
            });
          });
          _defineProperty(_assertThisInitialized(_this), "renderPolarAxis", function(element, displayName, index) {
            var axisType = get$2(element, "type.axisType");
            var axisMap = get$2(_this.state, "".concat(axisType, "Map"));
            var axisOption = axisMap && axisMap[element.props["".concat(axisType, "Id")]];
            return /* @__PURE__ */ reactExports.cloneElement(element, _objectSpread(_objectSpread({}, axisOption), {}, {
              className: axisType,
              key: element.key || "".concat(displayName, "-").concat(index),
              ticks: getTicksOfAxis(axisOption, true)
            }));
          });
          _defineProperty(_assertThisInitialized(_this), "renderPolarGrid", function(element) {
            var _element$props = element.props, radialLines = _element$props.radialLines, polarAngles = _element$props.polarAngles, polarRadius = _element$props.polarRadius;
            var _this$state4 = _this.state, radiusAxisMap = _this$state4.radiusAxisMap, angleAxisMap = _this$state4.angleAxisMap;
            var radiusAxis = getAnyElementOfObject(radiusAxisMap);
            var angleAxis = getAnyElementOfObject(angleAxisMap);
            var cx = angleAxis.cx, cy = angleAxis.cy, innerRadius = angleAxis.innerRadius, outerRadius = angleAxis.outerRadius;
            return /* @__PURE__ */ reactExports.cloneElement(element, {
              polarAngles: Array.isArray(polarAngles) ? polarAngles : getTicksOfAxis(angleAxis, true).map(function(entry) {
                return entry.coordinate;
              }),
              polarRadius: Array.isArray(polarRadius) ? polarRadius : getTicksOfAxis(radiusAxis, true).map(function(entry) {
                return entry.coordinate;
              }),
              cx,
              cy,
              innerRadius,
              outerRadius,
              key: element.key || "polar-grid",
              radialLines
            });
          });
          _defineProperty(_assertThisInitialized(_this), "renderLegend", function() {
            var formattedGraphicalItems = _this.state.formattedGraphicalItems;
            var _this$props2 = _this.props, children = _this$props2.children, width = _this$props2.width, height = _this$props2.height;
            var margin = _this.props.margin || {};
            var legendWidth = width - (margin.left || 0) - (margin.right || 0);
            var props = getLegendProps({
              children,
              formattedGraphicalItems,
              legendWidth,
              legendContent
            });
            if (!props) {
              return null;
            }
            var item = props.item, otherProps = _objectWithoutProperties(props, _excluded);
            return /* @__PURE__ */ reactExports.cloneElement(item, _objectSpread(_objectSpread({}, otherProps), {}, {
              chartWidth: width,
              chartHeight: height,
              margin,
              onBBoxUpdate: _this.handleLegendBBoxUpdate
            }));
          });
          _defineProperty(_assertThisInitialized(_this), "renderTooltip", function() {
            var _tooltipItem$props$ac;
            var _this$props3 = _this.props, children = _this$props3.children, accessibilityLayer = _this$props3.accessibilityLayer;
            var tooltipItem = findChildByType(children, Tooltip);
            if (!tooltipItem) {
              return null;
            }
            var _this$state5 = _this.state, isTooltipActive = _this$state5.isTooltipActive, activeCoordinate = _this$state5.activeCoordinate, activePayload = _this$state5.activePayload, activeLabel = _this$state5.activeLabel, offset2 = _this$state5.offset;
            var isActive = (_tooltipItem$props$ac = tooltipItem.props.active) !== null && _tooltipItem$props$ac !== void 0 ? _tooltipItem$props$ac : isTooltipActive;
            return /* @__PURE__ */ reactExports.cloneElement(tooltipItem, {
              viewBox: _objectSpread(_objectSpread({}, offset2), {}, {
                x: offset2.left,
                y: offset2.top
              }),
              active: isActive,
              label: activeLabel,
              payload: isActive ? activePayload : [],
              coordinate: activeCoordinate,
              accessibilityLayer
            });
          });
          _defineProperty(_assertThisInitialized(_this), "renderBrush", function(element) {
            var _this$props4 = _this.props, margin = _this$props4.margin, data = _this$props4.data;
            var _this$state6 = _this.state, offset2 = _this$state6.offset, dataStartIndex = _this$state6.dataStartIndex, dataEndIndex = _this$state6.dataEndIndex, updateId = _this$state6.updateId;
            return /* @__PURE__ */ reactExports.cloneElement(element, {
              key: element.key || "_recharts-brush",
              onChange: combineEventHandlers(_this.handleBrushChange, element.props.onChange),
              data,
              x: isNumber(element.props.x) ? element.props.x : offset2.left,
              y: isNumber(element.props.y) ? element.props.y : offset2.top + offset2.height + offset2.brushBottom - (margin.bottom || 0),
              width: isNumber(element.props.width) ? element.props.width : offset2.width,
              startIndex: dataStartIndex,
              endIndex: dataEndIndex,
              updateId: "brush-".concat(updateId)
            });
          });
          _defineProperty(_assertThisInitialized(_this), "renderReferenceElement", function(element, displayName, index) {
            if (!element) {
              return null;
            }
            var _assertThisInitialize = _assertThisInitialized(_this), clipPathId = _assertThisInitialize.clipPathId;
            var _this$state7 = _this.state, xAxisMap = _this$state7.xAxisMap, yAxisMap = _this$state7.yAxisMap, offset2 = _this$state7.offset;
            var _element$props2 = element.props, xAxisId = _element$props2.xAxisId, yAxisId = _element$props2.yAxisId;
            return /* @__PURE__ */ reactExports.cloneElement(element, {
              key: element.key || "".concat(displayName, "-").concat(index),
              xAxis: xAxisMap[xAxisId],
              yAxis: yAxisMap[yAxisId],
              viewBox: {
                x: offset2.left,
                y: offset2.top,
                width: offset2.width,
                height: offset2.height
              },
              clipPathId
            });
          });
          _defineProperty(_assertThisInitialized(_this), "renderActivePoints", function(_ref10) {
            var item = _ref10.item, activePoint = _ref10.activePoint, basePoint = _ref10.basePoint, childIndex = _ref10.childIndex, isRange = _ref10.isRange;
            var result = [];
            var key = item.props.key;
            var _item$item$props = item.item.props, activeDot = _item$item$props.activeDot, dataKey = _item$item$props.dataKey;
            var dotProps = _objectSpread(_objectSpread({
              index: childIndex,
              dataKey,
              cx: activePoint.x,
              cy: activePoint.y,
              r: 4,
              fill: getMainColorOfGraphicItem(item.item),
              strokeWidth: 2,
              stroke: "#fff",
              payload: activePoint.payload,
              value: activePoint.value,
              key: "".concat(key, "-activePoint-").concat(childIndex)
            }, filterProps(activeDot, false)), adaptEventHandlers(activeDot));
            result.push(CategoricalChartWrapper.renderActiveDot(activeDot, dotProps));
            if (basePoint) {
              result.push(CategoricalChartWrapper.renderActiveDot(activeDot, _objectSpread(_objectSpread({}, dotProps), {}, {
                cx: basePoint.x,
                cy: basePoint.y,
                key: "".concat(key, "-basePoint-").concat(childIndex)
              })));
            } else if (isRange) {
              result.push(null);
            }
            return result;
          });
          _defineProperty(_assertThisInitialized(_this), "renderGraphicChild", function(element, displayName, index) {
            var item = _this.filterFormatItem(element, displayName, index);
            if (!item) {
              return null;
            }
            var tooltipEventType = _this.getTooltipEventType();
            var _this$state8 = _this.state, isTooltipActive = _this$state8.isTooltipActive, tooltipAxis = _this$state8.tooltipAxis, activeTooltipIndex = _this$state8.activeTooltipIndex, activeLabel = _this$state8.activeLabel;
            var children = _this.props.children;
            var tooltipItem = findChildByType(children, Tooltip);
            var _item$props2 = item.props, points = _item$props2.points, isRange = _item$props2.isRange, baseLine = _item$props2.baseLine;
            var _item$item$props2 = item.item.props, activeDot = _item$item$props2.activeDot, hide = _item$item$props2.hide, activeBar = _item$item$props2.activeBar, activeShape = _item$item$props2.activeShape;
            var hasActive = Boolean(!hide && isTooltipActive && tooltipItem && (activeDot || activeBar || activeShape));
            var itemEvents = {};
            if (tooltipEventType !== "axis" && tooltipItem && tooltipItem.props.trigger === "click") {
              itemEvents = {
                onClick: combineEventHandlers(_this.handleItemMouseEnter, element.props.onClick)
              };
            } else if (tooltipEventType !== "axis") {
              itemEvents = {
                onMouseLeave: combineEventHandlers(_this.handleItemMouseLeave, element.props.onMouseLeave),
                onMouseEnter: combineEventHandlers(_this.handleItemMouseEnter, element.props.onMouseEnter)
              };
            }
            var graphicalItem = /* @__PURE__ */ reactExports.cloneElement(element, _objectSpread(_objectSpread({}, item.props), itemEvents));
            function findWithPayload(entry) {
              return typeof tooltipAxis.dataKey === "function" ? tooltipAxis.dataKey(entry.payload) : null;
            }
            if (hasActive) {
              if (activeTooltipIndex >= 0) {
                var activePoint, basePoint;
                if (tooltipAxis.dataKey && !tooltipAxis.allowDuplicatedCategory) {
                  var specifiedKey = typeof tooltipAxis.dataKey === "function" ? findWithPayload : "payload.".concat(tooltipAxis.dataKey.toString());
                  activePoint = findEntryInArray(points, specifiedKey, activeLabel);
                  basePoint = isRange && baseLine && findEntryInArray(baseLine, specifiedKey, activeLabel);
                } else {
                  activePoint = points === null || points === void 0 ? void 0 : points[activeTooltipIndex];
                  basePoint = isRange && baseLine && baseLine[activeTooltipIndex];
                }
                if (activeShape || activeBar) {
                  var activeIndex = element.props.activeIndex !== void 0 ? element.props.activeIndex : activeTooltipIndex;
                  return [/* @__PURE__ */ reactExports.cloneElement(element, _objectSpread(_objectSpread(_objectSpread({}, item.props), itemEvents), {}, {
                    activeIndex
                  })), null, null];
                }
                if (!isNil$1(activePoint)) {
                  return [graphicalItem].concat(_toConsumableArray(_this.renderActivePoints({
                    item,
                    activePoint,
                    basePoint,
                    childIndex: activeTooltipIndex,
                    isRange
                  })));
                }
              } else {
                var _this$getItemByXY;
                var _ref11 = (_this$getItemByXY = _this.getItemByXY(_this.state.activeCoordinate)) !== null && _this$getItemByXY !== void 0 ? _this$getItemByXY : {
                  graphicalItem
                }, _ref11$graphicalItem = _ref11.graphicalItem, _ref11$graphicalItem$ = _ref11$graphicalItem.item, xyItem = _ref11$graphicalItem$ === void 0 ? element : _ref11$graphicalItem$, childIndex = _ref11$graphicalItem.childIndex;
                var elementProps = _objectSpread(_objectSpread(_objectSpread({}, item.props), itemEvents), {}, {
                  activeIndex: childIndex
                });
                return [/* @__PURE__ */ reactExports.cloneElement(xyItem, elementProps), null, null];
              }
            }
            if (isRange) {
              return [graphicalItem, null, null];
            }
            return [graphicalItem, null];
          });
          _defineProperty(_assertThisInitialized(_this), "renderCustomized", function(element, displayName, index) {
            return /* @__PURE__ */ reactExports.cloneElement(element, _objectSpread(_objectSpread({
              key: "recharts-customized-".concat(index)
            }, _this.props), _this.state));
          });
          _defineProperty(_assertThisInitialized(_this), "renderMap", {
            CartesianGrid: {
              handler: renderAsIs,
              once: true
            },
            ReferenceArea: {
              handler: _this.renderReferenceElement
            },
            ReferenceLine: {
              handler: renderAsIs
            },
            ReferenceDot: {
              handler: _this.renderReferenceElement
            },
            XAxis: {
              handler: renderAsIs
            },
            YAxis: {
              handler: renderAsIs
            },
            Brush: {
              handler: _this.renderBrush,
              once: true
            },
            Bar: {
              handler: _this.renderGraphicChild
            },
            Line: {
              handler: _this.renderGraphicChild
            },
            Area: {
              handler: _this.renderGraphicChild
            },
            Radar: {
              handler: _this.renderGraphicChild
            },
            RadialBar: {
              handler: _this.renderGraphicChild
            },
            Scatter: {
              handler: _this.renderGraphicChild
            },
            Pie: {
              handler: _this.renderGraphicChild
            },
            Funnel: {
              handler: _this.renderGraphicChild
            },
            Tooltip: {
              handler: _this.renderCursor,
              once: true
            },
            PolarGrid: {
              handler: _this.renderPolarGrid,
              once: true
            },
            PolarAngleAxis: {
              handler: _this.renderPolarAxis
            },
            PolarRadiusAxis: {
              handler: _this.renderPolarAxis
            },
            Customized: {
              handler: _this.renderCustomized
            }
          });
          _this.clipPathId = "".concat((_props$id = _props.id) !== null && _props$id !== void 0 ? _props$id : uniqueId("recharts"), "-clip");
          _this.throttleTriggeredAfterMouseMove = throttle$1(_this.triggeredAfterMouseMove, (_props$throttleDelay = _props.throttleDelay) !== null && _props$throttleDelay !== void 0 ? _props$throttleDelay : 1e3 / 60);
          _this.state = {};
          return _this;
        }
        _createClass(CategoricalChartWrapper, [{
          key: "componentDidMount",
          value: function componentDidMount() {
            var _this$props$margin$le, _this$props$margin$to;
            this.addListener();
            this.accessibilityManager.setDetails({
              container: this.container,
              offset: {
                left: (_this$props$margin$le = this.props.margin.left) !== null && _this$props$margin$le !== void 0 ? _this$props$margin$le : 0,
                top: (_this$props$margin$to = this.props.margin.top) !== null && _this$props$margin$to !== void 0 ? _this$props$margin$to : 0
              },
              coordinateList: this.state.tooltipTicks,
              mouseHandlerCallback: this.triggeredAfterMouseMove,
              layout: this.props.layout
            });
            this.displayDefaultTooltip();
          }
        }, {
          key: "displayDefaultTooltip",
          value: function displayDefaultTooltip() {
            var _this$props5 = this.props, children = _this$props5.children, data = _this$props5.data, height = _this$props5.height, layout = _this$props5.layout;
            var tooltipElem = findChildByType(children, Tooltip);
            if (!tooltipElem) {
              return;
            }
            var defaultIndex = tooltipElem.props.defaultIndex;
            if (typeof defaultIndex !== "number" || defaultIndex < 0 || defaultIndex > this.state.tooltipTicks.length) {
              return;
            }
            var activeLabel = this.state.tooltipTicks[defaultIndex] && this.state.tooltipTicks[defaultIndex].value;
            var activePayload = getTooltipContent(this.state, data, defaultIndex, activeLabel);
            var independentAxisCoord = this.state.tooltipTicks[defaultIndex].coordinate;
            var dependentAxisCoord = (this.state.offset.top + height) / 2;
            var isHorizontal = layout === "horizontal";
            var activeCoordinate = isHorizontal ? {
              x: independentAxisCoord,
              y: dependentAxisCoord
            } : {
              y: independentAxisCoord,
              x: dependentAxisCoord
            };
            var scatterPlotElement = this.state.formattedGraphicalItems.find(function(_ref12) {
              var item = _ref12.item;
              return item.type.name === "Scatter";
            });
            if (scatterPlotElement) {
              activeCoordinate = _objectSpread(_objectSpread({}, activeCoordinate), scatterPlotElement.props.points[defaultIndex].tooltipPosition);
              activePayload = scatterPlotElement.props.points[defaultIndex].tooltipPayload;
            }
            var nextState = {
              activeTooltipIndex: defaultIndex,
              isTooltipActive: true,
              activeLabel,
              activePayload,
              activeCoordinate
            };
            this.setState(nextState);
            this.renderCursor(tooltipElem);
            this.accessibilityManager.setIndex(defaultIndex);
          }
        }, {
          key: "getSnapshotBeforeUpdate",
          value: function getSnapshotBeforeUpdate(prevProps, prevState) {
            if (!this.props.accessibilityLayer) {
              return null;
            }
            if (this.state.tooltipTicks !== prevState.tooltipTicks) {
              this.accessibilityManager.setDetails({
                coordinateList: this.state.tooltipTicks
              });
            }
            if (this.props.layout !== prevProps.layout) {
              this.accessibilityManager.setDetails({
                layout: this.props.layout
              });
            }
            if (this.props.margin !== prevProps.margin) {
              var _this$props$margin$le2, _this$props$margin$to2;
              this.accessibilityManager.setDetails({
                offset: {
                  left: (_this$props$margin$le2 = this.props.margin.left) !== null && _this$props$margin$le2 !== void 0 ? _this$props$margin$le2 : 0,
                  top: (_this$props$margin$to2 = this.props.margin.top) !== null && _this$props$margin$to2 !== void 0 ? _this$props$margin$to2 : 0
                }
              });
            }
            return null;
          }
        }, {
          key: "componentDidUpdate",
          value: function componentDidUpdate(prevProps) {
            if (!isChildrenEqual([findChildByType(prevProps.children, Tooltip)], [findChildByType(this.props.children, Tooltip)])) {
              this.displayDefaultTooltip();
            }
          }
        }, {
          key: "componentWillUnmount",
          value: function componentWillUnmount() {
            this.removeListener();
            this.throttleTriggeredAfterMouseMove.cancel();
          }
        }, {
          key: "getTooltipEventType",
          value: function getTooltipEventType() {
            var tooltipItem = findChildByType(this.props.children, Tooltip);
            if (tooltipItem && typeof tooltipItem.props.shared === "boolean") {
              var eventType = tooltipItem.props.shared ? "axis" : "item";
              return validateTooltipEventTypes.indexOf(eventType) >= 0 ? eventType : defaultTooltipEventType;
            }
            return defaultTooltipEventType;
          }
          /**
           * Get the information of mouse in chart, return null when the mouse is not in the chart
           * @param  {MousePointer} event    The event object
           * @return {Object}          Mouse data
           */
        }, {
          key: "getMouseInfo",
          value: function getMouseInfo(event) {
            if (!this.container) {
              return null;
            }
            var element = this.container;
            var boundingRect = element.getBoundingClientRect();
            var containerOffset = getOffset(boundingRect);
            var e3 = {
              chartX: Math.round(event.pageX - containerOffset.left),
              chartY: Math.round(event.pageY - containerOffset.top)
            };
            var scale = boundingRect.width / element.offsetWidth || 1;
            var rangeObj = this.inRange(e3.chartX, e3.chartY, scale);
            if (!rangeObj) {
              return null;
            }
            var _this$state9 = this.state, xAxisMap = _this$state9.xAxisMap, yAxisMap = _this$state9.yAxisMap;
            var tooltipEventType = this.getTooltipEventType();
            if (tooltipEventType !== "axis" && xAxisMap && yAxisMap) {
              var xScale = getAnyElementOfObject(xAxisMap).scale;
              var yScale = getAnyElementOfObject(yAxisMap).scale;
              var xValue = xScale && xScale.invert ? xScale.invert(e3.chartX) : null;
              var yValue = yScale && yScale.invert ? yScale.invert(e3.chartY) : null;
              return _objectSpread(_objectSpread({}, e3), {}, {
                xValue,
                yValue
              });
            }
            var toolTipData = getTooltipData(this.state, this.props.data, this.props.layout, rangeObj);
            if (toolTipData) {
              return _objectSpread(_objectSpread({}, e3), toolTipData);
            }
            return null;
          }
        }, {
          key: "inRange",
          value: function inRange(x2, y2) {
            var scale = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1;
            var layout = this.props.layout;
            var scaledX = x2 / scale, scaledY = y2 / scale;
            if (layout === "horizontal" || layout === "vertical") {
              var offset2 = this.state.offset;
              var isInRange = scaledX >= offset2.left && scaledX <= offset2.left + offset2.width && scaledY >= offset2.top && scaledY <= offset2.top + offset2.height;
              return isInRange ? {
                x: scaledX,
                y: scaledY
              } : null;
            }
            var _this$state10 = this.state, angleAxisMap = _this$state10.angleAxisMap, radiusAxisMap = _this$state10.radiusAxisMap;
            if (angleAxisMap && radiusAxisMap) {
              var angleAxis = getAnyElementOfObject(angleAxisMap);
              return inRangeOfSector({
                x: scaledX,
                y: scaledY
              }, angleAxis);
            }
            return null;
          }
        }, {
          key: "parseEventsOfWrapper",
          value: function parseEventsOfWrapper() {
            var children = this.props.children;
            var tooltipEventType = this.getTooltipEventType();
            var tooltipItem = findChildByType(children, Tooltip);
            var tooltipEvents = {};
            if (tooltipItem && tooltipEventType === "axis") {
              if (tooltipItem.props.trigger === "click") {
                tooltipEvents = {
                  onClick: this.handleClick
                };
              } else {
                tooltipEvents = {
                  onMouseEnter: this.handleMouseEnter,
                  onMouseMove: this.handleMouseMove,
                  onMouseLeave: this.handleMouseLeave,
                  onTouchMove: this.handleTouchMove,
                  onTouchStart: this.handleTouchStart,
                  onTouchEnd: this.handleTouchEnd
                };
              }
            }
            var outerEvents = adaptEventHandlers(this.props, this.handleOuterEvent);
            return _objectSpread(_objectSpread({}, outerEvents), tooltipEvents);
          }
        }, {
          key: "addListener",
          value: function addListener() {
            eventCenter.on(SYNC_EVENT, this.handleReceiveSyncEvent);
          }
        }, {
          key: "removeListener",
          value: function removeListener() {
            eventCenter.removeListener(SYNC_EVENT, this.handleReceiveSyncEvent);
          }
        }, {
          key: "filterFormatItem",
          value: function filterFormatItem(item, displayName, childIndex) {
            var formattedGraphicalItems = this.state.formattedGraphicalItems;
            for (var i2 = 0, len = formattedGraphicalItems.length; i2 < len; i2++) {
              var entry = formattedGraphicalItems[i2];
              if (entry.item === item || entry.props.key === item.key || displayName === getDisplayName(entry.item.type) && childIndex === entry.childIndex) {
                return entry;
              }
            }
            return null;
          }
        }, {
          key: "renderClipPath",
          value: function renderClipPath() {
            var clipPathId = this.clipPathId;
            var _this$state$offset = this.state.offset, left = _this$state$offset.left, top = _this$state$offset.top, height = _this$state$offset.height, width = _this$state$offset.width;
            return /* @__PURE__ */ React$1.createElement("defs", null, /* @__PURE__ */ React$1.createElement("clipPath", {
              id: clipPathId
            }, /* @__PURE__ */ React$1.createElement("rect", {
              x: left,
              y: top,
              height,
              width
            })));
          }
        }, {
          key: "getXScales",
          value: function getXScales() {
            var xAxisMap = this.state.xAxisMap;
            return xAxisMap ? Object.entries(xAxisMap).reduce(function(res, _ref13) {
              var _ref14 = _slicedToArray(_ref13, 2), axisId = _ref14[0], axisProps = _ref14[1];
              return _objectSpread(_objectSpread({}, res), {}, _defineProperty({}, axisId, axisProps.scale));
            }, {}) : null;
          }
        }, {
          key: "getYScales",
          value: function getYScales() {
            var yAxisMap = this.state.yAxisMap;
            return yAxisMap ? Object.entries(yAxisMap).reduce(function(res, _ref15) {
              var _ref16 = _slicedToArray(_ref15, 2), axisId = _ref16[0], axisProps = _ref16[1];
              return _objectSpread(_objectSpread({}, res), {}, _defineProperty({}, axisId, axisProps.scale));
            }, {}) : null;
          }
        }, {
          key: "getXScaleByAxisId",
          value: function getXScaleByAxisId(axisId) {
            var _this$state$xAxisMap;
            return (_this$state$xAxisMap = this.state.xAxisMap) === null || _this$state$xAxisMap === void 0 || (_this$state$xAxisMap = _this$state$xAxisMap[axisId]) === null || _this$state$xAxisMap === void 0 ? void 0 : _this$state$xAxisMap.scale;
          }
        }, {
          key: "getYScaleByAxisId",
          value: function getYScaleByAxisId(axisId) {
            var _this$state$yAxisMap;
            return (_this$state$yAxisMap = this.state.yAxisMap) === null || _this$state$yAxisMap === void 0 || (_this$state$yAxisMap = _this$state$yAxisMap[axisId]) === null || _this$state$yAxisMap === void 0 ? void 0 : _this$state$yAxisMap.scale;
          }
        }, {
          key: "getItemByXY",
          value: function getItemByXY(chartXY) {
            var _this$state11 = this.state, formattedGraphicalItems = _this$state11.formattedGraphicalItems, activeItem = _this$state11.activeItem;
            if (formattedGraphicalItems && formattedGraphicalItems.length) {
              for (var i2 = 0, len = formattedGraphicalItems.length; i2 < len; i2++) {
                var graphicalItem = formattedGraphicalItems[i2];
                var props = graphicalItem.props, item = graphicalItem.item;
                var itemDisplayName = getDisplayName(item.type);
                if (itemDisplayName === "Bar") {
                  var activeBarItem = (props.data || []).find(function(entry) {
                    return isInRectangle(chartXY, entry);
                  });
                  if (activeBarItem) {
                    return {
                      graphicalItem,
                      payload: activeBarItem
                    };
                  }
                } else if (itemDisplayName === "RadialBar") {
                  var _activeBarItem = (props.data || []).find(function(entry) {
                    return inRangeOfSector(chartXY, entry);
                  });
                  if (_activeBarItem) {
                    return {
                      graphicalItem,
                      payload: _activeBarItem
                    };
                  }
                } else if (isFunnel(graphicalItem, activeItem) || isPie(graphicalItem, activeItem) || isScatter(graphicalItem, activeItem)) {
                  var activeIndex = getActiveShapeIndexForTooltip({
                    graphicalItem,
                    activeTooltipItem: activeItem,
                    itemData: item.props.data
                  });
                  var childIndex = item.props.activeIndex === void 0 ? activeIndex : item.props.activeIndex;
                  return {
                    graphicalItem: _objectSpread(_objectSpread({}, graphicalItem), {}, {
                      childIndex
                    }),
                    payload: isScatter(graphicalItem, activeItem) ? item.props.data[activeIndex] : graphicalItem.props.data[activeIndex]
                  };
                }
              }
            }
            return null;
          }
        }, {
          key: "render",
          value: function render() {
            var _this2 = this, _attrs$role;
            if (!validateWidthHeight(this)) {
              return null;
            }
            var _this$props6 = this.props, children = _this$props6.children, className = _this$props6.className, width = _this$props6.width, height = _this$props6.height, style = _this$props6.style, compact2 = _this$props6.compact, title = _this$props6.title, desc = _this$props6.desc, others = _objectWithoutProperties(_this$props6, _excluded2);
            var attrs = filterProps(others, false);
            if (compact2) {
              return /* @__PURE__ */ React$1.createElement(Surface, _extends({}, attrs, {
                width,
                height,
                title,
                desc
              }), this.renderClipPath(), renderByOrder(children, this.renderMap));
            }
            if (this.props.accessibilityLayer) {
              var _this$props$tabIndex, _this$props$role;
              attrs.tabIndex = (_this$props$tabIndex = this.props.tabIndex) !== null && _this$props$tabIndex !== void 0 ? _this$props$tabIndex : 0;
              attrs.role = (_this$props$role = this.props.role) !== null && _this$props$role !== void 0 ? _this$props$role : "application";
              attrs.onKeyDown = function(e3) {
                _this2.accessibilityManager.keyboardEvent(e3);
              };
              attrs.onFocus = function() {
                _this2.accessibilityManager.focus();
              };
            }
            var events2 = this.parseEventsOfWrapper();
            return /* @__PURE__ */ React$1.createElement(ChartLayoutContextProvider, {
              state: this.state,
              width: this.props.width,
              height: this.props.height,
              clipPathId: this.clipPathId
            }, /* @__PURE__ */ React$1.createElement("div", _extends({
              className: clsx("recharts-wrapper", className),
              style: _objectSpread({
                position: "relative",
                cursor: "default",
                width,
                height
              }, style)
            }, events2, {
              ref: function ref(node) {
                _this2.container = node;
              },
              role: (_attrs$role = attrs.role) !== null && _attrs$role !== void 0 ? _attrs$role : "region"
            }), /* @__PURE__ */ React$1.createElement(Surface, _extends({}, attrs, {
              width,
              height,
              title,
              desc,
              style: FULL_WIDTH_AND_HEIGHT
            }), this.renderClipPath(), renderByOrder(children, this.renderMap)), this.renderLegend(), this.renderTooltip()));
          }
        }]);
        return CategoricalChartWrapper;
      }(reactExports.Component), _defineProperty(_CategoricalChartWrapper, "displayName", chartName), _defineProperty(_CategoricalChartWrapper, "defaultProps", _objectSpread({
        layout: "horizontal",
        stackOffset: "none",
        barCategoryGap: "10%",
        barGap: 4,
        margin: {
          top: 5,
          right: 5,
          bottom: 5,
          left: 5
        },
        reverseStackOrder: false,
        syncMethod: "index"
      }, defaultProps2)), _defineProperty(_CategoricalChartWrapper, "getDerivedStateFromProps", function(nextProps, prevState) {
        var dataKey = nextProps.dataKey, data = nextProps.data, children = nextProps.children, width = nextProps.width, height = nextProps.height, layout = nextProps.layout, stackOffset = nextProps.stackOffset, margin = nextProps.margin;
        var dataStartIndex = prevState.dataStartIndex, dataEndIndex = prevState.dataEndIndex;
        if (prevState.updateId === void 0) {
          var defaultState = createDefaultState(nextProps);
          return _objectSpread(_objectSpread(_objectSpread({}, defaultState), {}, {
            updateId: 0
          }, updateStateOfAxisMapsOffsetAndStackGroups(_objectSpread(_objectSpread({
            props: nextProps
          }, defaultState), {}, {
            updateId: 0
          }), prevState)), {}, {
            prevDataKey: dataKey,
            prevData: data,
            prevWidth: width,
            prevHeight: height,
            prevLayout: layout,
            prevStackOffset: stackOffset,
            prevMargin: margin,
            prevChildren: children
          });
        }
        if (dataKey !== prevState.prevDataKey || data !== prevState.prevData || width !== prevState.prevWidth || height !== prevState.prevHeight || layout !== prevState.prevLayout || stackOffset !== prevState.prevStackOffset || !shallowEqual(margin, prevState.prevMargin)) {
          var _defaultState = createDefaultState(nextProps);
          var keepFromPrevState = {
            // (chartX, chartY) are (0,0) in default state, but we want to keep the last mouse position to avoid
            // any flickering
            chartX: prevState.chartX,
            chartY: prevState.chartY,
            // The tooltip should stay active when it was active in the previous render. If this is not
            // the case, the tooltip disappears and immediately re-appears, causing a flickering effect
            isTooltipActive: prevState.isTooltipActive
          };
          var updatesToState = _objectSpread(_objectSpread({}, getTooltipData(prevState, data, layout)), {}, {
            updateId: prevState.updateId + 1
          });
          var newState = _objectSpread(_objectSpread(_objectSpread({}, _defaultState), keepFromPrevState), updatesToState);
          return _objectSpread(_objectSpread(_objectSpread({}, newState), updateStateOfAxisMapsOffsetAndStackGroups(_objectSpread({
            props: nextProps
          }, newState), prevState)), {}, {
            prevDataKey: dataKey,
            prevData: data,
            prevWidth: width,
            prevHeight: height,
            prevLayout: layout,
            prevStackOffset: stackOffset,
            prevMargin: margin,
            prevChildren: children
          });
        }
        if (!isChildrenEqual(children, prevState.prevChildren)) {
          var _brush$props$startInd, _brush$props, _brush$props$endIndex, _brush$props2;
          var brush = findChildByType(children, Brush);
          var startIndex = brush ? (_brush$props$startInd = (_brush$props = brush.props) === null || _brush$props === void 0 ? void 0 : _brush$props.startIndex) !== null && _brush$props$startInd !== void 0 ? _brush$props$startInd : dataStartIndex : dataStartIndex;
          var endIndex = brush ? (_brush$props$endIndex = (_brush$props2 = brush.props) === null || _brush$props2 === void 0 ? void 0 : _brush$props2.endIndex) !== null && _brush$props$endIndex !== void 0 ? _brush$props$endIndex : dataEndIndex : dataEndIndex;
          var hasDifferentStartOrEndIndex = startIndex !== dataStartIndex || endIndex !== dataEndIndex;
          var hasGlobalData = !isNil$1(data);
          var newUpdateId = hasGlobalData && !hasDifferentStartOrEndIndex ? prevState.updateId : prevState.updateId + 1;
          return _objectSpread(_objectSpread({
            updateId: newUpdateId
          }, updateStateOfAxisMapsOffsetAndStackGroups(_objectSpread(_objectSpread({
            props: nextProps
          }, prevState), {}, {
            updateId: newUpdateId,
            dataStartIndex: startIndex,
            dataEndIndex: endIndex
          }), prevState)), {}, {
            prevChildren: children,
            dataStartIndex: startIndex,
            dataEndIndex: endIndex
          });
        }
        return null;
      }), _defineProperty(_CategoricalChartWrapper, "renderActiveDot", function(option, props) {
        var dot;
        if (/* @__PURE__ */ reactExports.isValidElement(option)) {
          dot = /* @__PURE__ */ reactExports.cloneElement(option, props);
        } else if (isFunction$4(option)) {
          dot = option(props);
        } else {
          dot = /* @__PURE__ */ React$1.createElement(Dot, props);
        }
        return /* @__PURE__ */ React$1.createElement(Layer, {
          className: "recharts-active-dot",
          key: props.key
        }, dot);
      }), _CategoricalChartWrapper;
    };
    var BarChart = generateCategoricalChart({
      chartName: "BarChart",
      GraphicalChild: Bar,
      defaultTooltipEventType: "axis",
      validateTooltipEventTypes: ["axis", "item"],
      axisComponents: [{
        axisType: "xAxis",
        AxisComp: XAxis
      }, {
        axisType: "yAxis",
        AxisComp: YAxis
      }],
      formatAxisMap
    });
    const Chart = () => {
      const { user } = useSelector((state) => state.auth);
      const { isPending: isPending2, isError, data, error: error2 } = useQuery({
        queryKey: ["chartData", user._id],
        queryFn: async () => {
          const response = await axiosInstance.get(`dashboard/chartData?userId=${user._id}&role=${user.role}`);
          return response.data;
        }
      });
      return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
        isPending2 && /* @__PURE__ */ jsxRuntimeExports.jsx(Loading, {}),
        isError && /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "text-center text-red-500", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("p", { children: "Failed to load chart data." }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("p", { children: error2.message || "An unexpected error occurred." })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(ResponsiveContainer, { width: "100%", height: 300, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(BarChart, { width: 150, height: 40, data: data == null ? void 0 : data.data, children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(XAxis, { dataKey: "name" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(YAxis, {}),
          /* @__PURE__ */ jsxRuntimeExports.jsx(Tooltip, {}),
          /* @__PURE__ */ jsxRuntimeExports.jsx(Legend, {}),
          /* @__PURE__ */ jsxRuntimeExports.jsx(CartesianGrid, { strokeDasharray: "3 3" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(Bar, { dataKey: "total", fill: "#8884d8" })
        ] }) })
      ] });
    };
    const TaskTable = ({ tasks: tasks2 }) => {
      var _a2;
      const { user } = useSelector((state) => state.auth);
      const { isPending: isPending2, isError, data, error: error2 } = useQuery({
        queryKey: ["todos", user._id],
        queryFn: async () => {
          const response = await axiosInstance.get(`tasks/?userId=${user._id}`);
          return response.data;
        },
        keepPreviousData: true
      });
      const ICONS2 = {
        high: /* @__PURE__ */ jsxRuntimeExports.jsx(MdKeyboardDoubleArrowUp, {}),
        medium: /* @__PURE__ */ jsxRuntimeExports.jsx(MdKeyboardArrowUp, {}),
        low: /* @__PURE__ */ jsxRuntimeExports.jsx(MdKeyboardArrowDown, {})
      };
      const TableHeader = () => /* @__PURE__ */ jsxRuntimeExports.jsx("thead", { className: "border-b border-gray-300 ", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("tr", { className: "text-black text-left", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("th", { className: "py-2", children: "Task Title" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("th", { className: "py-2", children: "Priority" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("th", { className: "py-2", children: "Team" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("th", { className: "py-2 hidden md:block", children: "Created At" })
      ] }) });
      const TableRow = ({ task }) => /* @__PURE__ */ jsxRuntimeExports.jsxs("tr", { className: "w-full border-b border-gray-300 text-gray-600 hover:bg-gray-300/10", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("td", { className: "py-2", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-2", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "div",
            {
              className: clsx("w-4 h-4 rounded-full", TASK_TYPE$1[task.status])
            }
          ),
          /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-base text-black", children: task.title })
        ] }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("td", { className: "py-2", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex gap-1 items-center", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: clsx("text-lg", PRIOTITYSTYELS[task.priority]), children: ICONS2[task.priority] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "capitalize", children: task.priority })
        ] }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("td", { className: "py-2", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex", children: task.assignedUsers.map((m2, index) => /* @__PURE__ */ jsxRuntimeExports.jsx(
          "div",
          {
            className: clsx(
              "w-7 h-7 rounded-full text-white flex items-center justify-center text-sm -mr-1",
              BGS[index % BGS.length]
            ),
            children: /* @__PURE__ */ jsxRuntimeExports.jsx(UserInfo, { user: m2 })
          },
          index
        )) }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("td", { className: "py-2 hidden md:block", children: /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-base text-gray-600", children: hooks(task == null ? void 0 : task.date).fromNow() }) })
      ] });
      return /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-full md:w-2/3 bg-white px-2 md:px-4 pt-4 pb-4 shadow-md rounded", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("table", { className: "w-full", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(TableHeader, {}),
        /* @__PURE__ */ jsxRuntimeExports.jsx("tbody", { children: (_a2 = data == null ? void 0 : data.data) == null ? void 0 : _a2.map((task, id2) => /* @__PURE__ */ jsxRuntimeExports.jsx(TableRow, { task }, id2)) })
      ] }) }) });
    };
    const Dashboard = () => {
      var _a2, _b2, _c2, _d2;
      const { user } = useSelector((state) => state.auth);
      const { isPending: isPending2, isError, data, error: error2 } = useQuery({
        queryKey: ["cardCount", user._id],
        queryFn: async () => {
          const response = await axiosInstance.get(`dashboard?role=${user.role}&userId=${user._id}`);
          return response.data;
        }
      });
      const stats = [
        {
          _id: "1",
          label: "TOTAL TASK",
          total: ((_a2 = data == null ? void 0 : data.data) == null ? void 0 : _a2.totalTasks) || 0,
          icon: /* @__PURE__ */ jsxRuntimeExports.jsx(FaNewspaper, {}),
          bg: "bg-[#1d4ed8]"
        },
        {
          _id: "2",
          label: "COMPLETED TASK",
          total: ((_b2 = data == null ? void 0 : data.data) == null ? void 0 : _b2.completedTasks) || 0,
          icon: /* @__PURE__ */ jsxRuntimeExports.jsx(MdAdminPanelSettings, {}),
          bg: "bg-[#0f766e]"
        },
        {
          _id: "3",
          label: "TASK IN PROGRESS ",
          total: ((_c2 = data == null ? void 0 : data.data) == null ? void 0 : _c2.inProgressTasks) || 0,
          icon: /* @__PURE__ */ jsxRuntimeExports.jsx(LuClipboardEdit, {}),
          bg: "bg-[#f59e0b]"
        },
        {
          _id: "4",
          label: "TODOS",
          total: ((_d2 = data == null ? void 0 : data.data) == null ? void 0 : _d2.pendingTasks) || 0,
          icon: /* @__PURE__ */ jsxRuntimeExports.jsx(FaArrowsToDot, {}),
          bg: "bg-[#be185d]"
        }
      ];
      const Card = ({ label, count, bg: bg2, icon }) => {
        return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "w-full h-32 bg-white p-5 shadow-md rounded-md flex items-center justify-between", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "h-full flex flex-1 flex-col justify-between", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-base text-gray-600", children: label }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-2xl font-semibold", children: count })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "div",
            {
              className: clsx(
                "w-10 h-10 rounded-full flex items-center justify-center text-white",
                bg2
              ),
              children: icon
            }
          )
        ] });
      };
      return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "h-full py-4", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "grid grid-cols-1 md:grid-cols-4 gap-5", children: stats.map(({ icon, bg: bg2, label, total }, index) => /* @__PURE__ */ jsxRuntimeExports.jsx(Card, { icon, bg: bg2, label, count: total }, index)) }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "w-full bg-white my-16 p-4 rounded shadow-sm", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("h4", { className: "text-xl text-gray-600 font-semibold", children: "Chart by Priority" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(Chart, {})
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-full flex flex-col md:flex-row gap-4 2xl:gap-10 py-8", children: user.role === "admin" && /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(TaskTable, { tasks: summary.last10Task }) }) })
      ] });
    };
    const Signup = () => {
      const [passwordStrength, setPasswordStrength] = reactExports.useState(0);
      const [passwordMatch, setPasswordMatch] = reactExports.useState(true);
      const {
        register,
        handleSubmit,
        formState: { errors },
        watch
      } = useForm();
      const { user } = useSelector((state) => state.auth);
      const navigate = useNavigate();
      const dispatch = useDispatch();
      const signupMutation = useMutation({
        mutationFn: (data) => axiosInstance.post("auth/sign-up", data),
        onSuccess: (response) => {
          var _a2, _b2, _c2, _d2, _e3;
          if ((response == null ? void 0 : response.data) && ((_a2 = response == null ? void 0 : response.data) == null ? void 0 : _a2.status) === "success") {
            dispatch(
              setCredentials({
                user: (_c2 = (_b2 = response.data) == null ? void 0 : _b2.data) == null ? void 0 : _c2.user,
                token: (_e3 = (_d2 = response.data) == null ? void 0 : _d2.data) == null ? void 0 : _e3.token
              })
            );
            Ut.success(response.data.message, {
              duration: 2e3,
              position: "top-center"
            });
            navigate("/");
          }
        },
        onError: (error2) => {
          Ut.error(error2.response.data.message, {
            duration: 2e3,
            position: "top-center"
          });
        }
      });
      const submitHandler = (data) => {
        signupMutation.mutate(data);
      };
      const checkPasswordStrength = (password) => {
        const length = password.length;
        const hasUpperCase = /[A-Z]/.test(password);
        const hasLowerCase = /[a-z]/.test(password);
        const hasNumbers = /\d/.test(password);
        const hasSpecialChar = /[!@#$%^&*(),.?":{}|<>]/.test(password);
        let strength = 0;
        if (length > 8)
          strength++;
        if (hasUpperCase)
          strength++;
        if (hasLowerCase)
          strength++;
        if (hasNumbers)
          strength++;
        if (hasSpecialChar)
          strength++;
        setPasswordStrength(strength);
      };
      const checkPasswordMatch = () => {
        const password = watch("password");
        const confirmPassword = watch("confirmPassword");
        setPasswordMatch(password === confirmPassword);
      };
      reactExports.useEffect(() => {
        const password = watch("password");
        checkPasswordStrength(password);
        checkPasswordMatch();
      }, [watch("password"), watch("confirmPassword")]);
      reactExports.useEffect(() => {
        if (user)
          navigate("/dashboard");
      }, [user]);
      return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-full min-h-screen flex items-center justify-center flex-col lg:flex-row bg-[#f3f4f6]", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "w-full md:w-auto flex gap-0 md:gap-40 flex-col md:flex-row items-center justify-center", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "h-full w-full lg:w-2/3 flex flex-col items-center justify-center", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "w-full md:max-w-lg 2xl:max-w-3xl flex flex-col items-center justify-center gap-5 md:gap-y-10 2xl:-mt-20", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "flex gap-1 py-1 px-3 border rounded-full text-sm md:text-base bordergray-300 text-gray-600", children: "Join and start managing your tasks today!" }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "flex flex-col gap-0 md:gap-4 text-4xl md:text-6xl 2xl:text-7xl font-black text-center text-blue-700", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: "Create an Account" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: "To Stay Organized" })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "cell", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "circle rotate-in-up-left" }) })
        ] }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-full md:w-1/3 p-4 md:p-1 flex flex-col justify-center items-center", children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
          "form",
          {
            onSubmit: handleSubmit(submitHandler),
            className: "form-container w-full md:w-[400px] flex flex-col gap-y-8 bg-white px-10 pt-14 pb-14",
            children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-blue-600 text-3xl font-bold text-center", children: "Sign Up" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "text-center text-base text-gray-700", children: "Start your journey with us." })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex flex-col gap-y-5", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  Textbox,
                  {
                    placeholder: "Your name",
                    type: "text",
                    name: "name",
                    label: "Full Name",
                    className: "w-full rounded-full",
                    register: register("name", {
                      required: "Full Name is required!"
                    }),
                    error: errors.name ? errors.name.message : ""
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  Textbox,
                  {
                    placeholder: "email@example.com",
                    type: "email",
                    name: "email",
                    label: "Email Address",
                    className: "w-full rounded-full",
                    register: register("email", {
                      required: "Email Address is required!"
                    }),
                    error: errors.email ? errors.email.message : ""
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  Textbox,
                  {
                    placeholder: "your password",
                    type: "password",
                    name: "password",
                    label: "Password",
                    className: "w-full rounded-full",
                    register: register("password", {
                      required: "Password is required!"
                    }),
                    error: errors.password ? errors.password.message : ""
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-full h-2 mb-4 bg-gray-200 rounded-full", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "div",
                  {
                    className: `h-full rounded-full ${passwordStrength === 0 ? "bg-red-600" : passwordStrength === 1 ? "bg-yellow-500" : passwordStrength === 2 ? "bg-yellow-500" : passwordStrength === 3 ? "bg-blue-500" : "bg-green-500"}`
                  }
                ) }),
                /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "text-sm", children: [
                  "Password strength:",
                  " ",
                  passwordStrength === 0 ? "Weak" : passwordStrength === 1 ? "Fair" : passwordStrength === 2 ? "Good" : passwordStrength === 3 ? "Strong" : "Very Strong"
                ] }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  Textbox,
                  {
                    placeholder: "Confirm your password",
                    type: "password",
                    name: "confirmPassword",
                    label: "Confirm Password",
                    className: "w-full rounded-full",
                    register: register("confirmPassword", {
                      required: "Please confirm your password!"
                    }),
                    error: errors.confirmPassword ? errors.confirmPassword.message : ""
                  }
                ),
                !passwordMatch && /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-red-500 text-sm", children: "Passwords do not match!" }),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  Button,
                  {
                    type: "submit",
                    label: "Sign Up",
                    className: "w-full h-10 bg-blue-700 text-white rounded-full"
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "span",
                  {
                    className: "text-sm text-gray-500 hover:text-blue-600 hover:underline cursor-pointer text-center",
                    onClick: () => navigate("/log-in"),
                    children: "Already have an account? Login"
                  }
                )
              ] })
            ]
          }
        ) })
      ] }) });
    };
    function Layout() {
      const { user } = useSelector((state) => state.auth);
      const location2 = useLocation();
      return user ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "w-full h-screen flex flex-col md:flex-row", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-1/5 h-screen bg-white sticky top-0 hidden md:block", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Sidebar, {}) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(MobileSidebar, {}),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex-1 overflow-y-auto", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(Navbar, {}),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "p-4 2xl:px-10", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Outlet, {}) })
        ] })
      ] }) : /* @__PURE__ */ jsxRuntimeExports.jsx(Navigate, { to: "/log-in", state: { from: location2 }, replace: true });
    }
    const MobileSidebar = () => {
      const { isSidebarOpen } = useSelector((state) => state.auth);
      const mobileMenuRef = reactExports.useRef(null);
      const dispatch = useDispatch();
      const closeSidebar = () => {
        dispatch(setOpenSidebar(false));
      };
      return /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(
        qe,
        {
          show: isSidebarOpen,
          as: reactExports.Fragment,
          enter: "transition-opacity duration-700",
          enterFrom: "opacity-x-10",
          enterTo: "opacity-x-100",
          leave: "transition-opacity duration-700",
          leaveFrom: "opacity-x-100",
          leaveTo: "opacity-x-0",
          children: (ref) => /* @__PURE__ */ jsxRuntimeExports.jsx(
            "div",
            {
              ref: (node) => mobileMenuRef.current = node,
              className: clsx(
                "md:hidden w-full h-full bg-black/40 transition-all duration-700 transform ",
                isSidebarOpen ? "translate-x-0" : "translate-x-full"
              ),
              onClick: () => closeSidebar(),
              children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-white w-3/4 h-full", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "w-full flex justify-end px-5 mt-5", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "button",
                  {
                    onClick: () => closeSidebar(),
                    className: "flex justify-end items-end",
                    children: /* @__PURE__ */ jsxRuntimeExports.jsx(IoClose, { size: 25 })
                  }
                ) }),
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "-mt-10", children: /* @__PURE__ */ jsxRuntimeExports.jsx(Sidebar, {}) })
              ] })
            }
          )
        }
      ) });
    };
    function App() {
      return /* @__PURE__ */ jsxRuntimeExports.jsxs("main", { className: "w-full min-h-screen bg-[#f3f4f6] ", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs(Routes, { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsxs(Route, { element: /* @__PURE__ */ jsxRuntimeExports.jsx(Layout, {}), children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { index: true, path: "/", element: /* @__PURE__ */ jsxRuntimeExports.jsx(Navigate, { to: "/dashboard" }) }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { path: "/dashboard", element: /* @__PURE__ */ jsxRuntimeExports.jsx(Dashboard, {}) }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { path: "/tasks", element: /* @__PURE__ */ jsxRuntimeExports.jsx(Tasks, {}) }),
            /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { path: "/task/:id", element: /* @__PURE__ */ jsxRuntimeExports.jsx(TaskDetails, {}) })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { path: "/log-in", element: /* @__PURE__ */ jsxRuntimeExports.jsx(Login, {}) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(Route, { path: "/sign-up", element: /* @__PURE__ */ jsxRuntimeExports.jsx(Signup, {}) })
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(ce, { richColors: true })
      ] });
    }
    var QueryStatus = /* @__PURE__ */ ((QueryStatus2) => {
      QueryStatus2["uninitialized"] = "uninitialized";
      QueryStatus2["pending"] = "pending";
      QueryStatus2["fulfilled"] = "fulfilled";
      QueryStatus2["rejected"] = "rejected";
      return QueryStatus2;
    })(QueryStatus || {});
    function getRequestStatusFlags(status) {
      return {
        status,
        isUninitialized: status === "uninitialized",
        isLoading: status === "pending",
        isSuccess: status === "fulfilled",
        isError: status === "rejected"
        /* rejected */
      };
    }
    var isPlainObject2 = isPlainObject$6;
    function copyWithStructuralSharing(oldObj, newObj) {
      if (oldObj === newObj || !(isPlainObject2(oldObj) && isPlainObject2(newObj) || Array.isArray(oldObj) && Array.isArray(newObj))) {
        return newObj;
      }
      const newKeys = Object.keys(newObj);
      const oldKeys = Object.keys(oldObj);
      let isSameObject = newKeys.length === oldKeys.length;
      const mergeObj = Array.isArray(newObj) ? [] : {};
      for (const key of newKeys) {
        mergeObj[key] = copyWithStructuralSharing(oldObj[key], newObj[key]);
        if (isSameObject)
          isSameObject = oldObj[key] === mergeObj[key];
      }
      return isSameObject ? oldObj : mergeObj;
    }
    function countObjectKeys(obj) {
      let count = 0;
      for (const _key in obj) {
        count++;
      }
      return count;
    }
    var flatten = (arr) => [].concat(...arr);
    function isAbsoluteUrl(url2) {
      return new RegExp(`(^|:)//`).test(url2);
    }
    function isDocumentVisible() {
      if (typeof document === "undefined") {
        return true;
      }
      return document.visibilityState !== "hidden";
    }
    function isNotNullish(v2) {
      return v2 != null;
    }
    function isOnline() {
      return typeof navigator === "undefined" ? true : navigator.onLine === void 0 ? true : navigator.onLine;
    }
    var withoutTrailingSlash = (url2) => url2.replace(/\/$/, "");
    var withoutLeadingSlash = (url2) => url2.replace(/^\//, "");
    function joinUrls(base, url2) {
      if (!base) {
        return url2;
      }
      if (!url2) {
        return base;
      }
      if (isAbsoluteUrl(url2)) {
        return url2;
      }
      const delimiter = base.endsWith("/") || !url2.startsWith("?") ? "/" : "";
      base = withoutTrailingSlash(base);
      url2 = withoutLeadingSlash(url2);
      return `${base}${delimiter}${url2}`;
    }
    function getOrInsert(map2, key, value2) {
      if (map2.has(key))
        return map2.get(key);
      return map2.set(key, value2).get(key);
    }
    var defaultFetchFn = (...args) => fetch(...args);
    var defaultValidateStatus = (response) => response.status >= 200 && response.status <= 299;
    var defaultIsJsonContentType = (headers) => (
      /*applicat*/
      /ion\/(vnd\.api\+)?json/.test(headers.get("content-type") || "")
    );
    function stripUndefined(obj) {
      if (!isPlainObject$6(obj)) {
        return obj;
      }
      const copy2 = {
        ...obj
      };
      for (const [k2, v2] of Object.entries(copy2)) {
        if (v2 === void 0)
          delete copy2[k2];
      }
      return copy2;
    }
    function fetchBaseQuery({
      baseUrl,
      prepareHeaders = (x2) => x2,
      fetchFn = defaultFetchFn,
      paramsSerializer,
      isJsonContentType = defaultIsJsonContentType,
      jsonContentType = "application/json",
      jsonReplacer,
      timeout: defaultTimeout,
      responseHandler: globalResponseHandler,
      validateStatus: globalValidateStatus,
      ...baseFetchOptions
    } = {}) {
      if (typeof fetch === "undefined" && fetchFn === defaultFetchFn) {
        console.warn("Warning: `fetch` is not available. Please supply a custom `fetchFn` property to use `fetchBaseQuery` on SSR environments.");
      }
      return async (arg, api, extraOptions) => {
        const {
          getState,
          extra,
          endpoint,
          forced,
          type
        } = api;
        let meta;
        let {
          url: url2,
          headers = new Headers(baseFetchOptions.headers),
          params = void 0,
          responseHandler = globalResponseHandler ?? "json",
          validateStatus = globalValidateStatus ?? defaultValidateStatus,
          timeout = defaultTimeout,
          ...rest
        } = typeof arg == "string" ? {
          url: arg
        } : arg;
        let abortController, signal = api.signal;
        if (timeout) {
          abortController = new AbortController();
          api.signal.addEventListener("abort", abortController.abort);
          signal = abortController.signal;
        }
        let config2 = {
          ...baseFetchOptions,
          signal,
          ...rest
        };
        headers = new Headers(stripUndefined(headers));
        config2.headers = await prepareHeaders(headers, {
          getState,
          arg,
          extra,
          endpoint,
          forced,
          type,
          extraOptions
        }) || headers;
        const isJsonifiable = (body) => typeof body === "object" && (isPlainObject$6(body) || Array.isArray(body) || typeof body.toJSON === "function");
        if (!config2.headers.has("content-type") && isJsonifiable(config2.body)) {
          config2.headers.set("content-type", jsonContentType);
        }
        if (isJsonifiable(config2.body) && isJsonContentType(config2.headers)) {
          config2.body = JSON.stringify(config2.body, jsonReplacer);
        }
        if (params) {
          const divider = ~url2.indexOf("?") ? "&" : "?";
          const query = paramsSerializer ? paramsSerializer(params) : new URLSearchParams(stripUndefined(params));
          url2 += divider + query;
        }
        url2 = joinUrls(baseUrl, url2);
        const request = new Request(url2, config2);
        const requestClone = new Request(url2, config2);
        meta = {
          request: requestClone
        };
        let response, timedOut = false, timeoutId = abortController && setTimeout(() => {
          timedOut = true;
          abortController.abort();
        }, timeout);
        try {
          response = await fetchFn(request);
        } catch (e3) {
          return {
            error: {
              status: timedOut ? "TIMEOUT_ERROR" : "FETCH_ERROR",
              error: String(e3)
            },
            meta
          };
        } finally {
          if (timeoutId)
            clearTimeout(timeoutId);
          abortController == null ? void 0 : abortController.signal.removeEventListener("abort", abortController.abort);
        }
        const responseClone = response.clone();
        meta.response = responseClone;
        let resultData;
        let responseText = "";
        try {
          let handleResponseError;
          await Promise.all([
            handleResponse(response, responseHandler).then((r2) => resultData = r2, (e3) => handleResponseError = e3),
            // see https://github.com/node-fetch/node-fetch/issues/665#issuecomment-538995182
            // we *have* to "use up" both streams at the same time or they will stop running in node-fetch scenarios
            responseClone.text().then((r2) => responseText = r2, () => {
            })
          ]);
          if (handleResponseError)
            throw handleResponseError;
        } catch (e3) {
          return {
            error: {
              status: "PARSING_ERROR",
              originalStatus: response.status,
              data: responseText,
              error: String(e3)
            },
            meta
          };
        }
        return validateStatus(response, resultData) ? {
          data: resultData,
          meta
        } : {
          error: {
            status: response.status,
            data: resultData
          },
          meta
        };
      };
      async function handleResponse(response, responseHandler) {
        if (typeof responseHandler === "function") {
          return responseHandler(response);
        }
        if (responseHandler === "content-type") {
          responseHandler = isJsonContentType(response.headers) ? "json" : "text";
        }
        if (responseHandler === "json") {
          const text = await response.text();
          return text.length ? JSON.parse(text) : null;
        }
        return response.text();
      }
    }
    var HandledError = class {
      constructor(value2, meta = void 0) {
        this.value = value2;
        this.meta = meta;
      }
    };
    var onFocus = /* @__PURE__ */ createAction("__rtkq/focused");
    var onFocusLost = /* @__PURE__ */ createAction("__rtkq/unfocused");
    var onOnline = /* @__PURE__ */ createAction("__rtkq/online");
    var onOffline = /* @__PURE__ */ createAction("__rtkq/offline");
    function isQueryDefinition$1(e3) {
      return e3.type === "query";
    }
    function isMutationDefinition$1(e3) {
      return e3.type === "mutation";
    }
    function calculateProvidedBy(description, result, error2, queryArg, meta, assertTagTypes) {
      if (isFunction(description)) {
        return description(result, error2, queryArg, meta).filter(isNotNullish).map(expandTagDescription).map(assertTagTypes);
      }
      if (Array.isArray(description)) {
        return description.map(expandTagDescription).map(assertTagTypes);
      }
      return [];
    }
    function isFunction(t2) {
      return typeof t2 === "function";
    }
    function expandTagDescription(description) {
      return typeof description === "string" ? {
        type: description
      } : description;
    }
    function asSafePromise(promise, fallback) {
      return promise.catch(fallback);
    }
    var forceQueryFnSymbol = Symbol("forceQueryFn");
    var isUpsertQuery = (arg) => typeof arg[forceQueryFnSymbol] === "function";
    function buildInitiate({
      serializeQueryArgs,
      queryThunk,
      mutationThunk,
      api,
      context
    }) {
      const runningQueries = /* @__PURE__ */ new Map();
      const runningMutations = /* @__PURE__ */ new Map();
      const {
        unsubscribeQueryResult,
        removeMutationResult,
        updateSubscriptionOptions
      } = api.internalActions;
      return {
        buildInitiateQuery,
        buildInitiateMutation,
        getRunningQueryThunk,
        getRunningMutationThunk,
        getRunningQueriesThunk,
        getRunningMutationsThunk
      };
      function getRunningQueryThunk(endpointName, queryArgs) {
        return (dispatch) => {
          var _a2;
          const endpointDefinition = context.endpointDefinitions[endpointName];
          const queryCacheKey = serializeQueryArgs({
            queryArgs,
            endpointDefinition,
            endpointName
          });
          return (_a2 = runningQueries.get(dispatch)) == null ? void 0 : _a2[queryCacheKey];
        };
      }
      function getRunningMutationThunk(_endpointName, fixedCacheKeyOrRequestId) {
        return (dispatch) => {
          var _a2;
          return (_a2 = runningMutations.get(dispatch)) == null ? void 0 : _a2[fixedCacheKeyOrRequestId];
        };
      }
      function getRunningQueriesThunk() {
        return (dispatch) => Object.values(runningQueries.get(dispatch) || {}).filter(isNotNullish);
      }
      function getRunningMutationsThunk() {
        return (dispatch) => Object.values(runningMutations.get(dispatch) || {}).filter(isNotNullish);
      }
      function buildInitiateQuery(endpointName, endpointDefinition) {
        const queryAction = (arg, {
          subscribe = true,
          forceRefetch,
          subscriptionOptions,
          [forceQueryFnSymbol]: forceQueryFn,
          ...rest
        } = {}) => (dispatch, getState) => {
          var _a2;
          const queryCacheKey = serializeQueryArgs({
            queryArgs: arg,
            endpointDefinition,
            endpointName
          });
          const thunk2 = queryThunk({
            ...rest,
            type: "query",
            subscribe,
            forceRefetch,
            subscriptionOptions,
            endpointName,
            originalArgs: arg,
            queryCacheKey,
            [forceQueryFnSymbol]: forceQueryFn
          });
          const selector = api.endpoints[endpointName].select(arg);
          const thunkResult = dispatch(thunk2);
          const stateAfter = selector(getState());
          const {
            requestId,
            abort
          } = thunkResult;
          const skippedSynchronously = stateAfter.requestId !== requestId;
          const runningQuery = (_a2 = runningQueries.get(dispatch)) == null ? void 0 : _a2[queryCacheKey];
          const selectFromState = () => selector(getState());
          const statePromise = Object.assign(forceQueryFn ? (
            // a query has been forced (upsertQueryData)
            // -> we want to resolve it once data has been written with the data that will be written
            thunkResult.then(selectFromState)
          ) : skippedSynchronously && !runningQuery ? (
            // a query has been skipped due to a condition and we do not have any currently running query
            // -> we want to resolve it immediately with the current data
            Promise.resolve(stateAfter)
          ) : (
            // query just started or one is already in flight
            // -> wait for the running query, then resolve with data from after that
            Promise.all([runningQuery, thunkResult]).then(selectFromState)
          ), {
            arg,
            requestId,
            subscriptionOptions,
            queryCacheKey,
            abort,
            async unwrap() {
              const result = await statePromise;
              if (result.isError) {
                throw result.error;
              }
              return result.data;
            },
            refetch: () => dispatch(queryAction(arg, {
              subscribe: false,
              forceRefetch: true
            })),
            unsubscribe() {
              if (subscribe)
                dispatch(unsubscribeQueryResult({
                  queryCacheKey,
                  requestId
                }));
            },
            updateSubscriptionOptions(options) {
              statePromise.subscriptionOptions = options;
              dispatch(updateSubscriptionOptions({
                endpointName,
                requestId,
                queryCacheKey,
                options
              }));
            }
          });
          if (!runningQuery && !skippedSynchronously && !forceQueryFn) {
            const running = getOrInsert(runningQueries, dispatch, {});
            running[queryCacheKey] = statePromise;
            statePromise.then(() => {
              delete running[queryCacheKey];
              if (!countObjectKeys(running)) {
                runningQueries.delete(dispatch);
              }
            });
          }
          return statePromise;
        };
        return queryAction;
      }
      function buildInitiateMutation(endpointName) {
        return (arg, {
          track = true,
          fixedCacheKey
        } = {}) => (dispatch, getState) => {
          const thunk2 = mutationThunk({
            type: "mutation",
            endpointName,
            originalArgs: arg,
            track,
            fixedCacheKey
          });
          const thunkResult = dispatch(thunk2);
          const {
            requestId,
            abort,
            unwrap
          } = thunkResult;
          const returnValuePromise = asSafePromise(thunkResult.unwrap().then((data) => ({
            data
          })), (error2) => ({
            error: error2
          }));
          const reset = () => {
            dispatch(removeMutationResult({
              requestId,
              fixedCacheKey
            }));
          };
          const ret = Object.assign(returnValuePromise, {
            arg: thunkResult.arg,
            requestId,
            abort,
            unwrap,
            reset
          });
          const running = runningMutations.get(dispatch) || {};
          runningMutations.set(dispatch, running);
          running[requestId] = ret;
          ret.then(() => {
            delete running[requestId];
            if (!countObjectKeys(running)) {
              runningMutations.delete(dispatch);
            }
          });
          if (fixedCacheKey) {
            running[fixedCacheKey] = ret;
            ret.then(() => {
              if (running[fixedCacheKey] === ret) {
                delete running[fixedCacheKey];
                if (!countObjectKeys(running)) {
                  runningMutations.delete(dispatch);
                }
              }
            });
          }
          return ret;
        };
      }
    }
    function defaultTransformResponse(baseQueryReturnValue) {
      return baseQueryReturnValue;
    }
    function buildThunks({
      reducerPath,
      baseQuery: baseQuery2,
      context: {
        endpointDefinitions
      },
      serializeQueryArgs,
      api,
      assertTagType
    }) {
      const patchQueryData = (endpointName, arg, patches, updateProvided) => (dispatch, getState) => {
        const endpointDefinition = endpointDefinitions[endpointName];
        const queryCacheKey = serializeQueryArgs({
          queryArgs: arg,
          endpointDefinition,
          endpointName
        });
        dispatch(api.internalActions.queryResultPatched({
          queryCacheKey,
          patches
        }));
        if (!updateProvided) {
          return;
        }
        const newValue = api.endpoints[endpointName].select(arg)(
          // Work around TS 4.1 mismatch
          getState()
        );
        const providedTags = calculateProvidedBy(endpointDefinition.providesTags, newValue.data, void 0, arg, {}, assertTagType);
        dispatch(api.internalActions.updateProvidedBy({
          queryCacheKey,
          providedTags
        }));
      };
      const updateQueryData = (endpointName, arg, updateRecipe, updateProvided = true) => (dispatch, getState) => {
        const endpointDefinition = api.endpoints[endpointName];
        const currentState = endpointDefinition.select(arg)(
          // Work around TS 4.1 mismatch
          getState()
        );
        const ret = {
          patches: [],
          inversePatches: [],
          undo: () => dispatch(api.util.patchQueryData(endpointName, arg, ret.inversePatches, updateProvided))
        };
        if (currentState.status === "uninitialized") {
          return ret;
        }
        let newValue;
        if ("data" in currentState) {
          if (isDraftable(currentState.data)) {
            const [value2, patches, inversePatches] = produceWithPatches(currentState.data, updateRecipe);
            ret.patches.push(...patches);
            ret.inversePatches.push(...inversePatches);
            newValue = value2;
          } else {
            newValue = updateRecipe(currentState.data);
            ret.patches.push({
              op: "replace",
              path: [],
              value: newValue
            });
            ret.inversePatches.push({
              op: "replace",
              path: [],
              value: currentState.data
            });
          }
        }
        if (ret.patches.length === 0) {
          return ret;
        }
        dispatch(api.util.patchQueryData(endpointName, arg, ret.patches, updateProvided));
        return ret;
      };
      const upsertQueryData = (endpointName, arg, value2) => (dispatch) => {
        return dispatch(api.endpoints[endpointName].initiate(arg, {
          subscribe: false,
          forceRefetch: true,
          [forceQueryFnSymbol]: () => ({
            data: value2
          })
        }));
      };
      const executeEndpoint = async (arg, {
        signal,
        abort,
        rejectWithValue,
        fulfillWithValue,
        dispatch,
        getState,
        extra
      }) => {
        const endpointDefinition = endpointDefinitions[arg.endpointName];
        try {
          let transformResponse = defaultTransformResponse;
          let result;
          const baseQueryApi = {
            signal,
            abort,
            dispatch,
            getState,
            extra,
            endpoint: arg.endpointName,
            type: arg.type,
            forced: arg.type === "query" ? isForcedQuery(arg, getState()) : void 0,
            queryCacheKey: arg.type === "query" ? arg.queryCacheKey : void 0
          };
          const forceQueryFn = arg.type === "query" ? arg[forceQueryFnSymbol] : void 0;
          if (forceQueryFn) {
            result = forceQueryFn();
          } else if (endpointDefinition.query) {
            result = await baseQuery2(endpointDefinition.query(arg.originalArgs), baseQueryApi, endpointDefinition.extraOptions);
            if (endpointDefinition.transformResponse) {
              transformResponse = endpointDefinition.transformResponse;
            }
          } else {
            result = await endpointDefinition.queryFn(arg.originalArgs, baseQueryApi, endpointDefinition.extraOptions, (arg2) => baseQuery2(arg2, baseQueryApi, endpointDefinition.extraOptions));
          }
          if (typeof process !== "undefined" && false) {
            const what = endpointDefinition.query ? "`baseQuery`" : "`queryFn`";
            let err;
            if (!result) {
              err = `${what} did not return anything.`;
            } else if (typeof result !== "object") {
              err = `${what} did not return an object.`;
            } else if (result.error && result.data) {
              err = `${what} returned an object containing both \`error\` and \`result\`.`;
            } else if (result.error === void 0 && result.data === void 0) {
              err = `${what} returned an object containing neither a valid \`error\` and \`result\`. At least one of them should not be \`undefined\``;
            } else {
              for (const key of Object.keys(result)) {
                if (key !== "error" && key !== "data" && key !== "meta") {
                  err = `The object returned by ${what} has the unknown property ${key}.`;
                  break;
                }
              }
            }
            if (err) {
              console.error(`Error encountered handling the endpoint ${arg.endpointName}.
              ${err}
              It needs to return an object with either the shape \`{ data: <value> }\` or \`{ error: <value> }\` that may contain an optional \`meta\` property.
              Object returned was:`, result);
            }
          }
          if (result.error)
            throw new HandledError(result.error, result.meta);
          return fulfillWithValue(await transformResponse(result.data, result.meta, arg.originalArgs), {
            fulfilledTimeStamp: Date.now(),
            baseQueryMeta: result.meta,
            [SHOULD_AUTOBATCH]: true
          });
        } catch (error2) {
          let catchedError = error2;
          if (catchedError instanceof HandledError) {
            let transformErrorResponse = defaultTransformResponse;
            if (endpointDefinition.query && endpointDefinition.transformErrorResponse) {
              transformErrorResponse = endpointDefinition.transformErrorResponse;
            }
            try {
              return rejectWithValue(await transformErrorResponse(catchedError.value, catchedError.meta, arg.originalArgs), {
                baseQueryMeta: catchedError.meta,
                [SHOULD_AUTOBATCH]: true
              });
            } catch (e3) {
              catchedError = e3;
            }
          }
          if (typeof process !== "undefined" && false) {
            console.error(`An unhandled error occurred processing a request for the endpoint "${arg.endpointName}".
In the case of an unhandled error, no tags will be "provided" or "invalidated".`, catchedError);
          } else {
            console.error(catchedError);
          }
          throw catchedError;
        }
      };
      function isForcedQuery(arg, state) {
        var _a2, _b2, _c2;
        const requestState = (_b2 = (_a2 = state[reducerPath]) == null ? void 0 : _a2.queries) == null ? void 0 : _b2[arg.queryCacheKey];
        const baseFetchOnMountOrArgChange = (_c2 = state[reducerPath]) == null ? void 0 : _c2.config.refetchOnMountOrArgChange;
        const fulfilledVal = requestState == null ? void 0 : requestState.fulfilledTimeStamp;
        const refetchVal = arg.forceRefetch ?? (arg.subscribe && baseFetchOnMountOrArgChange);
        if (refetchVal) {
          return refetchVal === true || (Number(/* @__PURE__ */ new Date()) - Number(fulfilledVal)) / 1e3 >= refetchVal;
        }
        return false;
      }
      const queryThunk = createAsyncThunk(`${reducerPath}/executeQuery`, executeEndpoint, {
        getPendingMeta() {
          return {
            startedTimeStamp: Date.now(),
            [SHOULD_AUTOBATCH]: true
          };
        },
        condition(queryThunkArgs, {
          getState
        }) {
          var _a2, _b2, _c2;
          const state = getState();
          const requestState = (_b2 = (_a2 = state[reducerPath]) == null ? void 0 : _a2.queries) == null ? void 0 : _b2[queryThunkArgs.queryCacheKey];
          const fulfilledVal = requestState == null ? void 0 : requestState.fulfilledTimeStamp;
          const currentArg = queryThunkArgs.originalArgs;
          const previousArg = requestState == null ? void 0 : requestState.originalArgs;
          const endpointDefinition = endpointDefinitions[queryThunkArgs.endpointName];
          if (isUpsertQuery(queryThunkArgs)) {
            return true;
          }
          if ((requestState == null ? void 0 : requestState.status) === "pending") {
            return false;
          }
          if (isForcedQuery(queryThunkArgs, state)) {
            return true;
          }
          if (isQueryDefinition$1(endpointDefinition) && ((_c2 = endpointDefinition == null ? void 0 : endpointDefinition.forceRefetch) == null ? void 0 : _c2.call(endpointDefinition, {
            currentArg,
            previousArg,
            endpointState: requestState,
            state
          }))) {
            return true;
          }
          if (fulfilledVal) {
            return false;
          }
          return true;
        },
        dispatchConditionRejection: true
      });
      const mutationThunk = createAsyncThunk(`${reducerPath}/executeMutation`, executeEndpoint, {
        getPendingMeta() {
          return {
            startedTimeStamp: Date.now(),
            [SHOULD_AUTOBATCH]: true
          };
        }
      });
      const hasTheForce = (options) => "force" in options;
      const hasMaxAge = (options) => "ifOlderThan" in options;
      const prefetch = (endpointName, arg, options) => (dispatch, getState) => {
        const force = hasTheForce(options) && options.force;
        const maxAge = hasMaxAge(options) && options.ifOlderThan;
        const queryAction = (force2 = true) => {
          const options2 = {
            forceRefetch: force2,
            isPrefetch: true
          };
          return api.endpoints[endpointName].initiate(arg, options2);
        };
        const latestStateValue = api.endpoints[endpointName].select(arg)(getState());
        if (force) {
          dispatch(queryAction());
        } else if (maxAge) {
          const lastFulfilledTs = latestStateValue == null ? void 0 : latestStateValue.fulfilledTimeStamp;
          if (!lastFulfilledTs) {
            dispatch(queryAction());
            return;
          }
          const shouldRetrigger = (Number(/* @__PURE__ */ new Date()) - Number(new Date(lastFulfilledTs))) / 1e3 >= maxAge;
          if (shouldRetrigger) {
            dispatch(queryAction());
          }
        } else {
          dispatch(queryAction(false));
        }
      };
      function matchesEndpoint(endpointName) {
        return (action) => {
          var _a2, _b2;
          return ((_b2 = (_a2 = action == null ? void 0 : action.meta) == null ? void 0 : _a2.arg) == null ? void 0 : _b2.endpointName) === endpointName;
        };
      }
      function buildMatchThunkActions(thunk2, endpointName) {
        return {
          matchPending: isAllOf(isPending(thunk2), matchesEndpoint(endpointName)),
          matchFulfilled: isAllOf(isFulfilled(thunk2), matchesEndpoint(endpointName)),
          matchRejected: isAllOf(isRejected(thunk2), matchesEndpoint(endpointName))
        };
      }
      return {
        queryThunk,
        mutationThunk,
        prefetch,
        updateQueryData,
        upsertQueryData,
        patchQueryData,
        buildMatchThunkActions
      };
    }
    function calculateProvidedByThunk(action, type, endpointDefinitions, assertTagType) {
      return calculateProvidedBy(endpointDefinitions[action.meta.arg.endpointName][type], isFulfilled(action) ? action.payload : void 0, isRejectedWithValue(action) ? action.payload : void 0, action.meta.arg.originalArgs, "baseQueryMeta" in action.meta ? action.meta.baseQueryMeta : void 0, assertTagType);
    }
    function updateQuerySubstateIfExists(state, queryCacheKey, update) {
      const substate = state[queryCacheKey];
      if (substate) {
        update(substate);
      }
    }
    function getMutationCacheKey(id2) {
      return ("arg" in id2 ? id2.arg.fixedCacheKey : id2.fixedCacheKey) ?? id2.requestId;
    }
    function updateMutationSubstateIfExists(state, id2, update) {
      const substate = state[getMutationCacheKey(id2)];
      if (substate) {
        update(substate);
      }
    }
    var initialState = {};
    function buildSlice({
      reducerPath,
      queryThunk,
      mutationThunk,
      serializeQueryArgs,
      context: {
        endpointDefinitions: definitions,
        apiUid,
        extractRehydrationInfo,
        hasRehydrationInfo
      },
      assertTagType,
      config: config2
    }) {
      const resetApiState = createAction(`${reducerPath}/resetApiState`);
      function writePendingCacheEntry(draft, arg, upserting, meta) {
        var _a2;
        draft[_a2 = arg.queryCacheKey] ?? (draft[_a2] = {
          status: "uninitialized",
          endpointName: arg.endpointName
        });
        updateQuerySubstateIfExists(draft, arg.queryCacheKey, (substate) => {
          substate.status = "pending";
          substate.requestId = upserting && substate.requestId ? (
            // for `upsertQuery` **updates**, keep the current `requestId`
            substate.requestId
          ) : (
            // for normal queries or `upsertQuery` **inserts** always update the `requestId`
            meta.requestId
          );
          if (arg.originalArgs !== void 0) {
            substate.originalArgs = arg.originalArgs;
          }
          substate.startedTimeStamp = meta.startedTimeStamp;
        });
      }
      function writeFulfilledCacheEntry(draft, meta, payload) {
        updateQuerySubstateIfExists(draft, meta.arg.queryCacheKey, (substate) => {
          if (substate.requestId !== meta.requestId && !isUpsertQuery(meta.arg))
            return;
          const {
            merge: merge2
          } = definitions[meta.arg.endpointName];
          substate.status = "fulfilled";
          if (merge2) {
            if (substate.data !== void 0) {
              const {
                fulfilledTimeStamp,
                arg,
                baseQueryMeta,
                requestId
              } = meta;
              let newData = produce(substate.data, (draftSubstateData) => {
                return merge2(draftSubstateData, payload, {
                  arg: arg.originalArgs,
                  baseQueryMeta,
                  fulfilledTimeStamp,
                  requestId
                });
              });
              substate.data = newData;
            } else {
              substate.data = payload;
            }
          } else {
            substate.data = definitions[meta.arg.endpointName].structuralSharing ?? true ? copyWithStructuralSharing(isDraft(substate.data) ? original(substate.data) : substate.data, payload) : payload;
          }
          delete substate.error;
          substate.fulfilledTimeStamp = meta.fulfilledTimeStamp;
        });
      }
      const querySlice = createSlice({
        name: `${reducerPath}/queries`,
        initialState,
        reducers: {
          removeQueryResult: {
            reducer(draft, {
              payload: {
                queryCacheKey
              }
            }) {
              delete draft[queryCacheKey];
            },
            prepare: prepareAutoBatched()
          },
          cacheEntriesUpserted: {
            reducer(draft, action) {
              for (const entry of action.payload) {
                const {
                  queryDescription: arg,
                  value: value2
                } = entry;
                writePendingCacheEntry(draft, arg, true, {
                  arg,
                  requestId: action.meta.requestId,
                  startedTimeStamp: action.meta.timestamp
                });
                writeFulfilledCacheEntry(draft, {
                  arg,
                  requestId: action.meta.requestId,
                  fulfilledTimeStamp: action.meta.timestamp,
                  baseQueryMeta: {}
                }, value2);
              }
            },
            prepare: (payload) => {
              const queryDescriptions = payload.map((entry) => {
                const {
                  endpointName,
                  arg,
                  value: value2
                } = entry;
                const endpointDefinition = definitions[endpointName];
                const queryDescription = {
                  type: "query",
                  endpointName,
                  originalArgs: entry.arg,
                  queryCacheKey: serializeQueryArgs({
                    queryArgs: arg,
                    endpointDefinition,
                    endpointName
                  })
                };
                return {
                  queryDescription,
                  value: value2
                };
              });
              const result = {
                payload: queryDescriptions,
                meta: {
                  [SHOULD_AUTOBATCH]: true,
                  requestId: nanoid(),
                  timestamp: Date.now()
                }
              };
              return result;
            }
          },
          queryResultPatched: {
            reducer(draft, {
              payload: {
                queryCacheKey,
                patches
              }
            }) {
              updateQuerySubstateIfExists(draft, queryCacheKey, (substate) => {
                substate.data = applyPatches(substate.data, patches.concat());
              });
            },
            prepare: prepareAutoBatched()
          }
        },
        extraReducers(builder) {
          builder.addCase(queryThunk.pending, (draft, {
            meta,
            meta: {
              arg
            }
          }) => {
            const upserting = isUpsertQuery(arg);
            writePendingCacheEntry(draft, arg, upserting, meta);
          }).addCase(queryThunk.fulfilled, (draft, {
            meta,
            payload
          }) => {
            writeFulfilledCacheEntry(draft, meta, payload);
          }).addCase(queryThunk.rejected, (draft, {
            meta: {
              condition,
              arg,
              requestId
            },
            error: error2,
            payload
          }) => {
            updateQuerySubstateIfExists(draft, arg.queryCacheKey, (substate) => {
              if (condition)
                ;
              else {
                if (substate.requestId !== requestId)
                  return;
                substate.status = "rejected";
                substate.error = payload ?? error2;
              }
            });
          }).addMatcher(hasRehydrationInfo, (draft, action) => {
            const {
              queries
            } = extractRehydrationInfo(action);
            for (const [key, entry] of Object.entries(queries)) {
              if (
                // do not rehydrate entries that were currently in flight.
                (entry == null ? void 0 : entry.status) === "fulfilled" || (entry == null ? void 0 : entry.status) === "rejected"
              ) {
                draft[key] = entry;
              }
            }
          });
        }
      });
      const mutationSlice = createSlice({
        name: `${reducerPath}/mutations`,
        initialState,
        reducers: {
          removeMutationResult: {
            reducer(draft, {
              payload
            }) {
              const cacheKey = getMutationCacheKey(payload);
              if (cacheKey in draft) {
                delete draft[cacheKey];
              }
            },
            prepare: prepareAutoBatched()
          }
        },
        extraReducers(builder) {
          builder.addCase(mutationThunk.pending, (draft, {
            meta,
            meta: {
              requestId,
              arg,
              startedTimeStamp
            }
          }) => {
            if (!arg.track)
              return;
            draft[getMutationCacheKey(meta)] = {
              requestId,
              status: "pending",
              endpointName: arg.endpointName,
              startedTimeStamp
            };
          }).addCase(mutationThunk.fulfilled, (draft, {
            payload,
            meta
          }) => {
            if (!meta.arg.track)
              return;
            updateMutationSubstateIfExists(draft, meta, (substate) => {
              if (substate.requestId !== meta.requestId)
                return;
              substate.status = "fulfilled";
              substate.data = payload;
              substate.fulfilledTimeStamp = meta.fulfilledTimeStamp;
            });
          }).addCase(mutationThunk.rejected, (draft, {
            payload,
            error: error2,
            meta
          }) => {
            if (!meta.arg.track)
              return;
            updateMutationSubstateIfExists(draft, meta, (substate) => {
              if (substate.requestId !== meta.requestId)
                return;
              substate.status = "rejected";
              substate.error = payload ?? error2;
            });
          }).addMatcher(hasRehydrationInfo, (draft, action) => {
            const {
              mutations
            } = extractRehydrationInfo(action);
            for (const [key, entry] of Object.entries(mutations)) {
              if (
                // do not rehydrate entries that were currently in flight.
                ((entry == null ? void 0 : entry.status) === "fulfilled" || (entry == null ? void 0 : entry.status) === "rejected") && // only rehydrate endpoints that were persisted using a `fixedCacheKey`
                key !== (entry == null ? void 0 : entry.requestId)
              ) {
                draft[key] = entry;
              }
            }
          });
        }
      });
      const invalidationSlice = createSlice({
        name: `${reducerPath}/invalidation`,
        initialState,
        reducers: {
          updateProvidedBy: {
            reducer(draft, action) {
              var _a2, _b2;
              const {
                queryCacheKey,
                providedTags
              } = action.payload;
              for (const tagTypeSubscriptions of Object.values(draft)) {
                for (const idSubscriptions of Object.values(tagTypeSubscriptions)) {
                  const foundAt = idSubscriptions.indexOf(queryCacheKey);
                  if (foundAt !== -1) {
                    idSubscriptions.splice(foundAt, 1);
                  }
                }
              }
              for (const {
                type,
                id: id2
              } of providedTags) {
                const subscribedQueries = (_a2 = draft[type] ?? (draft[type] = {}))[_b2 = id2 || "__internal_without_id"] ?? (_a2[_b2] = []);
                const alreadySubscribed = subscribedQueries.includes(queryCacheKey);
                if (!alreadySubscribed) {
                  subscribedQueries.push(queryCacheKey);
                }
              }
            },
            prepare: prepareAutoBatched()
          }
        },
        extraReducers(builder) {
          builder.addCase(querySlice.actions.removeQueryResult, (draft, {
            payload: {
              queryCacheKey
            }
          }) => {
            for (const tagTypeSubscriptions of Object.values(draft)) {
              for (const idSubscriptions of Object.values(tagTypeSubscriptions)) {
                const foundAt = idSubscriptions.indexOf(queryCacheKey);
                if (foundAt !== -1) {
                  idSubscriptions.splice(foundAt, 1);
                }
              }
            }
          }).addMatcher(hasRehydrationInfo, (draft, action) => {
            var _a2, _b2;
            const {
              provided
            } = extractRehydrationInfo(action);
            for (const [type, incomingTags] of Object.entries(provided)) {
              for (const [id2, cacheKeys] of Object.entries(incomingTags)) {
                const subscribedQueries = (_a2 = draft[type] ?? (draft[type] = {}))[_b2 = id2 || "__internal_without_id"] ?? (_a2[_b2] = []);
                for (const queryCacheKey of cacheKeys) {
                  const alreadySubscribed = subscribedQueries.includes(queryCacheKey);
                  if (!alreadySubscribed) {
                    subscribedQueries.push(queryCacheKey);
                  }
                }
              }
            }
          }).addMatcher(isAnyOf(isFulfilled(queryThunk), isRejectedWithValue(queryThunk)), (draft, action) => {
            const providedTags = calculateProvidedByThunk(action, "providesTags", definitions, assertTagType);
            const {
              queryCacheKey
            } = action.meta.arg;
            invalidationSlice.caseReducers.updateProvidedBy(draft, invalidationSlice.actions.updateProvidedBy({
              queryCacheKey,
              providedTags
            }));
          });
        }
      });
      const subscriptionSlice = createSlice({
        name: `${reducerPath}/subscriptions`,
        initialState,
        reducers: {
          updateSubscriptionOptions(d2, a2) {
          },
          unsubscribeQueryResult(d2, a2) {
          },
          internal_getRTKQSubscriptions() {
          }
        }
      });
      const internalSubscriptionsSlice = createSlice({
        name: `${reducerPath}/internalSubscriptions`,
        initialState,
        reducers: {
          subscriptionsUpdated: {
            reducer(state, action) {
              return applyPatches(state, action.payload);
            },
            prepare: prepareAutoBatched()
          }
        }
      });
      const configSlice = createSlice({
        name: `${reducerPath}/config`,
        initialState: {
          online: isOnline(),
          focused: isDocumentVisible(),
          middlewareRegistered: false,
          ...config2
        },
        reducers: {
          middlewareRegistered(state, {
            payload
          }) {
            state.middlewareRegistered = state.middlewareRegistered === "conflict" || apiUid !== payload ? "conflict" : true;
          }
        },
        extraReducers: (builder) => {
          builder.addCase(onOnline, (state) => {
            state.online = true;
          }).addCase(onOffline, (state) => {
            state.online = false;
          }).addCase(onFocus, (state) => {
            state.focused = true;
          }).addCase(onFocusLost, (state) => {
            state.focused = false;
          }).addMatcher(hasRehydrationInfo, (draft) => ({
            ...draft
          }));
        }
      });
      const combinedReducer = combineReducers({
        queries: querySlice.reducer,
        mutations: mutationSlice.reducer,
        provided: invalidationSlice.reducer,
        subscriptions: internalSubscriptionsSlice.reducer,
        config: configSlice.reducer
      });
      const reducer2 = (state, action) => combinedReducer(resetApiState.match(action) ? void 0 : state, action);
      const actions = {
        ...configSlice.actions,
        ...querySlice.actions,
        ...subscriptionSlice.actions,
        ...internalSubscriptionsSlice.actions,
        ...mutationSlice.actions,
        ...invalidationSlice.actions,
        resetApiState
      };
      return {
        reducer: reducer2,
        actions
      };
    }
    var skipToken = /* @__PURE__ */ Symbol.for("RTKQ/skipToken");
    var initialSubState = {
      status: "uninitialized"
      /* uninitialized */
    };
    var defaultQuerySubState = /* @__PURE__ */ produce(initialSubState, () => {
    });
    var defaultMutationSubState = /* @__PURE__ */ produce(initialSubState, () => {
    });
    function buildSelectors({
      serializeQueryArgs,
      reducerPath,
      createSelector: createSelector2
    }) {
      const selectSkippedQuery = (state) => defaultQuerySubState;
      const selectSkippedMutation = (state) => defaultMutationSubState;
      return {
        buildQuerySelector,
        buildMutationSelector,
        selectInvalidatedBy,
        selectCachedArgsForQuery
      };
      function withRequestFlags(substate) {
        return {
          ...substate,
          ...getRequestStatusFlags(substate.status)
        };
      }
      function selectInternalState(rootState) {
        const state = rootState[reducerPath];
        return state;
      }
      function buildQuerySelector(endpointName, endpointDefinition) {
        return (queryArgs) => {
          if (queryArgs === skipToken) {
            return createSelector2(selectSkippedQuery, withRequestFlags);
          }
          const serializedArgs = serializeQueryArgs({
            queryArgs,
            endpointDefinition,
            endpointName
          });
          const selectQuerySubstate = (state) => {
            var _a2, _b2;
            return ((_b2 = (_a2 = selectInternalState(state)) == null ? void 0 : _a2.queries) == null ? void 0 : _b2[serializedArgs]) ?? defaultQuerySubState;
          };
          return createSelector2(selectQuerySubstate, withRequestFlags);
        };
      }
      function buildMutationSelector() {
        return (id2) => {
          let mutationId;
          if (typeof id2 === "object") {
            mutationId = getMutationCacheKey(id2) ?? skipToken;
          } else {
            mutationId = id2;
          }
          const selectMutationSubstate = (state) => {
            var _a2, _b2;
            return ((_b2 = (_a2 = selectInternalState(state)) == null ? void 0 : _a2.mutations) == null ? void 0 : _b2[mutationId]) ?? defaultMutationSubState;
          };
          const finalSelectMutationSubstate = mutationId === skipToken ? selectSkippedMutation : selectMutationSubstate;
          return createSelector2(finalSelectMutationSubstate, withRequestFlags);
        };
      }
      function selectInvalidatedBy(state, tags) {
        const apiState = state[reducerPath];
        const toInvalidate = /* @__PURE__ */ new Set();
        for (const tag of tags.filter(isNotNullish).map(expandTagDescription)) {
          const provided = apiState.provided[tag.type];
          if (!provided) {
            continue;
          }
          let invalidateSubscriptions = (tag.id !== void 0 ? (
            // id given: invalidate all queries that provide this type & id
            provided[tag.id]
          ) : (
            // no id: invalidate all queries that provide this type
            flatten(Object.values(provided))
          )) ?? [];
          for (const invalidate of invalidateSubscriptions) {
            toInvalidate.add(invalidate);
          }
        }
        return flatten(Array.from(toInvalidate.values()).map((queryCacheKey) => {
          const querySubState = apiState.queries[queryCacheKey];
          return querySubState ? [{
            queryCacheKey,
            endpointName: querySubState.endpointName,
            originalArgs: querySubState.originalArgs
          }] : [];
        }));
      }
      function selectCachedArgsForQuery(state, queryName) {
        return Object.values(state[reducerPath].queries).filter(
          (entry) => (entry == null ? void 0 : entry.endpointName) === queryName && entry.status !== "uninitialized"
          /* uninitialized */
        ).map((entry) => entry.originalArgs);
      }
    }
    var cache$1 = WeakMap ? /* @__PURE__ */ new WeakMap() : void 0;
    var defaultSerializeQueryArgs$1 = ({
      endpointName,
      queryArgs
    }) => {
      let serialized = "";
      const cached = cache$1 == null ? void 0 : cache$1.get(queryArgs);
      if (typeof cached === "string") {
        serialized = cached;
      } else {
        const stringified = JSON.stringify(queryArgs, (key, value2) => {
          value2 = typeof value2 === "bigint" ? {
            $bigint: value2.toString()
          } : value2;
          value2 = isPlainObject$6(value2) ? Object.keys(value2).sort().reduce((acc, key2) => {
            acc[key2] = value2[key2];
            return acc;
          }, {}) : value2;
          return value2;
        });
        if (isPlainObject$6(queryArgs)) {
          cache$1 == null ? void 0 : cache$1.set(queryArgs, stringified);
        }
        serialized = stringified;
      }
      return `${endpointName}(${serialized})`;
    };
    function buildCreateApi(...modules) {
      return function baseCreateApi(options) {
        const extractRehydrationInfo = weakMapMemoize((action) => {
          var _a2;
          return (_a2 = options.extractRehydrationInfo) == null ? void 0 : _a2.call(options, action, {
            reducerPath: options.reducerPath ?? "api"
          });
        });
        const optionsWithDefaults = {
          reducerPath: "api",
          keepUnusedDataFor: 60,
          refetchOnMountOrArgChange: false,
          refetchOnFocus: false,
          refetchOnReconnect: false,
          invalidationBehavior: "delayed",
          ...options,
          extractRehydrationInfo,
          serializeQueryArgs(queryArgsApi) {
            let finalSerializeQueryArgs = defaultSerializeQueryArgs$1;
            if ("serializeQueryArgs" in queryArgsApi.endpointDefinition) {
              const endpointSQA = queryArgsApi.endpointDefinition.serializeQueryArgs;
              finalSerializeQueryArgs = (queryArgsApi2) => {
                const initialResult = endpointSQA(queryArgsApi2);
                if (typeof initialResult === "string") {
                  return initialResult;
                } else {
                  return defaultSerializeQueryArgs$1({
                    ...queryArgsApi2,
                    queryArgs: initialResult
                  });
                }
              };
            } else if (options.serializeQueryArgs) {
              finalSerializeQueryArgs = options.serializeQueryArgs;
            }
            return finalSerializeQueryArgs(queryArgsApi);
          },
          tagTypes: [...options.tagTypes || []]
        };
        const context = {
          endpointDefinitions: {},
          batch(fn) {
            fn();
          },
          apiUid: nanoid(),
          extractRehydrationInfo,
          hasRehydrationInfo: weakMapMemoize((action) => extractRehydrationInfo(action) != null)
        };
        const api = {
          injectEndpoints,
          enhanceEndpoints({
            addTagTypes,
            endpoints
          }) {
            if (addTagTypes) {
              for (const eT of addTagTypes) {
                if (!optionsWithDefaults.tagTypes.includes(eT)) {
                  optionsWithDefaults.tagTypes.push(eT);
                }
              }
            }
            if (endpoints) {
              for (const [endpointName, partialDefinition] of Object.entries(endpoints)) {
                if (typeof partialDefinition === "function") {
                  partialDefinition(context.endpointDefinitions[endpointName]);
                } else {
                  Object.assign(context.endpointDefinitions[endpointName] || {}, partialDefinition);
                }
              }
            }
            return api;
          }
        };
        const initializedModules = modules.map((m2) => m2.init(api, optionsWithDefaults, context));
        function injectEndpoints(inject) {
          const evaluatedEndpoints = inject.endpoints({
            query: (x2) => ({
              ...x2,
              type: "query"
              /* query */
            }),
            mutation: (x2) => ({
              ...x2,
              type: "mutation"
              /* mutation */
            })
          });
          for (const [endpointName, definition] of Object.entries(evaluatedEndpoints)) {
            if (inject.overrideExisting !== true && endpointName in context.endpointDefinitions) {
              if (inject.overrideExisting === "throw") {
                throw new Error(formatProdErrorMessage(39));
              } else if (typeof process !== "undefined" && false) {
                console.error(`called \`injectEndpoints\` to override already-existing endpointName ${endpointName} without specifying \`overrideExisting: true\``);
              }
              continue;
            }
            context.endpointDefinitions[endpointName] = definition;
            for (const m2 of initializedModules) {
              m2.injectEndpoint(endpointName, definition);
            }
          }
          return api;
        }
        return api.injectEndpoints({
          endpoints: options.endpoints
        });
      };
    }
    function safeAssign$1(target, ...args) {
      return Object.assign(target, ...args);
    }
    var buildBatchedActionsHandler = ({
      api,
      queryThunk,
      internalState
    }) => {
      const subscriptionsPrefix = `${api.reducerPath}/subscriptions`;
      let previousSubscriptions = null;
      let updateSyncTimer = null;
      const {
        updateSubscriptionOptions,
        unsubscribeQueryResult
      } = api.internalActions;
      const actuallyMutateSubscriptions = (mutableState, action) => {
        var _a2, _b2, _c2;
        if (updateSubscriptionOptions.match(action)) {
          const {
            queryCacheKey,
            requestId,
            options
          } = action.payload;
          if ((_a2 = mutableState == null ? void 0 : mutableState[queryCacheKey]) == null ? void 0 : _a2[requestId]) {
            mutableState[queryCacheKey][requestId] = options;
          }
          return true;
        }
        if (unsubscribeQueryResult.match(action)) {
          const {
            queryCacheKey,
            requestId
          } = action.payload;
          if (mutableState[queryCacheKey]) {
            delete mutableState[queryCacheKey][requestId];
          }
          return true;
        }
        if (api.internalActions.removeQueryResult.match(action)) {
          delete mutableState[action.payload.queryCacheKey];
          return true;
        }
        if (queryThunk.pending.match(action)) {
          const {
            meta: {
              arg,
              requestId
            }
          } = action;
          const substate = mutableState[_b2 = arg.queryCacheKey] ?? (mutableState[_b2] = {});
          substate[`${requestId}_running`] = {};
          if (arg.subscribe) {
            substate[requestId] = arg.subscriptionOptions ?? substate[requestId] ?? {};
          }
          return true;
        }
        let mutated = false;
        if (queryThunk.fulfilled.match(action) || queryThunk.rejected.match(action)) {
          const state = mutableState[action.meta.arg.queryCacheKey] || {};
          const key = `${action.meta.requestId}_running`;
          mutated || (mutated = !!state[key]);
          delete state[key];
        }
        if (queryThunk.rejected.match(action)) {
          const {
            meta: {
              condition,
              arg,
              requestId
            }
          } = action;
          if (condition && arg.subscribe) {
            const substate = mutableState[_c2 = arg.queryCacheKey] ?? (mutableState[_c2] = {});
            substate[requestId] = arg.subscriptionOptions ?? substate[requestId] ?? {};
            mutated = true;
          }
        }
        return mutated;
      };
      const getSubscriptions = () => internalState.currentSubscriptions;
      const getSubscriptionCount = (queryCacheKey) => {
        const subscriptions = getSubscriptions();
        const subscriptionsForQueryArg = subscriptions[queryCacheKey] ?? {};
        return countObjectKeys(subscriptionsForQueryArg);
      };
      const isRequestSubscribed = (queryCacheKey, requestId) => {
        var _a2;
        const subscriptions = getSubscriptions();
        return !!((_a2 = subscriptions == null ? void 0 : subscriptions[queryCacheKey]) == null ? void 0 : _a2[requestId]);
      };
      const subscriptionSelectors = {
        getSubscriptions,
        getSubscriptionCount,
        isRequestSubscribed
      };
      return (action, mwApi) => {
        if (!previousSubscriptions) {
          previousSubscriptions = JSON.parse(JSON.stringify(internalState.currentSubscriptions));
        }
        if (api.util.resetApiState.match(action)) {
          previousSubscriptions = internalState.currentSubscriptions = {};
          updateSyncTimer = null;
          return [true, false];
        }
        if (api.internalActions.internal_getRTKQSubscriptions.match(action)) {
          return [false, subscriptionSelectors];
        }
        const didMutate = actuallyMutateSubscriptions(internalState.currentSubscriptions, action);
        let actionShouldContinue = true;
        if (didMutate) {
          if (!updateSyncTimer) {
            updateSyncTimer = setTimeout(() => {
              const newSubscriptions = JSON.parse(JSON.stringify(internalState.currentSubscriptions));
              const [, patches] = produceWithPatches(previousSubscriptions, () => newSubscriptions);
              mwApi.next(api.internalActions.subscriptionsUpdated(patches));
              previousSubscriptions = newSubscriptions;
              updateSyncTimer = null;
            }, 500);
          }
          const isSubscriptionSliceAction = typeof action.type == "string" && !!action.type.startsWith(subscriptionsPrefix);
          const isAdditionalSubscriptionAction = queryThunk.rejected.match(action) && action.meta.condition && !!action.meta.arg.subscribe;
          actionShouldContinue = !isSubscriptionSliceAction && !isAdditionalSubscriptionAction;
        }
        return [actionShouldContinue, false];
      };
    };
    function isObjectEmpty(obj) {
      for (const k2 in obj) {
        return false;
      }
      return true;
    }
    var THIRTY_TWO_BIT_MAX_TIMER_SECONDS = 2147483647 / 1e3 - 1;
    var buildCacheCollectionHandler = ({
      reducerPath,
      api,
      queryThunk,
      context,
      internalState
    }) => {
      const {
        removeQueryResult,
        unsubscribeQueryResult,
        cacheEntriesUpserted
      } = api.internalActions;
      const canTriggerUnsubscribe = isAnyOf(unsubscribeQueryResult.match, queryThunk.fulfilled, queryThunk.rejected, cacheEntriesUpserted.match);
      function anySubscriptionsRemainingForKey(queryCacheKey) {
        const subscriptions = internalState.currentSubscriptions[queryCacheKey];
        return !!subscriptions && !isObjectEmpty(subscriptions);
      }
      const currentRemovalTimeouts = {};
      const handler = (action, mwApi, internalState2) => {
        var _a2;
        if (canTriggerUnsubscribe(action)) {
          const state = mwApi.getState()[reducerPath];
          let queryCacheKeys;
          if (cacheEntriesUpserted.match(action)) {
            queryCacheKeys = action.payload.map((entry) => entry.queryDescription.queryCacheKey);
          } else {
            const {
              queryCacheKey
            } = unsubscribeQueryResult.match(action) ? action.payload : action.meta.arg;
            queryCacheKeys = [queryCacheKey];
          }
          for (const queryCacheKey of queryCacheKeys) {
            handleUnsubscribe(queryCacheKey, (_a2 = state.queries[queryCacheKey]) == null ? void 0 : _a2.endpointName, mwApi, state.config);
          }
        }
        if (api.util.resetApiState.match(action)) {
          for (const [key, timeout] of Object.entries(currentRemovalTimeouts)) {
            if (timeout)
              clearTimeout(timeout);
            delete currentRemovalTimeouts[key];
          }
        }
        if (context.hasRehydrationInfo(action)) {
          const state = mwApi.getState()[reducerPath];
          const {
            queries
          } = context.extractRehydrationInfo(action);
          for (const [queryCacheKey, queryState] of Object.entries(queries)) {
            handleUnsubscribe(queryCacheKey, queryState == null ? void 0 : queryState.endpointName, mwApi, state.config);
          }
        }
      };
      function handleUnsubscribe(queryCacheKey, endpointName, api2, config2) {
        const endpointDefinition = context.endpointDefinitions[endpointName];
        const keepUnusedDataFor = (endpointDefinition == null ? void 0 : endpointDefinition.keepUnusedDataFor) ?? config2.keepUnusedDataFor;
        if (keepUnusedDataFor === Infinity) {
          return;
        }
        const finalKeepUnusedDataFor = Math.max(0, Math.min(keepUnusedDataFor, THIRTY_TWO_BIT_MAX_TIMER_SECONDS));
        if (!anySubscriptionsRemainingForKey(queryCacheKey)) {
          const currentTimeout = currentRemovalTimeouts[queryCacheKey];
          if (currentTimeout) {
            clearTimeout(currentTimeout);
          }
          currentRemovalTimeouts[queryCacheKey] = setTimeout(() => {
            if (!anySubscriptionsRemainingForKey(queryCacheKey)) {
              api2.dispatch(removeQueryResult({
                queryCacheKey
              }));
            }
            delete currentRemovalTimeouts[queryCacheKey];
          }, finalKeepUnusedDataFor * 1e3);
        }
      }
      return handler;
    };
    var neverResolvedError = new Error("Promise never resolved before cacheEntryRemoved.");
    var buildCacheLifecycleHandler = ({
      api,
      reducerPath,
      context,
      queryThunk,
      mutationThunk,
      internalState
    }) => {
      const isQueryThunk = isAsyncThunkAction(queryThunk);
      const isMutationThunk = isAsyncThunkAction(mutationThunk);
      const isFulfilledThunk = isFulfilled(queryThunk, mutationThunk);
      const lifecycleMap = {};
      function resolveLifecycleEntry(cacheKey, data, meta) {
        const lifecycle = lifecycleMap[cacheKey];
        if (lifecycle == null ? void 0 : lifecycle.valueResolved) {
          lifecycle.valueResolved({
            data,
            meta
          });
          delete lifecycle.valueResolved;
        }
      }
      function removeLifecycleEntry(cacheKey) {
        const lifecycle = lifecycleMap[cacheKey];
        if (lifecycle) {
          delete lifecycleMap[cacheKey];
          lifecycle.cacheEntryRemoved();
        }
      }
      const handler = (action, mwApi, stateBefore) => {
        const cacheKey = getCacheKey(action);
        function checkForNewCacheKey(endpointName, cacheKey2, requestId, originalArgs) {
          const oldState = stateBefore[reducerPath].queries[cacheKey2];
          const state = mwApi.getState()[reducerPath].queries[cacheKey2];
          if (!oldState && state) {
            handleNewKey(endpointName, originalArgs, cacheKey2, mwApi, requestId);
          }
        }
        if (queryThunk.pending.match(action)) {
          checkForNewCacheKey(action.meta.arg.endpointName, cacheKey, action.meta.requestId, action.meta.arg.originalArgs);
        } else if (api.internalActions.cacheEntriesUpserted.match(action)) {
          for (const {
            queryDescription,
            value: value2
          } of action.payload) {
            const {
              endpointName,
              originalArgs,
              queryCacheKey
            } = queryDescription;
            checkForNewCacheKey(endpointName, queryCacheKey, action.meta.requestId, originalArgs);
            resolveLifecycleEntry(queryCacheKey, value2, {});
          }
        } else if (mutationThunk.pending.match(action)) {
          const state = mwApi.getState()[reducerPath].mutations[cacheKey];
          if (state) {
            handleNewKey(action.meta.arg.endpointName, action.meta.arg.originalArgs, cacheKey, mwApi, action.meta.requestId);
          }
        } else if (isFulfilledThunk(action)) {
          resolveLifecycleEntry(cacheKey, action.payload, action.meta.baseQueryMeta);
        } else if (api.internalActions.removeQueryResult.match(action) || api.internalActions.removeMutationResult.match(action)) {
          removeLifecycleEntry(cacheKey);
        } else if (api.util.resetApiState.match(action)) {
          for (const cacheKey2 of Object.keys(lifecycleMap)) {
            removeLifecycleEntry(cacheKey2);
          }
        }
      };
      function getCacheKey(action) {
        if (isQueryThunk(action))
          return action.meta.arg.queryCacheKey;
        if (isMutationThunk(action)) {
          return action.meta.arg.fixedCacheKey ?? action.meta.requestId;
        }
        if (api.internalActions.removeQueryResult.match(action))
          return action.payload.queryCacheKey;
        if (api.internalActions.removeMutationResult.match(action))
          return getMutationCacheKey(action.payload);
        return "";
      }
      function handleNewKey(endpointName, originalArgs, queryCacheKey, mwApi, requestId) {
        const endpointDefinition = context.endpointDefinitions[endpointName];
        const onCacheEntryAdded = endpointDefinition == null ? void 0 : endpointDefinition.onCacheEntryAdded;
        if (!onCacheEntryAdded)
          return;
        const lifecycle = {};
        const cacheEntryRemoved = new Promise((resolve) => {
          lifecycle.cacheEntryRemoved = resolve;
        });
        const cacheDataLoaded = Promise.race([new Promise((resolve) => {
          lifecycle.valueResolved = resolve;
        }), cacheEntryRemoved.then(() => {
          throw neverResolvedError;
        })]);
        cacheDataLoaded.catch(() => {
        });
        lifecycleMap[queryCacheKey] = lifecycle;
        const selector = api.endpoints[endpointName].select(endpointDefinition.type === "query" ? originalArgs : queryCacheKey);
        const extra = mwApi.dispatch((_2, __, extra2) => extra2);
        const lifecycleApi = {
          ...mwApi,
          getCacheEntry: () => selector(mwApi.getState()),
          requestId,
          extra,
          updateCachedData: endpointDefinition.type === "query" ? (updateRecipe) => mwApi.dispatch(api.util.updateQueryData(endpointName, originalArgs, updateRecipe)) : void 0,
          cacheDataLoaded,
          cacheEntryRemoved
        };
        const runningHandler = onCacheEntryAdded(originalArgs, lifecycleApi);
        Promise.resolve(runningHandler).catch((e3) => {
          if (e3 === neverResolvedError)
            return;
          throw e3;
        });
      }
      return handler;
    };
    var buildDevCheckHandler = ({
      api,
      context: {
        apiUid
      },
      reducerPath
    }) => {
      return (action, mwApi) => {
        if (api.util.resetApiState.match(action)) {
          mwApi.dispatch(api.internalActions.middlewareRegistered(apiUid));
        }
        if (typeof process !== "undefined" && false) {
          if (api.internalActions.middlewareRegistered.match(action) && action.payload === apiUid && ((_b2 = (_a2 = mwApi.getState()[reducerPath]) == null ? void 0 : _a2.config) == null ? void 0 : _b2.middlewareRegistered) === "conflict") {
            console.warn(`There is a mismatch between slice and middleware for the reducerPath "${reducerPath}".
You can only have one api per reducer path, this will lead to crashes in various situations!${reducerPath === "api" ? `
If you have multiple apis, you *have* to specify the reducerPath option when using createApi!` : ""}`);
          }
        }
      };
    };
    var buildInvalidationByTagsHandler = ({
      reducerPath,
      context,
      context: {
        endpointDefinitions
      },
      mutationThunk,
      queryThunk,
      api,
      assertTagType,
      refetchQuery,
      internalState
    }) => {
      const {
        removeQueryResult
      } = api.internalActions;
      const isThunkActionWithTags = isAnyOf(isFulfilled(mutationThunk), isRejectedWithValue(mutationThunk));
      const isQueryEnd = isAnyOf(isFulfilled(mutationThunk, queryThunk), isRejected(mutationThunk, queryThunk));
      let pendingTagInvalidations = [];
      const handler = (action, mwApi) => {
        if (isThunkActionWithTags(action)) {
          invalidateTags(calculateProvidedByThunk(action, "invalidatesTags", endpointDefinitions, assertTagType), mwApi);
        } else if (isQueryEnd(action)) {
          invalidateTags([], mwApi);
        } else if (api.util.invalidateTags.match(action)) {
          invalidateTags(calculateProvidedBy(action.payload, void 0, void 0, void 0, void 0, assertTagType), mwApi);
        }
      };
      function hasPendingRequests(state) {
        var _a2, _b2;
        for (const key in state.queries) {
          if (((_a2 = state.queries[key]) == null ? void 0 : _a2.status) === "pending")
            return true;
        }
        for (const key in state.mutations) {
          if (((_b2 = state.mutations[key]) == null ? void 0 : _b2.status) === "pending")
            return true;
        }
        return false;
      }
      function invalidateTags(newTags, mwApi) {
        const rootState = mwApi.getState();
        const state = rootState[reducerPath];
        pendingTagInvalidations.push(...newTags);
        if (state.config.invalidationBehavior === "delayed" && hasPendingRequests(state)) {
          return;
        }
        const tags = pendingTagInvalidations;
        pendingTagInvalidations = [];
        if (tags.length === 0)
          return;
        const toInvalidate = api.util.selectInvalidatedBy(rootState, tags);
        context.batch(() => {
          const valuesArray = Array.from(toInvalidate.values());
          for (const {
            queryCacheKey
          } of valuesArray) {
            const querySubState = state.queries[queryCacheKey];
            const subscriptionSubState = internalState.currentSubscriptions[queryCacheKey] ?? {};
            if (querySubState) {
              if (countObjectKeys(subscriptionSubState) === 0) {
                mwApi.dispatch(removeQueryResult({
                  queryCacheKey
                }));
              } else if (querySubState.status !== "uninitialized") {
                mwApi.dispatch(refetchQuery(querySubState));
              }
            }
          }
        });
      }
      return handler;
    };
    var buildPollingHandler = ({
      reducerPath,
      queryThunk,
      api,
      refetchQuery,
      internalState
    }) => {
      const currentPolls = {};
      const handler = (action, mwApi) => {
        if (api.internalActions.updateSubscriptionOptions.match(action) || api.internalActions.unsubscribeQueryResult.match(action)) {
          updatePollingInterval(action.payload, mwApi);
        }
        if (queryThunk.pending.match(action) || queryThunk.rejected.match(action) && action.meta.condition) {
          updatePollingInterval(action.meta.arg, mwApi);
        }
        if (queryThunk.fulfilled.match(action) || queryThunk.rejected.match(action) && !action.meta.condition) {
          startNextPoll(action.meta.arg, mwApi);
        }
        if (api.util.resetApiState.match(action)) {
          clearPolls();
        }
      };
      function startNextPoll({
        queryCacheKey
      }, api2) {
        const state = api2.getState()[reducerPath];
        const querySubState = state.queries[queryCacheKey];
        const subscriptions = internalState.currentSubscriptions[queryCacheKey];
        if (!querySubState || querySubState.status === "uninitialized")
          return;
        const {
          lowestPollingInterval,
          skipPollingIfUnfocused
        } = findLowestPollingInterval(subscriptions);
        if (!Number.isFinite(lowestPollingInterval))
          return;
        const currentPoll = currentPolls[queryCacheKey];
        if (currentPoll == null ? void 0 : currentPoll.timeout) {
          clearTimeout(currentPoll.timeout);
          currentPoll.timeout = void 0;
        }
        const nextPollTimestamp = Date.now() + lowestPollingInterval;
        currentPolls[queryCacheKey] = {
          nextPollTimestamp,
          pollingInterval: lowestPollingInterval,
          timeout: setTimeout(() => {
            if (state.config.focused || !skipPollingIfUnfocused) {
              api2.dispatch(refetchQuery(querySubState));
            }
            startNextPoll({
              queryCacheKey
            }, api2);
          }, lowestPollingInterval)
        };
      }
      function updatePollingInterval({
        queryCacheKey
      }, api2) {
        const state = api2.getState()[reducerPath];
        const querySubState = state.queries[queryCacheKey];
        const subscriptions = internalState.currentSubscriptions[queryCacheKey];
        if (!querySubState || querySubState.status === "uninitialized") {
          return;
        }
        const {
          lowestPollingInterval
        } = findLowestPollingInterval(subscriptions);
        if (!Number.isFinite(lowestPollingInterval)) {
          cleanupPollForKey(queryCacheKey);
          return;
        }
        const currentPoll = currentPolls[queryCacheKey];
        const nextPollTimestamp = Date.now() + lowestPollingInterval;
        if (!currentPoll || nextPollTimestamp < currentPoll.nextPollTimestamp) {
          startNextPoll({
            queryCacheKey
          }, api2);
        }
      }
      function cleanupPollForKey(key) {
        const existingPoll = currentPolls[key];
        if (existingPoll == null ? void 0 : existingPoll.timeout) {
          clearTimeout(existingPoll.timeout);
        }
        delete currentPolls[key];
      }
      function clearPolls() {
        for (const key of Object.keys(currentPolls)) {
          cleanupPollForKey(key);
        }
      }
      function findLowestPollingInterval(subscribers = {}) {
        let skipPollingIfUnfocused = false;
        let lowestPollingInterval = Number.POSITIVE_INFINITY;
        for (let key in subscribers) {
          if (!!subscribers[key].pollingInterval) {
            lowestPollingInterval = Math.min(subscribers[key].pollingInterval, lowestPollingInterval);
            skipPollingIfUnfocused = subscribers[key].skipPollingIfUnfocused || skipPollingIfUnfocused;
          }
        }
        return {
          lowestPollingInterval,
          skipPollingIfUnfocused
        };
      }
      return handler;
    };
    var buildQueryLifecycleHandler = ({
      api,
      context,
      queryThunk,
      mutationThunk
    }) => {
      const isPendingThunk = isPending(queryThunk, mutationThunk);
      const isRejectedThunk = isRejected(queryThunk, mutationThunk);
      const isFullfilledThunk = isFulfilled(queryThunk, mutationThunk);
      const lifecycleMap = {};
      const handler = (action, mwApi) => {
        var _a2, _b2;
        if (isPendingThunk(action)) {
          const {
            requestId,
            arg: {
              endpointName,
              originalArgs
            }
          } = action.meta;
          const endpointDefinition = context.endpointDefinitions[endpointName];
          const onQueryStarted = endpointDefinition == null ? void 0 : endpointDefinition.onQueryStarted;
          if (onQueryStarted) {
            const lifecycle = {};
            const queryFulfilled = new Promise((resolve, reject) => {
              lifecycle.resolve = resolve;
              lifecycle.reject = reject;
            });
            queryFulfilled.catch(() => {
            });
            lifecycleMap[requestId] = lifecycle;
            const selector = api.endpoints[endpointName].select(endpointDefinition.type === "query" ? originalArgs : requestId);
            const extra = mwApi.dispatch((_2, __, extra2) => extra2);
            const lifecycleApi = {
              ...mwApi,
              getCacheEntry: () => selector(mwApi.getState()),
              requestId,
              extra,
              updateCachedData: endpointDefinition.type === "query" ? (updateRecipe) => mwApi.dispatch(api.util.updateQueryData(endpointName, originalArgs, updateRecipe)) : void 0,
              queryFulfilled
            };
            onQueryStarted(originalArgs, lifecycleApi);
          }
        } else if (isFullfilledThunk(action)) {
          const {
            requestId,
            baseQueryMeta
          } = action.meta;
          (_a2 = lifecycleMap[requestId]) == null ? void 0 : _a2.resolve({
            data: action.payload,
            meta: baseQueryMeta
          });
          delete lifecycleMap[requestId];
        } else if (isRejectedThunk(action)) {
          const {
            requestId,
            rejectedWithValue,
            baseQueryMeta
          } = action.meta;
          (_b2 = lifecycleMap[requestId]) == null ? void 0 : _b2.reject({
            error: action.payload ?? action.error,
            isUnhandledError: !rejectedWithValue,
            meta: baseQueryMeta
          });
          delete lifecycleMap[requestId];
        }
      };
      return handler;
    };
    var buildWindowEventHandler = ({
      reducerPath,
      context,
      api,
      refetchQuery,
      internalState
    }) => {
      const {
        removeQueryResult
      } = api.internalActions;
      const handler = (action, mwApi) => {
        if (onFocus.match(action)) {
          refetchValidQueries(mwApi, "refetchOnFocus");
        }
        if (onOnline.match(action)) {
          refetchValidQueries(mwApi, "refetchOnReconnect");
        }
      };
      function refetchValidQueries(api2, type) {
        const state = api2.getState()[reducerPath];
        const queries = state.queries;
        const subscriptions = internalState.currentSubscriptions;
        context.batch(() => {
          for (const queryCacheKey of Object.keys(subscriptions)) {
            const querySubState = queries[queryCacheKey];
            const subscriptionSubState = subscriptions[queryCacheKey];
            if (!subscriptionSubState || !querySubState)
              continue;
            const shouldRefetch = Object.values(subscriptionSubState).some((sub) => sub[type] === true) || Object.values(subscriptionSubState).every((sub) => sub[type] === void 0) && state.config[type];
            if (shouldRefetch) {
              if (countObjectKeys(subscriptionSubState) === 0) {
                api2.dispatch(removeQueryResult({
                  queryCacheKey
                }));
              } else if (querySubState.status !== "uninitialized") {
                api2.dispatch(refetchQuery(querySubState));
              }
            }
          }
        });
      }
      return handler;
    };
    function buildMiddleware(input) {
      const {
        reducerPath,
        queryThunk,
        api,
        context
      } = input;
      const {
        apiUid
      } = context;
      const actions = {
        invalidateTags: createAction(`${reducerPath}/invalidateTags`)
      };
      const isThisApiSliceAction = (action) => action.type.startsWith(`${reducerPath}/`);
      const handlerBuilders = [buildDevCheckHandler, buildCacheCollectionHandler, buildInvalidationByTagsHandler, buildPollingHandler, buildCacheLifecycleHandler, buildQueryLifecycleHandler];
      const middleware = (mwApi) => {
        let initialized2 = false;
        const internalState = {
          currentSubscriptions: {}
        };
        const builderArgs = {
          ...input,
          internalState,
          refetchQuery,
          isThisApiSliceAction
        };
        const handlers = handlerBuilders.map((build) => build(builderArgs));
        const batchedActionsHandler = buildBatchedActionsHandler(builderArgs);
        const windowEventsHandler = buildWindowEventHandler(builderArgs);
        return (next) => {
          return (action) => {
            if (!isAction(action)) {
              return next(action);
            }
            if (!initialized2) {
              initialized2 = true;
              mwApi.dispatch(api.internalActions.middlewareRegistered(apiUid));
            }
            const mwApiWithNext = {
              ...mwApi,
              next
            };
            const stateBefore = mwApi.getState();
            const [actionShouldContinue, internalProbeResult] = batchedActionsHandler(action, mwApiWithNext, stateBefore);
            let res;
            if (actionShouldContinue) {
              res = next(action);
            } else {
              res = internalProbeResult;
            }
            if (!!mwApi.getState()[reducerPath]) {
              windowEventsHandler(action, mwApiWithNext, stateBefore);
              if (isThisApiSliceAction(action) || context.hasRehydrationInfo(action)) {
                for (const handler of handlers) {
                  handler(action, mwApiWithNext, stateBefore);
                }
              }
            }
            return res;
          };
        };
      };
      return {
        middleware,
        actions
      };
      function refetchQuery(querySubState) {
        return input.api.endpoints[querySubState.endpointName].initiate(querySubState.originalArgs, {
          subscribe: false,
          forceRefetch: true
        });
      }
    }
    var coreModuleName = /* @__PURE__ */ Symbol();
    var coreModule = ({
      createSelector: createSelector2 = createSelector
    } = {}) => ({
      name: coreModuleName,
      init(api, {
        baseQuery: baseQuery2,
        tagTypes,
        reducerPath,
        serializeQueryArgs,
        keepUnusedDataFor,
        refetchOnMountOrArgChange,
        refetchOnFocus,
        refetchOnReconnect,
        invalidationBehavior
      }, context) {
        enablePatches();
        const assertTagType = (tag) => {
          if (typeof process !== "undefined" && false) {
            if (!tagTypes.includes(tag.type)) {
              console.error(`Tag type '${tag.type}' was used, but not specified in \`tagTypes\`!`);
            }
          }
          return tag;
        };
        Object.assign(api, {
          reducerPath,
          endpoints: {},
          internalActions: {
            onOnline,
            onOffline,
            onFocus,
            onFocusLost
          },
          util: {}
        });
        const {
          queryThunk,
          mutationThunk,
          patchQueryData,
          updateQueryData,
          upsertQueryData,
          prefetch,
          buildMatchThunkActions
        } = buildThunks({
          baseQuery: baseQuery2,
          reducerPath,
          context,
          api,
          serializeQueryArgs,
          assertTagType
        });
        const {
          reducer: reducer2,
          actions: sliceActions
        } = buildSlice({
          context,
          queryThunk,
          mutationThunk,
          serializeQueryArgs,
          reducerPath,
          assertTagType,
          config: {
            refetchOnFocus,
            refetchOnReconnect,
            refetchOnMountOrArgChange,
            keepUnusedDataFor,
            reducerPath,
            invalidationBehavior
          }
        });
        safeAssign$1(api.util, {
          patchQueryData,
          updateQueryData,
          upsertQueryData,
          prefetch,
          resetApiState: sliceActions.resetApiState,
          upsertQueryEntries: sliceActions.cacheEntriesUpserted
        });
        safeAssign$1(api.internalActions, sliceActions);
        const {
          middleware,
          actions: middlewareActions
        } = buildMiddleware({
          reducerPath,
          context,
          queryThunk,
          mutationThunk,
          api,
          assertTagType
        });
        safeAssign$1(api.util, middlewareActions);
        safeAssign$1(api, {
          reducer: reducer2,
          middleware
        });
        const {
          buildQuerySelector,
          buildMutationSelector,
          selectInvalidatedBy,
          selectCachedArgsForQuery
        } = buildSelectors({
          serializeQueryArgs,
          reducerPath,
          createSelector: createSelector2
        });
        safeAssign$1(api.util, {
          selectInvalidatedBy,
          selectCachedArgsForQuery
        });
        const {
          buildInitiateQuery,
          buildInitiateMutation,
          getRunningMutationThunk,
          getRunningMutationsThunk,
          getRunningQueriesThunk,
          getRunningQueryThunk
        } = buildInitiate({
          queryThunk,
          mutationThunk,
          api,
          serializeQueryArgs,
          context
        });
        safeAssign$1(api.util, {
          getRunningMutationThunk,
          getRunningMutationsThunk,
          getRunningQueryThunk,
          getRunningQueriesThunk
        });
        return {
          name: coreModuleName,
          injectEndpoint(endpointName, definition) {
            var _a2;
            const anyApi = api;
            (_a2 = anyApi.endpoints)[endpointName] ?? (_a2[endpointName] = {});
            if (isQueryDefinition$1(definition)) {
              safeAssign$1(anyApi.endpoints[endpointName], {
                name: endpointName,
                select: buildQuerySelector(endpointName, definition),
                initiate: buildInitiateQuery(endpointName, definition)
              }, buildMatchThunkActions(queryThunk, endpointName));
            } else if (isMutationDefinition$1(definition)) {
              safeAssign$1(anyApi.endpoints[endpointName], {
                name: endpointName,
                select: buildMutationSelector(),
                initiate: buildInitiateMutation(endpointName)
              }, buildMatchThunkActions(mutationThunk, endpointName));
            }
          }
        };
      }
    });
    function capitalize(str) {
      return str.replace(str[0], str[0].toUpperCase());
    }
    function isQueryDefinition(e3) {
      return e3.type === "query";
    }
    function isMutationDefinition(e3) {
      return e3.type === "mutation";
    }
    function safeAssign(target, ...args) {
      return Object.assign(target, ...args);
    }
    var cache = WeakMap ? /* @__PURE__ */ new WeakMap() : void 0;
    var defaultSerializeQueryArgs = ({
      endpointName,
      queryArgs
    }) => {
      let serialized = "";
      const cached = cache == null ? void 0 : cache.get(queryArgs);
      if (typeof cached === "string") {
        serialized = cached;
      } else {
        const stringified = JSON.stringify(queryArgs, (key, value2) => {
          value2 = typeof value2 === "bigint" ? {
            $bigint: value2.toString()
          } : value2;
          value2 = isPlainObject$6(value2) ? Object.keys(value2).sort().reduce((acc, key2) => {
            acc[key2] = value2[key2];
            return acc;
          }, {}) : value2;
          return value2;
        });
        if (isPlainObject$6(queryArgs)) {
          cache == null ? void 0 : cache.set(queryArgs, stringified);
        }
        serialized = stringified;
      }
      return `${endpointName}(${serialized})`;
    };
    var UNINITIALIZED_VALUE = Symbol();
    function useStableQueryArgs(queryArgs, serialize, endpointDefinition, endpointName) {
      const incoming = reactExports.useMemo(() => ({
        queryArgs,
        serialized: typeof queryArgs == "object" ? serialize({
          queryArgs,
          endpointDefinition,
          endpointName
        }) : queryArgs
      }), [queryArgs, serialize, endpointDefinition, endpointName]);
      const cache2 = reactExports.useRef(incoming);
      reactExports.useEffect(() => {
        if (cache2.current.serialized !== incoming.serialized) {
          cache2.current = incoming;
        }
      }, [incoming]);
      return cache2.current.serialized === incoming.serialized ? cache2.current.queryArgs : queryArgs;
    }
    function useShallowStableValue(value2) {
      const cache2 = reactExports.useRef(value2);
      reactExports.useEffect(() => {
        if (!shallowEqual$1(cache2.current, value2)) {
          cache2.current = value2;
        }
      }, [value2]);
      return shallowEqual$1(cache2.current, value2) ? cache2.current : value2;
    }
    var canUseDOM = () => !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
    var isDOM = /* @__PURE__ */ canUseDOM();
    var isRunningInReactNative = () => typeof navigator !== "undefined" && navigator.product === "ReactNative";
    var isReactNative = /* @__PURE__ */ isRunningInReactNative();
    var getUseIsomorphicLayoutEffect = () => isDOM || isReactNative ? reactExports.useLayoutEffect : reactExports.useEffect;
    var useIsomorphicLayoutEffect = /* @__PURE__ */ getUseIsomorphicLayoutEffect();
    var noPendingQueryStateSelector = (selected) => {
      if (selected.isUninitialized) {
        return {
          ...selected,
          isUninitialized: false,
          isFetching: true,
          isLoading: selected.data !== void 0 ? false : true,
          status: QueryStatus.pending
        };
      }
      return selected;
    };
    function buildHooks({
      api,
      moduleOptions: {
        batch: batch2,
        hooks: {
          useDispatch: useDispatch2,
          useSelector: useSelector2,
          useStore: useStore2
        },
        unstable__sideEffectsInRender,
        createSelector: createSelector2
      },
      serializeQueryArgs,
      context
    }) {
      const usePossiblyImmediateEffect = unstable__sideEffectsInRender ? (cb2) => cb2() : reactExports.useEffect;
      return {
        buildQueryHooks,
        buildMutationHook,
        usePrefetch
      };
      function queryStatePreSelector(currentState, lastResult2, queryArgs) {
        if ((lastResult2 == null ? void 0 : lastResult2.endpointName) && currentState.isUninitialized) {
          const {
            endpointName
          } = lastResult2;
          const endpointDefinition = context.endpointDefinitions[endpointName];
          if (queryArgs !== skipToken && serializeQueryArgs({
            queryArgs: lastResult2.originalArgs,
            endpointDefinition,
            endpointName
          }) === serializeQueryArgs({
            queryArgs,
            endpointDefinition,
            endpointName
          }))
            lastResult2 = void 0;
        }
        let data = currentState.isSuccess ? currentState.data : lastResult2 == null ? void 0 : lastResult2.data;
        if (data === void 0)
          data = currentState.data;
        const hasData = data !== void 0;
        const isFetching = currentState.isLoading;
        const isLoading = (!lastResult2 || lastResult2.isLoading || lastResult2.isUninitialized) && !hasData && isFetching;
        const isSuccess = currentState.isSuccess || hasData && (isFetching && !(lastResult2 == null ? void 0 : lastResult2.isError) || currentState.isUninitialized);
        return {
          ...currentState,
          data,
          currentData: currentState.data,
          isFetching,
          isLoading,
          isSuccess
        };
      }
      function usePrefetch(endpointName, defaultOptions2) {
        const dispatch = useDispatch2();
        const stableDefaultOptions = useShallowStableValue(defaultOptions2);
        return reactExports.useCallback((arg, options) => dispatch(api.util.prefetch(endpointName, arg, {
          ...stableDefaultOptions,
          ...options
        })), [endpointName, dispatch, stableDefaultOptions]);
      }
      function buildQueryHooks(name) {
        const useQuerySubscription = (arg, {
          refetchOnReconnect,
          refetchOnFocus,
          refetchOnMountOrArgChange,
          skip = false,
          pollingInterval = 0,
          skipPollingIfUnfocused = false
        } = {}) => {
          const {
            initiate
          } = api.endpoints[name];
          const dispatch = useDispatch2();
          const subscriptionSelectorsRef = reactExports.useRef(void 0);
          if (!subscriptionSelectorsRef.current) {
            const returnedValue = dispatch(api.internalActions.internal_getRTKQSubscriptions());
            subscriptionSelectorsRef.current = returnedValue;
          }
          const stableArg = useStableQueryArgs(
            skip ? skipToken : arg,
            // Even if the user provided a per-endpoint `serializeQueryArgs` with
            // a consistent return value, _here_ we want to use the default behavior
            // so we can tell if _anything_ actually changed. Otherwise, we can end up
            // with a case where the query args did change but the serialization doesn't,
            // and then we never try to initiate a refetch.
            defaultSerializeQueryArgs,
            context.endpointDefinitions[name],
            name
          );
          const stableSubscriptionOptions = useShallowStableValue({
            refetchOnReconnect,
            refetchOnFocus,
            pollingInterval,
            skipPollingIfUnfocused
          });
          const lastRenderHadSubscription = reactExports.useRef(false);
          const promiseRef = reactExports.useRef(void 0);
          let {
            queryCacheKey,
            requestId
          } = promiseRef.current || {};
          let currentRenderHasSubscription = false;
          if (queryCacheKey && requestId) {
            currentRenderHasSubscription = subscriptionSelectorsRef.current.isRequestSubscribed(queryCacheKey, requestId);
          }
          const subscriptionRemoved = !currentRenderHasSubscription && lastRenderHadSubscription.current;
          usePossiblyImmediateEffect(() => {
            lastRenderHadSubscription.current = currentRenderHasSubscription;
          });
          usePossiblyImmediateEffect(() => {
            if (subscriptionRemoved) {
              promiseRef.current = void 0;
            }
          }, [subscriptionRemoved]);
          usePossiblyImmediateEffect(() => {
            var _a2;
            const lastPromise = promiseRef.current;
            if (typeof process !== "undefined" && false) {
              console.log(subscriptionRemoved);
            }
            if (stableArg === skipToken) {
              lastPromise == null ? void 0 : lastPromise.unsubscribe();
              promiseRef.current = void 0;
              return;
            }
            const lastSubscriptionOptions = (_a2 = promiseRef.current) == null ? void 0 : _a2.subscriptionOptions;
            if (!lastPromise || lastPromise.arg !== stableArg) {
              lastPromise == null ? void 0 : lastPromise.unsubscribe();
              const promise = dispatch(initiate(stableArg, {
                subscriptionOptions: stableSubscriptionOptions,
                forceRefetch: refetchOnMountOrArgChange
              }));
              promiseRef.current = promise;
            } else if (stableSubscriptionOptions !== lastSubscriptionOptions) {
              lastPromise.updateSubscriptionOptions(stableSubscriptionOptions);
            }
          }, [dispatch, initiate, refetchOnMountOrArgChange, stableArg, stableSubscriptionOptions, subscriptionRemoved]);
          reactExports.useEffect(() => {
            return () => {
              var _a2;
              (_a2 = promiseRef.current) == null ? void 0 : _a2.unsubscribe();
              promiseRef.current = void 0;
            };
          }, []);
          return reactExports.useMemo(() => ({
            /**
             * A method to manually refetch data for the query
             */
            refetch: () => {
              var _a2;
              if (!promiseRef.current)
                throw new Error(formatProdErrorMessage(38));
              return (_a2 = promiseRef.current) == null ? void 0 : _a2.refetch();
            }
          }), []);
        };
        const useLazyQuerySubscription = ({
          refetchOnReconnect,
          refetchOnFocus,
          pollingInterval = 0,
          skipPollingIfUnfocused = false
        } = {}) => {
          const {
            initiate
          } = api.endpoints[name];
          const dispatch = useDispatch2();
          const [arg, setArg] = reactExports.useState(UNINITIALIZED_VALUE);
          const promiseRef = reactExports.useRef(void 0);
          const stableSubscriptionOptions = useShallowStableValue({
            refetchOnReconnect,
            refetchOnFocus,
            pollingInterval,
            skipPollingIfUnfocused
          });
          usePossiblyImmediateEffect(() => {
            var _a2, _b2;
            const lastSubscriptionOptions = (_a2 = promiseRef.current) == null ? void 0 : _a2.subscriptionOptions;
            if (stableSubscriptionOptions !== lastSubscriptionOptions) {
              (_b2 = promiseRef.current) == null ? void 0 : _b2.updateSubscriptionOptions(stableSubscriptionOptions);
            }
          }, [stableSubscriptionOptions]);
          const subscriptionOptionsRef = reactExports.useRef(stableSubscriptionOptions);
          usePossiblyImmediateEffect(() => {
            subscriptionOptionsRef.current = stableSubscriptionOptions;
          }, [stableSubscriptionOptions]);
          const trigger = reactExports.useCallback(function(arg2, preferCacheValue = false) {
            let promise;
            batch2(() => {
              var _a2;
              (_a2 = promiseRef.current) == null ? void 0 : _a2.unsubscribe();
              promiseRef.current = promise = dispatch(initiate(arg2, {
                subscriptionOptions: subscriptionOptionsRef.current,
                forceRefetch: !preferCacheValue
              }));
              setArg(arg2);
            });
            return promise;
          }, [dispatch, initiate]);
          const reset = reactExports.useCallback(() => {
            var _a2, _b2;
            if ((_a2 = promiseRef.current) == null ? void 0 : _a2.queryCacheKey) {
              dispatch(api.internalActions.removeQueryResult({
                queryCacheKey: (_b2 = promiseRef.current) == null ? void 0 : _b2.queryCacheKey
              }));
            }
          }, [dispatch]);
          reactExports.useEffect(() => {
            return () => {
              var _a2;
              (_a2 = promiseRef == null ? void 0 : promiseRef.current) == null ? void 0 : _a2.unsubscribe();
            };
          }, []);
          reactExports.useEffect(() => {
            if (arg !== UNINITIALIZED_VALUE && !promiseRef.current) {
              trigger(arg, true);
            }
          }, [arg, trigger]);
          return reactExports.useMemo(() => [trigger, arg, {
            reset
          }], [trigger, arg, reset]);
        };
        const useQueryState = (arg, {
          skip = false,
          selectFromResult
        } = {}) => {
          const {
            select
          } = api.endpoints[name];
          const stableArg = useStableQueryArgs(skip ? skipToken : arg, serializeQueryArgs, context.endpointDefinitions[name], name);
          const lastValue = reactExports.useRef(void 0);
          const selectDefaultResult = reactExports.useMemo(() => createSelector2([select(stableArg), (_2, lastResult2) => lastResult2, (_2) => stableArg], queryStatePreSelector, {
            memoizeOptions: {
              resultEqualityCheck: shallowEqual$1
            }
          }), [select, stableArg]);
          const querySelector = reactExports.useMemo(() => selectFromResult ? createSelector2([selectDefaultResult], selectFromResult, {
            devModeChecks: {
              identityFunctionCheck: "never"
            }
          }) : selectDefaultResult, [selectDefaultResult, selectFromResult]);
          const currentState = useSelector2((state) => querySelector(state, lastValue.current), shallowEqual$1);
          const store2 = useStore2();
          const newLastValue = selectDefaultResult(store2.getState(), lastValue.current);
          useIsomorphicLayoutEffect(() => {
            lastValue.current = newLastValue;
          }, [newLastValue]);
          return currentState;
        };
        return {
          useQueryState,
          useQuerySubscription,
          useLazyQuerySubscription,
          useLazyQuery(options) {
            const [trigger, arg, {
              reset
            }] = useLazyQuerySubscription(options);
            const queryStateResults = useQueryState(arg, {
              ...options,
              skip: arg === UNINITIALIZED_VALUE
            });
            const info = reactExports.useMemo(() => ({
              lastArg: arg
            }), [arg]);
            return reactExports.useMemo(() => [trigger, {
              ...queryStateResults,
              reset
            }, info], [trigger, queryStateResults, reset, info]);
          },
          useQuery(arg, options) {
            const querySubscriptionResults = useQuerySubscription(arg, options);
            const queryStateResults = useQueryState(arg, {
              selectFromResult: arg === skipToken || (options == null ? void 0 : options.skip) ? void 0 : noPendingQueryStateSelector,
              ...options
            });
            const {
              data,
              status,
              isLoading,
              isSuccess,
              isError,
              error: error2
            } = queryStateResults;
            reactExports.useDebugValue({
              data,
              status,
              isLoading,
              isSuccess,
              isError,
              error: error2
            });
            return reactExports.useMemo(() => ({
              ...queryStateResults,
              ...querySubscriptionResults
            }), [queryStateResults, querySubscriptionResults]);
          }
        };
      }
      function buildMutationHook(name) {
        return ({
          selectFromResult,
          fixedCacheKey
        } = {}) => {
          const {
            select,
            initiate
          } = api.endpoints[name];
          const dispatch = useDispatch2();
          const [promise, setPromise] = reactExports.useState();
          reactExports.useEffect(() => () => {
            if (!(promise == null ? void 0 : promise.arg.fixedCacheKey)) {
              promise == null ? void 0 : promise.reset();
            }
          }, [promise]);
          const triggerMutation = reactExports.useCallback(function(arg) {
            const promise2 = dispatch(initiate(arg, {
              fixedCacheKey
            }));
            setPromise(promise2);
            return promise2;
          }, [dispatch, initiate, fixedCacheKey]);
          const {
            requestId
          } = promise || {};
          const selectDefaultResult = reactExports.useMemo(() => select({
            fixedCacheKey,
            requestId: promise == null ? void 0 : promise.requestId
          }), [fixedCacheKey, promise, select]);
          const mutationSelector = reactExports.useMemo(() => selectFromResult ? createSelector2([selectDefaultResult], selectFromResult) : selectDefaultResult, [selectFromResult, selectDefaultResult]);
          const currentState = useSelector2(mutationSelector, shallowEqual$1);
          const originalArgs = fixedCacheKey == null ? promise == null ? void 0 : promise.arg.originalArgs : void 0;
          const reset = reactExports.useCallback(() => {
            batch2(() => {
              if (promise) {
                setPromise(void 0);
              }
              if (fixedCacheKey) {
                dispatch(api.internalActions.removeMutationResult({
                  requestId,
                  fixedCacheKey
                }));
              }
            });
          }, [dispatch, fixedCacheKey, promise, requestId]);
          const {
            endpointName,
            data,
            status,
            isLoading,
            isSuccess,
            isError,
            error: error2
          } = currentState;
          reactExports.useDebugValue({
            endpointName,
            data,
            status,
            isLoading,
            isSuccess,
            isError,
            error: error2
          });
          const finalState = reactExports.useMemo(() => ({
            ...currentState,
            originalArgs,
            reset
          }), [currentState, originalArgs, reset]);
          return reactExports.useMemo(() => [triggerMutation, finalState], [triggerMutation, finalState]);
        };
      }
    }
    var reactHooksModuleName = /* @__PURE__ */ Symbol();
    var reactHooksModule = ({
      batch: batch$1 = batch,
      hooks: hooks2 = {
        useDispatch,
        useSelector,
        useStore
      },
      createSelector: createSelector2 = createSelector,
      unstable__sideEffectsInRender = false,
      ...rest
    } = {}) => {
      return {
        name: reactHooksModuleName,
        init(api, {
          serializeQueryArgs
        }, context) {
          const anyApi = api;
          const {
            buildQueryHooks,
            buildMutationHook,
            usePrefetch
          } = buildHooks({
            api,
            moduleOptions: {
              batch: batch$1,
              hooks: hooks2,
              unstable__sideEffectsInRender,
              createSelector: createSelector2
            },
            serializeQueryArgs,
            context
          });
          safeAssign(anyApi, {
            usePrefetch
          });
          safeAssign(context, {
            batch: batch$1
          });
          return {
            injectEndpoint(endpointName, definition) {
              if (isQueryDefinition(definition)) {
                const {
                  useQuery: useQuery2,
                  useLazyQuery,
                  useLazyQuerySubscription,
                  useQueryState,
                  useQuerySubscription
                } = buildQueryHooks(endpointName);
                safeAssign(anyApi.endpoints[endpointName], {
                  useQuery: useQuery2,
                  useLazyQuery,
                  useLazyQuerySubscription,
                  useQueryState,
                  useQuerySubscription
                });
                api[`use${capitalize(endpointName)}Query`] = useQuery2;
                api[`useLazy${capitalize(endpointName)}Query`] = useLazyQuery;
              } else if (isMutationDefinition(definition)) {
                const useMutation2 = buildMutationHook(endpointName);
                safeAssign(anyApi.endpoints[endpointName], {
                  useMutation: useMutation2
                });
                api[`use${capitalize(endpointName)}Mutation`] = useMutation2;
              }
            }
          };
        }
      };
    };
    var createApi = /* @__PURE__ */ buildCreateApi(coreModule(), reactHooksModule());
    const API_URI = "http://localhost:8800/api";
    const baseQuery = fetchBaseQuery({ baseUrl: API_URI });
    const apiSlice = createApi({
      baseQuery,
      tagTypes: [],
      endpoints: (builder) => ({})
    });
    const store = configureStore({
      reducer: {
        [apiSlice.reducerPath]: apiSlice.reducer,
        auth: authReducer
      },
      middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(apiSlice.middleware),
      devTools: true
    });
    const queryClient = new QueryClient();
    client.createRoot(document.getElementById("root")).render(
      /* @__PURE__ */ jsxRuntimeExports.jsx(React$1.StrictMode, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(Provider_default, { store, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(BrowserRouter, { children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(QueryClientProvider, { client: queryClient, children: /* @__PURE__ */ jsxRuntimeExports.jsx(App, {}) }),
        ","
      ] }) }) })
    );
  }
});
export default require_index_001();
